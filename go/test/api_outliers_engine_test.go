/*
IBM Guardium Data Security Center

Testing OutliersEngineAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package guardiumsdkgo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_guardiumsdkgo_OutliersEngineAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OutliersEngineAPIService OutliersEngineGetSourceStatistics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OutliersEngineAPI.OutliersEngineGetSourceStatistics(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OutliersEngineAPIService OutliersEngineGetStatistics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OutliersEngineAPI.OutliersEngineGetStatistics(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OutliersEngineAPIService OutliersEngineGetWorkingHoursPeriods", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OutliersEngineAPI.OutliersEngineGetWorkingHoursPeriods(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OutliersEngineAPIService OutliersEngineRunSimulator", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OutliersEngineAPI.OutliersEngineRunSimulator(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OutliersEngineAPIService OutliersEngineUpdateWorkingHoursPeriods", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OutliersEngineAPI.OutliersEngineUpdateWorkingHoursPeriods(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OutliersEngineAPIService OutliersEngineUploadAndAnalyzePeriod", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OutliersEngineAPI.OutliersEngineUploadAndAnalyzePeriod(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OutliersEngineAPIService OutliersEngineUserClustering", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OutliersEngineAPI.OutliersEngineUserClustering(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
