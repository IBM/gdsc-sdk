/*
IBM Guardium Data Security Center

Testing GuardiumConnectorAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package guardiumsdkgo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_guardiumsdkgo_GuardiumConnectorAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test GuardiumConnectorAPIService GuardiumConnectorAddCM", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.GuardiumConnectorAPI.GuardiumConnectorAddCM(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuardiumConnectorAPIService GuardiumConnectorAddDatamarts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var centralManagerId string

		resp, httpRes, err := apiClient.GuardiumConnectorAPI.GuardiumConnectorAddDatamarts(context.Background(), centralManagerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuardiumConnectorAPIService GuardiumConnectorAddDmExclusion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.GuardiumConnectorAPI.GuardiumConnectorAddDmExclusion(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuardiumConnectorAPIService GuardiumConnectorAddTask", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var centralManagerId string

		resp, httpRes, err := apiClient.GuardiumConnectorAPI.GuardiumConnectorAddTask(context.Background(), centralManagerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuardiumConnectorAPIService GuardiumConnectorBlockUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.GuardiumConnectorAPI.GuardiumConnectorBlockUser(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuardiumConnectorAPIService GuardiumConnectorConfigureAggregatorExport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var centralManagerId string

		resp, httpRes, err := apiClient.GuardiumConnectorAPI.GuardiumConnectorConfigureAggregatorExport(context.Background(), centralManagerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuardiumConnectorAPIService GuardiumConnectorConfigureCollectorExport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var centralManagerId string

		resp, httpRes, err := apiClient.GuardiumConnectorAPI.GuardiumConnectorConfigureCollectorExport(context.Background(), centralManagerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuardiumConnectorAPIService GuardiumConnectorConfigureStreaming", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var centralManagerId string

		resp, httpRes, err := apiClient.GuardiumConnectorAPI.GuardiumConnectorConfigureStreaming(context.Background(), centralManagerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuardiumConnectorAPIService GuardiumConnectorDatamartVersionCheck", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var centralManagerId string

		resp, httpRes, err := apiClient.GuardiumConnectorAPI.GuardiumConnectorDatamartVersionCheck(context.Background(), centralManagerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuardiumConnectorAPIService GuardiumConnectorDeleteCM", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var centralManagerId string

		resp, httpRes, err := apiClient.GuardiumConnectorAPI.GuardiumConnectorDeleteCM(context.Background(), centralManagerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuardiumConnectorAPIService GuardiumConnectorDeleteDmExclusion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.GuardiumConnectorAPI.GuardiumConnectorDeleteDmExclusion(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuardiumConnectorAPIService GuardiumConnectorDeleteTask", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var centralManagerId string
		var taskId string

		resp, httpRes, err := apiClient.GuardiumConnectorAPI.GuardiumConnectorDeleteTask(context.Background(), centralManagerId, taskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuardiumConnectorAPIService GuardiumConnectorDeleteTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var centralManagerId string

		resp, httpRes, err := apiClient.GuardiumConnectorAPI.GuardiumConnectorDeleteTasks(context.Background(), centralManagerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuardiumConnectorAPIService GuardiumConnectorGetAggregatorsConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var centralManagerId string

		resp, httpRes, err := apiClient.GuardiumConnectorAPI.GuardiumConnectorGetAggregatorsConfig(context.Background(), centralManagerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuardiumConnectorAPIService GuardiumConnectorGetCMs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.GuardiumConnectorAPI.GuardiumConnectorGetCMs(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuardiumConnectorAPIService GuardiumConnectorGetCMsConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.GuardiumConnectorAPI.GuardiumConnectorGetCMsConfig(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuardiumConnectorAPIService GuardiumConnectorGetCollectorsConfig", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var centralManagerId string

		resp, httpRes, err := apiClient.GuardiumConnectorAPI.GuardiumConnectorGetCollectorsConfig(context.Background(), centralManagerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuardiumConnectorAPIService GuardiumConnectorGetDatamarts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var centralManagerId string

		resp, httpRes, err := apiClient.GuardiumConnectorAPI.GuardiumConnectorGetDatamarts(context.Background(), centralManagerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuardiumConnectorAPIService GuardiumConnectorGetDmExclusion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.GuardiumConnectorAPI.GuardiumConnectorGetDmExclusion(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuardiumConnectorAPIService GuardiumConnectorGetGdpPolicyInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var centralManagerId string

		resp, httpRes, err := apiClient.GuardiumConnectorAPI.GuardiumConnectorGetGdpPolicyInfo(context.Background(), centralManagerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuardiumConnectorAPIService GuardiumConnectorGetGdpPolicySummaries", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var centralManagerId string

		resp, httpRes, err := apiClient.GuardiumConnectorAPI.GuardiumConnectorGetGdpPolicySummaries(context.Background(), centralManagerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuardiumConnectorAPIService GuardiumConnectorGetHealthInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var centralManagerId string

		resp, httpRes, err := apiClient.GuardiumConnectorAPI.GuardiumConnectorGetHealthInfo(context.Background(), centralManagerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuardiumConnectorAPIService GuardiumConnectorGetLatestDMExtractionProfile", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var centralManagerId string

		resp, httpRes, err := apiClient.GuardiumConnectorAPI.GuardiumConnectorGetLatestDMExtractionProfile(context.Background(), centralManagerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuardiumConnectorAPIService GuardiumConnectorGetStreamingStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var centralManagerId string

		resp, httpRes, err := apiClient.GuardiumConnectorAPI.GuardiumConnectorGetStreamingStatus(context.Background(), centralManagerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuardiumConnectorAPIService GuardiumConnectorGetSyncDMs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var centralManagerId string

		resp, httpRes, err := apiClient.GuardiumConnectorAPI.GuardiumConnectorGetSyncDMs(context.Background(), centralManagerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuardiumConnectorAPIService GuardiumConnectorGetTaskTypes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.GuardiumConnectorAPI.GuardiumConnectorGetTaskTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuardiumConnectorAPIService GuardiumConnectorGetTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var centralManagerId string

		resp, httpRes, err := apiClient.GuardiumConnectorAPI.GuardiumConnectorGetTasks(context.Background(), centralManagerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuardiumConnectorAPIService GuardiumConnectorRunGDPReport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var centralManagerId string

		resp, httpRes, err := apiClient.GuardiumConnectorAPI.GuardiumConnectorRunGDPReport(context.Background(), centralManagerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuardiumConnectorAPIService GuardiumConnectorSetupCM", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.GuardiumConnectorAPI.GuardiumConnectorSetupCM(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuardiumConnectorAPIService GuardiumConnectorSetupDatamarts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var centralManagerId string

		resp, httpRes, err := apiClient.GuardiumConnectorAPI.GuardiumConnectorSetupDatamarts(context.Background(), centralManagerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuardiumConnectorAPIService GuardiumConnectorTaskError", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var centralManagerId string

		resp, httpRes, err := apiClient.GuardiumConnectorAPI.GuardiumConnectorTaskError(context.Background(), centralManagerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuardiumConnectorAPIService GuardiumConnectorTestDatabaseConnection", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.GuardiumConnectorAPI.GuardiumConnectorTestDatabaseConnection(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuardiumConnectorAPIService GuardiumConnectorUpdateDmExclusion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.GuardiumConnectorAPI.GuardiumConnectorUpdateDmExclusion(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuardiumConnectorAPIService GuardiumConnectorUpdateStreaming", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var centralManagerId string

		resp, httpRes, err := apiClient.GuardiumConnectorAPI.GuardiumConnectorUpdateStreaming(context.Background(), centralManagerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test GuardiumConnectorAPIService GuardiumConnectorUpdateTask", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var centralManagerId string
		var taskId string

		resp, httpRes, err := apiClient.GuardiumConnectorAPI.GuardiumConnectorUpdateTask(context.Background(), centralManagerId, taskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
