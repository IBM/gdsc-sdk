/*
IBM Guardium Data Security Center

Testing WorkflowAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package guardiumsdkgo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_guardiumsdkgo_WorkflowAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test WorkflowAPIService WorkflowCreateCase", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.WorkflowAPI.WorkflowCreateCase(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorkflowAPIService WorkflowCreateTask", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var caseId string

		resp, httpRes, err := apiClient.WorkflowAPI.WorkflowCreateTask(context.Background(), caseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorkflowAPIService WorkflowGetCases", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.WorkflowAPI.WorkflowGetCases(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorkflowAPIService WorkflowGetCasesCount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.WorkflowAPI.WorkflowGetCasesCount(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorkflowAPIService WorkflowGetFilename", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var caseId string
		var taskId string

		resp, httpRes, err := apiClient.WorkflowAPI.WorkflowGetFilename(context.Background(), caseId, taskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorkflowAPIService WorkflowGetJobsCount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var caseId string

		resp, httpRes, err := apiClient.WorkflowAPI.WorkflowGetJobsCount(context.Background(), caseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorkflowAPIService WorkflowGetReportResult", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var caseId string
		var taskId string

		resp, httpRes, err := apiClient.WorkflowAPI.WorkflowGetReportResult(context.Background(), caseId, taskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorkflowAPIService WorkflowGetTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var caseId string

		resp, httpRes, err := apiClient.WorkflowAPI.WorkflowGetTasks(context.Background(), caseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorkflowAPIService WorkflowGetTasksCount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var caseId string

		resp, httpRes, err := apiClient.WorkflowAPI.WorkflowGetTasksCount(context.Background(), caseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorkflowAPIService WorkflowSearchCases", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.WorkflowAPI.WorkflowSearchCases(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorkflowAPIService WorkflowSearchReports", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.WorkflowAPI.WorkflowSearchReports(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorkflowAPIService WorkflowSearchTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var caseId string

		resp, httpRes, err := apiClient.WorkflowAPI.WorkflowSearchTasks(context.Background(), caseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorkflowAPIService WorkflowUpdateCases", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.WorkflowAPI.WorkflowUpdateCases(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test WorkflowAPIService WorkflowUpdateTasks", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var caseId string

		resp, httpRes, err := apiClient.WorkflowAPI.WorkflowUpdateTasks(context.Background(), caseId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
