/*
IBM Guardium Data Security Center

Testing DataVulnerabilitiesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package guardiumsdkgo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_guardiumsdkgo_DataVulnerabilitiesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DataVulnerabilitiesAPIService AddVulnerabilityStatusComment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vulnerabilityId string
		var statusId string

		resp, httpRes, err := apiClient.DataVulnerabilitiesAPI.AddVulnerabilityStatusComment(context.Background(), vulnerabilityId, statusId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DataVulnerabilitiesAPIService GetVulnerabilitiesSummary", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DataVulnerabilitiesAPI.GetVulnerabilitiesSummary(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DataVulnerabilitiesAPIService GetVulnerability", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vulnerabilityId string

		resp, httpRes, err := apiClient.DataVulnerabilitiesAPI.GetVulnerability(context.Background(), vulnerabilityId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DataVulnerabilitiesAPIService ListVulnerabilities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DataVulnerabilitiesAPI.ListVulnerabilities(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DataVulnerabilitiesAPIService ListVulnerabilitiesByDataStore", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DataVulnerabilitiesAPI.ListVulnerabilitiesByDataStore(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DataVulnerabilitiesAPIService RemoveVulnerabilityStatusComment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vulnerabilityId string
		var statusId string
		var commentId string

		httpRes, err := apiClient.DataVulnerabilitiesAPI.RemoveVulnerabilityStatusComment(context.Background(), vulnerabilityId, statusId, commentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DataVulnerabilitiesAPIService SetVulnerabilityStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vulnerabilityId string

		resp, httpRes, err := apiClient.DataVulnerabilitiesAPI.SetVulnerabilityStatus(context.Background(), vulnerabilityId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DataVulnerabilitiesAPIService UpdateVulnerabilityStatusComment", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var vulnerabilityId string
		var statusId string
		var commentId string

		resp, httpRes, err := apiClient.DataVulnerabilitiesAPI.UpdateVulnerabilityStatusComment(context.Background(), vulnerabilityId, statusId, commentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
