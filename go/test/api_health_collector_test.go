/*
IBM Guardium Data Security Center

Testing HealthCollectorAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package guardiumsdkgo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_guardiumsdkgo_HealthCollectorAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test HealthCollectorAPIService HealthCollectorGetDataWarehouseUsage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var type_ string

		resp, httpRes, err := apiClient.HealthCollectorAPI.HealthCollectorGetDataWarehouseUsage(context.Background(), type_).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HealthCollectorAPIService HealthCollectorGetGDPHealthInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HealthCollectorAPI.HealthCollectorGetGDPHealthInfo(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HealthCollectorAPIService HealthCollectorGetHistoricalHealthInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.HealthCollectorAPI.HealthCollectorGetHistoricalHealthInfo(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HealthCollectorAPIService HealthCollectorGetObjectStorageUsage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var type_ string

		resp, httpRes, err := apiClient.HealthCollectorAPI.HealthCollectorGetObjectStorageUsage(context.Background(), type_).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HealthCollectorAPIService HealthCollectorGetPVCUsage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var type_ string

		resp, httpRes, err := apiClient.HealthCollectorAPI.HealthCollectorGetPVCUsage(context.Background(), type_).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HealthCollectorAPIService HealthCollectorGetPodRestarts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var type_ string

		resp, httpRes, err := apiClient.HealthCollectorAPI.HealthCollectorGetPodRestarts(context.Background(), type_).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HealthCollectorAPIService HealthCollectorGetStreamsIngestion", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var type_ string

		resp, httpRes, err := apiClient.HealthCollectorAPI.HealthCollectorGetStreamsIngestion(context.Background(), type_).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HealthCollectorAPIService HealthCollectorGetTopGDPCollectors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var type_ string

		resp, httpRes, err := apiClient.HealthCollectorAPI.HealthCollectorGetTopGDPCollectors(context.Background(), type_).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test HealthCollectorAPIService HealthCollectorStoreHealthInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var centralManagerId string

		resp, httpRes, err := apiClient.HealthCollectorAPI.HealthCollectorStoreHealthInfo(context.Background(), centralManagerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
