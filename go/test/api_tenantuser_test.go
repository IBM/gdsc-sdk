/*
IBM Guardium Data Security Center

Testing TenantuserAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package guardiumsdkgo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_guardiumsdkgo_TenantuserAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TenantuserAPIService TenantuserCreateAPIKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TenantuserAPI.TenantuserCreateAPIKey(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TenantuserAPIService TenantuserDeleteAPIKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.TenantuserAPI.TenantuserDeleteAPIKey(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TenantuserAPIService TenantuserDeleteRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roleId string

		resp, httpRes, err := apiClient.TenantuserAPI.TenantuserDeleteRole(context.Background(), roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TenantuserAPIService TenantuserGetAPIKeys", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TenantuserAPI.TenantuserGetAPIKeys(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TenantuserAPIService TenantuserGetCurrentUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TenantuserAPI.TenantuserGetCurrentUser(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TenantuserAPIService TenantuserGetPrivilege", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var privilegePrivilegeId string

		resp, httpRes, err := apiClient.TenantuserAPI.TenantuserGetPrivilege(context.Background(), privilegePrivilegeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TenantuserAPIService TenantuserGetPrivileges", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TenantuserAPI.TenantuserGetPrivileges(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TenantuserAPIService TenantuserGetRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roleId string

		resp, httpRes, err := apiClient.TenantuserAPI.TenantuserGetRole(context.Background(), roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TenantuserAPIService TenantuserGetRoles", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TenantuserAPI.TenantuserGetRoles(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TenantuserAPIService TenantuserGetUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.TenantuserAPI.TenantuserGetUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TenantuserAPIService TenantuserGetUserNames", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TenantuserAPI.TenantuserGetUserNames(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TenantuserAPIService TenantuserGetUserTenant", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userId string

		resp, httpRes, err := apiClient.TenantuserAPI.TenantuserGetUserTenant(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TenantuserAPIService TenantuserPostPrivilegesBulk", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TenantuserAPI.TenantuserPostPrivilegesBulk(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TenantuserAPIService TenantuserPostRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TenantuserAPI.TenantuserPostRole(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TenantuserAPIService TenantuserUpdatePrivilege", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var privilegeId string

		resp, httpRes, err := apiClient.TenantuserAPI.TenantuserUpdatePrivilege(context.Background(), privilegeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TenantuserAPIService TenantuserUpdatePrivilegesRoleBulk", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TenantuserAPI.TenantuserUpdatePrivilegesRoleBulk(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TenantuserAPIService TenantuserUpdateRole", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var roleId string

		resp, httpRes, err := apiClient.TenantuserAPI.TenantuserUpdateRole(context.Background(), roleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TenantuserAPIService TenantuserUpdateUserRoleBulk", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TenantuserAPI.TenantuserUpdateUserRoleBulk(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
