/*
IBM Guardium Data Security Center

Testing QSDataManagerAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package guardiumsdkgo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_guardiumsdkgo_QSDataManagerAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test QSDataManagerAPIService QSDataManagerGetAppDataForProvisionId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var provisionId string

		resp, httpRes, err := apiClient.QSDataManagerAPI.QSDataManagerGetAppDataForProvisionId(context.Background(), provisionId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QSDataManagerAPIService QSDataManagerGetMasterData", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.QSDataManagerAPI.QSDataManagerGetMasterData(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QSDataManagerAPIService QSDataManagerGetNetLocDimDataForScanId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var scanId string

		resp, httpRes, err := apiClient.QSDataManagerAPI.QSDataManagerGetNetLocDimDataForScanId(context.Background(), scanId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QSDataManagerAPIService QSDataManagerInsertAllEntities", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.QSDataManagerAPI.QSDataManagerInsertAllEntities(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QSDataManagerAPIService QSDataManagerRegisterScan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.QSDataManagerAPI.QSDataManagerRegisterScan(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QSDataManagerAPIService QSDataManagerRetrieveScan", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var scanId string

		resp, httpRes, err := apiClient.QSDataManagerAPI.QSDataManagerRetrieveScan(context.Background(), scanId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QSDataManagerAPIService QSDataManagerSearchEntityData", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.QSDataManagerAPI.QSDataManagerSearchEntityData(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QSDataManagerAPIService QSDataManagerUpdateNetLocation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.QSDataManagerAPI.QSDataManagerUpdateNetLocation(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
