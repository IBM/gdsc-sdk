/*
IBM Guardium Data Security Center

Testing EcosystemServiceAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package guardiumsdkgo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_guardiumsdkgo_EcosystemServiceAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test EcosystemServiceAPIService EcosystemServiceCreateDataset", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EcosystemServiceAPI.EcosystemServiceCreateDataset(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EcosystemServiceAPIService EcosystemServiceDataInsert", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var datasetName string

		resp, httpRes, err := apiClient.EcosystemServiceAPI.EcosystemServiceDataInsert(context.Background(), datasetName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EcosystemServiceAPIService EcosystemServiceDeleteDatasets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EcosystemServiceAPI.EcosystemServiceDeleteDatasets(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EcosystemServiceAPIService EcosystemServiceGetDatasetData", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var datasetName string

		resp, httpRes, err := apiClient.EcosystemServiceAPI.EcosystemServiceGetDatasetData(context.Background(), datasetName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EcosystemServiceAPIService EcosystemServiceGetDatasetDetail", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var datasetName string

		resp, httpRes, err := apiClient.EcosystemServiceAPI.EcosystemServiceGetDatasetDetail(context.Background(), datasetName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EcosystemServiceAPIService EcosystemServiceGetDatasets", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EcosystemServiceAPI.EcosystemServiceGetDatasets(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EcosystemServiceAPIService EcosystemServiceGetPurgableRows", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EcosystemServiceAPI.EcosystemServiceGetPurgableRows(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EcosystemServiceAPIService EcosystemServicePurgeData", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EcosystemServiceAPI.EcosystemServicePurgeData(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
