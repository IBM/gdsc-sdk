/*
IBM Guardium Data Security Center

Testing RiskAnalyticsControllerAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package guardiumsdkgo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_guardiumsdkgo_RiskAnalyticsControllerAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RiskAnalyticsControllerAPIService RiskAnalyticsControllerEnableDisableRiskEventFeedback", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RiskAnalyticsControllerAPI.RiskAnalyticsControllerEnableDisableRiskEventFeedback(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RiskAnalyticsControllerAPIService RiskAnalyticsControllerEnableDisableRiskEventProcess", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RiskAnalyticsControllerAPI.RiskAnalyticsControllerEnableDisableRiskEventProcess(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RiskAnalyticsControllerAPIService RiskAnalyticsControllerGetAllClassificationsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RiskAnalyticsControllerAPI.RiskAnalyticsControllerGetAllClassificationsList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RiskAnalyticsControllerAPIService RiskAnalyticsControllerGetRiskEventClassificationsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var riskId int32

		resp, httpRes, err := apiClient.RiskAnalyticsControllerAPI.RiskAnalyticsControllerGetRiskEventClassificationsList(context.Background(), riskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RiskAnalyticsControllerAPIService RiskAnalyticsControllerGetRiskEventDataForSummarization", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var riskId int32

		resp, httpRes, err := apiClient.RiskAnalyticsControllerAPI.RiskAnalyticsControllerGetRiskEventDataForSummarization(context.Background(), riskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RiskAnalyticsControllerAPIService RiskAnalyticsControllerGetRiskEventDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var riskId int32

		resp, httpRes, err := apiClient.RiskAnalyticsControllerAPI.RiskAnalyticsControllerGetRiskEventDetails(context.Background(), riskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RiskAnalyticsControllerAPIService RiskAnalyticsControllerGetRiskEventProcessStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RiskAnalyticsControllerAPI.RiskAnalyticsControllerGetRiskEventProcessStatus(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RiskAnalyticsControllerAPIService RiskAnalyticsControllerGetRiskEventRow", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RiskAnalyticsControllerAPI.RiskAnalyticsControllerGetRiskEventRow(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RiskAnalyticsControllerAPIService RiskAnalyticsControllerGetRiskEventVulnerabilityAssessmentDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var riskId int32

		resp, httpRes, err := apiClient.RiskAnalyticsControllerAPI.RiskAnalyticsControllerGetRiskEventVulnerabilityAssessmentDetails(context.Background(), riskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RiskAnalyticsControllerAPIService RiskAnalyticsControllerGetRiskFeedback", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RiskAnalyticsControllerAPI.RiskAnalyticsControllerGetRiskFeedback(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RiskAnalyticsControllerAPIService RiskAnalyticsControllerGetRiskObservationDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RiskAnalyticsControllerAPI.RiskAnalyticsControllerGetRiskObservationDetails(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RiskAnalyticsControllerAPIService RiskAnalyticsControllerGetUserUISettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RiskAnalyticsControllerAPI.RiskAnalyticsControllerGetUserUISettings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RiskAnalyticsControllerAPIService RiskAnalyticsControllerRiskEventTuning", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RiskAnalyticsControllerAPI.RiskAnalyticsControllerRiskEventTuning(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RiskAnalyticsControllerAPIService RiskAnalyticsControllerSetRiskEventStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RiskAnalyticsControllerAPI.RiskAnalyticsControllerSetRiskEventStatus(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RiskAnalyticsControllerAPIService RiskAnalyticsControllerSetUserUISettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RiskAnalyticsControllerAPI.RiskAnalyticsControllerSetUserUISettings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RiskAnalyticsControllerAPIService RiskAnalyticsControllerUpdateRiskFeedback", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RiskAnalyticsControllerAPI.RiskAnalyticsControllerUpdateRiskFeedback(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
