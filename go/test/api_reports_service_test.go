/*
IBM Guardium Data Security Center

Testing ReportsServiceAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package guardiumsdkgo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_guardiumsdkgo_ReportsServiceAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ReportsServiceAPIService ReportsServiceCreateCategory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceCreateCategory(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServiceCreateChart", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceCreateChart(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServiceCreateChartTemplatev2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceCreateChartTemplatev2(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServiceCreateChartv2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceCreateChartv2(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServiceCreateFieldsByCategory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceCreateFieldsByCategory(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServiceCreateJoin", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceCreateJoin(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServiceCreateReport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceCreateReport(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServiceCreateVariant", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceCreateVariant(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServiceDeleteCategory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceDeleteCategory(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServiceDeleteChart", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var chartId string

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceDeleteChart(context.Background(), chartId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServiceDeleteChartTemplatev2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var templateId string

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceDeleteChartTemplatev2(context.Background(), templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServiceDeleteChartv2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var chartId string

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceDeleteChartv2(context.Background(), chartId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServiceDeleteFieldsByCategory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceDeleteFieldsByCategory(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServiceDeleteJoin", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var joinId string

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceDeleteJoin(context.Background(), joinId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServiceDeleteReport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reportId string

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceDeleteReport(context.Background(), reportId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServiceDeleteVariant", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var variantId string

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceDeleteVariant(context.Background(), variantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServiceGetCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceGetCategories(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServiceGetChartSettings", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceGetChartSettings(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServiceGetChartSettingsv2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceGetChartSettingsv2(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServiceGetChartTemplatesv2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceGetChartTemplatesv2(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServiceGetFieldsByCategories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceGetFieldsByCategories(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServiceGetFieldsByCategory", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceGetFieldsByCategory(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServiceGetJoins", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceGetJoins(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServiceGetQueryByReportDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceGetQueryByReportDefinition(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServiceGetQueryByReportID", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceGetQueryByReportID(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServiceGetReportDefinition", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reportId string

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceGetReportDefinition(context.Background(), reportId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServiceGetReportGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceGetReportGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServiceGetReportSynopsis", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reportId string

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceGetReportSynopsis(context.Background(), reportId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServiceGetReportTimestampHeader", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceGetReportTimestampHeader(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServiceGetReports", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceGetReports(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServiceGetReportsForJoin", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var joinId string

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceGetReportsForJoin(context.Background(), joinId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServiceGetReportsTags", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceGetReportsTags(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServiceGetVariant", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var variantId string

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceGetVariant(context.Background(), variantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServiceGetVariants", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceGetVariants(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServicePartialChartUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var chartId string

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServicePartialChartUpdate(context.Background(), chartId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServicePartialReportUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reportId string

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServicePartialReportUpdate(context.Background(), reportId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServiceRunVariantOperation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceRunVariantOperation(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServiceTranspose", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceTranspose(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServiceUpdateChart", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var chartId string

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceUpdateChart(context.Background(), chartId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServiceUpdateChartv2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var chartId string

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceUpdateChartv2(context.Background(), chartId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServiceUpdateJoin", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var joinId string

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceUpdateJoin(context.Background(), joinId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServiceUpdateReport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reportId string

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceUpdateReport(context.Background(), reportId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ReportsServiceAPIService ReportsServiceUpdateVariantOverride", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var variantId string

		resp, httpRes, err := apiClient.ReportsServiceAPI.ReportsServiceUpdateVariantOverride(context.Background(), variantId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
