/*
IBM Guardium Data Security Center

Testing PolicyBuilderAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package guardiumsdkgo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_guardiumsdkgo_PolicyBuilderAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PolicyBuilderAPIService PolicyBuilderClonePolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyId string

		resp, httpRes, err := apiClient.PolicyBuilderAPI.PolicyBuilderClonePolicy(context.Background(), policyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyBuilderAPIService PolicyBuilderCreatePolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PolicyBuilderAPI.PolicyBuilderCreatePolicy(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyBuilderAPIService PolicyBuilderDeleteGdpSyncEntry", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PolicyBuilderAPI.PolicyBuilderDeleteGdpSyncEntry(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyBuilderAPIService PolicyBuilderDeletePolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PolicyBuilderAPI.PolicyBuilderDeletePolicies(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyBuilderAPIService PolicyBuilderGetGdpPolicyMetaData", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PolicyBuilderAPI.PolicyBuilderGetGdpPolicyMetaData(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyBuilderAPIService PolicyBuilderGetPolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PolicyBuilderAPI.PolicyBuilderGetPolicies(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyBuilderAPIService PolicyBuilderGetPolicyDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyId string

		resp, httpRes, err := apiClient.PolicyBuilderAPI.PolicyBuilderGetPolicyDetails(context.Background(), policyId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyBuilderAPIService PolicyBuilderGetPolicyNamesFromRuleIDs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PolicyBuilderAPI.PolicyBuilderGetPolicyNamesFromRuleIDs(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyBuilderAPIService PolicyBuilderGetPolicySyncList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PolicyBuilderAPI.PolicyBuilderGetPolicySyncList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyBuilderAPIService PolicyBuilderGetReceivers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PolicyBuilderAPI.PolicyBuilderGetReceivers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyBuilderAPIService PolicyBuilderGetRuleMetadata", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PolicyBuilderAPI.PolicyBuilderGetRuleMetadata(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyBuilderAPIService PolicyBuilderInsertGdpPolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PolicyBuilderAPI.PolicyBuilderInsertGdpPolicy(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyBuilderAPIService PolicyBuilderInsertGdpPolicyMetaData", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var centralManagerId string

		resp, httpRes, err := apiClient.PolicyBuilderAPI.PolicyBuilderInsertGdpPolicyMetaData(context.Background(), centralManagerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyBuilderAPIService PolicyBuilderInstallPolicies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PolicyBuilderAPI.PolicyBuilderInstallPolicies(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyBuilderAPIService PolicyBuilderIntegrationCheck", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var integrationId string

		resp, httpRes, err := apiClient.PolicyBuilderAPI.PolicyBuilderIntegrationCheck(context.Background(), integrationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyBuilderAPIService PolicyBuilderPoliciesGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PolicyBuilderAPI.PolicyBuilderPoliciesGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyBuilderAPIService PolicyBuilderRuleValidation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PolicyBuilderAPI.PolicyBuilderRuleValidation(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyBuilderAPIService PolicyBuilderStorePoliciesGdp", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var centralManagerId string

		resp, httpRes, err := apiClient.PolicyBuilderAPI.PolicyBuilderStorePoliciesGdp(context.Background(), centralManagerId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
