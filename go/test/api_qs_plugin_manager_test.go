/*
IBM Guardium Data Security Center

Testing QSPluginManagerAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package guardiumsdkgo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_guardiumsdkgo_QSPluginManagerAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test QSPluginManagerAPIService QSPluginManagerInvokeAppProv", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pluginId string

		resp, httpRes, err := apiClient.QSPluginManagerAPI.QSPluginManagerInvokeAppProv(context.Background(), pluginId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QSPluginManagerAPIService QSPluginManagerInvokeExplorerV1", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pluginId string

		resp, httpRes, err := apiClient.QSPluginManagerAPI.QSPluginManagerInvokeExplorerV1(context.Background(), pluginId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QSPluginManagerAPIService QSPluginManagerInvokeExplorerV2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pluginId string

		resp, httpRes, err := apiClient.QSPluginManagerAPI.QSPluginManagerInvokeExplorerV2(context.Background(), pluginId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QSPluginManagerAPIService QSPluginManagerInvokePlugin", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pluginId string

		resp, httpRes, err := apiClient.QSPluginManagerAPI.QSPluginManagerInvokePlugin(context.Background(), pluginId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test QSPluginManagerAPIService QSPluginManagerInvokePolicy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pluginId string

		resp, httpRes, err := apiClient.QSPluginManagerAPI.QSPluginManagerInvokePolicy(context.Background(), pluginId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
