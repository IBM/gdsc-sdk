/*
IBM Guardium Data Security Center

Testing SchedulerServiceAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package guardiumsdkgo

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_guardiumsdkgo_SchedulerServiceAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test SchedulerServiceAPIService SchedulerServiceCreateScheduledJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SchedulerServiceAPI.SchedulerServiceCreateScheduledJob(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SchedulerServiceAPIService SchedulerServiceDeleteScheduledJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var scheduleId string

		resp, httpRes, err := apiClient.SchedulerServiceAPI.SchedulerServiceDeleteScheduledJob(context.Background(), scheduleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SchedulerServiceAPIService SchedulerServiceGetDependencies", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SchedulerServiceAPI.SchedulerServiceGetDependencies(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SchedulerServiceAPIService SchedulerServiceGetDistributionRules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SchedulerServiceAPI.SchedulerServiceGetDistributionRules(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SchedulerServiceAPIService SchedulerServiceGetScheduledJobDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var scheduleId string

		resp, httpRes, err := apiClient.SchedulerServiceAPI.SchedulerServiceGetScheduledJobDetails(context.Background(), scheduleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SchedulerServiceAPIService SchedulerServiceGetScheduledJobs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SchedulerServiceAPI.SchedulerServiceGetScheduledJobs(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SchedulerServiceAPIService SchedulerServiceGetSchedulesByReport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reportId string

		resp, httpRes, err := apiClient.SchedulerServiceAPI.SchedulerServiceGetSchedulesByReport(context.Background(), reportId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SchedulerServiceAPIService SchedulerServiceGetTags", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SchedulerServiceAPI.SchedulerServiceGetTags(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SchedulerServiceAPIService SchedulerServiceSearchScheduledJobs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SchedulerServiceAPI.SchedulerServiceSearchScheduledJobs(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SchedulerServiceAPIService SchedulerServiceSearchScheduledTaskRuns", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.SchedulerServiceAPI.SchedulerServiceSearchScheduledTaskRuns(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test SchedulerServiceAPIService SchedulerServiceUpdateScheduledJob", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var scheduleId string

		resp, httpRes, err := apiClient.SchedulerServiceAPI.SchedulerServiceUpdateScheduledJob(context.Background(), scheduleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
