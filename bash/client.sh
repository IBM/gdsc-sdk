#!/usr/bin/env bash

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# !
# ! Note:
# !
# ! THIS SCRIPT HAS BEEN AUTOMATICALLY GENERATED USING
# ! openapi-generator (https://openapi-generator.tech)
# ! FROM OPENAPI SPECIFICATION IN JSON.
# !
# ! Generator version: 7.6.0
# !
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

#
# This is a Bash client for IBM Guardium Data Security Center.
#
# LICENSE:
# 
#
# CONTACT:
# 
#
# MORE INFORMATION:
# 
#

# For improved pattern matching in case statements
shopt -s extglob

###############################################################################
#
# Make sure Bash is at least in version 4.3
#
###############################################################################
if ! ( (("${BASH_VERSION:0:1}" == "4")) && (("${BASH_VERSION:2:1}" >= "3")) ) \
  && ! (("${BASH_VERSION:0:1}" >= "5")); then
    echo ""
    echo "Sorry - your Bash version is ${BASH_VERSION}"
    echo ""
    echo "You need at least Bash 4.3 to run this script."
    echo ""
    exit 1
fi

###############################################################################
#
# Global variables
#
###############################################################################

##
# The filename of this script for help messages
script_name=$(basename "$0")

##
# Map for headers passed after operation as KEY:VALUE
declare -A header_arguments


##
# Map for operation parameters passed after operation as PARAMETER=VALUE
# These will be mapped to appropriate path or query parameters
# The values in operation_parameters are arrays, so that multiple values
# can be provided for the same parameter if allowed by API specification
declare -A operation_parameters

##
# Declare colors with autodetection if output is terminal
if [ -t 1 ]; then
    RED="$(tput setaf 1)"
    GREEN="$(tput setaf 2)"
    YELLOW="$(tput setaf 3)"
    BLUE="$(tput setaf 4)"
    MAGENTA="$(tput setaf 5)"
    CYAN="$(tput setaf 6)"
    WHITE="$(tput setaf 7)"
    BOLD="$(tput bold)"
    OFF="$(tput sgr0)"
else
    RED=""
    GREEN=""
    YELLOW=""
    BLUE=""
    MAGENTA=""
    CYAN=""
    WHITE=""
    BOLD=""
    OFF=""
fi

declare -a result_color_table=( "$WHITE" "$WHITE" "$GREEN" "$YELLOW" "$WHITE" "$MAGENTA" "$WHITE" )

##
# This array stores the minimum number of required occurrences for parameter
# 0 - optional
# 1 - required
declare -A operation_parameters_minimum_occurrences
operation_parameters_minimum_occurrences["analyticsEventsServiceDeleteCacheKey:::cache_key"]=1
operation_parameters_minimum_occurrences["analyticsEventsServiceDeleteCacheKey:::Analyticseventsv3DeleteCacheKeyRequest"]=1
operation_parameters_minimum_occurrences["analyticsEventsServicePostQSAdvisorRisk:::Analyticseventsv3PostQSAdvisorRiskRequest"]=1
operation_parameters_minimum_occurrences["assetsServiceAssetIngestion:::Assetsv3AssetIngestionRequest"]=1
operation_parameters_minimum_occurrences["assetsServiceAssetIngestionManualTrigger:::body"]=1
operation_parameters_minimum_occurrences["assetsServiceClonePolicy:::policy_id"]=1
operation_parameters_minimum_occurrences["assetsServiceClonePolicy:::Assetsv3ClonePolicyRequest"]=1
operation_parameters_minimum_occurrences["assetsServiceCreateUpdatePolicy:::Assetsv3CreateUpdatePolicyRequest"]=1
operation_parameters_minimum_occurrences["assetsServiceDeleteFilterTemplateForAssets:::template_id"]=1
operation_parameters_minimum_occurrences["assetsServiceDeleteFilterTemplateForAssets:::Assetsv3AssetFilterTemplateRequest"]=1
operation_parameters_minimum_occurrences["assetsServiceDeletePolicies:::policy_ids"]=0
operation_parameters_minimum_occurrences["assetsServiceFetchAssetChangeLog:::Assetsv3FetchAssetChangeLogRequest"]=1
operation_parameters_minimum_occurrences["assetsServiceFetchAssetDashboard:::widget_type"]=1
operation_parameters_minimum_occurrences["assetsServiceFetchAssetDashboard:::date_range.start"]=0
operation_parameters_minimum_occurrences["assetsServiceFetchAssetDashboard:::date_range.end"]=0
operation_parameters_minimum_occurrences["assetsServiceFetchAssetDashboard:::date_range.type"]=0
operation_parameters_minimum_occurrences["assetsServiceFetchAssetDashboard:::date_range.key"]=0
operation_parameters_minimum_occurrences["assetsServiceFetchAssetDashboard:::date_range.error"]=0
operation_parameters_minimum_occurrences["assetsServiceFetchAssetDashboard:::date_range.start_number"]=0
operation_parameters_minimum_occurrences["assetsServiceFetchAssetDashboard:::date_range.start_unit"]=0
operation_parameters_minimum_occurrences["assetsServiceFetchAssetDashboard:::date_range.end_number"]=0
operation_parameters_minimum_occurrences["assetsServiceFetchAssetDashboard:::date_range.end_unit"]=0
operation_parameters_minimum_occurrences["assetsServiceFetchAssetDashboard:::timeline_value_selected"]=0
operation_parameters_minimum_occurrences["assetsServiceFetchAssetDashboard:::tag_id"]=0
operation_parameters_minimum_occurrences["assetsServiceFetchAssetList:::Assetsv3FetchAssetListRequest"]=1
operation_parameters_minimum_occurrences["assetsServiceFetchAssetsForMergeSplit:::asset_id"]=0
operation_parameters_minimum_occurrences["assetsServiceFetchAssetsForMergeSplit:::page_number"]=0
operation_parameters_minimum_occurrences["assetsServiceFetchAssetsForMergeSplit:::page_size"]=0
operation_parameters_minimum_occurrences["assetsServiceFetchAssetsForMergeSplit:::action"]=0
operation_parameters_minimum_occurrences["assetsServiceFetchAssetsForMergeSplit:::search_key"]=0
operation_parameters_minimum_occurrences["assetsServiceFindAssetName:::asset_name"]=0
operation_parameters_minimum_occurrences["assetsServiceGetAssetOverview:::asset_id"]=0
operation_parameters_minimum_occurrences["assetsServiceGetAssetOverview:::page_number"]=0
operation_parameters_minimum_occurrences["assetsServiceGetAssetOverview:::size"]=0
operation_parameters_minimum_occurrences["assetsServiceGetAssetOverview:::widget"]=0
operation_parameters_minimum_occurrences["assetsServiceGetAssetOverview:::ip"]=0
operation_parameters_minimum_occurrences["assetsServiceGetAssetOverview:::host"]=0
operation_parameters_minimum_occurrences["assetsServiceGetAssetOverview:::database"]=0
operation_parameters_minimum_occurrences["assetsServiceGetAssetOverview:::asset_entity_type"]=0
operation_parameters_minimum_occurrences["assetsServiceGetAssetTopology:::Assetsv3GetAssetTopologyRequest"]=1
operation_parameters_minimum_occurrences["assetsServiceGetFilterTemplateForAssets:::template_id"]=0
operation_parameters_minimum_occurrences["assetsServiceListRule:::policy_id"]=1
operation_parameters_minimum_occurrences["assetsServiceListTagDomains:::dom_grouper"]=0
operation_parameters_minimum_occurrences["assetsServiceListTagDomains:::purpose"]=0
operation_parameters_minimum_occurrences["assetsServiceListTagDomains:::need_tag"]=0
operation_parameters_minimum_occurrences["assetsServiceListTags:::asset_id"]=0
operation_parameters_minimum_occurrences["assetsServiceMergeOrSplitAssets:::Assetsv3MergeOrSplitAssetsRequest"]=1
operation_parameters_minimum_occurrences["assetsServiceSaveAssignedTags:::Assetsv3SaveAssignedTagsRequest"]=1
operation_parameters_minimum_occurrences["assetsServiceSaveTagConceptData:::Assetsv3SaveTagConceptDataRequest"]=1
operation_parameters_minimum_occurrences["assetsServiceSaveTagDomainData:::Assetsv3SaveTagDomainDataRequest"]=1
operation_parameters_minimum_occurrences["assetsServiceSaveUpdateFilterTemplateForAssets:::Assetsv3SaveUpdateFilterTemplateRequest"]=1
operation_parameters_minimum_occurrences["assetsServiceSetBannerState:::Assetsv3SetBannerStateRequest"]=1
operation_parameters_minimum_occurrences["assetsServiceUpdateAssetName:::Assetsv3UpdateAssetNameRequest"]=1
operation_parameters_minimum_occurrences["assetsServiceUpdatePolicy:::Assetsv3UpdatePolicyRequest"]=1
operation_parameters_minimum_occurrences["auditServiceGetActivityRecords:::start_time"]=0
operation_parameters_minimum_occurrences["auditServiceGetActivityRecords:::end_time"]=0
operation_parameters_minimum_occurrences["auditServiceGetActivityRecords:::uid"]=0
operation_parameters_minimum_occurrences["auditServiceGetActivityRecords:::action_taken"]=0
operation_parameters_minimum_occurrences["auditServiceGetActivityRecords:::context"]=0
operation_parameters_minimum_occurrences["auditServiceGetActivityRecords:::changes_made"]=0
operation_parameters_minimum_occurrences["auditServiceGetActivityRecords:::performed_by"]=0
operation_parameters_minimum_occurrences["auditServiceGetActivityRecords:::context_description"]=0
operation_parameters_minimum_occurrences["auditServiceGetActivityRecords:::query"]=0
operation_parameters_minimum_occurrences["auditServiceGetActivityRecords:::offset"]=0
operation_parameters_minimum_occurrences["auditServiceGetActivityRecords:::limit"]=0
operation_parameters_minimum_occurrences["auditServiceGetActivityRecords:::filter"]=0
operation_parameters_minimum_occurrences["auditServicePutDownloadActivityRecord:::Auditv3PutActivityRecordRequest"]=1
operation_parameters_minimum_occurrences["authServerServiceCreateOauthClient:::AuthserverCreateOauthClientRequest"]=1
operation_parameters_minimum_occurrences["authServerServiceDeleteOauthClient:::client_id"]=1
operation_parameters_minimum_occurrences["authServerServiceGetOauthClient:::client_id"]=1
operation_parameters_minimum_occurrences["addAnalyzedRegion:::AddAnalyzedRegionRequest"]=1
operation_parameters_minimum_occurrences["addCloudAccounts:::AddCloudAccountsRequest"]=1
operation_parameters_minimum_occurrences["generateAzureAuthUrl:::tenantId"]=0
operation_parameters_minimum_occurrences["generateSnowflakeAuthUrl:::ClientInfo"]=1
operation_parameters_minimum_occurrences["getAnalyzedRegionStatus:::cloudProvider"]=1
operation_parameters_minimum_occurrences["getAnalyzedRegionStatus:::region"]=1
operation_parameters_minimum_occurrences["getCloudAccountInstallationStatus:::cloudProvider"]=1
operation_parameters_minimum_occurrences["getCloudAccountInstallationStatus:::cloudAccountId"]=1
operation_parameters_minimum_occurrences["getRefreshTokenExpiry:::providerId"]=1
operation_parameters_minimum_occurrences["removeAccounts:::accountIds"]=1
operation_parameters_minimum_occurrences["removeAccounts:::serviceProvider"]=1
operation_parameters_minimum_occurrences["removeAccountsInstructions:::accountIds"]=1
operation_parameters_minimum_occurrences["removeAccountsInstructions:::serviceProvider"]=1
operation_parameters_minimum_occurrences["submitGoogleWorkspaceAdminEmail:::SubmitAdminEmailParams"]=1
operation_parameters_minimum_occurrences["submitOffice365TenantInfo:::TenantInfo"]=1
operation_parameters_minimum_occurrences["submitSlackAuthCode:::SubmitAuthCode"]=1
operation_parameters_minimum_occurrences["submitSnowflakeAuthCode:::AuthInfo"]=1
operation_parameters_minimum_occurrences["complianceAcceleratorCreateWorkspace:::Complianceacceleratorv3CreateWorkspaceRequest"]=1
operation_parameters_minimum_occurrences["complianceAcceleratorDeleteComplianceWorkspaces:::regulations"]=0
operation_parameters_minimum_occurrences["complianceAcceleratorDeleteComplianceWorkspaces:::deleteAll"]=0
operation_parameters_minimum_occurrences["complianceAcceleratorHydrateWorkspace:::Complianceacceleratorv3HydrateComplianceWorkspacesRequest"]=1
operation_parameters_minimum_occurrences["complianceAcceleratorStoreComplianceInfo:::Complianceacceleratorv3StoreComplianceInfoRequest"]=1
operation_parameters_minimum_occurrences["connectionsServiceCreateConnectionsAccounts:::Connectionsv3CreateConnectionsAccountsRequest"]=1
operation_parameters_minimum_occurrences["connectionsServiceCreateConnectionsConfigs:::Connectionsv3CreateConnectionsConfigsRequest"]=1
operation_parameters_minimum_occurrences["connectionsServiceCreatePlugin:::Connectionsv3CreatePluginRequest"]=1
operation_parameters_minimum_occurrences["connectionsServiceCreateSettings:::Connectionsv3CreateSettingsRequest"]=1
operation_parameters_minimum_occurrences["connectionsServiceDeleteConnectionsAccounts:::account_id"]=1
operation_parameters_minimum_occurrences["connectionsServiceDeleteConnectionsConfigs:::connection_id"]=1
operation_parameters_minimum_occurrences["connectionsServiceDeleteConnector:::connection_id"]=1
operation_parameters_minimum_occurrences["connectionsServiceDeletePlugin:::id"]=1
operation_parameters_minimum_occurrences["connectionsServiceGetConnectionsAccounts:::account_id"]=0
operation_parameters_minimum_occurrences["connectionsServiceGetConnectionsAccounts:::access_key"]=0
operation_parameters_minimum_occurrences["connectionsServiceGetConnectionsConfigs:::type"]=0
operation_parameters_minimum_occurrences["connectionsServiceGetConnectionsConfigs:::connection_id"]=0
operation_parameters_minimum_occurrences["connectionsServiceGetConnectionsWithFilters:::Connectionsv3GetConnectionsWithFiltersRequest"]=1
operation_parameters_minimum_occurrences["connectionsServiceGetPlugins:::id"]=0
operation_parameters_minimum_occurrences["connectionsServicePartialUpdateConnectors:::Connectionsv3PartialUpdateConnectorsRequest"]=1
operation_parameters_minimum_occurrences["connectionsServicePostStapCommand:::Connectionsv3StapCommandRequest"]=1
operation_parameters_minimum_occurrences["connectionsServiceUpdateBannerState:::Connectionsv3UpdateBannerStateRequest"]=1
operation_parameters_minimum_occurrences["connectionsServiceUpdateConnectionsAccounts:::Connectionsv3UpdateConnectionsAccountsRequest"]=1
operation_parameters_minimum_occurrences["connectionsServiceUpdateConnectionsConfigs:::Connectionsv3UpdateConnectionsConfigsRequest"]=1
operation_parameters_minimum_occurrences["connectionsServiceUpdateConnectors:::Connectionsv3UpdateConnectorsRequest"]=1
operation_parameters_minimum_occurrences["connectionsServiceUpdatePlugin:::id"]=1
operation_parameters_minimum_occurrences["connectionsServiceUpdatePlugin:::Connectionsv3UpdatePluginRequest"]=1
operation_parameters_minimum_occurrences["connectionsServiceUpdateSettings:::Connectionsv3UpdateSettingsRequest"]=1
operation_parameters_minimum_occurrences["dashboardsServiceCreateDashboard:::Dashboardsv3Dashboard"]=1
operation_parameters_minimum_occurrences["dashboardsServiceDeleteDashboard:::dashboard_id"]=1
operation_parameters_minimum_occurrences["dashboardsServiceDeleteDashboard:::Dashboardsv3DeleteDashboardRequest"]=1
operation_parameters_minimum_occurrences["dashboardsServiceUpdateDashboard:::dashboard_id"]=1
operation_parameters_minimum_occurrences["dashboardsServiceUpdateDashboard:::Dashboardsv3UpdateDashboardRequest"]=1
operation_parameters_minimum_occurrences["getActualFlow:::id"]=1
operation_parameters_minimum_occurrences["getActualFlowsSummary:::filter"]=0
operation_parameters_minimum_occurrences["getPotentialFlow:::flowId"]=1
operation_parameters_minimum_occurrences["getPotentialFlowPath:::flowPathId"]=1
operation_parameters_minimum_occurrences["getPotentialFlowsSummary:::filter"]=0
operation_parameters_minimum_occurrences["listActualFlowPaths:::sort"]=0
operation_parameters_minimum_occurrences["listActualFlowPaths:::filter"]=0
operation_parameters_minimum_occurrences["listActualFlowPaths:::pageSize"]=0
operation_parameters_minimum_occurrences["listActualFlowPaths:::nextToken"]=0
operation_parameters_minimum_occurrences["listActualFlows:::sort"]=0
operation_parameters_minimum_occurrences["listActualFlows:::filter"]=0
operation_parameters_minimum_occurrences["listActualFlows:::pageSize"]=0
operation_parameters_minimum_occurrences["listActualFlows:::nextToken"]=0
operation_parameters_minimum_occurrences["listPotentialFlows:::filter"]=0
operation_parameters_minimum_occurrences["listPotentialFlows:::pageSize"]=0
operation_parameters_minimum_occurrences["listPotentialFlows:::nextToken"]=0
operation_parameters_minimum_occurrences["listPotentialFlowsPaths:::filter"]=0
operation_parameters_minimum_occurrences["listPotentialFlowsPaths:::pageSize"]=0
operation_parameters_minimum_occurrences["listPotentialFlowsPaths:::nextToken"]=0
operation_parameters_minimum_occurrences["getDataResource:::dataResourceId"]=1
operation_parameters_minimum_occurrences["getDataResourcesSummary:::dataStoreId"]=0
operation_parameters_minimum_occurrences["getDataResourcesSummary:::filter"]=0
operation_parameters_minimum_occurrences["listDataResources:::dataStoreId"]=0
operation_parameters_minimum_occurrences["listDataResources:::filter"]=0
operation_parameters_minimum_occurrences["listDataResources:::sort"]=0
operation_parameters_minimum_occurrences["listDataResources:::pageSize"]=0
operation_parameters_minimum_occurrences["listDataResources:::nextToken"]=0
operation_parameters_minimum_occurrences["listDataResourcesNames:::prefix"]=1
operation_parameters_minimum_occurrences["listDataResourcesNames:::dataStoreId"]=0
operation_parameters_minimum_occurrences["removeResource:::dataResourceId"]=1
operation_parameters_minimum_occurrences["removeResource:::dataStoreId"]=1
operation_parameters_minimum_occurrences["updateResourceReviewStatus:::dataResourceId"]=1
operation_parameters_minimum_occurrences["updateResourceReviewStatus:::UpdateResourceReviewBody"]=1
operation_parameters_minimum_occurrences["getSensitivitiesSummary:::filter"]=0
operation_parameters_minimum_occurrences["getSensitivity:::sensitivityId"]=1
operation_parameters_minimum_occurrences["listSensitivities:::filter"]=0
operation_parameters_minimum_occurrences["listSensitivities:::sort"]=0
operation_parameters_minimum_occurrences["listSensitivities:::pageSize"]=0
operation_parameters_minimum_occurrences["listSensitivities:::nextToken"]=0
operation_parameters_minimum_occurrences["getDataStore:::dataStoreId"]=1
operation_parameters_minimum_occurrences["getDataStoresSummary:::filter"]=0
operation_parameters_minimum_occurrences["listAllDataStoresLabels:::prefix"]=0
operation_parameters_minimum_occurrences["listAllDataStoresLabels:::maxResults"]=0
operation_parameters_minimum_occurrences["listDataStores:::filter"]=0
operation_parameters_minimum_occurrences["listDataStores:::sort"]=0
operation_parameters_minimum_occurrences["listDataStores:::pageSize"]=0
operation_parameters_minimum_occurrences["listDataStores:::nextToken"]=0
operation_parameters_minimum_occurrences["listDataStoresCloudTagsKeys:::prefix"]=1
operation_parameters_minimum_occurrences["listDataStoresCloudTagsKeys:::maxResults"]=0
operation_parameters_minimum_occurrences["listDataStoresCloudTagsValues:::prefix"]=1
operation_parameters_minimum_occurrences["listDataStoresCloudTagsValues:::tagKey"]=1
operation_parameters_minimum_occurrences["listDataStoresCloudTagsValues:::maxResults"]=0
operation_parameters_minimum_occurrences["listDataStoresNames:::prefix"]=1
operation_parameters_minimum_occurrences["rescanDataStore:::RescanDataStoreRequest"]=1
operation_parameters_minimum_occurrences["setDataStoreLabel:::dataStoreId"]=1
operation_parameters_minimum_occurrences["setDataStoreLabel:::SetDataStoreLabelRequest"]=1
operation_parameters_minimum_occurrences["updateDatastoreCustodian:::UpdateCustodianBody"]=1
operation_parameters_minimum_occurrences["addVulnerabilityStatusComment:::vulnerabilityId"]=1
operation_parameters_minimum_occurrences["addVulnerabilityStatusComment:::statusId"]=1
operation_parameters_minimum_occurrences["addVulnerabilityStatusComment:::AddCommentBody"]=1
operation_parameters_minimum_occurrences["getVulnerabilitiesSummary:::filter"]=0
operation_parameters_minimum_occurrences["getVulnerability:::vulnerabilityId"]=1
operation_parameters_minimum_occurrences["listVulnerabilities:::filter"]=0
operation_parameters_minimum_occurrences["listVulnerabilities:::sort"]=0
operation_parameters_minimum_occurrences["listVulnerabilities:::pageSize"]=0
operation_parameters_minimum_occurrences["listVulnerabilities:::nextToken"]=0
operation_parameters_minimum_occurrences["listVulnerabilitiesByDataStore:::filter"]=0
operation_parameters_minimum_occurrences["listVulnerabilitiesByDataStore:::sort"]=0
operation_parameters_minimum_occurrences["listVulnerabilitiesByDataStore:::pageSize"]=0
operation_parameters_minimum_occurrences["listVulnerabilitiesByDataStore:::nextToken"]=0
operation_parameters_minimum_occurrences["removeVulnerabilityStatusComment:::vulnerabilityId"]=1
operation_parameters_minimum_occurrences["removeVulnerabilityStatusComment:::statusId"]=1
operation_parameters_minimum_occurrences["removeVulnerabilityStatusComment:::commentId"]=1
operation_parameters_minimum_occurrences["setVulnerabilityStatus:::vulnerabilityId"]=1
operation_parameters_minimum_occurrences["setVulnerabilityStatus:::SetVulnerabilityStatusRequest"]=1
operation_parameters_minimum_occurrences["updateVulnerabilityStatusComment:::vulnerabilityId"]=1
operation_parameters_minimum_occurrences["updateVulnerabilityStatusComment:::statusId"]=1
operation_parameters_minimum_occurrences["updateVulnerabilityStatusComment:::commentId"]=1
operation_parameters_minimum_occurrences["updateVulnerabilityStatusComment:::UpdateCommentBody"]=1
operation_parameters_minimum_occurrences["databootstrapperServiceLoadData:::Databootstrapperv3LoadDataRequest"]=1
operation_parameters_minimum_occurrences["datamartProcessorServiceGetDatamartInfo:::ingestion_id"]=0
operation_parameters_minimum_occurrences["datamartProcessorServiceGetDatamarts:::period_start"]=0
operation_parameters_minimum_occurrences["datamartProcessorServiceGetDatamarts:::period_end"]=0
operation_parameters_minimum_occurrences["datamartProcessorServiceSendAllCompleteFilesToQueue:::body"]=1
operation_parameters_minimum_occurrences["datamartProcessorServiceStoreExtractionLogs:::request_id"]=1
operation_parameters_minimum_occurrences["datamartProcessorServiceStoreExtractionLogs:::Datamartprocessorv3DMExtractionLogsRequest"]=1
operation_parameters_minimum_occurrences["uploadDatamart:::file"]=1
operation_parameters_minimum_occurrences["ecosystemServiceCreateDataset:::Ecosystemv3CreateDatasetRequest"]=1
operation_parameters_minimum_occurrences["ecosystemServiceDataInsert:::dataset_name"]=1
operation_parameters_minimum_occurrences["ecosystemServiceDataInsert:::Ecosystemv3DataInsertRequest"]=1
operation_parameters_minimum_occurrences["ecosystemServiceDeleteDatasets:::dataset_names"]=0
operation_parameters_minimum_occurrences["ecosystemServiceGetDatasetData:::dataset_name"]=1
operation_parameters_minimum_occurrences["ecosystemServiceGetDatasetData:::offset"]=0
operation_parameters_minimum_occurrences["ecosystemServiceGetDatasetData:::limit"]=0
operation_parameters_minimum_occurrences["ecosystemServiceGetDatasetData:::return_header"]=0
operation_parameters_minimum_occurrences["ecosystemServiceGetDatasetData:::field"]=0
operation_parameters_minimum_occurrences["ecosystemServiceGetDatasetData:::value"]=0
operation_parameters_minimum_occurrences["ecosystemServiceGetDatasetData:::sort_field"]=0
operation_parameters_minimum_occurrences["ecosystemServiceGetDatasetData:::sort_order"]=0
operation_parameters_minimum_occurrences["ecosystemServiceGetDatasetDetail:::dataset_name"]=1
operation_parameters_minimum_occurrences["ecosystemServiceGetDatasets:::filter.start_time"]=0
operation_parameters_minimum_occurrences["ecosystemServiceGetDatasets:::filter.end_time"]=0
operation_parameters_minimum_occurrences["ecosystemServiceGetDatasets:::filter.dataset_names"]=0
operation_parameters_minimum_occurrences["ecosystemServiceGetDatasets:::offset"]=0
operation_parameters_minimum_occurrences["ecosystemServiceGetDatasets:::limit"]=0
operation_parameters_minimum_occurrences["ecosystemServiceGetDatasets:::include_filter_counts"]=0
operation_parameters_minimum_occurrences["ecosystemServiceGetPurgableRows:::Ecosystemv3GetPurgableRowsRequest"]=1
operation_parameters_minimum_occurrences["ecosystemServicePurgeData:::dataset_names"]=0
operation_parameters_minimum_occurrences["featureFlagsServiceDeleteFeatureFlagOverrides:::flag_name"]=0
operation_parameters_minimum_occurrences["featureFlagsServiceDeleteFeatureFlagOverrides:::tenant_id"]=0
operation_parameters_minimum_occurrences["featureFlagsServiceGetFeatureFlagOverrides:::tenant_id"]=0
operation_parameters_minimum_occurrences["featureFlagsServiceGetFeatureFlagOverrides:::flag_names"]=0
operation_parameters_minimum_occurrences["featureFlagsServiceGetFeatureFlags:::tenant_id"]=0
operation_parameters_minimum_occurrences["featureFlagsServiceGetFeatureFlags:::flag_names"]=0
operation_parameters_minimum_occurrences["featureFlagsServiceUpdateFeatureFlagOverrides:::Featureflagsv3UpdateFeatureFlagOverridesRequest"]=1
operation_parameters_minimum_occurrences["groupBuilderCancelImportGroup:::group_ids"]=0
operation_parameters_minimum_occurrences["groupBuilderCreateGroup:::Groupbuilderv3CreateGroupRequest"]=1
operation_parameters_minimum_occurrences["groupBuilderDeleteGroup:::group_ids"]=0
operation_parameters_minimum_occurrences["groupBuilderEditGroup:::group_id"]=1
operation_parameters_minimum_occurrences["groupBuilderEditGroup:::Groupbuilderv3EditGroupRequest"]=1
operation_parameters_minimum_occurrences["groupBuilderExportGroup:::Groupbuilderv3GetExportGroupRequest"]=1
operation_parameters_minimum_occurrences["groupBuilderGetGroupDetails:::group_id"]=1
operation_parameters_minimum_occurrences["groupBuilderGetGroupDetails:::filter"]=0
operation_parameters_minimum_occurrences["groupBuilderGetGroupDetails:::order"]=0
operation_parameters_minimum_occurrences["groupBuilderGetGroupMembers:::Groupbuilderv3GetGroupMembersRequest"]=1
operation_parameters_minimum_occurrences["groupBuilderGetGroupSyncMapping:::central_manager_id"]=0
operation_parameters_minimum_occurrences["groupBuilderGetGroups:::do_not_include_member_count"]=0
operation_parameters_minimum_occurrences["groupBuilderGetGroups:::only_full_access"]=0
operation_parameters_minimum_occurrences["groupBuilderGetGroups:::non_nested"]=0
operation_parameters_minimum_occurrences["groupBuilderGetImportGroups:::central_manager_id"]=0
operation_parameters_minimum_occurrences["groupBuilderImportGroup:::Groupbuilderv3ImportGroupRequest"]=1
operation_parameters_minimum_occurrences["groupBuilderRefreshGroups:::Groupbuilderv3RefreshGroupsRequest"]=1
operation_parameters_minimum_occurrences["groupBuilderResetGroups:::Groupbuilderv3ResetGroupsRequest"]=1
operation_parameters_minimum_occurrences["groupBuilderStoreGroupMembersGdp:::central_manager_id"]=1
operation_parameters_minimum_occurrences["groupBuilderStoreGroupMembersGdp:::Groupbuilderv3StoreGroupMembersGdpRequest"]=1
operation_parameters_minimum_occurrences["groupBuilderStoreGroupsGdp:::central_manager_id"]=1
operation_parameters_minimum_occurrences["groupBuilderStoreGroupsGdp:::Groupbuilderv3GetGroupsRequestGdp"]=1
operation_parameters_minimum_occurrences["guardiumConnectorAddCM:::Guardiumconnectorv3AddCMRequest"]=1
operation_parameters_minimum_occurrences["guardiumConnectorAddDatamarts:::central_manager_id"]=1
operation_parameters_minimum_occurrences["guardiumConnectorAddDatamarts:::Guardiumconnectorv3AddDatamartsRequest"]=1
operation_parameters_minimum_occurrences["guardiumConnectorAddDmExclusion:::Guardiumconnectorv3AddDmExclusionRequest"]=1
operation_parameters_minimum_occurrences["guardiumConnectorAddTask:::central_manager_id"]=1
operation_parameters_minimum_occurrences["guardiumConnectorAddTask:::Guardiumconnectorv3AddTaskRequest"]=1
operation_parameters_minimum_occurrences["guardiumConnectorBlockUser:::Guardiumconnectorv3BlockUserRequest"]=1
operation_parameters_minimum_occurrences["guardiumConnectorConfigureAggregatorExport:::central_manager_id"]=1
operation_parameters_minimum_occurrences["guardiumConnectorConfigureAggregatorExport:::Guardiumconnectorv3ConfigureAggregatorExportRequest"]=1
operation_parameters_minimum_occurrences["guardiumConnectorConfigureCollectorExport:::central_manager_id"]=1
operation_parameters_minimum_occurrences["guardiumConnectorConfigureCollectorExport:::Guardiumconnectorv3ConfigureCollectorExportRequest"]=1
operation_parameters_minimum_occurrences["guardiumConnectorConfigureStreaming:::central_manager_id"]=1
operation_parameters_minimum_occurrences["guardiumConnectorConfigureStreaming:::Guardiumconnectorv3ConfigureStreamingRequest"]=1
operation_parameters_minimum_occurrences["guardiumConnectorDatamartVersionCheck:::central_manager_id"]=1
operation_parameters_minimum_occurrences["guardiumConnectorDatamartVersionCheck:::Guardiumconnectorv3DatamartVersionRequest"]=1
operation_parameters_minimum_occurrences["guardiumConnectorDeleteCM:::central_manager_id"]=1
operation_parameters_minimum_occurrences["guardiumConnectorDeleteCM:::force"]=0
operation_parameters_minimum_occurrences["guardiumConnectorDeleteDmExclusion:::datamart"]=0
operation_parameters_minimum_occurrences["guardiumConnectorDeleteTask:::central_manager_id"]=1
operation_parameters_minimum_occurrences["guardiumConnectorDeleteTask:::task_id"]=1
operation_parameters_minimum_occurrences["guardiumConnectorDeleteTasks:::central_manager_id"]=1
operation_parameters_minimum_occurrences["guardiumConnectorGetAggregatorsConfig:::central_manager_id"]=1
operation_parameters_minimum_occurrences["guardiumConnectorGetCMs:::run_additional_checks"]=0
operation_parameters_minimum_occurrences["guardiumConnectorGetCollectorsConfig:::central_manager_id"]=1
operation_parameters_minimum_occurrences["guardiumConnectorGetDatamarts:::central_manager_id"]=1
operation_parameters_minimum_occurrences["guardiumConnectorGetGdpPolicyInfo:::central_manager_id"]=1
operation_parameters_minimum_occurrences["guardiumConnectorGetGdpPolicyInfo:::policy_name"]=0
operation_parameters_minimum_occurrences["guardiumConnectorGetGdpPolicySummaries:::central_manager_id"]=1
operation_parameters_minimum_occurrences["guardiumConnectorGetHealthInfo:::central_manager_id"]=1
operation_parameters_minimum_occurrences["guardiumConnectorGetHealthInfo:::use_fallback"]=0
operation_parameters_minimum_occurrences["guardiumConnectorGetLatestDMExtractionProfile:::central_manager_id"]=1
operation_parameters_minimum_occurrences["guardiumConnectorGetStreamingStatus:::central_manager_id"]=1
operation_parameters_minimum_occurrences["guardiumConnectorGetSyncDMs:::central_manager_id"]=1
operation_parameters_minimum_occurrences["guardiumConnectorGetTasks:::central_manager_id"]=1
operation_parameters_minimum_occurrences["guardiumConnectorGetTasks:::task_id"]=0
operation_parameters_minimum_occurrences["guardiumConnectorGetTasks:::task_type"]=0
operation_parameters_minimum_occurrences["guardiumConnectorGetTasks:::key_object"]=0
operation_parameters_minimum_occurrences["guardiumConnectorRunGDPReport:::central_manager_id"]=1
operation_parameters_minimum_occurrences["guardiumConnectorRunGDPReport:::Guardiumconnectorv3RunGDPReportRequest"]=1
operation_parameters_minimum_occurrences["guardiumConnectorSetupCM:::Guardiumconnectorv3SetupCMRequest"]=1
operation_parameters_minimum_occurrences["guardiumConnectorSetupDatamarts:::central_manager_id"]=1
operation_parameters_minimum_occurrences["guardiumConnectorSetupDatamarts:::Guardiumconnectorv3SetupDatamartsRequest"]=1
operation_parameters_minimum_occurrences["guardiumConnectorTaskError:::central_manager_id"]=1
operation_parameters_minimum_occurrences["guardiumConnectorTaskError:::Guardiumconnectorv3TaskErrorRequest"]=1
operation_parameters_minimum_occurrences["guardiumConnectorTestDatabaseConnection:::Guardiumconnectorv3DatabaseConnectionStringRequest"]=1
operation_parameters_minimum_occurrences["guardiumConnectorUpdateDmExclusion:::Guardiumconnectorv3UpdateDmExclusionRequest"]=1
operation_parameters_minimum_occurrences["guardiumConnectorUpdateStreaming:::central_manager_id"]=1
operation_parameters_minimum_occurrences["guardiumConnectorUpdateStreaming:::Guardiumconnectorv3UpdateStreamingRequest"]=1
operation_parameters_minimum_occurrences["guardiumConnectorUpdateTask:::central_manager_id"]=1
operation_parameters_minimum_occurrences["guardiumConnectorUpdateTask:::task_id"]=1
operation_parameters_minimum_occurrences["guardiumConnectorUpdateTask:::Guardiumconnectorv3UpdateTaskRequest"]=1
operation_parameters_minimum_occurrences["healthCollectorGetDataWarehouseUsage:::type"]=1
operation_parameters_minimum_occurrences["healthCollectorGetDataWarehouseUsage:::start_time"]=0
operation_parameters_minimum_occurrences["healthCollectorGetDataWarehouseUsage:::end_time"]=0
operation_parameters_minimum_occurrences["healthCollectorGetHistoricalHealthInfo:::unit"]=0
operation_parameters_minimum_occurrences["healthCollectorGetHistoricalHealthInfo:::cm_id"]=0
operation_parameters_minimum_occurrences["healthCollectorGetHistoricalHealthInfo:::start_time"]=0
operation_parameters_minimum_occurrences["healthCollectorGetHistoricalHealthInfo:::end_time"]=0
operation_parameters_minimum_occurrences["healthCollectorGetObjectStorageUsage:::type"]=1
operation_parameters_minimum_occurrences["healthCollectorGetObjectStorageUsage:::start_time"]=0
operation_parameters_minimum_occurrences["healthCollectorGetObjectStorageUsage:::end_time"]=0
operation_parameters_minimum_occurrences["healthCollectorGetPVCUsage:::type"]=1
operation_parameters_minimum_occurrences["healthCollectorGetPVCUsage:::start_time"]=0
operation_parameters_minimum_occurrences["healthCollectorGetPVCUsage:::end_time"]=0
operation_parameters_minimum_occurrences["healthCollectorGetPodRestarts:::type"]=1
operation_parameters_minimum_occurrences["healthCollectorGetPodRestarts:::start_time"]=0
operation_parameters_minimum_occurrences["healthCollectorGetPodRestarts:::end_time"]=0
operation_parameters_minimum_occurrences["healthCollectorGetStreamsIngestion:::type"]=1
operation_parameters_minimum_occurrences["healthCollectorGetStreamsIngestion:::start_time"]=0
operation_parameters_minimum_occurrences["healthCollectorGetStreamsIngestion:::end_time"]=0
operation_parameters_minimum_occurrences["healthCollectorGetTopGDPCollectors:::type"]=1
operation_parameters_minimum_occurrences["healthCollectorGetTopGDPCollectors:::start_time"]=0
operation_parameters_minimum_occurrences["healthCollectorGetTopGDPCollectors:::end_time"]=0
operation_parameters_minimum_occurrences["healthCollectorStoreHealthInfo:::central_manager_id"]=1
operation_parameters_minimum_occurrences["healthCollectorStoreHealthInfo:::Healthcollectorv3StoreHealthInfoRequest"]=1
operation_parameters_minimum_occurrences["jumpboxServiceAuthorize:::Jumpboxv3AuthorizeRequest"]=1
operation_parameters_minimum_occurrences["jumpboxServiceDeleteTenant:::tenant_id"]=1
operation_parameters_minimum_occurrences["jumpboxServiceDeleteTenant:::is_permanent_delete"]=0
operation_parameters_minimum_occurrences["jumpboxServiceDeleteTenant:::async"]=0
operation_parameters_minimum_occurrences["jumpboxServiceDeleteUser:::user_id"]=1
operation_parameters_minimum_occurrences["jumpboxServiceGetTenant:::tenant_id"]=1
operation_parameters_minimum_occurrences["jumpboxServiceGetTenant:::include_inactive"]=0
operation_parameters_minimum_occurrences["jumpboxServiceGetTenant:::include_not_ready"]=0
operation_parameters_minimum_occurrences["jumpboxServiceGetTenants:::uid"]=0
operation_parameters_minimum_occurrences["jumpboxServiceGetTenants:::external_id"]=0
operation_parameters_minimum_occurrences["jumpboxServiceGetTenants:::include_inactive"]=0
operation_parameters_minimum_occurrences["jumpboxServiceGetTenants:::include_not_ready"]=0
operation_parameters_minimum_occurrences["jumpboxServiceGetUsers:::uid"]=0
operation_parameters_minimum_occurrences["jumpboxServicePostTenants:::Jumpboxv3PostTenantsRequest"]=1
operation_parameters_minimum_occurrences["jumpboxServicePostUsers:::Jumpboxv3PostUsersBulkRequest"]=1
operation_parameters_minimum_occurrences["jumpboxServiceSearchUsers:::Jumpboxv3SearchUsersRequest"]=1
operation_parameters_minimum_occurrences["jumpboxServiceTestUser:::Jumpboxv3TestUserRequest"]=1
operation_parameters_minimum_occurrences["jumpboxServiceUpdateTenant:::tenant_id"]=1
operation_parameters_minimum_occurrences["jumpboxServiceUpdateTenant:::Jumpboxv3UpdateTenantRequest"]=1
operation_parameters_minimum_occurrences["jumpboxServiceUpdateUsers:::Jumpboxv3UpdateUsersBulkRequest"]=1
operation_parameters_minimum_occurrences["notificationsServiceCreateTicket:::Notificationsv3CreateTicketRequest"]=1
operation_parameters_minimum_occurrences["notificationsServiceGetFolders:::Notificationsv3GetFoldersRequest"]=1
operation_parameters_minimum_occurrences["notificationsServiceGetNotificationFilename:::notification_id"]=0
operation_parameters_minimum_occurrences["notificationsServiceGetNotificationRecord:::notification_id"]=1
operation_parameters_minimum_occurrences["notificationsServiceGetNotificationRecords:::filter.start_time"]=0
operation_parameters_minimum_occurrences["notificationsServiceGetNotificationRecords:::filter.end_time"]=0
operation_parameters_minimum_occurrences["notificationsServiceGetNotificationRecords:::filter.state"]=0
operation_parameters_minimum_occurrences["notificationsServiceGetNotificationRecords:::filter.origins"]=0
operation_parameters_minimum_occurrences["notificationsServiceGetNotificationRecords:::filter.origin_data"]=0
operation_parameters_minimum_occurrences["notificationsServiceGetNotificationRecords:::offset"]=0
operation_parameters_minimum_occurrences["notificationsServiceGetNotificationRecords:::limit"]=0
operation_parameters_minimum_occurrences["notificationsServiceGetNotificationRecords:::include_filter_counts"]=0
operation_parameters_minimum_occurrences["notificationsServiceGetTicketStatus:::ticket_id"]=0
operation_parameters_minimum_occurrences["notificationsServiceGetTicketStatus:::integration_id"]=0
operation_parameters_minimum_occurrences["notificationsServiceTestIntegration:::Notificationsv3TestIntegrationRequest"]=1
operation_parameters_minimum_occurrences["notificationsServiceUpdateNotificationRecord:::Notificationsv3UpdateNotificationRecordRequest"]=1
operation_parameters_minimum_occurrences["outliersEngineGetSourceStatistics:::source.server_ip"]=0
operation_parameters_minimum_occurrences["outliersEngineGetSourceStatistics:::source.database_name"]=0
operation_parameters_minimum_occurrences["outliersEngineGetSourceStatistics:::source.db_user"]=0
operation_parameters_minimum_occurrences["outliersEngineGetSourceStatistics:::attributes_limit"]=0
operation_parameters_minimum_occurrences["outliersEngineRunSimulator:::Outliersenginev3RunSimulatorRequest"]=1
operation_parameters_minimum_occurrences["outliersEngineUpdateWorkingHoursPeriods:::Outliersenginev3UpdateWorkingHoursPeriodsRequest"]=1
operation_parameters_minimum_occurrences["outliersEngineUploadAndAnalyzePeriod:::body"]=1
operation_parameters_minimum_occurrences["outliersEngineUserClustering:::body"]=1
operation_parameters_minimum_occurrences["pipelineconfigServiceDeleteTenantResources:::tenant_id"]=1
operation_parameters_minimum_occurrences["pipelineconfigServiceDeleteTenantResources:::resource"]=1
operation_parameters_minimum_occurrences["policyBuilderClonePolicy:::policy_id"]=1
operation_parameters_minimum_occurrences["policyBuilderClonePolicy:::Policybuilderv3ClonePolicyRequest"]=1
operation_parameters_minimum_occurrences["policyBuilderCreatePolicy:::Policybuilderv3CreateUpdatePolicyRequest"]=1
operation_parameters_minimum_occurrences["policyBuilderDeleteGdpSyncEntry:::sync_ids"]=0
operation_parameters_minimum_occurrences["policyBuilderDeletePolicies:::policy_ids"]=0
operation_parameters_minimum_occurrences["policyBuilderGetPolicyDetails:::policy_id"]=1
operation_parameters_minimum_occurrences["policyBuilderGetPolicyNamesFromRuleIDs:::Policybuilderv3GetPolicyNamesFromRuleIDsRequest"]=1
operation_parameters_minimum_occurrences["policyBuilderGetReceivers:::action_id"]=0
operation_parameters_minimum_occurrences["policyBuilderGetReceivers:::validate_cache"]=0
operation_parameters_minimum_occurrences["policyBuilderGetRuleMetadata:::rule_type"]=0
operation_parameters_minimum_occurrences["policyBuilderInsertGdpPolicy:::Policybuilderv3InsertGdpPolicySyncRequest"]=1
operation_parameters_minimum_occurrences["policyBuilderInsertGdpPolicyMetaData:::central_manager_id"]=1
operation_parameters_minimum_occurrences["policyBuilderInsertGdpPolicyMetaData:::Policybuilderv3InsertGdpPolicyMetaDataRequest"]=1
operation_parameters_minimum_occurrences["policyBuilderInstallPolicies:::Policybuilderv3InstallPoliciesRequest"]=1
operation_parameters_minimum_occurrences["policyBuilderIntegrationCheck:::integration_id"]=1
operation_parameters_minimum_occurrences["policyBuilderIntegrationCheck:::template_id"]=0
operation_parameters_minimum_occurrences["policyBuilderPoliciesGroups:::group_ids"]=0
operation_parameters_minimum_occurrences["policyBuilderRuleValidation:::Policybuilderv3GetRuleValidationRequest"]=1
operation_parameters_minimum_occurrences["policyBuilderStorePoliciesGdp:::central_manager_id"]=1
operation_parameters_minimum_occurrences["policyBuilderStorePoliciesGdp:::Policybuilderv3StorePolicyGdpRequest"]=1
operation_parameters_minimum_occurrences["qSDataManagerRegisterScan:::Qspmdatamanagerv3ScanRequest"]=1
operation_parameters_minimum_occurrences["qSDataManagerRetrieveScan:::scan_id"]=1
operation_parameters_minimum_occurrences["qSPluginManagerInvokeAppProv:::plugin_id"]=1
operation_parameters_minimum_occurrences["qSPluginManagerInvokeAppProv:::Qspmpluginmanagerv3PluginRQ"]=1
operation_parameters_minimum_occurrences["qSPluginManagerInvokeExplorerV1:::plugin_id"]=1
operation_parameters_minimum_occurrences["qSPluginManagerInvokeExplorerV1:::Qspmpluginmanagerv3PluginRQ"]=1
operation_parameters_minimum_occurrences["qSPluginManagerInvokeExplorerV2:::plugin_id"]=1
operation_parameters_minimum_occurrences["qSPluginManagerInvokeExplorerV2:::Qspmpluginmanagerv3PluginRQ"]=1
operation_parameters_minimum_occurrences["qSPluginManagerInvokePlugin:::plugin_id"]=1
operation_parameters_minimum_occurrences["qSPluginManagerInvokePlugin:::Qspmpluginmanagerv3PluginRQ"]=1
operation_parameters_minimum_occurrences["qSPluginManagerInvokePolicy:::plugin_id"]=1
operation_parameters_minimum_occurrences["qSPluginManagerInvokePolicy:::Qspmpluginmanagerv3PolicyPluginRQ"]=1
operation_parameters_minimum_occurrences["qSPolicyManagerBatchStatusUpdate:::body"]=1
operation_parameters_minimum_occurrences["qSPolicyManagerCreateTicket:::Qspmpolicymanagerv3CreateTicketRequest"]=1
operation_parameters_minimum_occurrences["qSPolicyManagerProcessPolicyDimentionRecords:::Qspmpolicymanagerv3ProcessPolicyDimentionRecordsRequest"]=1
operation_parameters_minimum_occurrences["qSPolicyManagerUpdateTicketStatus:::Qspmpolicymanagerv3UpdateTicketStatusRequest"]=1
operation_parameters_minimum_occurrences["reportsRunnerGetActiveQueries:::Reportsrunnerv3GetActiveQueriesRequest"]=1
operation_parameters_minimum_occurrences["reportsRunnerGetAuditDataCount:::report_id"]=1
operation_parameters_minimum_occurrences["reportsRunnerGetAuditDataCount:::Reportsrunnerv3GetAuditDataCountRequest"]=1
operation_parameters_minimum_occurrences["reportsRunnerGetChartData:::Reportsrunnerv3GetChartDataRequest"]=1
operation_parameters_minimum_occurrences["reportsRunnerGetChartDatav2:::Reportsrunnerv3GetChartDataRequestv2"]=1
operation_parameters_minimum_occurrences["reportsRunnerGetReportColumnFacet:::Reportsrunnerv3GetReportColumnFacetRequest"]=1
operation_parameters_minimum_occurrences["reportsRunnerGetReportDataCount:::Reportsrunnerv3GetReportDataCountRequest"]=1
operation_parameters_minimum_occurrences["reportsRunnerRunAuditReport:::report_id"]=1
operation_parameters_minimum_occurrences["reportsRunnerRunAuditReport:::Reportsrunnerv3RunAuditReportRequest"]=1
operation_parameters_minimum_occurrences["reportsRunnerRunReport:::Reportsrunnerv3RunReportRequest"]=1
operation_parameters_minimum_occurrences["reportsRunnerStopQuery:::Reportsrunnerv3StopQueryRequest"]=1
operation_parameters_minimum_occurrences["reportsServiceCreateCategory:::Reportsv3CreateCategoryRequest"]=1
operation_parameters_minimum_occurrences["reportsServiceCreateChart:::Reportsv3CreateChartRequest"]=1
operation_parameters_minimum_occurrences["reportsServiceCreateChartTemplatev2:::Reportsv3CreateChartTemplatev2Request"]=1
operation_parameters_minimum_occurrences["reportsServiceCreateChartv2:::Reportsv3CreateChartv2Request"]=1
operation_parameters_minimum_occurrences["reportsServiceCreateFieldsByCategory:::Reportsv3CreateFieldsByCategoryRequest"]=1
operation_parameters_minimum_occurrences["reportsServiceCreateJoin:::Reportsv3CreateJoinRequest"]=1
operation_parameters_minimum_occurrences["reportsServiceCreateReport:::Reportsv3CreateReportRequest"]=1
operation_parameters_minimum_occurrences["reportsServiceCreateVariant:::Reportsv3CreateVariantRequest"]=1
operation_parameters_minimum_occurrences["reportsServiceDeleteCategory:::category_id"]=0
operation_parameters_minimum_occurrences["reportsServiceDeleteCategory:::table_name"]=0
operation_parameters_minimum_occurrences["reportsServiceDeleteChart:::chart_id"]=1
operation_parameters_minimum_occurrences["reportsServiceDeleteChartTemplatev2:::template_id"]=1
operation_parameters_minimum_occurrences["reportsServiceDeleteChartv2:::chart_id"]=1
operation_parameters_minimum_occurrences["reportsServiceDeleteFieldsByCategory:::header_ids"]=0
operation_parameters_minimum_occurrences["reportsServiceDeleteFieldsByCategory:::table_name"]=0
operation_parameters_minimum_occurrences["reportsServiceDeleteJoin:::join_id"]=1
operation_parameters_minimum_occurrences["reportsServiceDeleteReport:::report_id"]=1
operation_parameters_minimum_occurrences["reportsServiceDeleteVariant:::variant_id"]=1
operation_parameters_minimum_occurrences["reportsServiceGetCategories:::report_id"]=0
operation_parameters_minimum_occurrences["reportsServiceGetChartSettings:::chart_id"]=0
operation_parameters_minimum_occurrences["reportsServiceGetChartSettings:::report_id"]=0
operation_parameters_minimum_occurrences["reportsServiceGetChartSettingsv2:::chart_id"]=0
operation_parameters_minimum_occurrences["reportsServiceGetChartSettingsv2:::report_id"]=0
operation_parameters_minimum_occurrences["reportsServiceGetFieldsByCategories:::category_ids"]=0
operation_parameters_minimum_occurrences["reportsServiceGetFieldsByCategory:::category_id"]=0
operation_parameters_minimum_occurrences["reportsServiceGetFieldsByCategory:::report_id"]=0
operation_parameters_minimum_occurrences["reportsServiceGetFieldsByCategory:::table_name"]=0
operation_parameters_minimum_occurrences["reportsServiceGetJoins:::category_id"]=0
operation_parameters_minimum_occurrences["reportsServiceGetQueryByReportDefinition:::Reportsv3GetQueryByReportDefinitionRequest"]=1
operation_parameters_minimum_occurrences["reportsServiceGetQueryByReportID:::Reportsv3GetQueryByReportIDRequest"]=1
operation_parameters_minimum_occurrences["reportsServiceGetReportDefinition:::report_id"]=1
operation_parameters_minimum_occurrences["reportsServiceGetReportGroups:::groups"]=0
operation_parameters_minimum_occurrences["reportsServiceGetReportSynopsis:::report_id"]=1
operation_parameters_minimum_occurrences["reportsServiceGetReportTimestampHeader:::category_id"]=0
operation_parameters_minimum_occurrences["reportsServiceGetReportTimestampHeader:::table_names"]=0
operation_parameters_minimum_occurrences["reportsServiceGetReports:::category_id"]=0
operation_parameters_minimum_occurrences["reportsServiceGetReports:::table_name"]=0
operation_parameters_minimum_occurrences["reportsServiceGetReportsForJoin:::join_id"]=1
operation_parameters_minimum_occurrences["reportsServiceGetVariant:::variant_id"]=1
operation_parameters_minimum_occurrences["reportsServicePartialChartUpdate:::chart_id"]=1
operation_parameters_minimum_occurrences["reportsServicePartialChartUpdate:::Reportsv3PartialChartUpdateRequest"]=1
operation_parameters_minimum_occurrences["reportsServicePartialReportUpdate:::report_id"]=1
operation_parameters_minimum_occurrences["reportsServicePartialReportUpdate:::Reportsv3PartialReportUpdateRequest"]=1
operation_parameters_minimum_occurrences["reportsServiceRunVariantOperation:::Reportsv3RunVariantOperationRequest"]=1
operation_parameters_minimum_occurrences["reportsServiceTranspose:::Reportsv3TransposeRequest"]=1
operation_parameters_minimum_occurrences["reportsServiceUpdateChart:::chart_id"]=1
operation_parameters_minimum_occurrences["reportsServiceUpdateChart:::Reportsv3UpdateChartRequest"]=1
operation_parameters_minimum_occurrences["reportsServiceUpdateChartv2:::chart_id"]=1
operation_parameters_minimum_occurrences["reportsServiceUpdateChartv2:::Reportsv3UpdateChartv2Request"]=1
operation_parameters_minimum_occurrences["reportsServiceUpdateJoin:::join_id"]=1
operation_parameters_minimum_occurrences["reportsServiceUpdateJoin:::Reportsv3UpdateJoinRequest"]=1
operation_parameters_minimum_occurrences["reportsServiceUpdateReport:::report_id"]=1
operation_parameters_minimum_occurrences["reportsServiceUpdateReport:::Reportsv3UpdateReportRequest"]=1
operation_parameters_minimum_occurrences["reportsServiceUpdateVariantOverride:::variant_id"]=1
operation_parameters_minimum_occurrences["reportsServiceUpdateVariantOverride:::Reportsv3UpdateVariantOverrideRequest"]=1
operation_parameters_minimum_occurrences["riskAnalyticsControllerEnableDisableRiskEventFeedback:::Riskanalyticscontrollerv3EnableDisableRiskEventFeedbackRequest"]=1
operation_parameters_minimum_occurrences["riskAnalyticsControllerEnableDisableRiskEventProcess:::Riskanalyticscontrollerv3EnableDisableRiskEventProcessRequest"]=1
operation_parameters_minimum_occurrences["riskAnalyticsControllerGetRiskEventClassificationsList:::risk_id"]=1
operation_parameters_minimum_occurrences["riskAnalyticsControllerGetRiskEventDataForSummarization:::risk_id"]=1
operation_parameters_minimum_occurrences["riskAnalyticsControllerGetRiskEventDataForSummarization:::include_indicators"]=0
operation_parameters_minimum_occurrences["riskAnalyticsControllerGetRiskEventDataForSummarization:::num_findings_limit"]=0
operation_parameters_minimum_occurrences["riskAnalyticsControllerGetRiskEventDetails:::risk_id"]=1
operation_parameters_minimum_occurrences["riskAnalyticsControllerGetRiskEventRow:::status"]=0
operation_parameters_minimum_occurrences["riskAnalyticsControllerGetRiskEventRow:::date_from"]=0
operation_parameters_minimum_occurrences["riskAnalyticsControllerGetRiskEventRow:::date_to"]=0
operation_parameters_minimum_occurrences["riskAnalyticsControllerGetRiskEventRow:::pivot.type"]=0
operation_parameters_minimum_occurrences["riskAnalyticsControllerGetRiskEventRow:::pivot.id"]=0
operation_parameters_minimum_occurrences["riskAnalyticsControllerGetRiskEventRow:::pivot.db_user"]=0
operation_parameters_minimum_occurrences["riskAnalyticsControllerGetRiskEventRow:::pivot.database"]=0
operation_parameters_minimum_occurrences["riskAnalyticsControllerGetRiskEventRow:::pivot.server_ip"]=0
operation_parameters_minimum_occurrences["riskAnalyticsControllerGetRiskEventRow:::pivot.os_user"]=0
operation_parameters_minimum_occurrences["riskAnalyticsControllerGetRiskEventRow:::pivot.database_source_field"]=0
operation_parameters_minimum_occurrences["riskAnalyticsControllerGetRiskEventVulnerabilityAssessmentDetails:::risk_id"]=1
operation_parameters_minimum_occurrences["riskAnalyticsControllerGetRiskObservationDetails:::lead_feature_id"]=0
operation_parameters_minimum_occurrences["riskAnalyticsControllerGetRiskObservationDetails:::observation_type"]=0
operation_parameters_minimum_occurrences["riskAnalyticsControllerRiskEventTuning:::Riskanalyticscontrollerv3RiskEventTuningRequest"]=1
operation_parameters_minimum_occurrences["riskAnalyticsControllerSetRiskEventStatus:::Riskanalyticscontrollerv3SetRiskEventStatusRequest"]=1
operation_parameters_minimum_occurrences["riskAnalyticsControllerSetUserUISettings:::Riskanalyticscontrollerv3SetUserUISettingsRequest"]=1
operation_parameters_minimum_occurrences["riskAnalyticsControllerUpdateRiskFeedback:::Riskanalyticscontrollerv3UpdateRiskFeedbackRequest"]=1
operation_parameters_minimum_occurrences["riskAnalyticsDataProcessorGetRiskContext:::risk_id"]=1
operation_parameters_minimum_occurrences["riskAnalyticsDataProcessorGetRiskContext:::timezone"]=0
operation_parameters_minimum_occurrences["riskAnalyticsDataProcessorGetRiskPredefinedQuestions:::risk_id"]=1
operation_parameters_minimum_occurrences["riskAnalyticsEngineUpdateLeadGeneratorConfig:::Riskanalyticsenginev3UpdateLeadGeneratorConfigRequest"]=1
operation_parameters_minimum_occurrences["schedulerServiceCreateScheduledJob:::Schedulerv3CreateScheduledJobRequest"]=1
operation_parameters_minimum_occurrences["schedulerServiceDeleteScheduledJob:::schedule_id"]=1
operation_parameters_minimum_occurrences["schedulerServiceGetDependencies:::config_type"]=0
operation_parameters_minimum_occurrences["schedulerServiceGetScheduledJobDetails:::schedule_id"]=1
operation_parameters_minimum_occurrences["schedulerServiceGetScheduledJobs:::Offset"]=0
operation_parameters_minimum_occurrences["schedulerServiceGetScheduledJobs:::Limit"]=0
operation_parameters_minimum_occurrences["schedulerServiceGetSchedulesByReport:::report_id"]=1
operation_parameters_minimum_occurrences["schedulerServiceGetSchedulesByReport:::Schedulerv3GetSchedulesByReportRequest"]=1
operation_parameters_minimum_occurrences["schedulerServiceSearchScheduledJobs:::Schedulerv3SearchScheduledJobsRequest"]=1
operation_parameters_minimum_occurrences["schedulerServiceSearchScheduledTaskRuns:::Schedulerv3SearchScheduledTaskRunsRequest"]=1
operation_parameters_minimum_occurrences["schedulerServiceUpdateScheduledJob:::schedule_id"]=1
operation_parameters_minimum_occurrences["schedulerServiceUpdateScheduledJob:::Schedulerv3UpdateScheduledJobRequest"]=1
operation_parameters_minimum_occurrences["snifAssistServiceTestRegex:::Snifassistv3TestRegexRequest"]=1
operation_parameters_minimum_occurrences["streamsServiceCheckAWSCredentials:::Streamsv3CheckAWSCredentialsRequest"]=1
operation_parameters_minimum_occurrences["streamsServiceCheckAzureEventHub:::Streamsv3CheckAzureEventHubRequest"]=1
operation_parameters_minimum_occurrences["streamsServiceCheckAzureStorageString:::Streamsv3CheckAzureStorageStringRequest"]=1
operation_parameters_minimum_occurrences["streamsServiceListAWSStreams:::Streamsv3ListAWSStreamsRequest"]=1
operation_parameters_minimum_occurrences["templatesServiceCreateIntegration:::Templatesv3CreateIntegrationRequest"]=1
operation_parameters_minimum_occurrences["templatesServiceCreateTemplate:::Templatesv3CreateTemplateRequest"]=1
operation_parameters_minimum_occurrences["templatesServiceDeleteIntegration:::integration_id"]=1
operation_parameters_minimum_occurrences["templatesServiceDeleteTemplate:::template_id"]=1
operation_parameters_minimum_occurrences["templatesServiceGetOriginDefaultContent:::origin"]=1
operation_parameters_minimum_occurrences["templatesServiceGetOriginDefaultContent:::integration"]=0
operation_parameters_minimum_occurrences["templatesServiceGetOriginDefaultContent:::mime_type"]=0
operation_parameters_minimum_occurrences["templatesServiceGetOriginFields:::origin"]=1
operation_parameters_minimum_occurrences["templatesServiceGetTemplate:::template_id"]=1
operation_parameters_minimum_occurrences["templatesServiceGetTemplate:::include_integration_name"]=0
operation_parameters_minimum_occurrences["templatesServiceGetTemplates:::integration_id"]=0
operation_parameters_minimum_occurrences["templatesServiceGetTemplates:::filter_integration"]=0
operation_parameters_minimum_occurrences["templatesServiceGetTemplates:::filter_origin"]=0
operation_parameters_minimum_occurrences["templatesServiceGetTemplates:::filter_mime_type"]=0
operation_parameters_minimum_occurrences["templatesServiceGetTemplates:::filter_tags"]=0
operation_parameters_minimum_occurrences["templatesServiceGetTemplates:::filter_enabled_only"]=0
operation_parameters_minimum_occurrences["templatesServiceGetTemplates:::include_integration_name"]=0
operation_parameters_minimum_occurrences["templatesServiceTestTemplate:::Templatesv3TestTemplateRequest"]=1
operation_parameters_minimum_occurrences["templatesServiceTransformTemplate:::Templatesv3TransformTemplateRequest"]=1
operation_parameters_minimum_occurrences["templatesServiceTransformTemplateJSON:::Templatesv3TransformTemplateJSONRequest"]=1
operation_parameters_minimum_occurrences["templatesServiceUpdateTemplate:::template_id"]=1
operation_parameters_minimum_occurrences["templatesServiceUpdateTemplate:::Templatesv3UpdateTemplateRequest"]=1
operation_parameters_minimum_occurrences["tenantuserCreateAPIKey:::Tenantuserv3CreateApiKeyRequest"]=1
operation_parameters_minimum_occurrences["tenantuserDeleteAPIKey:::id"]=1
operation_parameters_minimum_occurrences["tenantuserDeleteRole:::role_id"]=1
operation_parameters_minimum_occurrences["tenantuserGetPrivilege:::privilege.privilege_id"]=1
operation_parameters_minimum_occurrences["tenantuserGetPrivilege:::privilege.type"]=0
operation_parameters_minimum_occurrences["tenantuserGetPrivileges:::roles"]=0
operation_parameters_minimum_occurrences["tenantuserGetPrivileges:::type"]=0
operation_parameters_minimum_occurrences["tenantuserGetRole:::role_id"]=1
operation_parameters_minimum_occurrences["tenantuserGetUser:::user_id"]=1
operation_parameters_minimum_occurrences["tenantuserGetUserNames:::Tenantuserv3GetUserNamesRequest"]=1
operation_parameters_minimum_occurrences["tenantuserGetUserTenant:::user_id"]=1
operation_parameters_minimum_occurrences["tenantuserPostPrivilegesBulk:::Tenantuserv3PostPrivilegesBulkRequest"]=1
operation_parameters_minimum_occurrences["tenantuserPostRole:::Tenantuserv3PostRoleRequest"]=1
operation_parameters_minimum_occurrences["tenantuserUpdatePrivilege:::privilege_id"]=1
operation_parameters_minimum_occurrences["tenantuserUpdatePrivilege:::Tenantuserv3UpdatePrivilegeRequest"]=1
operation_parameters_minimum_occurrences["tenantuserUpdatePrivilegesRoleBulk:::Tenantuserv3UpdatePrivilegesBulkRequest"]=1
operation_parameters_minimum_occurrences["tenantuserUpdateRole:::role_id"]=1
operation_parameters_minimum_occurrences["tenantuserUpdateRole:::Tenantuserv3UpdateRoleRequest"]=1
operation_parameters_minimum_occurrences["tenantuserUpdateUserRoleBulk:::Tenantuserv3UpdateUserRoleBulkRequest"]=1
operation_parameters_minimum_occurrences["getLinkedVendor:::vendorId"]=1
operation_parameters_minimum_occurrences["getSingleLinkedVendor:::vendorId"]=1
operation_parameters_minimum_occurrences["listLinkedVendorDataStores:::vendorId"]=1
operation_parameters_minimum_occurrences["listLinkedVendorDataStores:::filter"]=0
operation_parameters_minimum_occurrences["listLinkedVendorDataStores:::sort"]=0
operation_parameters_minimum_occurrences["listLinkedVendorDataStores:::pageSize"]=0
operation_parameters_minimum_occurrences["listLinkedVendorDataStores:::nextToken"]=0
operation_parameters_minimum_occurrences["listTrustedAssets:::filter"]=0
operation_parameters_minimum_occurrences["universalConnectorManagerUploadPlugin:::Universalconnectormanagerv3UploadPluginRequest"]=1
operation_parameters_minimum_occurrences["workflowCreateCase:::Workflowv3CreateCaseRequest"]=1
operation_parameters_minimum_occurrences["workflowCreateTask:::case_id"]=1
operation_parameters_minimum_occurrences["workflowCreateTask:::Workflowv3CreateTaskRequest"]=1
operation_parameters_minimum_occurrences["workflowGetCases:::case_id"]=0
operation_parameters_minimum_occurrences["workflowGetCases:::sort_by"]=0
operation_parameters_minimum_occurrences["workflowGetCases:::offset"]=0
operation_parameters_minimum_occurrences["workflowGetCases:::limit"]=0
operation_parameters_minimum_occurrences["workflowGetCasesCount:::Workflowv3GetCasesCountRequest"]=1
operation_parameters_minimum_occurrences["workflowGetFilename:::case_id"]=1
operation_parameters_minimum_occurrences["workflowGetFilename:::task_id"]=1
operation_parameters_minimum_occurrences["workflowGetJobsCount:::case_id"]=1
operation_parameters_minimum_occurrences["workflowGetJobsCount:::Workflowv3GetJobsCountRequest"]=1
operation_parameters_minimum_occurrences["workflowGetReportResult:::case_id"]=1
operation_parameters_minimum_occurrences["workflowGetReportResult:::task_id"]=1
operation_parameters_minimum_occurrences["workflowGetReportResult:::offset"]=0
operation_parameters_minimum_occurrences["workflowGetReportResult:::limit"]=0
operation_parameters_minimum_occurrences["workflowGetTasks:::case_id"]=1
operation_parameters_minimum_occurrences["workflowGetTasks:::task_id"]=0
operation_parameters_minimum_occurrences["workflowGetTasksCount:::case_id"]=1
operation_parameters_minimum_occurrences["workflowGetTasksCount:::Workflowv3GetTasksCountRequest"]=1
operation_parameters_minimum_occurrences["workflowSearchCases:::Workflowv3SearchCasesRequest"]=1
operation_parameters_minimum_occurrences["workflowSearchReports:::Workflowv3SearchCasesRequest"]=1
operation_parameters_minimum_occurrences["workflowSearchTasks:::case_id"]=1
operation_parameters_minimum_occurrences["workflowSearchTasks:::Workflowv3SearchTasksRequest"]=1
operation_parameters_minimum_occurrences["workflowUpdateCases:::Workflowv3UpdateCasesRequest"]=1
operation_parameters_minimum_occurrences["workflowUpdateTasks:::case_id"]=1
operation_parameters_minimum_occurrences["workflowUpdateTasks:::Workflowv3UpdateTasksRequest"]=1

##
# This array stores the maximum number of allowed occurrences for parameter
# 1 - single value
# 2 - 2 values
# N - N values
# 0 - unlimited
declare -A operation_parameters_maximum_occurrences
operation_parameters_maximum_occurrences["analyticsEventsServiceDeleteCacheKey:::cache_key"]=0
operation_parameters_maximum_occurrences["analyticsEventsServiceDeleteCacheKey:::Analyticseventsv3DeleteCacheKeyRequest"]=0
operation_parameters_maximum_occurrences["analyticsEventsServicePostQSAdvisorRisk:::Analyticseventsv3PostQSAdvisorRiskRequest"]=0
operation_parameters_maximum_occurrences["assetsServiceAssetIngestion:::Assetsv3AssetIngestionRequest"]=0
operation_parameters_maximum_occurrences["assetsServiceAssetIngestionManualTrigger:::body"]=0
operation_parameters_maximum_occurrences["assetsServiceClonePolicy:::policy_id"]=0
operation_parameters_maximum_occurrences["assetsServiceClonePolicy:::Assetsv3ClonePolicyRequest"]=0
operation_parameters_maximum_occurrences["assetsServiceCreateUpdatePolicy:::Assetsv3CreateUpdatePolicyRequest"]=0
operation_parameters_maximum_occurrences["assetsServiceDeleteFilterTemplateForAssets:::template_id"]=0
operation_parameters_maximum_occurrences["assetsServiceDeleteFilterTemplateForAssets:::Assetsv3AssetFilterTemplateRequest"]=0
operation_parameters_maximum_occurrences["assetsServiceDeletePolicies:::policy_ids"]=0
operation_parameters_maximum_occurrences["assetsServiceFetchAssetChangeLog:::Assetsv3FetchAssetChangeLogRequest"]=0
operation_parameters_maximum_occurrences["assetsServiceFetchAssetDashboard:::widget_type"]=0
operation_parameters_maximum_occurrences["assetsServiceFetchAssetDashboard:::date_range.start"]=0
operation_parameters_maximum_occurrences["assetsServiceFetchAssetDashboard:::date_range.end"]=0
operation_parameters_maximum_occurrences["assetsServiceFetchAssetDashboard:::date_range.type"]=0
operation_parameters_maximum_occurrences["assetsServiceFetchAssetDashboard:::date_range.key"]=0
operation_parameters_maximum_occurrences["assetsServiceFetchAssetDashboard:::date_range.error"]=0
operation_parameters_maximum_occurrences["assetsServiceFetchAssetDashboard:::date_range.start_number"]=0
operation_parameters_maximum_occurrences["assetsServiceFetchAssetDashboard:::date_range.start_unit"]=0
operation_parameters_maximum_occurrences["assetsServiceFetchAssetDashboard:::date_range.end_number"]=0
operation_parameters_maximum_occurrences["assetsServiceFetchAssetDashboard:::date_range.end_unit"]=0
operation_parameters_maximum_occurrences["assetsServiceFetchAssetDashboard:::timeline_value_selected"]=0
operation_parameters_maximum_occurrences["assetsServiceFetchAssetDashboard:::tag_id"]=0
operation_parameters_maximum_occurrences["assetsServiceFetchAssetList:::Assetsv3FetchAssetListRequest"]=0
operation_parameters_maximum_occurrences["assetsServiceFetchAssetsForMergeSplit:::asset_id"]=0
operation_parameters_maximum_occurrences["assetsServiceFetchAssetsForMergeSplit:::page_number"]=0
operation_parameters_maximum_occurrences["assetsServiceFetchAssetsForMergeSplit:::page_size"]=0
operation_parameters_maximum_occurrences["assetsServiceFetchAssetsForMergeSplit:::action"]=0
operation_parameters_maximum_occurrences["assetsServiceFetchAssetsForMergeSplit:::search_key"]=0
operation_parameters_maximum_occurrences["assetsServiceFindAssetName:::asset_name"]=0
operation_parameters_maximum_occurrences["assetsServiceGetAssetOverview:::asset_id"]=0
operation_parameters_maximum_occurrences["assetsServiceGetAssetOverview:::page_number"]=0
operation_parameters_maximum_occurrences["assetsServiceGetAssetOverview:::size"]=0
operation_parameters_maximum_occurrences["assetsServiceGetAssetOverview:::widget"]=0
operation_parameters_maximum_occurrences["assetsServiceGetAssetOverview:::ip"]=0
operation_parameters_maximum_occurrences["assetsServiceGetAssetOverview:::host"]=0
operation_parameters_maximum_occurrences["assetsServiceGetAssetOverview:::database"]=0
operation_parameters_maximum_occurrences["assetsServiceGetAssetOverview:::asset_entity_type"]=0
operation_parameters_maximum_occurrences["assetsServiceGetAssetTopology:::Assetsv3GetAssetTopologyRequest"]=0
operation_parameters_maximum_occurrences["assetsServiceGetFilterTemplateForAssets:::template_id"]=0
operation_parameters_maximum_occurrences["assetsServiceListRule:::policy_id"]=0
operation_parameters_maximum_occurrences["assetsServiceListTagDomains:::dom_grouper"]=0
operation_parameters_maximum_occurrences["assetsServiceListTagDomains:::purpose"]=0
operation_parameters_maximum_occurrences["assetsServiceListTagDomains:::need_tag"]=0
operation_parameters_maximum_occurrences["assetsServiceListTags:::asset_id"]=0
operation_parameters_maximum_occurrences["assetsServiceMergeOrSplitAssets:::Assetsv3MergeOrSplitAssetsRequest"]=0
operation_parameters_maximum_occurrences["assetsServiceSaveAssignedTags:::Assetsv3SaveAssignedTagsRequest"]=0
operation_parameters_maximum_occurrences["assetsServiceSaveTagConceptData:::Assetsv3SaveTagConceptDataRequest"]=0
operation_parameters_maximum_occurrences["assetsServiceSaveTagDomainData:::Assetsv3SaveTagDomainDataRequest"]=0
operation_parameters_maximum_occurrences["assetsServiceSaveUpdateFilterTemplateForAssets:::Assetsv3SaveUpdateFilterTemplateRequest"]=0
operation_parameters_maximum_occurrences["assetsServiceSetBannerState:::Assetsv3SetBannerStateRequest"]=0
operation_parameters_maximum_occurrences["assetsServiceUpdateAssetName:::Assetsv3UpdateAssetNameRequest"]=0
operation_parameters_maximum_occurrences["assetsServiceUpdatePolicy:::Assetsv3UpdatePolicyRequest"]=0
operation_parameters_maximum_occurrences["auditServiceGetActivityRecords:::start_time"]=0
operation_parameters_maximum_occurrences["auditServiceGetActivityRecords:::end_time"]=0
operation_parameters_maximum_occurrences["auditServiceGetActivityRecords:::uid"]=0
operation_parameters_maximum_occurrences["auditServiceGetActivityRecords:::action_taken"]=0
operation_parameters_maximum_occurrences["auditServiceGetActivityRecords:::context"]=0
operation_parameters_maximum_occurrences["auditServiceGetActivityRecords:::changes_made"]=0
operation_parameters_maximum_occurrences["auditServiceGetActivityRecords:::performed_by"]=0
operation_parameters_maximum_occurrences["auditServiceGetActivityRecords:::context_description"]=0
operation_parameters_maximum_occurrences["auditServiceGetActivityRecords:::query"]=0
operation_parameters_maximum_occurrences["auditServiceGetActivityRecords:::offset"]=0
operation_parameters_maximum_occurrences["auditServiceGetActivityRecords:::limit"]=0
operation_parameters_maximum_occurrences["auditServiceGetActivityRecords:::filter"]=0
operation_parameters_maximum_occurrences["auditServicePutDownloadActivityRecord:::Auditv3PutActivityRecordRequest"]=0
operation_parameters_maximum_occurrences["authServerServiceCreateOauthClient:::AuthserverCreateOauthClientRequest"]=0
operation_parameters_maximum_occurrences["authServerServiceDeleteOauthClient:::client_id"]=0
operation_parameters_maximum_occurrences["authServerServiceGetOauthClient:::client_id"]=0
operation_parameters_maximum_occurrences["addAnalyzedRegion:::AddAnalyzedRegionRequest"]=0
operation_parameters_maximum_occurrences["addCloudAccounts:::AddCloudAccountsRequest"]=0
operation_parameters_maximum_occurrences["generateAzureAuthUrl:::tenantId"]=0
operation_parameters_maximum_occurrences["generateSnowflakeAuthUrl:::ClientInfo"]=0
operation_parameters_maximum_occurrences["getAnalyzedRegionStatus:::cloudProvider"]=0
operation_parameters_maximum_occurrences["getAnalyzedRegionStatus:::region"]=0
operation_parameters_maximum_occurrences["getCloudAccountInstallationStatus:::cloudProvider"]=0
operation_parameters_maximum_occurrences["getCloudAccountInstallationStatus:::cloudAccountId"]=0
operation_parameters_maximum_occurrences["getRefreshTokenExpiry:::providerId"]=0
operation_parameters_maximum_occurrences["removeAccounts:::accountIds"]=0
operation_parameters_maximum_occurrences["removeAccounts:::serviceProvider"]=0
operation_parameters_maximum_occurrences["removeAccountsInstructions:::accountIds"]=0
operation_parameters_maximum_occurrences["removeAccountsInstructions:::serviceProvider"]=0
operation_parameters_maximum_occurrences["submitGoogleWorkspaceAdminEmail:::SubmitAdminEmailParams"]=0
operation_parameters_maximum_occurrences["submitOffice365TenantInfo:::TenantInfo"]=0
operation_parameters_maximum_occurrences["submitSlackAuthCode:::SubmitAuthCode"]=0
operation_parameters_maximum_occurrences["submitSnowflakeAuthCode:::AuthInfo"]=0
operation_parameters_maximum_occurrences["complianceAcceleratorCreateWorkspace:::Complianceacceleratorv3CreateWorkspaceRequest"]=0
operation_parameters_maximum_occurrences["complianceAcceleratorDeleteComplianceWorkspaces:::regulations"]=0
operation_parameters_maximum_occurrences["complianceAcceleratorDeleteComplianceWorkspaces:::deleteAll"]=0
operation_parameters_maximum_occurrences["complianceAcceleratorHydrateWorkspace:::Complianceacceleratorv3HydrateComplianceWorkspacesRequest"]=0
operation_parameters_maximum_occurrences["complianceAcceleratorStoreComplianceInfo:::Complianceacceleratorv3StoreComplianceInfoRequest"]=0
operation_parameters_maximum_occurrences["connectionsServiceCreateConnectionsAccounts:::Connectionsv3CreateConnectionsAccountsRequest"]=0
operation_parameters_maximum_occurrences["connectionsServiceCreateConnectionsConfigs:::Connectionsv3CreateConnectionsConfigsRequest"]=0
operation_parameters_maximum_occurrences["connectionsServiceCreatePlugin:::Connectionsv3CreatePluginRequest"]=0
operation_parameters_maximum_occurrences["connectionsServiceCreateSettings:::Connectionsv3CreateSettingsRequest"]=0
operation_parameters_maximum_occurrences["connectionsServiceDeleteConnectionsAccounts:::account_id"]=0
operation_parameters_maximum_occurrences["connectionsServiceDeleteConnectionsConfigs:::connection_id"]=0
operation_parameters_maximum_occurrences["connectionsServiceDeleteConnector:::connection_id"]=0
operation_parameters_maximum_occurrences["connectionsServiceDeletePlugin:::id"]=0
operation_parameters_maximum_occurrences["connectionsServiceGetConnectionsAccounts:::account_id"]=0
operation_parameters_maximum_occurrences["connectionsServiceGetConnectionsAccounts:::access_key"]=0
operation_parameters_maximum_occurrences["connectionsServiceGetConnectionsConfigs:::type"]=0
operation_parameters_maximum_occurrences["connectionsServiceGetConnectionsConfigs:::connection_id"]=0
operation_parameters_maximum_occurrences["connectionsServiceGetConnectionsWithFilters:::Connectionsv3GetConnectionsWithFiltersRequest"]=0
operation_parameters_maximum_occurrences["connectionsServiceGetPlugins:::id"]=0
operation_parameters_maximum_occurrences["connectionsServicePartialUpdateConnectors:::Connectionsv3PartialUpdateConnectorsRequest"]=0
operation_parameters_maximum_occurrences["connectionsServicePostStapCommand:::Connectionsv3StapCommandRequest"]=0
operation_parameters_maximum_occurrences["connectionsServiceUpdateBannerState:::Connectionsv3UpdateBannerStateRequest"]=0
operation_parameters_maximum_occurrences["connectionsServiceUpdateConnectionsAccounts:::Connectionsv3UpdateConnectionsAccountsRequest"]=0
operation_parameters_maximum_occurrences["connectionsServiceUpdateConnectionsConfigs:::Connectionsv3UpdateConnectionsConfigsRequest"]=0
operation_parameters_maximum_occurrences["connectionsServiceUpdateConnectors:::Connectionsv3UpdateConnectorsRequest"]=0
operation_parameters_maximum_occurrences["connectionsServiceUpdatePlugin:::id"]=0
operation_parameters_maximum_occurrences["connectionsServiceUpdatePlugin:::Connectionsv3UpdatePluginRequest"]=0
operation_parameters_maximum_occurrences["connectionsServiceUpdateSettings:::Connectionsv3UpdateSettingsRequest"]=0
operation_parameters_maximum_occurrences["dashboardsServiceCreateDashboard:::Dashboardsv3Dashboard"]=0
operation_parameters_maximum_occurrences["dashboardsServiceDeleteDashboard:::dashboard_id"]=0
operation_parameters_maximum_occurrences["dashboardsServiceDeleteDashboard:::Dashboardsv3DeleteDashboardRequest"]=0
operation_parameters_maximum_occurrences["dashboardsServiceUpdateDashboard:::dashboard_id"]=0
operation_parameters_maximum_occurrences["dashboardsServiceUpdateDashboard:::Dashboardsv3UpdateDashboardRequest"]=0
operation_parameters_maximum_occurrences["getActualFlow:::id"]=0
operation_parameters_maximum_occurrences["getActualFlowsSummary:::filter"]=0
operation_parameters_maximum_occurrences["getPotentialFlow:::flowId"]=0
operation_parameters_maximum_occurrences["getPotentialFlowPath:::flowPathId"]=0
operation_parameters_maximum_occurrences["getPotentialFlowsSummary:::filter"]=0
operation_parameters_maximum_occurrences["listActualFlowPaths:::sort"]=0
operation_parameters_maximum_occurrences["listActualFlowPaths:::filter"]=0
operation_parameters_maximum_occurrences["listActualFlowPaths:::pageSize"]=0
operation_parameters_maximum_occurrences["listActualFlowPaths:::nextToken"]=0
operation_parameters_maximum_occurrences["listActualFlows:::sort"]=0
operation_parameters_maximum_occurrences["listActualFlows:::filter"]=0
operation_parameters_maximum_occurrences["listActualFlows:::pageSize"]=0
operation_parameters_maximum_occurrences["listActualFlows:::nextToken"]=0
operation_parameters_maximum_occurrences["listPotentialFlows:::filter"]=0
operation_parameters_maximum_occurrences["listPotentialFlows:::pageSize"]=0
operation_parameters_maximum_occurrences["listPotentialFlows:::nextToken"]=0
operation_parameters_maximum_occurrences["listPotentialFlowsPaths:::filter"]=0
operation_parameters_maximum_occurrences["listPotentialFlowsPaths:::pageSize"]=0
operation_parameters_maximum_occurrences["listPotentialFlowsPaths:::nextToken"]=0
operation_parameters_maximum_occurrences["getDataResource:::dataResourceId"]=0
operation_parameters_maximum_occurrences["getDataResourcesSummary:::dataStoreId"]=0
operation_parameters_maximum_occurrences["getDataResourcesSummary:::filter"]=0
operation_parameters_maximum_occurrences["listDataResources:::dataStoreId"]=0
operation_parameters_maximum_occurrences["listDataResources:::filter"]=0
operation_parameters_maximum_occurrences["listDataResources:::sort"]=0
operation_parameters_maximum_occurrences["listDataResources:::pageSize"]=0
operation_parameters_maximum_occurrences["listDataResources:::nextToken"]=0
operation_parameters_maximum_occurrences["listDataResourcesNames:::prefix"]=0
operation_parameters_maximum_occurrences["listDataResourcesNames:::dataStoreId"]=0
operation_parameters_maximum_occurrences["removeResource:::dataResourceId"]=0
operation_parameters_maximum_occurrences["removeResource:::dataStoreId"]=0
operation_parameters_maximum_occurrences["updateResourceReviewStatus:::dataResourceId"]=0
operation_parameters_maximum_occurrences["updateResourceReviewStatus:::UpdateResourceReviewBody"]=0
operation_parameters_maximum_occurrences["getSensitivitiesSummary:::filter"]=0
operation_parameters_maximum_occurrences["getSensitivity:::sensitivityId"]=0
operation_parameters_maximum_occurrences["listSensitivities:::filter"]=0
operation_parameters_maximum_occurrences["listSensitivities:::sort"]=0
operation_parameters_maximum_occurrences["listSensitivities:::pageSize"]=0
operation_parameters_maximum_occurrences["listSensitivities:::nextToken"]=0
operation_parameters_maximum_occurrences["getDataStore:::dataStoreId"]=0
operation_parameters_maximum_occurrences["getDataStoresSummary:::filter"]=0
operation_parameters_maximum_occurrences["listAllDataStoresLabels:::prefix"]=0
operation_parameters_maximum_occurrences["listAllDataStoresLabels:::maxResults"]=0
operation_parameters_maximum_occurrences["listDataStores:::filter"]=0
operation_parameters_maximum_occurrences["listDataStores:::sort"]=0
operation_parameters_maximum_occurrences["listDataStores:::pageSize"]=0
operation_parameters_maximum_occurrences["listDataStores:::nextToken"]=0
operation_parameters_maximum_occurrences["listDataStoresCloudTagsKeys:::prefix"]=0
operation_parameters_maximum_occurrences["listDataStoresCloudTagsKeys:::maxResults"]=0
operation_parameters_maximum_occurrences["listDataStoresCloudTagsValues:::prefix"]=0
operation_parameters_maximum_occurrences["listDataStoresCloudTagsValues:::tagKey"]=0
operation_parameters_maximum_occurrences["listDataStoresCloudTagsValues:::maxResults"]=0
operation_parameters_maximum_occurrences["listDataStoresNames:::prefix"]=0
operation_parameters_maximum_occurrences["rescanDataStore:::RescanDataStoreRequest"]=0
operation_parameters_maximum_occurrences["setDataStoreLabel:::dataStoreId"]=0
operation_parameters_maximum_occurrences["setDataStoreLabel:::SetDataStoreLabelRequest"]=0
operation_parameters_maximum_occurrences["updateDatastoreCustodian:::UpdateCustodianBody"]=0
operation_parameters_maximum_occurrences["addVulnerabilityStatusComment:::vulnerabilityId"]=0
operation_parameters_maximum_occurrences["addVulnerabilityStatusComment:::statusId"]=0
operation_parameters_maximum_occurrences["addVulnerabilityStatusComment:::AddCommentBody"]=0
operation_parameters_maximum_occurrences["getVulnerabilitiesSummary:::filter"]=0
operation_parameters_maximum_occurrences["getVulnerability:::vulnerabilityId"]=0
operation_parameters_maximum_occurrences["listVulnerabilities:::filter"]=0
operation_parameters_maximum_occurrences["listVulnerabilities:::sort"]=0
operation_parameters_maximum_occurrences["listVulnerabilities:::pageSize"]=0
operation_parameters_maximum_occurrences["listVulnerabilities:::nextToken"]=0
operation_parameters_maximum_occurrences["listVulnerabilitiesByDataStore:::filter"]=0
operation_parameters_maximum_occurrences["listVulnerabilitiesByDataStore:::sort"]=0
operation_parameters_maximum_occurrences["listVulnerabilitiesByDataStore:::pageSize"]=0
operation_parameters_maximum_occurrences["listVulnerabilitiesByDataStore:::nextToken"]=0
operation_parameters_maximum_occurrences["removeVulnerabilityStatusComment:::vulnerabilityId"]=0
operation_parameters_maximum_occurrences["removeVulnerabilityStatusComment:::statusId"]=0
operation_parameters_maximum_occurrences["removeVulnerabilityStatusComment:::commentId"]=0
operation_parameters_maximum_occurrences["setVulnerabilityStatus:::vulnerabilityId"]=0
operation_parameters_maximum_occurrences["setVulnerabilityStatus:::SetVulnerabilityStatusRequest"]=0
operation_parameters_maximum_occurrences["updateVulnerabilityStatusComment:::vulnerabilityId"]=0
operation_parameters_maximum_occurrences["updateVulnerabilityStatusComment:::statusId"]=0
operation_parameters_maximum_occurrences["updateVulnerabilityStatusComment:::commentId"]=0
operation_parameters_maximum_occurrences["updateVulnerabilityStatusComment:::UpdateCommentBody"]=0
operation_parameters_maximum_occurrences["databootstrapperServiceLoadData:::Databootstrapperv3LoadDataRequest"]=0
operation_parameters_maximum_occurrences["datamartProcessorServiceGetDatamartInfo:::ingestion_id"]=0
operation_parameters_maximum_occurrences["datamartProcessorServiceGetDatamarts:::period_start"]=0
operation_parameters_maximum_occurrences["datamartProcessorServiceGetDatamarts:::period_end"]=0
operation_parameters_maximum_occurrences["datamartProcessorServiceSendAllCompleteFilesToQueue:::body"]=0
operation_parameters_maximum_occurrences["datamartProcessorServiceStoreExtractionLogs:::request_id"]=0
operation_parameters_maximum_occurrences["datamartProcessorServiceStoreExtractionLogs:::Datamartprocessorv3DMExtractionLogsRequest"]=0
operation_parameters_maximum_occurrences["uploadDatamart:::file"]=0
operation_parameters_maximum_occurrences["ecosystemServiceCreateDataset:::Ecosystemv3CreateDatasetRequest"]=0
operation_parameters_maximum_occurrences["ecosystemServiceDataInsert:::dataset_name"]=0
operation_parameters_maximum_occurrences["ecosystemServiceDataInsert:::Ecosystemv3DataInsertRequest"]=0
operation_parameters_maximum_occurrences["ecosystemServiceDeleteDatasets:::dataset_names"]=0
operation_parameters_maximum_occurrences["ecosystemServiceGetDatasetData:::dataset_name"]=0
operation_parameters_maximum_occurrences["ecosystemServiceGetDatasetData:::offset"]=0
operation_parameters_maximum_occurrences["ecosystemServiceGetDatasetData:::limit"]=0
operation_parameters_maximum_occurrences["ecosystemServiceGetDatasetData:::return_header"]=0
operation_parameters_maximum_occurrences["ecosystemServiceGetDatasetData:::field"]=0
operation_parameters_maximum_occurrences["ecosystemServiceGetDatasetData:::value"]=0
operation_parameters_maximum_occurrences["ecosystemServiceGetDatasetData:::sort_field"]=0
operation_parameters_maximum_occurrences["ecosystemServiceGetDatasetData:::sort_order"]=0
operation_parameters_maximum_occurrences["ecosystemServiceGetDatasetDetail:::dataset_name"]=0
operation_parameters_maximum_occurrences["ecosystemServiceGetDatasets:::filter.start_time"]=0
operation_parameters_maximum_occurrences["ecosystemServiceGetDatasets:::filter.end_time"]=0
operation_parameters_maximum_occurrences["ecosystemServiceGetDatasets:::filter.dataset_names"]=0
operation_parameters_maximum_occurrences["ecosystemServiceGetDatasets:::offset"]=0
operation_parameters_maximum_occurrences["ecosystemServiceGetDatasets:::limit"]=0
operation_parameters_maximum_occurrences["ecosystemServiceGetDatasets:::include_filter_counts"]=0
operation_parameters_maximum_occurrences["ecosystemServiceGetPurgableRows:::Ecosystemv3GetPurgableRowsRequest"]=0
operation_parameters_maximum_occurrences["ecosystemServicePurgeData:::dataset_names"]=0
operation_parameters_maximum_occurrences["featureFlagsServiceDeleteFeatureFlagOverrides:::flag_name"]=0
operation_parameters_maximum_occurrences["featureFlagsServiceDeleteFeatureFlagOverrides:::tenant_id"]=0
operation_parameters_maximum_occurrences["featureFlagsServiceGetFeatureFlagOverrides:::tenant_id"]=0
operation_parameters_maximum_occurrences["featureFlagsServiceGetFeatureFlagOverrides:::flag_names"]=0
operation_parameters_maximum_occurrences["featureFlagsServiceGetFeatureFlags:::tenant_id"]=0
operation_parameters_maximum_occurrences["featureFlagsServiceGetFeatureFlags:::flag_names"]=0
operation_parameters_maximum_occurrences["featureFlagsServiceUpdateFeatureFlagOverrides:::Featureflagsv3UpdateFeatureFlagOverridesRequest"]=0
operation_parameters_maximum_occurrences["groupBuilderCancelImportGroup:::group_ids"]=0
operation_parameters_maximum_occurrences["groupBuilderCreateGroup:::Groupbuilderv3CreateGroupRequest"]=0
operation_parameters_maximum_occurrences["groupBuilderDeleteGroup:::group_ids"]=0
operation_parameters_maximum_occurrences["groupBuilderEditGroup:::group_id"]=0
operation_parameters_maximum_occurrences["groupBuilderEditGroup:::Groupbuilderv3EditGroupRequest"]=0
operation_parameters_maximum_occurrences["groupBuilderExportGroup:::Groupbuilderv3GetExportGroupRequest"]=0
operation_parameters_maximum_occurrences["groupBuilderGetGroupDetails:::group_id"]=0
operation_parameters_maximum_occurrences["groupBuilderGetGroupDetails:::filter"]=0
operation_parameters_maximum_occurrences["groupBuilderGetGroupDetails:::order"]=0
operation_parameters_maximum_occurrences["groupBuilderGetGroupMembers:::Groupbuilderv3GetGroupMembersRequest"]=0
operation_parameters_maximum_occurrences["groupBuilderGetGroupSyncMapping:::central_manager_id"]=0
operation_parameters_maximum_occurrences["groupBuilderGetGroups:::do_not_include_member_count"]=0
operation_parameters_maximum_occurrences["groupBuilderGetGroups:::only_full_access"]=0
operation_parameters_maximum_occurrences["groupBuilderGetGroups:::non_nested"]=0
operation_parameters_maximum_occurrences["groupBuilderGetImportGroups:::central_manager_id"]=0
operation_parameters_maximum_occurrences["groupBuilderImportGroup:::Groupbuilderv3ImportGroupRequest"]=0
operation_parameters_maximum_occurrences["groupBuilderRefreshGroups:::Groupbuilderv3RefreshGroupsRequest"]=0
operation_parameters_maximum_occurrences["groupBuilderResetGroups:::Groupbuilderv3ResetGroupsRequest"]=0
operation_parameters_maximum_occurrences["groupBuilderStoreGroupMembersGdp:::central_manager_id"]=0
operation_parameters_maximum_occurrences["groupBuilderStoreGroupMembersGdp:::Groupbuilderv3StoreGroupMembersGdpRequest"]=0
operation_parameters_maximum_occurrences["groupBuilderStoreGroupsGdp:::central_manager_id"]=0
operation_parameters_maximum_occurrences["groupBuilderStoreGroupsGdp:::Groupbuilderv3GetGroupsRequestGdp"]=0
operation_parameters_maximum_occurrences["guardiumConnectorAddCM:::Guardiumconnectorv3AddCMRequest"]=0
operation_parameters_maximum_occurrences["guardiumConnectorAddDatamarts:::central_manager_id"]=0
operation_parameters_maximum_occurrences["guardiumConnectorAddDatamarts:::Guardiumconnectorv3AddDatamartsRequest"]=0
operation_parameters_maximum_occurrences["guardiumConnectorAddDmExclusion:::Guardiumconnectorv3AddDmExclusionRequest"]=0
operation_parameters_maximum_occurrences["guardiumConnectorAddTask:::central_manager_id"]=0
operation_parameters_maximum_occurrences["guardiumConnectorAddTask:::Guardiumconnectorv3AddTaskRequest"]=0
operation_parameters_maximum_occurrences["guardiumConnectorBlockUser:::Guardiumconnectorv3BlockUserRequest"]=0
operation_parameters_maximum_occurrences["guardiumConnectorConfigureAggregatorExport:::central_manager_id"]=0
operation_parameters_maximum_occurrences["guardiumConnectorConfigureAggregatorExport:::Guardiumconnectorv3ConfigureAggregatorExportRequest"]=0
operation_parameters_maximum_occurrences["guardiumConnectorConfigureCollectorExport:::central_manager_id"]=0
operation_parameters_maximum_occurrences["guardiumConnectorConfigureCollectorExport:::Guardiumconnectorv3ConfigureCollectorExportRequest"]=0
operation_parameters_maximum_occurrences["guardiumConnectorConfigureStreaming:::central_manager_id"]=0
operation_parameters_maximum_occurrences["guardiumConnectorConfigureStreaming:::Guardiumconnectorv3ConfigureStreamingRequest"]=0
operation_parameters_maximum_occurrences["guardiumConnectorDatamartVersionCheck:::central_manager_id"]=0
operation_parameters_maximum_occurrences["guardiumConnectorDatamartVersionCheck:::Guardiumconnectorv3DatamartVersionRequest"]=0
operation_parameters_maximum_occurrences["guardiumConnectorDeleteCM:::central_manager_id"]=0
operation_parameters_maximum_occurrences["guardiumConnectorDeleteCM:::force"]=0
operation_parameters_maximum_occurrences["guardiumConnectorDeleteDmExclusion:::datamart"]=0
operation_parameters_maximum_occurrences["guardiumConnectorDeleteTask:::central_manager_id"]=0
operation_parameters_maximum_occurrences["guardiumConnectorDeleteTask:::task_id"]=0
operation_parameters_maximum_occurrences["guardiumConnectorDeleteTasks:::central_manager_id"]=0
operation_parameters_maximum_occurrences["guardiumConnectorGetAggregatorsConfig:::central_manager_id"]=0
operation_parameters_maximum_occurrences["guardiumConnectorGetCMs:::run_additional_checks"]=0
operation_parameters_maximum_occurrences["guardiumConnectorGetCollectorsConfig:::central_manager_id"]=0
operation_parameters_maximum_occurrences["guardiumConnectorGetDatamarts:::central_manager_id"]=0
operation_parameters_maximum_occurrences["guardiumConnectorGetGdpPolicyInfo:::central_manager_id"]=0
operation_parameters_maximum_occurrences["guardiumConnectorGetGdpPolicyInfo:::policy_name"]=0
operation_parameters_maximum_occurrences["guardiumConnectorGetGdpPolicySummaries:::central_manager_id"]=0
operation_parameters_maximum_occurrences["guardiumConnectorGetHealthInfo:::central_manager_id"]=0
operation_parameters_maximum_occurrences["guardiumConnectorGetHealthInfo:::use_fallback"]=0
operation_parameters_maximum_occurrences["guardiumConnectorGetLatestDMExtractionProfile:::central_manager_id"]=0
operation_parameters_maximum_occurrences["guardiumConnectorGetStreamingStatus:::central_manager_id"]=0
operation_parameters_maximum_occurrences["guardiumConnectorGetSyncDMs:::central_manager_id"]=0
operation_parameters_maximum_occurrences["guardiumConnectorGetTasks:::central_manager_id"]=0
operation_parameters_maximum_occurrences["guardiumConnectorGetTasks:::task_id"]=0
operation_parameters_maximum_occurrences["guardiumConnectorGetTasks:::task_type"]=0
operation_parameters_maximum_occurrences["guardiumConnectorGetTasks:::key_object"]=0
operation_parameters_maximum_occurrences["guardiumConnectorRunGDPReport:::central_manager_id"]=0
operation_parameters_maximum_occurrences["guardiumConnectorRunGDPReport:::Guardiumconnectorv3RunGDPReportRequest"]=0
operation_parameters_maximum_occurrences["guardiumConnectorSetupCM:::Guardiumconnectorv3SetupCMRequest"]=0
operation_parameters_maximum_occurrences["guardiumConnectorSetupDatamarts:::central_manager_id"]=0
operation_parameters_maximum_occurrences["guardiumConnectorSetupDatamarts:::Guardiumconnectorv3SetupDatamartsRequest"]=0
operation_parameters_maximum_occurrences["guardiumConnectorTaskError:::central_manager_id"]=0
operation_parameters_maximum_occurrences["guardiumConnectorTaskError:::Guardiumconnectorv3TaskErrorRequest"]=0
operation_parameters_maximum_occurrences["guardiumConnectorTestDatabaseConnection:::Guardiumconnectorv3DatabaseConnectionStringRequest"]=0
operation_parameters_maximum_occurrences["guardiumConnectorUpdateDmExclusion:::Guardiumconnectorv3UpdateDmExclusionRequest"]=0
operation_parameters_maximum_occurrences["guardiumConnectorUpdateStreaming:::central_manager_id"]=0
operation_parameters_maximum_occurrences["guardiumConnectorUpdateStreaming:::Guardiumconnectorv3UpdateStreamingRequest"]=0
operation_parameters_maximum_occurrences["guardiumConnectorUpdateTask:::central_manager_id"]=0
operation_parameters_maximum_occurrences["guardiumConnectorUpdateTask:::task_id"]=0
operation_parameters_maximum_occurrences["guardiumConnectorUpdateTask:::Guardiumconnectorv3UpdateTaskRequest"]=0
operation_parameters_maximum_occurrences["healthCollectorGetDataWarehouseUsage:::type"]=0
operation_parameters_maximum_occurrences["healthCollectorGetDataWarehouseUsage:::start_time"]=0
operation_parameters_maximum_occurrences["healthCollectorGetDataWarehouseUsage:::end_time"]=0
operation_parameters_maximum_occurrences["healthCollectorGetHistoricalHealthInfo:::unit"]=0
operation_parameters_maximum_occurrences["healthCollectorGetHistoricalHealthInfo:::cm_id"]=0
operation_parameters_maximum_occurrences["healthCollectorGetHistoricalHealthInfo:::start_time"]=0
operation_parameters_maximum_occurrences["healthCollectorGetHistoricalHealthInfo:::end_time"]=0
operation_parameters_maximum_occurrences["healthCollectorGetObjectStorageUsage:::type"]=0
operation_parameters_maximum_occurrences["healthCollectorGetObjectStorageUsage:::start_time"]=0
operation_parameters_maximum_occurrences["healthCollectorGetObjectStorageUsage:::end_time"]=0
operation_parameters_maximum_occurrences["healthCollectorGetPVCUsage:::type"]=0
operation_parameters_maximum_occurrences["healthCollectorGetPVCUsage:::start_time"]=0
operation_parameters_maximum_occurrences["healthCollectorGetPVCUsage:::end_time"]=0
operation_parameters_maximum_occurrences["healthCollectorGetPodRestarts:::type"]=0
operation_parameters_maximum_occurrences["healthCollectorGetPodRestarts:::start_time"]=0
operation_parameters_maximum_occurrences["healthCollectorGetPodRestarts:::end_time"]=0
operation_parameters_maximum_occurrences["healthCollectorGetStreamsIngestion:::type"]=0
operation_parameters_maximum_occurrences["healthCollectorGetStreamsIngestion:::start_time"]=0
operation_parameters_maximum_occurrences["healthCollectorGetStreamsIngestion:::end_time"]=0
operation_parameters_maximum_occurrences["healthCollectorGetTopGDPCollectors:::type"]=0
operation_parameters_maximum_occurrences["healthCollectorGetTopGDPCollectors:::start_time"]=0
operation_parameters_maximum_occurrences["healthCollectorGetTopGDPCollectors:::end_time"]=0
operation_parameters_maximum_occurrences["healthCollectorStoreHealthInfo:::central_manager_id"]=0
operation_parameters_maximum_occurrences["healthCollectorStoreHealthInfo:::Healthcollectorv3StoreHealthInfoRequest"]=0
operation_parameters_maximum_occurrences["jumpboxServiceAuthorize:::Jumpboxv3AuthorizeRequest"]=0
operation_parameters_maximum_occurrences["jumpboxServiceDeleteTenant:::tenant_id"]=0
operation_parameters_maximum_occurrences["jumpboxServiceDeleteTenant:::is_permanent_delete"]=0
operation_parameters_maximum_occurrences["jumpboxServiceDeleteTenant:::async"]=0
operation_parameters_maximum_occurrences["jumpboxServiceDeleteUser:::user_id"]=0
operation_parameters_maximum_occurrences["jumpboxServiceGetTenant:::tenant_id"]=0
operation_parameters_maximum_occurrences["jumpboxServiceGetTenant:::include_inactive"]=0
operation_parameters_maximum_occurrences["jumpboxServiceGetTenant:::include_not_ready"]=0
operation_parameters_maximum_occurrences["jumpboxServiceGetTenants:::uid"]=0
operation_parameters_maximum_occurrences["jumpboxServiceGetTenants:::external_id"]=0
operation_parameters_maximum_occurrences["jumpboxServiceGetTenants:::include_inactive"]=0
operation_parameters_maximum_occurrences["jumpboxServiceGetTenants:::include_not_ready"]=0
operation_parameters_maximum_occurrences["jumpboxServiceGetUsers:::uid"]=0
operation_parameters_maximum_occurrences["jumpboxServicePostTenants:::Jumpboxv3PostTenantsRequest"]=0
operation_parameters_maximum_occurrences["jumpboxServicePostUsers:::Jumpboxv3PostUsersBulkRequest"]=0
operation_parameters_maximum_occurrences["jumpboxServiceSearchUsers:::Jumpboxv3SearchUsersRequest"]=0
operation_parameters_maximum_occurrences["jumpboxServiceTestUser:::Jumpboxv3TestUserRequest"]=0
operation_parameters_maximum_occurrences["jumpboxServiceUpdateTenant:::tenant_id"]=0
operation_parameters_maximum_occurrences["jumpboxServiceUpdateTenant:::Jumpboxv3UpdateTenantRequest"]=0
operation_parameters_maximum_occurrences["jumpboxServiceUpdateUsers:::Jumpboxv3UpdateUsersBulkRequest"]=0
operation_parameters_maximum_occurrences["notificationsServiceCreateTicket:::Notificationsv3CreateTicketRequest"]=0
operation_parameters_maximum_occurrences["notificationsServiceGetFolders:::Notificationsv3GetFoldersRequest"]=0
operation_parameters_maximum_occurrences["notificationsServiceGetNotificationFilename:::notification_id"]=0
operation_parameters_maximum_occurrences["notificationsServiceGetNotificationRecord:::notification_id"]=0
operation_parameters_maximum_occurrences["notificationsServiceGetNotificationRecords:::filter.start_time"]=0
operation_parameters_maximum_occurrences["notificationsServiceGetNotificationRecords:::filter.end_time"]=0
operation_parameters_maximum_occurrences["notificationsServiceGetNotificationRecords:::filter.state"]=0
operation_parameters_maximum_occurrences["notificationsServiceGetNotificationRecords:::filter.origins"]=0
operation_parameters_maximum_occurrences["notificationsServiceGetNotificationRecords:::filter.origin_data"]=0
operation_parameters_maximum_occurrences["notificationsServiceGetNotificationRecords:::offset"]=0
operation_parameters_maximum_occurrences["notificationsServiceGetNotificationRecords:::limit"]=0
operation_parameters_maximum_occurrences["notificationsServiceGetNotificationRecords:::include_filter_counts"]=0
operation_parameters_maximum_occurrences["notificationsServiceGetTicketStatus:::ticket_id"]=0
operation_parameters_maximum_occurrences["notificationsServiceGetTicketStatus:::integration_id"]=0
operation_parameters_maximum_occurrences["notificationsServiceTestIntegration:::Notificationsv3TestIntegrationRequest"]=0
operation_parameters_maximum_occurrences["notificationsServiceUpdateNotificationRecord:::Notificationsv3UpdateNotificationRecordRequest"]=0
operation_parameters_maximum_occurrences["outliersEngineGetSourceStatistics:::source.server_ip"]=0
operation_parameters_maximum_occurrences["outliersEngineGetSourceStatistics:::source.database_name"]=0
operation_parameters_maximum_occurrences["outliersEngineGetSourceStatistics:::source.db_user"]=0
operation_parameters_maximum_occurrences["outliersEngineGetSourceStatistics:::attributes_limit"]=0
operation_parameters_maximum_occurrences["outliersEngineRunSimulator:::Outliersenginev3RunSimulatorRequest"]=0
operation_parameters_maximum_occurrences["outliersEngineUpdateWorkingHoursPeriods:::Outliersenginev3UpdateWorkingHoursPeriodsRequest"]=0
operation_parameters_maximum_occurrences["outliersEngineUploadAndAnalyzePeriod:::body"]=0
operation_parameters_maximum_occurrences["outliersEngineUserClustering:::body"]=0
operation_parameters_maximum_occurrences["pipelineconfigServiceDeleteTenantResources:::tenant_id"]=0
operation_parameters_maximum_occurrences["pipelineconfigServiceDeleteTenantResources:::resource"]=0
operation_parameters_maximum_occurrences["policyBuilderClonePolicy:::policy_id"]=0
operation_parameters_maximum_occurrences["policyBuilderClonePolicy:::Policybuilderv3ClonePolicyRequest"]=0
operation_parameters_maximum_occurrences["policyBuilderCreatePolicy:::Policybuilderv3CreateUpdatePolicyRequest"]=0
operation_parameters_maximum_occurrences["policyBuilderDeleteGdpSyncEntry:::sync_ids"]=0
operation_parameters_maximum_occurrences["policyBuilderDeletePolicies:::policy_ids"]=0
operation_parameters_maximum_occurrences["policyBuilderGetPolicyDetails:::policy_id"]=0
operation_parameters_maximum_occurrences["policyBuilderGetPolicyNamesFromRuleIDs:::Policybuilderv3GetPolicyNamesFromRuleIDsRequest"]=0
operation_parameters_maximum_occurrences["policyBuilderGetReceivers:::action_id"]=0
operation_parameters_maximum_occurrences["policyBuilderGetReceivers:::validate_cache"]=0
operation_parameters_maximum_occurrences["policyBuilderGetRuleMetadata:::rule_type"]=0
operation_parameters_maximum_occurrences["policyBuilderInsertGdpPolicy:::Policybuilderv3InsertGdpPolicySyncRequest"]=0
operation_parameters_maximum_occurrences["policyBuilderInsertGdpPolicyMetaData:::central_manager_id"]=0
operation_parameters_maximum_occurrences["policyBuilderInsertGdpPolicyMetaData:::Policybuilderv3InsertGdpPolicyMetaDataRequest"]=0
operation_parameters_maximum_occurrences["policyBuilderInstallPolicies:::Policybuilderv3InstallPoliciesRequest"]=0
operation_parameters_maximum_occurrences["policyBuilderIntegrationCheck:::integration_id"]=0
operation_parameters_maximum_occurrences["policyBuilderIntegrationCheck:::template_id"]=0
operation_parameters_maximum_occurrences["policyBuilderPoliciesGroups:::group_ids"]=0
operation_parameters_maximum_occurrences["policyBuilderRuleValidation:::Policybuilderv3GetRuleValidationRequest"]=0
operation_parameters_maximum_occurrences["policyBuilderStorePoliciesGdp:::central_manager_id"]=0
operation_parameters_maximum_occurrences["policyBuilderStorePoliciesGdp:::Policybuilderv3StorePolicyGdpRequest"]=0
operation_parameters_maximum_occurrences["qSDataManagerRegisterScan:::Qspmdatamanagerv3ScanRequest"]=0
operation_parameters_maximum_occurrences["qSDataManagerRetrieveScan:::scan_id"]=0
operation_parameters_maximum_occurrences["qSPluginManagerInvokeAppProv:::plugin_id"]=0
operation_parameters_maximum_occurrences["qSPluginManagerInvokeAppProv:::Qspmpluginmanagerv3PluginRQ"]=0
operation_parameters_maximum_occurrences["qSPluginManagerInvokeExplorerV1:::plugin_id"]=0
operation_parameters_maximum_occurrences["qSPluginManagerInvokeExplorerV1:::Qspmpluginmanagerv3PluginRQ"]=0
operation_parameters_maximum_occurrences["qSPluginManagerInvokeExplorerV2:::plugin_id"]=0
operation_parameters_maximum_occurrences["qSPluginManagerInvokeExplorerV2:::Qspmpluginmanagerv3PluginRQ"]=0
operation_parameters_maximum_occurrences["qSPluginManagerInvokePlugin:::plugin_id"]=0
operation_parameters_maximum_occurrences["qSPluginManagerInvokePlugin:::Qspmpluginmanagerv3PluginRQ"]=0
operation_parameters_maximum_occurrences["qSPluginManagerInvokePolicy:::plugin_id"]=0
operation_parameters_maximum_occurrences["qSPluginManagerInvokePolicy:::Qspmpluginmanagerv3PolicyPluginRQ"]=0
operation_parameters_maximum_occurrences["qSPolicyManagerBatchStatusUpdate:::body"]=0
operation_parameters_maximum_occurrences["qSPolicyManagerCreateTicket:::Qspmpolicymanagerv3CreateTicketRequest"]=0
operation_parameters_maximum_occurrences["qSPolicyManagerProcessPolicyDimentionRecords:::Qspmpolicymanagerv3ProcessPolicyDimentionRecordsRequest"]=0
operation_parameters_maximum_occurrences["qSPolicyManagerUpdateTicketStatus:::Qspmpolicymanagerv3UpdateTicketStatusRequest"]=0
operation_parameters_maximum_occurrences["reportsRunnerGetActiveQueries:::Reportsrunnerv3GetActiveQueriesRequest"]=0
operation_parameters_maximum_occurrences["reportsRunnerGetAuditDataCount:::report_id"]=0
operation_parameters_maximum_occurrences["reportsRunnerGetAuditDataCount:::Reportsrunnerv3GetAuditDataCountRequest"]=0
operation_parameters_maximum_occurrences["reportsRunnerGetChartData:::Reportsrunnerv3GetChartDataRequest"]=0
operation_parameters_maximum_occurrences["reportsRunnerGetChartDatav2:::Reportsrunnerv3GetChartDataRequestv2"]=0
operation_parameters_maximum_occurrences["reportsRunnerGetReportColumnFacet:::Reportsrunnerv3GetReportColumnFacetRequest"]=0
operation_parameters_maximum_occurrences["reportsRunnerGetReportDataCount:::Reportsrunnerv3GetReportDataCountRequest"]=0
operation_parameters_maximum_occurrences["reportsRunnerRunAuditReport:::report_id"]=0
operation_parameters_maximum_occurrences["reportsRunnerRunAuditReport:::Reportsrunnerv3RunAuditReportRequest"]=0
operation_parameters_maximum_occurrences["reportsRunnerRunReport:::Reportsrunnerv3RunReportRequest"]=0
operation_parameters_maximum_occurrences["reportsRunnerStopQuery:::Reportsrunnerv3StopQueryRequest"]=0
operation_parameters_maximum_occurrences["reportsServiceCreateCategory:::Reportsv3CreateCategoryRequest"]=0
operation_parameters_maximum_occurrences["reportsServiceCreateChart:::Reportsv3CreateChartRequest"]=0
operation_parameters_maximum_occurrences["reportsServiceCreateChartTemplatev2:::Reportsv3CreateChartTemplatev2Request"]=0
operation_parameters_maximum_occurrences["reportsServiceCreateChartv2:::Reportsv3CreateChartv2Request"]=0
operation_parameters_maximum_occurrences["reportsServiceCreateFieldsByCategory:::Reportsv3CreateFieldsByCategoryRequest"]=0
operation_parameters_maximum_occurrences["reportsServiceCreateJoin:::Reportsv3CreateJoinRequest"]=0
operation_parameters_maximum_occurrences["reportsServiceCreateReport:::Reportsv3CreateReportRequest"]=0
operation_parameters_maximum_occurrences["reportsServiceCreateVariant:::Reportsv3CreateVariantRequest"]=0
operation_parameters_maximum_occurrences["reportsServiceDeleteCategory:::category_id"]=0
operation_parameters_maximum_occurrences["reportsServiceDeleteCategory:::table_name"]=0
operation_parameters_maximum_occurrences["reportsServiceDeleteChart:::chart_id"]=0
operation_parameters_maximum_occurrences["reportsServiceDeleteChartTemplatev2:::template_id"]=0
operation_parameters_maximum_occurrences["reportsServiceDeleteChartv2:::chart_id"]=0
operation_parameters_maximum_occurrences["reportsServiceDeleteFieldsByCategory:::header_ids"]=0
operation_parameters_maximum_occurrences["reportsServiceDeleteFieldsByCategory:::table_name"]=0
operation_parameters_maximum_occurrences["reportsServiceDeleteJoin:::join_id"]=0
operation_parameters_maximum_occurrences["reportsServiceDeleteReport:::report_id"]=0
operation_parameters_maximum_occurrences["reportsServiceDeleteVariant:::variant_id"]=0
operation_parameters_maximum_occurrences["reportsServiceGetCategories:::report_id"]=0
operation_parameters_maximum_occurrences["reportsServiceGetChartSettings:::chart_id"]=0
operation_parameters_maximum_occurrences["reportsServiceGetChartSettings:::report_id"]=0
operation_parameters_maximum_occurrences["reportsServiceGetChartSettingsv2:::chart_id"]=0
operation_parameters_maximum_occurrences["reportsServiceGetChartSettingsv2:::report_id"]=0
operation_parameters_maximum_occurrences["reportsServiceGetFieldsByCategories:::category_ids"]=0
operation_parameters_maximum_occurrences["reportsServiceGetFieldsByCategory:::category_id"]=0
operation_parameters_maximum_occurrences["reportsServiceGetFieldsByCategory:::report_id"]=0
operation_parameters_maximum_occurrences["reportsServiceGetFieldsByCategory:::table_name"]=0
operation_parameters_maximum_occurrences["reportsServiceGetJoins:::category_id"]=0
operation_parameters_maximum_occurrences["reportsServiceGetQueryByReportDefinition:::Reportsv3GetQueryByReportDefinitionRequest"]=0
operation_parameters_maximum_occurrences["reportsServiceGetQueryByReportID:::Reportsv3GetQueryByReportIDRequest"]=0
operation_parameters_maximum_occurrences["reportsServiceGetReportDefinition:::report_id"]=0
operation_parameters_maximum_occurrences["reportsServiceGetReportGroups:::groups"]=0
operation_parameters_maximum_occurrences["reportsServiceGetReportSynopsis:::report_id"]=0
operation_parameters_maximum_occurrences["reportsServiceGetReportTimestampHeader:::category_id"]=0
operation_parameters_maximum_occurrences["reportsServiceGetReportTimestampHeader:::table_names"]=0
operation_parameters_maximum_occurrences["reportsServiceGetReports:::category_id"]=0
operation_parameters_maximum_occurrences["reportsServiceGetReports:::table_name"]=0
operation_parameters_maximum_occurrences["reportsServiceGetReportsForJoin:::join_id"]=0
operation_parameters_maximum_occurrences["reportsServiceGetVariant:::variant_id"]=0
operation_parameters_maximum_occurrences["reportsServicePartialChartUpdate:::chart_id"]=0
operation_parameters_maximum_occurrences["reportsServicePartialChartUpdate:::Reportsv3PartialChartUpdateRequest"]=0
operation_parameters_maximum_occurrences["reportsServicePartialReportUpdate:::report_id"]=0
operation_parameters_maximum_occurrences["reportsServicePartialReportUpdate:::Reportsv3PartialReportUpdateRequest"]=0
operation_parameters_maximum_occurrences["reportsServiceRunVariantOperation:::Reportsv3RunVariantOperationRequest"]=0
operation_parameters_maximum_occurrences["reportsServiceTranspose:::Reportsv3TransposeRequest"]=0
operation_parameters_maximum_occurrences["reportsServiceUpdateChart:::chart_id"]=0
operation_parameters_maximum_occurrences["reportsServiceUpdateChart:::Reportsv3UpdateChartRequest"]=0
operation_parameters_maximum_occurrences["reportsServiceUpdateChartv2:::chart_id"]=0
operation_parameters_maximum_occurrences["reportsServiceUpdateChartv2:::Reportsv3UpdateChartv2Request"]=0
operation_parameters_maximum_occurrences["reportsServiceUpdateJoin:::join_id"]=0
operation_parameters_maximum_occurrences["reportsServiceUpdateJoin:::Reportsv3UpdateJoinRequest"]=0
operation_parameters_maximum_occurrences["reportsServiceUpdateReport:::report_id"]=0
operation_parameters_maximum_occurrences["reportsServiceUpdateReport:::Reportsv3UpdateReportRequest"]=0
operation_parameters_maximum_occurrences["reportsServiceUpdateVariantOverride:::variant_id"]=0
operation_parameters_maximum_occurrences["reportsServiceUpdateVariantOverride:::Reportsv3UpdateVariantOverrideRequest"]=0
operation_parameters_maximum_occurrences["riskAnalyticsControllerEnableDisableRiskEventFeedback:::Riskanalyticscontrollerv3EnableDisableRiskEventFeedbackRequest"]=0
operation_parameters_maximum_occurrences["riskAnalyticsControllerEnableDisableRiskEventProcess:::Riskanalyticscontrollerv3EnableDisableRiskEventProcessRequest"]=0
operation_parameters_maximum_occurrences["riskAnalyticsControllerGetRiskEventClassificationsList:::risk_id"]=0
operation_parameters_maximum_occurrences["riskAnalyticsControllerGetRiskEventDataForSummarization:::risk_id"]=0
operation_parameters_maximum_occurrences["riskAnalyticsControllerGetRiskEventDataForSummarization:::include_indicators"]=0
operation_parameters_maximum_occurrences["riskAnalyticsControllerGetRiskEventDataForSummarization:::num_findings_limit"]=0
operation_parameters_maximum_occurrences["riskAnalyticsControllerGetRiskEventDetails:::risk_id"]=0
operation_parameters_maximum_occurrences["riskAnalyticsControllerGetRiskEventRow:::status"]=0
operation_parameters_maximum_occurrences["riskAnalyticsControllerGetRiskEventRow:::date_from"]=0
operation_parameters_maximum_occurrences["riskAnalyticsControllerGetRiskEventRow:::date_to"]=0
operation_parameters_maximum_occurrences["riskAnalyticsControllerGetRiskEventRow:::pivot.type"]=0
operation_parameters_maximum_occurrences["riskAnalyticsControllerGetRiskEventRow:::pivot.id"]=0
operation_parameters_maximum_occurrences["riskAnalyticsControllerGetRiskEventRow:::pivot.db_user"]=0
operation_parameters_maximum_occurrences["riskAnalyticsControllerGetRiskEventRow:::pivot.database"]=0
operation_parameters_maximum_occurrences["riskAnalyticsControllerGetRiskEventRow:::pivot.server_ip"]=0
operation_parameters_maximum_occurrences["riskAnalyticsControllerGetRiskEventRow:::pivot.os_user"]=0
operation_parameters_maximum_occurrences["riskAnalyticsControllerGetRiskEventRow:::pivot.database_source_field"]=0
operation_parameters_maximum_occurrences["riskAnalyticsControllerGetRiskEventVulnerabilityAssessmentDetails:::risk_id"]=0
operation_parameters_maximum_occurrences["riskAnalyticsControllerGetRiskObservationDetails:::lead_feature_id"]=0
operation_parameters_maximum_occurrences["riskAnalyticsControllerGetRiskObservationDetails:::observation_type"]=0
operation_parameters_maximum_occurrences["riskAnalyticsControllerRiskEventTuning:::Riskanalyticscontrollerv3RiskEventTuningRequest"]=0
operation_parameters_maximum_occurrences["riskAnalyticsControllerSetRiskEventStatus:::Riskanalyticscontrollerv3SetRiskEventStatusRequest"]=0
operation_parameters_maximum_occurrences["riskAnalyticsControllerSetUserUISettings:::Riskanalyticscontrollerv3SetUserUISettingsRequest"]=0
operation_parameters_maximum_occurrences["riskAnalyticsControllerUpdateRiskFeedback:::Riskanalyticscontrollerv3UpdateRiskFeedbackRequest"]=0
operation_parameters_maximum_occurrences["riskAnalyticsDataProcessorGetRiskContext:::risk_id"]=0
operation_parameters_maximum_occurrences["riskAnalyticsDataProcessorGetRiskContext:::timezone"]=0
operation_parameters_maximum_occurrences["riskAnalyticsDataProcessorGetRiskPredefinedQuestions:::risk_id"]=0
operation_parameters_maximum_occurrences["riskAnalyticsEngineUpdateLeadGeneratorConfig:::Riskanalyticsenginev3UpdateLeadGeneratorConfigRequest"]=0
operation_parameters_maximum_occurrences["schedulerServiceCreateScheduledJob:::Schedulerv3CreateScheduledJobRequest"]=0
operation_parameters_maximum_occurrences["schedulerServiceDeleteScheduledJob:::schedule_id"]=0
operation_parameters_maximum_occurrences["schedulerServiceGetDependencies:::config_type"]=0
operation_parameters_maximum_occurrences["schedulerServiceGetScheduledJobDetails:::schedule_id"]=0
operation_parameters_maximum_occurrences["schedulerServiceGetScheduledJobs:::Offset"]=0
operation_parameters_maximum_occurrences["schedulerServiceGetScheduledJobs:::Limit"]=0
operation_parameters_maximum_occurrences["schedulerServiceGetSchedulesByReport:::report_id"]=0
operation_parameters_maximum_occurrences["schedulerServiceGetSchedulesByReport:::Schedulerv3GetSchedulesByReportRequest"]=0
operation_parameters_maximum_occurrences["schedulerServiceSearchScheduledJobs:::Schedulerv3SearchScheduledJobsRequest"]=0
operation_parameters_maximum_occurrences["schedulerServiceSearchScheduledTaskRuns:::Schedulerv3SearchScheduledTaskRunsRequest"]=0
operation_parameters_maximum_occurrences["schedulerServiceUpdateScheduledJob:::schedule_id"]=0
operation_parameters_maximum_occurrences["schedulerServiceUpdateScheduledJob:::Schedulerv3UpdateScheduledJobRequest"]=0
operation_parameters_maximum_occurrences["snifAssistServiceTestRegex:::Snifassistv3TestRegexRequest"]=0
operation_parameters_maximum_occurrences["streamsServiceCheckAWSCredentials:::Streamsv3CheckAWSCredentialsRequest"]=0
operation_parameters_maximum_occurrences["streamsServiceCheckAzureEventHub:::Streamsv3CheckAzureEventHubRequest"]=0
operation_parameters_maximum_occurrences["streamsServiceCheckAzureStorageString:::Streamsv3CheckAzureStorageStringRequest"]=0
operation_parameters_maximum_occurrences["streamsServiceListAWSStreams:::Streamsv3ListAWSStreamsRequest"]=0
operation_parameters_maximum_occurrences["templatesServiceCreateIntegration:::Templatesv3CreateIntegrationRequest"]=0
operation_parameters_maximum_occurrences["templatesServiceCreateTemplate:::Templatesv3CreateTemplateRequest"]=0
operation_parameters_maximum_occurrences["templatesServiceDeleteIntegration:::integration_id"]=0
operation_parameters_maximum_occurrences["templatesServiceDeleteTemplate:::template_id"]=0
operation_parameters_maximum_occurrences["templatesServiceGetOriginDefaultContent:::origin"]=0
operation_parameters_maximum_occurrences["templatesServiceGetOriginDefaultContent:::integration"]=0
operation_parameters_maximum_occurrences["templatesServiceGetOriginDefaultContent:::mime_type"]=0
operation_parameters_maximum_occurrences["templatesServiceGetOriginFields:::origin"]=0
operation_parameters_maximum_occurrences["templatesServiceGetTemplate:::template_id"]=0
operation_parameters_maximum_occurrences["templatesServiceGetTemplate:::include_integration_name"]=0
operation_parameters_maximum_occurrences["templatesServiceGetTemplates:::integration_id"]=0
operation_parameters_maximum_occurrences["templatesServiceGetTemplates:::filter_integration"]=0
operation_parameters_maximum_occurrences["templatesServiceGetTemplates:::filter_origin"]=0
operation_parameters_maximum_occurrences["templatesServiceGetTemplates:::filter_mime_type"]=0
operation_parameters_maximum_occurrences["templatesServiceGetTemplates:::filter_tags"]=0
operation_parameters_maximum_occurrences["templatesServiceGetTemplates:::filter_enabled_only"]=0
operation_parameters_maximum_occurrences["templatesServiceGetTemplates:::include_integration_name"]=0
operation_parameters_maximum_occurrences["templatesServiceTestTemplate:::Templatesv3TestTemplateRequest"]=0
operation_parameters_maximum_occurrences["templatesServiceTransformTemplate:::Templatesv3TransformTemplateRequest"]=0
operation_parameters_maximum_occurrences["templatesServiceTransformTemplateJSON:::Templatesv3TransformTemplateJSONRequest"]=0
operation_parameters_maximum_occurrences["templatesServiceUpdateTemplate:::template_id"]=0
operation_parameters_maximum_occurrences["templatesServiceUpdateTemplate:::Templatesv3UpdateTemplateRequest"]=0
operation_parameters_maximum_occurrences["tenantuserCreateAPIKey:::Tenantuserv3CreateApiKeyRequest"]=0
operation_parameters_maximum_occurrences["tenantuserDeleteAPIKey:::id"]=0
operation_parameters_maximum_occurrences["tenantuserDeleteRole:::role_id"]=0
operation_parameters_maximum_occurrences["tenantuserGetPrivilege:::privilege.privilege_id"]=0
operation_parameters_maximum_occurrences["tenantuserGetPrivilege:::privilege.type"]=0
operation_parameters_maximum_occurrences["tenantuserGetPrivileges:::roles"]=0
operation_parameters_maximum_occurrences["tenantuserGetPrivileges:::type"]=0
operation_parameters_maximum_occurrences["tenantuserGetRole:::role_id"]=0
operation_parameters_maximum_occurrences["tenantuserGetUser:::user_id"]=0
operation_parameters_maximum_occurrences["tenantuserGetUserNames:::Tenantuserv3GetUserNamesRequest"]=0
operation_parameters_maximum_occurrences["tenantuserGetUserTenant:::user_id"]=0
operation_parameters_maximum_occurrences["tenantuserPostPrivilegesBulk:::Tenantuserv3PostPrivilegesBulkRequest"]=0
operation_parameters_maximum_occurrences["tenantuserPostRole:::Tenantuserv3PostRoleRequest"]=0
operation_parameters_maximum_occurrences["tenantuserUpdatePrivilege:::privilege_id"]=0
operation_parameters_maximum_occurrences["tenantuserUpdatePrivilege:::Tenantuserv3UpdatePrivilegeRequest"]=0
operation_parameters_maximum_occurrences["tenantuserUpdatePrivilegesRoleBulk:::Tenantuserv3UpdatePrivilegesBulkRequest"]=0
operation_parameters_maximum_occurrences["tenantuserUpdateRole:::role_id"]=0
operation_parameters_maximum_occurrences["tenantuserUpdateRole:::Tenantuserv3UpdateRoleRequest"]=0
operation_parameters_maximum_occurrences["tenantuserUpdateUserRoleBulk:::Tenantuserv3UpdateUserRoleBulkRequest"]=0
operation_parameters_maximum_occurrences["getLinkedVendor:::vendorId"]=0
operation_parameters_maximum_occurrences["getSingleLinkedVendor:::vendorId"]=0
operation_parameters_maximum_occurrences["listLinkedVendorDataStores:::vendorId"]=0
operation_parameters_maximum_occurrences["listLinkedVendorDataStores:::filter"]=0
operation_parameters_maximum_occurrences["listLinkedVendorDataStores:::sort"]=0
operation_parameters_maximum_occurrences["listLinkedVendorDataStores:::pageSize"]=0
operation_parameters_maximum_occurrences["listLinkedVendorDataStores:::nextToken"]=0
operation_parameters_maximum_occurrences["listTrustedAssets:::filter"]=0
operation_parameters_maximum_occurrences["universalConnectorManagerUploadPlugin:::Universalconnectormanagerv3UploadPluginRequest"]=0
operation_parameters_maximum_occurrences["workflowCreateCase:::Workflowv3CreateCaseRequest"]=0
operation_parameters_maximum_occurrences["workflowCreateTask:::case_id"]=0
operation_parameters_maximum_occurrences["workflowCreateTask:::Workflowv3CreateTaskRequest"]=0
operation_parameters_maximum_occurrences["workflowGetCases:::case_id"]=0
operation_parameters_maximum_occurrences["workflowGetCases:::sort_by"]=0
operation_parameters_maximum_occurrences["workflowGetCases:::offset"]=0
operation_parameters_maximum_occurrences["workflowGetCases:::limit"]=0
operation_parameters_maximum_occurrences["workflowGetCasesCount:::Workflowv3GetCasesCountRequest"]=0
operation_parameters_maximum_occurrences["workflowGetFilename:::case_id"]=0
operation_parameters_maximum_occurrences["workflowGetFilename:::task_id"]=0
operation_parameters_maximum_occurrences["workflowGetJobsCount:::case_id"]=0
operation_parameters_maximum_occurrences["workflowGetJobsCount:::Workflowv3GetJobsCountRequest"]=0
operation_parameters_maximum_occurrences["workflowGetReportResult:::case_id"]=0
operation_parameters_maximum_occurrences["workflowGetReportResult:::task_id"]=0
operation_parameters_maximum_occurrences["workflowGetReportResult:::offset"]=0
operation_parameters_maximum_occurrences["workflowGetReportResult:::limit"]=0
operation_parameters_maximum_occurrences["workflowGetTasks:::case_id"]=0
operation_parameters_maximum_occurrences["workflowGetTasks:::task_id"]=0
operation_parameters_maximum_occurrences["workflowGetTasksCount:::case_id"]=0
operation_parameters_maximum_occurrences["workflowGetTasksCount:::Workflowv3GetTasksCountRequest"]=0
operation_parameters_maximum_occurrences["workflowSearchCases:::Workflowv3SearchCasesRequest"]=0
operation_parameters_maximum_occurrences["workflowSearchReports:::Workflowv3SearchCasesRequest"]=0
operation_parameters_maximum_occurrences["workflowSearchTasks:::case_id"]=0
operation_parameters_maximum_occurrences["workflowSearchTasks:::Workflowv3SearchTasksRequest"]=0
operation_parameters_maximum_occurrences["workflowUpdateCases:::Workflowv3UpdateCasesRequest"]=0
operation_parameters_maximum_occurrences["workflowUpdateTasks:::case_id"]=0
operation_parameters_maximum_occurrences["workflowUpdateTasks:::Workflowv3UpdateTasksRequest"]=0

##
# The type of collection for specifying multiple values for parameter:
# - multi, csv, ssv, tsv
declare -A operation_parameters_collection_type
operation_parameters_collection_type["analyticsEventsServiceDeleteCacheKey:::cache_key"]=""
operation_parameters_collection_type["analyticsEventsServiceDeleteCacheKey:::Analyticseventsv3DeleteCacheKeyRequest"]=""
operation_parameters_collection_type["analyticsEventsServicePostQSAdvisorRisk:::Analyticseventsv3PostQSAdvisorRiskRequest"]=""
operation_parameters_collection_type["assetsServiceAssetIngestion:::Assetsv3AssetIngestionRequest"]=""
operation_parameters_collection_type["assetsServiceAssetIngestionManualTrigger:::body"]=""
operation_parameters_collection_type["assetsServiceClonePolicy:::policy_id"]=""
operation_parameters_collection_type["assetsServiceClonePolicy:::Assetsv3ClonePolicyRequest"]=""
operation_parameters_collection_type["assetsServiceCreateUpdatePolicy:::Assetsv3CreateUpdatePolicyRequest"]=""
operation_parameters_collection_type["assetsServiceDeleteFilterTemplateForAssets:::template_id"]=""
operation_parameters_collection_type["assetsServiceDeleteFilterTemplateForAssets:::Assetsv3AssetFilterTemplateRequest"]=""
operation_parameters_collection_type["assetsServiceDeletePolicies:::policy_ids"]="multi"
operation_parameters_collection_type["assetsServiceFetchAssetChangeLog:::Assetsv3FetchAssetChangeLogRequest"]=""
operation_parameters_collection_type["assetsServiceFetchAssetDashboard:::widget_type"]=""
operation_parameters_collection_type["assetsServiceFetchAssetDashboard:::date_range.start"]=""
operation_parameters_collection_type["assetsServiceFetchAssetDashboard:::date_range.end"]=""
operation_parameters_collection_type["assetsServiceFetchAssetDashboard:::date_range.type"]=""
operation_parameters_collection_type["assetsServiceFetchAssetDashboard:::date_range.key"]=""
operation_parameters_collection_type["assetsServiceFetchAssetDashboard:::date_range.error"]=""
operation_parameters_collection_type["assetsServiceFetchAssetDashboard:::date_range.start_number"]=""
operation_parameters_collection_type["assetsServiceFetchAssetDashboard:::date_range.start_unit"]=""
operation_parameters_collection_type["assetsServiceFetchAssetDashboard:::date_range.end_number"]=""
operation_parameters_collection_type["assetsServiceFetchAssetDashboard:::date_range.end_unit"]=""
operation_parameters_collection_type["assetsServiceFetchAssetDashboard:::timeline_value_selected"]=""
operation_parameters_collection_type["assetsServiceFetchAssetDashboard:::tag_id"]=""
operation_parameters_collection_type["assetsServiceFetchAssetList:::Assetsv3FetchAssetListRequest"]=""
operation_parameters_collection_type["assetsServiceFetchAssetsForMergeSplit:::asset_id"]=""
operation_parameters_collection_type["assetsServiceFetchAssetsForMergeSplit:::page_number"]=""
operation_parameters_collection_type["assetsServiceFetchAssetsForMergeSplit:::page_size"]=""
operation_parameters_collection_type["assetsServiceFetchAssetsForMergeSplit:::action"]=""
operation_parameters_collection_type["assetsServiceFetchAssetsForMergeSplit:::search_key"]=""
operation_parameters_collection_type["assetsServiceFindAssetName:::asset_name"]=""
operation_parameters_collection_type["assetsServiceGetAssetOverview:::asset_id"]=""
operation_parameters_collection_type["assetsServiceGetAssetOverview:::page_number"]=""
operation_parameters_collection_type["assetsServiceGetAssetOverview:::size"]=""
operation_parameters_collection_type["assetsServiceGetAssetOverview:::widget"]=""
operation_parameters_collection_type["assetsServiceGetAssetOverview:::ip"]=""
operation_parameters_collection_type["assetsServiceGetAssetOverview:::host"]=""
operation_parameters_collection_type["assetsServiceGetAssetOverview:::database"]=""
operation_parameters_collection_type["assetsServiceGetAssetOverview:::asset_entity_type"]=""
operation_parameters_collection_type["assetsServiceGetAssetTopology:::Assetsv3GetAssetTopologyRequest"]=""
operation_parameters_collection_type["assetsServiceGetFilterTemplateForAssets:::template_id"]=""
operation_parameters_collection_type["assetsServiceListRule:::policy_id"]=""
operation_parameters_collection_type["assetsServiceListTagDomains:::dom_grouper"]=""
operation_parameters_collection_type["assetsServiceListTagDomains:::purpose"]=""
operation_parameters_collection_type["assetsServiceListTagDomains:::need_tag"]=""
operation_parameters_collection_type["assetsServiceListTags:::asset_id"]="multi"
operation_parameters_collection_type["assetsServiceMergeOrSplitAssets:::Assetsv3MergeOrSplitAssetsRequest"]=""
operation_parameters_collection_type["assetsServiceSaveAssignedTags:::Assetsv3SaveAssignedTagsRequest"]=""
operation_parameters_collection_type["assetsServiceSaveTagConceptData:::Assetsv3SaveTagConceptDataRequest"]=""
operation_parameters_collection_type["assetsServiceSaveTagDomainData:::Assetsv3SaveTagDomainDataRequest"]=""
operation_parameters_collection_type["assetsServiceSaveUpdateFilterTemplateForAssets:::Assetsv3SaveUpdateFilterTemplateRequest"]=""
operation_parameters_collection_type["assetsServiceSetBannerState:::Assetsv3SetBannerStateRequest"]=""
operation_parameters_collection_type["assetsServiceUpdateAssetName:::Assetsv3UpdateAssetNameRequest"]=""
operation_parameters_collection_type["assetsServiceUpdatePolicy:::Assetsv3UpdatePolicyRequest"]=""
operation_parameters_collection_type["auditServiceGetActivityRecords:::start_time"]=""
operation_parameters_collection_type["auditServiceGetActivityRecords:::end_time"]=""
operation_parameters_collection_type["auditServiceGetActivityRecords:::uid"]=""
operation_parameters_collection_type["auditServiceGetActivityRecords:::action_taken"]=""
operation_parameters_collection_type["auditServiceGetActivityRecords:::context"]=""
operation_parameters_collection_type["auditServiceGetActivityRecords:::changes_made"]=""
operation_parameters_collection_type["auditServiceGetActivityRecords:::performed_by"]=""
operation_parameters_collection_type["auditServiceGetActivityRecords:::context_description"]=""
operation_parameters_collection_type["auditServiceGetActivityRecords:::query"]=""
operation_parameters_collection_type["auditServiceGetActivityRecords:::offset"]=""
operation_parameters_collection_type["auditServiceGetActivityRecords:::limit"]=""
operation_parameters_collection_type["auditServiceGetActivityRecords:::filter"]=""
operation_parameters_collection_type["auditServicePutDownloadActivityRecord:::Auditv3PutActivityRecordRequest"]=""
operation_parameters_collection_type["authServerServiceCreateOauthClient:::AuthserverCreateOauthClientRequest"]=""
operation_parameters_collection_type["authServerServiceDeleteOauthClient:::client_id"]=""
operation_parameters_collection_type["authServerServiceGetOauthClient:::client_id"]=""
operation_parameters_collection_type["addAnalyzedRegion:::AddAnalyzedRegionRequest"]=""
operation_parameters_collection_type["addCloudAccounts:::AddCloudAccountsRequest"]=""
operation_parameters_collection_type["generateAzureAuthUrl:::tenantId"]=""
operation_parameters_collection_type["generateSnowflakeAuthUrl:::ClientInfo"]=""
operation_parameters_collection_type["getAnalyzedRegionStatus:::cloudProvider"]=""
operation_parameters_collection_type["getAnalyzedRegionStatus:::region"]=""
operation_parameters_collection_type["getCloudAccountInstallationStatus:::cloudProvider"]=""
operation_parameters_collection_type["getCloudAccountInstallationStatus:::cloudAccountId"]=""
operation_parameters_collection_type["getRefreshTokenExpiry:::providerId"]=""
operation_parameters_collection_type["removeAccounts:::accountIds"]="multi"
operation_parameters_collection_type["removeAccounts:::serviceProvider"]=""
operation_parameters_collection_type["removeAccountsInstructions:::accountIds"]="multi"
operation_parameters_collection_type["removeAccountsInstructions:::serviceProvider"]=""
operation_parameters_collection_type["submitGoogleWorkspaceAdminEmail:::SubmitAdminEmailParams"]=""
operation_parameters_collection_type["submitOffice365TenantInfo:::TenantInfo"]=""
operation_parameters_collection_type["submitSlackAuthCode:::SubmitAuthCode"]=""
operation_parameters_collection_type["submitSnowflakeAuthCode:::AuthInfo"]=""
operation_parameters_collection_type["complianceAcceleratorCreateWorkspace:::Complianceacceleratorv3CreateWorkspaceRequest"]=""
operation_parameters_collection_type["complianceAcceleratorDeleteComplianceWorkspaces:::regulations"]="multi"
operation_parameters_collection_type["complianceAcceleratorDeleteComplianceWorkspaces:::deleteAll"]=""
operation_parameters_collection_type["complianceAcceleratorHydrateWorkspace:::Complianceacceleratorv3HydrateComplianceWorkspacesRequest"]=""
operation_parameters_collection_type["complianceAcceleratorStoreComplianceInfo:::Complianceacceleratorv3StoreComplianceInfoRequest"]=""
operation_parameters_collection_type["connectionsServiceCreateConnectionsAccounts:::Connectionsv3CreateConnectionsAccountsRequest"]=""
operation_parameters_collection_type["connectionsServiceCreateConnectionsConfigs:::Connectionsv3CreateConnectionsConfigsRequest"]=""
operation_parameters_collection_type["connectionsServiceCreatePlugin:::Connectionsv3CreatePluginRequest"]=""
operation_parameters_collection_type["connectionsServiceCreateSettings:::Connectionsv3CreateSettingsRequest"]=""
operation_parameters_collection_type["connectionsServiceDeleteConnectionsAccounts:::account_id"]=""
operation_parameters_collection_type["connectionsServiceDeleteConnectionsConfigs:::connection_id"]=""
operation_parameters_collection_type["connectionsServiceDeleteConnector:::connection_id"]=""
operation_parameters_collection_type["connectionsServiceDeletePlugin:::id"]=""
operation_parameters_collection_type["connectionsServiceGetConnectionsAccounts:::account_id"]=""
operation_parameters_collection_type["connectionsServiceGetConnectionsAccounts:::access_key"]=""
operation_parameters_collection_type["connectionsServiceGetConnectionsConfigs:::type"]=""
operation_parameters_collection_type["connectionsServiceGetConnectionsConfigs:::connection_id"]=""
operation_parameters_collection_type["connectionsServiceGetConnectionsWithFilters:::Connectionsv3GetConnectionsWithFiltersRequest"]=""
operation_parameters_collection_type["connectionsServiceGetPlugins:::id"]=""
operation_parameters_collection_type["connectionsServicePartialUpdateConnectors:::Connectionsv3PartialUpdateConnectorsRequest"]=""
operation_parameters_collection_type["connectionsServicePostStapCommand:::Connectionsv3StapCommandRequest"]=""
operation_parameters_collection_type["connectionsServiceUpdateBannerState:::Connectionsv3UpdateBannerStateRequest"]=""
operation_parameters_collection_type["connectionsServiceUpdateConnectionsAccounts:::Connectionsv3UpdateConnectionsAccountsRequest"]=""
operation_parameters_collection_type["connectionsServiceUpdateConnectionsConfigs:::Connectionsv3UpdateConnectionsConfigsRequest"]=""
operation_parameters_collection_type["connectionsServiceUpdateConnectors:::Connectionsv3UpdateConnectorsRequest"]=""
operation_parameters_collection_type["connectionsServiceUpdatePlugin:::id"]=""
operation_parameters_collection_type["connectionsServiceUpdatePlugin:::Connectionsv3UpdatePluginRequest"]=""
operation_parameters_collection_type["connectionsServiceUpdateSettings:::Connectionsv3UpdateSettingsRequest"]=""
operation_parameters_collection_type["dashboardsServiceCreateDashboard:::Dashboardsv3Dashboard"]=""
operation_parameters_collection_type["dashboardsServiceDeleteDashboard:::dashboard_id"]=""
operation_parameters_collection_type["dashboardsServiceDeleteDashboard:::Dashboardsv3DeleteDashboardRequest"]=""
operation_parameters_collection_type["dashboardsServiceUpdateDashboard:::dashboard_id"]=""
operation_parameters_collection_type["dashboardsServiceUpdateDashboard:::Dashboardsv3UpdateDashboardRequest"]=""
operation_parameters_collection_type["getActualFlow:::id"]=""
operation_parameters_collection_type["getActualFlowsSummary:::filter"]=""
operation_parameters_collection_type["getPotentialFlow:::flowId"]=""
operation_parameters_collection_type["getPotentialFlowPath:::flowPathId"]=""
operation_parameters_collection_type["getPotentialFlowsSummary:::filter"]=""
operation_parameters_collection_type["listActualFlowPaths:::sort"]=""
operation_parameters_collection_type["listActualFlowPaths:::filter"]=""
operation_parameters_collection_type["listActualFlowPaths:::pageSize"]=""
operation_parameters_collection_type["listActualFlowPaths:::nextToken"]=""
operation_parameters_collection_type["listActualFlows:::sort"]=""
operation_parameters_collection_type["listActualFlows:::filter"]=""
operation_parameters_collection_type["listActualFlows:::pageSize"]=""
operation_parameters_collection_type["listActualFlows:::nextToken"]=""
operation_parameters_collection_type["listPotentialFlows:::filter"]=""
operation_parameters_collection_type["listPotentialFlows:::pageSize"]=""
operation_parameters_collection_type["listPotentialFlows:::nextToken"]=""
operation_parameters_collection_type["listPotentialFlowsPaths:::filter"]=""
operation_parameters_collection_type["listPotentialFlowsPaths:::pageSize"]=""
operation_parameters_collection_type["listPotentialFlowsPaths:::nextToken"]=""
operation_parameters_collection_type["getDataResource:::dataResourceId"]=""
operation_parameters_collection_type["getDataResourcesSummary:::dataStoreId"]=""
operation_parameters_collection_type["getDataResourcesSummary:::filter"]=""
operation_parameters_collection_type["listDataResources:::dataStoreId"]=""
operation_parameters_collection_type["listDataResources:::filter"]=""
operation_parameters_collection_type["listDataResources:::sort"]=""
operation_parameters_collection_type["listDataResources:::pageSize"]=""
operation_parameters_collection_type["listDataResources:::nextToken"]=""
operation_parameters_collection_type["listDataResourcesNames:::prefix"]=""
operation_parameters_collection_type["listDataResourcesNames:::dataStoreId"]=""
operation_parameters_collection_type["removeResource:::dataResourceId"]=""
operation_parameters_collection_type["removeResource:::dataStoreId"]=""
operation_parameters_collection_type["updateResourceReviewStatus:::dataResourceId"]=""
operation_parameters_collection_type["updateResourceReviewStatus:::UpdateResourceReviewBody"]=""
operation_parameters_collection_type["getSensitivitiesSummary:::filter"]=""
operation_parameters_collection_type["getSensitivity:::sensitivityId"]=""
operation_parameters_collection_type["listSensitivities:::filter"]=""
operation_parameters_collection_type["listSensitivities:::sort"]=""
operation_parameters_collection_type["listSensitivities:::pageSize"]=""
operation_parameters_collection_type["listSensitivities:::nextToken"]=""
operation_parameters_collection_type["getDataStore:::dataStoreId"]=""
operation_parameters_collection_type["getDataStoresSummary:::filter"]=""
operation_parameters_collection_type["listAllDataStoresLabels:::prefix"]=""
operation_parameters_collection_type["listAllDataStoresLabels:::maxResults"]=""
operation_parameters_collection_type["listDataStores:::filter"]=""
operation_parameters_collection_type["listDataStores:::sort"]=""
operation_parameters_collection_type["listDataStores:::pageSize"]=""
operation_parameters_collection_type["listDataStores:::nextToken"]=""
operation_parameters_collection_type["listDataStoresCloudTagsKeys:::prefix"]=""
operation_parameters_collection_type["listDataStoresCloudTagsKeys:::maxResults"]=""
operation_parameters_collection_type["listDataStoresCloudTagsValues:::prefix"]=""
operation_parameters_collection_type["listDataStoresCloudTagsValues:::tagKey"]=""
operation_parameters_collection_type["listDataStoresCloudTagsValues:::maxResults"]=""
operation_parameters_collection_type["listDataStoresNames:::prefix"]=""
operation_parameters_collection_type["rescanDataStore:::RescanDataStoreRequest"]=""
operation_parameters_collection_type["setDataStoreLabel:::dataStoreId"]=""
operation_parameters_collection_type["setDataStoreLabel:::SetDataStoreLabelRequest"]=""
operation_parameters_collection_type["updateDatastoreCustodian:::UpdateCustodianBody"]=""
operation_parameters_collection_type["addVulnerabilityStatusComment:::vulnerabilityId"]=""
operation_parameters_collection_type["addVulnerabilityStatusComment:::statusId"]=""
operation_parameters_collection_type["addVulnerabilityStatusComment:::AddCommentBody"]=""
operation_parameters_collection_type["getVulnerabilitiesSummary:::filter"]=""
operation_parameters_collection_type["getVulnerability:::vulnerabilityId"]=""
operation_parameters_collection_type["listVulnerabilities:::filter"]=""
operation_parameters_collection_type["listVulnerabilities:::sort"]=""
operation_parameters_collection_type["listVulnerabilities:::pageSize"]=""
operation_parameters_collection_type["listVulnerabilities:::nextToken"]=""
operation_parameters_collection_type["listVulnerabilitiesByDataStore:::filter"]=""
operation_parameters_collection_type["listVulnerabilitiesByDataStore:::sort"]=""
operation_parameters_collection_type["listVulnerabilitiesByDataStore:::pageSize"]=""
operation_parameters_collection_type["listVulnerabilitiesByDataStore:::nextToken"]=""
operation_parameters_collection_type["removeVulnerabilityStatusComment:::vulnerabilityId"]=""
operation_parameters_collection_type["removeVulnerabilityStatusComment:::statusId"]=""
operation_parameters_collection_type["removeVulnerabilityStatusComment:::commentId"]=""
operation_parameters_collection_type["setVulnerabilityStatus:::vulnerabilityId"]=""
operation_parameters_collection_type["setVulnerabilityStatus:::SetVulnerabilityStatusRequest"]=""
operation_parameters_collection_type["updateVulnerabilityStatusComment:::vulnerabilityId"]=""
operation_parameters_collection_type["updateVulnerabilityStatusComment:::statusId"]=""
operation_parameters_collection_type["updateVulnerabilityStatusComment:::commentId"]=""
operation_parameters_collection_type["updateVulnerabilityStatusComment:::UpdateCommentBody"]=""
operation_parameters_collection_type["databootstrapperServiceLoadData:::Databootstrapperv3LoadDataRequest"]=""
operation_parameters_collection_type["datamartProcessorServiceGetDatamartInfo:::ingestion_id"]=""
operation_parameters_collection_type["datamartProcessorServiceGetDatamarts:::period_start"]=""
operation_parameters_collection_type["datamartProcessorServiceGetDatamarts:::period_end"]=""
operation_parameters_collection_type["datamartProcessorServiceSendAllCompleteFilesToQueue:::body"]=""
operation_parameters_collection_type["datamartProcessorServiceStoreExtractionLogs:::request_id"]=""
operation_parameters_collection_type["datamartProcessorServiceStoreExtractionLogs:::Datamartprocessorv3DMExtractionLogsRequest"]=""
operation_parameters_collection_type["uploadDatamart:::file"]=""
operation_parameters_collection_type["ecosystemServiceCreateDataset:::Ecosystemv3CreateDatasetRequest"]=""
operation_parameters_collection_type["ecosystemServiceDataInsert:::dataset_name"]=""
operation_parameters_collection_type["ecosystemServiceDataInsert:::Ecosystemv3DataInsertRequest"]=""
operation_parameters_collection_type["ecosystemServiceDeleteDatasets:::dataset_names"]="multi"
operation_parameters_collection_type["ecosystemServiceGetDatasetData:::dataset_name"]=""
operation_parameters_collection_type["ecosystemServiceGetDatasetData:::offset"]=""
operation_parameters_collection_type["ecosystemServiceGetDatasetData:::limit"]=""
operation_parameters_collection_type["ecosystemServiceGetDatasetData:::return_header"]=""
operation_parameters_collection_type["ecosystemServiceGetDatasetData:::field"]=""
operation_parameters_collection_type["ecosystemServiceGetDatasetData:::value"]=""
operation_parameters_collection_type["ecosystemServiceGetDatasetData:::sort_field"]=""
operation_parameters_collection_type["ecosystemServiceGetDatasetData:::sort_order"]=""
operation_parameters_collection_type["ecosystemServiceGetDatasetDetail:::dataset_name"]=""
operation_parameters_collection_type["ecosystemServiceGetDatasets:::filter.start_time"]=""
operation_parameters_collection_type["ecosystemServiceGetDatasets:::filter.end_time"]=""
operation_parameters_collection_type["ecosystemServiceGetDatasets:::filter.dataset_names"]="multi"
operation_parameters_collection_type["ecosystemServiceGetDatasets:::offset"]=""
operation_parameters_collection_type["ecosystemServiceGetDatasets:::limit"]=""
operation_parameters_collection_type["ecosystemServiceGetDatasets:::include_filter_counts"]=""
operation_parameters_collection_type["ecosystemServiceGetPurgableRows:::Ecosystemv3GetPurgableRowsRequest"]=""
operation_parameters_collection_type["ecosystemServicePurgeData:::dataset_names"]="multi"
operation_parameters_collection_type["featureFlagsServiceDeleteFeatureFlagOverrides:::flag_name"]=""
operation_parameters_collection_type["featureFlagsServiceDeleteFeatureFlagOverrides:::tenant_id"]=""
operation_parameters_collection_type["featureFlagsServiceGetFeatureFlagOverrides:::tenant_id"]=""
operation_parameters_collection_type["featureFlagsServiceGetFeatureFlagOverrides:::flag_names"]="multi"
operation_parameters_collection_type["featureFlagsServiceGetFeatureFlags:::tenant_id"]=""
operation_parameters_collection_type["featureFlagsServiceGetFeatureFlags:::flag_names"]="multi"
operation_parameters_collection_type["featureFlagsServiceUpdateFeatureFlagOverrides:::Featureflagsv3UpdateFeatureFlagOverridesRequest"]=""
operation_parameters_collection_type["groupBuilderCancelImportGroup:::group_ids"]="multi"
operation_parameters_collection_type["groupBuilderCreateGroup:::Groupbuilderv3CreateGroupRequest"]=""
operation_parameters_collection_type["groupBuilderDeleteGroup:::group_ids"]="multi"
operation_parameters_collection_type["groupBuilderEditGroup:::group_id"]=""
operation_parameters_collection_type["groupBuilderEditGroup:::Groupbuilderv3EditGroupRequest"]=""
operation_parameters_collection_type["groupBuilderExportGroup:::Groupbuilderv3GetExportGroupRequest"]=""
operation_parameters_collection_type["groupBuilderGetGroupDetails:::group_id"]=""
operation_parameters_collection_type["groupBuilderGetGroupDetails:::filter"]=""
operation_parameters_collection_type["groupBuilderGetGroupDetails:::order"]=""
operation_parameters_collection_type["groupBuilderGetGroupMembers:::Groupbuilderv3GetGroupMembersRequest"]=""
operation_parameters_collection_type["groupBuilderGetGroupSyncMapping:::central_manager_id"]=""
operation_parameters_collection_type["groupBuilderGetGroups:::do_not_include_member_count"]=""
operation_parameters_collection_type["groupBuilderGetGroups:::only_full_access"]=""
operation_parameters_collection_type["groupBuilderGetGroups:::non_nested"]=""
operation_parameters_collection_type["groupBuilderGetImportGroups:::central_manager_id"]=""
operation_parameters_collection_type["groupBuilderImportGroup:::Groupbuilderv3ImportGroupRequest"]=""
operation_parameters_collection_type["groupBuilderRefreshGroups:::Groupbuilderv3RefreshGroupsRequest"]=""
operation_parameters_collection_type["groupBuilderResetGroups:::Groupbuilderv3ResetGroupsRequest"]=""
operation_parameters_collection_type["groupBuilderStoreGroupMembersGdp:::central_manager_id"]=""
operation_parameters_collection_type["groupBuilderStoreGroupMembersGdp:::Groupbuilderv3StoreGroupMembersGdpRequest"]=""
operation_parameters_collection_type["groupBuilderStoreGroupsGdp:::central_manager_id"]=""
operation_parameters_collection_type["groupBuilderStoreGroupsGdp:::Groupbuilderv3GetGroupsRequestGdp"]=""
operation_parameters_collection_type["guardiumConnectorAddCM:::Guardiumconnectorv3AddCMRequest"]=""
operation_parameters_collection_type["guardiumConnectorAddDatamarts:::central_manager_id"]=""
operation_parameters_collection_type["guardiumConnectorAddDatamarts:::Guardiumconnectorv3AddDatamartsRequest"]=""
operation_parameters_collection_type["guardiumConnectorAddDmExclusion:::Guardiumconnectorv3AddDmExclusionRequest"]=""
operation_parameters_collection_type["guardiumConnectorAddTask:::central_manager_id"]=""
operation_parameters_collection_type["guardiumConnectorAddTask:::Guardiumconnectorv3AddTaskRequest"]=""
operation_parameters_collection_type["guardiumConnectorBlockUser:::Guardiumconnectorv3BlockUserRequest"]=""
operation_parameters_collection_type["guardiumConnectorConfigureAggregatorExport:::central_manager_id"]=""
operation_parameters_collection_type["guardiumConnectorConfigureAggregatorExport:::Guardiumconnectorv3ConfigureAggregatorExportRequest"]=""
operation_parameters_collection_type["guardiumConnectorConfigureCollectorExport:::central_manager_id"]=""
operation_parameters_collection_type["guardiumConnectorConfigureCollectorExport:::Guardiumconnectorv3ConfigureCollectorExportRequest"]=""
operation_parameters_collection_type["guardiumConnectorConfigureStreaming:::central_manager_id"]=""
operation_parameters_collection_type["guardiumConnectorConfigureStreaming:::Guardiumconnectorv3ConfigureStreamingRequest"]=""
operation_parameters_collection_type["guardiumConnectorDatamartVersionCheck:::central_manager_id"]=""
operation_parameters_collection_type["guardiumConnectorDatamartVersionCheck:::Guardiumconnectorv3DatamartVersionRequest"]=""
operation_parameters_collection_type["guardiumConnectorDeleteCM:::central_manager_id"]=""
operation_parameters_collection_type["guardiumConnectorDeleteCM:::force"]=""
operation_parameters_collection_type["guardiumConnectorDeleteDmExclusion:::datamart"]=""
operation_parameters_collection_type["guardiumConnectorDeleteTask:::central_manager_id"]=""
operation_parameters_collection_type["guardiumConnectorDeleteTask:::task_id"]=""
operation_parameters_collection_type["guardiumConnectorDeleteTasks:::central_manager_id"]=""
operation_parameters_collection_type["guardiumConnectorGetAggregatorsConfig:::central_manager_id"]=""
operation_parameters_collection_type["guardiumConnectorGetCMs:::run_additional_checks"]=""
operation_parameters_collection_type["guardiumConnectorGetCollectorsConfig:::central_manager_id"]=""
operation_parameters_collection_type["guardiumConnectorGetDatamarts:::central_manager_id"]=""
operation_parameters_collection_type["guardiumConnectorGetGdpPolicyInfo:::central_manager_id"]=""
operation_parameters_collection_type["guardiumConnectorGetGdpPolicyInfo:::policy_name"]=""
operation_parameters_collection_type["guardiumConnectorGetGdpPolicySummaries:::central_manager_id"]=""
operation_parameters_collection_type["guardiumConnectorGetHealthInfo:::central_manager_id"]=""
operation_parameters_collection_type["guardiumConnectorGetHealthInfo:::use_fallback"]=""
operation_parameters_collection_type["guardiumConnectorGetLatestDMExtractionProfile:::central_manager_id"]=""
operation_parameters_collection_type["guardiumConnectorGetStreamingStatus:::central_manager_id"]=""
operation_parameters_collection_type["guardiumConnectorGetSyncDMs:::central_manager_id"]=""
operation_parameters_collection_type["guardiumConnectorGetTasks:::central_manager_id"]=""
operation_parameters_collection_type["guardiumConnectorGetTasks:::task_id"]=""
operation_parameters_collection_type["guardiumConnectorGetTasks:::task_type"]=""
operation_parameters_collection_type["guardiumConnectorGetTasks:::key_object"]=""
operation_parameters_collection_type["guardiumConnectorRunGDPReport:::central_manager_id"]=""
operation_parameters_collection_type["guardiumConnectorRunGDPReport:::Guardiumconnectorv3RunGDPReportRequest"]=""
operation_parameters_collection_type["guardiumConnectorSetupCM:::Guardiumconnectorv3SetupCMRequest"]=""
operation_parameters_collection_type["guardiumConnectorSetupDatamarts:::central_manager_id"]=""
operation_parameters_collection_type["guardiumConnectorSetupDatamarts:::Guardiumconnectorv3SetupDatamartsRequest"]=""
operation_parameters_collection_type["guardiumConnectorTaskError:::central_manager_id"]=""
operation_parameters_collection_type["guardiumConnectorTaskError:::Guardiumconnectorv3TaskErrorRequest"]=""
operation_parameters_collection_type["guardiumConnectorTestDatabaseConnection:::Guardiumconnectorv3DatabaseConnectionStringRequest"]=""
operation_parameters_collection_type["guardiumConnectorUpdateDmExclusion:::Guardiumconnectorv3UpdateDmExclusionRequest"]=""
operation_parameters_collection_type["guardiumConnectorUpdateStreaming:::central_manager_id"]=""
operation_parameters_collection_type["guardiumConnectorUpdateStreaming:::Guardiumconnectorv3UpdateStreamingRequest"]=""
operation_parameters_collection_type["guardiumConnectorUpdateTask:::central_manager_id"]=""
operation_parameters_collection_type["guardiumConnectorUpdateTask:::task_id"]=""
operation_parameters_collection_type["guardiumConnectorUpdateTask:::Guardiumconnectorv3UpdateTaskRequest"]=""
operation_parameters_collection_type["healthCollectorGetDataWarehouseUsage:::type"]=""
operation_parameters_collection_type["healthCollectorGetDataWarehouseUsage:::start_time"]=""
operation_parameters_collection_type["healthCollectorGetDataWarehouseUsage:::end_time"]=""
operation_parameters_collection_type["healthCollectorGetHistoricalHealthInfo:::unit"]=""
operation_parameters_collection_type["healthCollectorGetHistoricalHealthInfo:::cm_id"]=""
operation_parameters_collection_type["healthCollectorGetHistoricalHealthInfo:::start_time"]=""
operation_parameters_collection_type["healthCollectorGetHistoricalHealthInfo:::end_time"]=""
operation_parameters_collection_type["healthCollectorGetObjectStorageUsage:::type"]=""
operation_parameters_collection_type["healthCollectorGetObjectStorageUsage:::start_time"]=""
operation_parameters_collection_type["healthCollectorGetObjectStorageUsage:::end_time"]=""
operation_parameters_collection_type["healthCollectorGetPVCUsage:::type"]=""
operation_parameters_collection_type["healthCollectorGetPVCUsage:::start_time"]=""
operation_parameters_collection_type["healthCollectorGetPVCUsage:::end_time"]=""
operation_parameters_collection_type["healthCollectorGetPodRestarts:::type"]=""
operation_parameters_collection_type["healthCollectorGetPodRestarts:::start_time"]=""
operation_parameters_collection_type["healthCollectorGetPodRestarts:::end_time"]=""
operation_parameters_collection_type["healthCollectorGetStreamsIngestion:::type"]=""
operation_parameters_collection_type["healthCollectorGetStreamsIngestion:::start_time"]=""
operation_parameters_collection_type["healthCollectorGetStreamsIngestion:::end_time"]=""
operation_parameters_collection_type["healthCollectorGetTopGDPCollectors:::type"]=""
operation_parameters_collection_type["healthCollectorGetTopGDPCollectors:::start_time"]=""
operation_parameters_collection_type["healthCollectorGetTopGDPCollectors:::end_time"]=""
operation_parameters_collection_type["healthCollectorStoreHealthInfo:::central_manager_id"]=""
operation_parameters_collection_type["healthCollectorStoreHealthInfo:::Healthcollectorv3StoreHealthInfoRequest"]=""
operation_parameters_collection_type["jumpboxServiceAuthorize:::Jumpboxv3AuthorizeRequest"]=""
operation_parameters_collection_type["jumpboxServiceDeleteTenant:::tenant_id"]=""
operation_parameters_collection_type["jumpboxServiceDeleteTenant:::is_permanent_delete"]=""
operation_parameters_collection_type["jumpboxServiceDeleteTenant:::async"]=""
operation_parameters_collection_type["jumpboxServiceDeleteUser:::user_id"]=""
operation_parameters_collection_type["jumpboxServiceGetTenant:::tenant_id"]=""
operation_parameters_collection_type["jumpboxServiceGetTenant:::include_inactive"]=""
operation_parameters_collection_type["jumpboxServiceGetTenant:::include_not_ready"]=""
operation_parameters_collection_type["jumpboxServiceGetTenants:::uid"]=""
operation_parameters_collection_type["jumpboxServiceGetTenants:::external_id"]=""
operation_parameters_collection_type["jumpboxServiceGetTenants:::include_inactive"]=""
operation_parameters_collection_type["jumpboxServiceGetTenants:::include_not_ready"]=""
operation_parameters_collection_type["jumpboxServiceGetUsers:::uid"]=""
operation_parameters_collection_type["jumpboxServicePostTenants:::Jumpboxv3PostTenantsRequest"]=""
operation_parameters_collection_type["jumpboxServicePostUsers:::Jumpboxv3PostUsersBulkRequest"]=""
operation_parameters_collection_type["jumpboxServiceSearchUsers:::Jumpboxv3SearchUsersRequest"]=""
operation_parameters_collection_type["jumpboxServiceTestUser:::Jumpboxv3TestUserRequest"]=""
operation_parameters_collection_type["jumpboxServiceUpdateTenant:::tenant_id"]=""
operation_parameters_collection_type["jumpboxServiceUpdateTenant:::Jumpboxv3UpdateTenantRequest"]=""
operation_parameters_collection_type["jumpboxServiceUpdateUsers:::Jumpboxv3UpdateUsersBulkRequest"]=""
operation_parameters_collection_type["notificationsServiceCreateTicket:::Notificationsv3CreateTicketRequest"]=""
operation_parameters_collection_type["notificationsServiceGetFolders:::Notificationsv3GetFoldersRequest"]=""
operation_parameters_collection_type["notificationsServiceGetNotificationFilename:::notification_id"]=""
operation_parameters_collection_type["notificationsServiceGetNotificationRecord:::notification_id"]=""
operation_parameters_collection_type["notificationsServiceGetNotificationRecords:::filter.start_time"]=""
operation_parameters_collection_type["notificationsServiceGetNotificationRecords:::filter.end_time"]=""
operation_parameters_collection_type["notificationsServiceGetNotificationRecords:::filter.state"]=""
operation_parameters_collection_type["notificationsServiceGetNotificationRecords:::filter.origins"]="multi"
operation_parameters_collection_type["notificationsServiceGetNotificationRecords:::filter.origin_data"]=""
operation_parameters_collection_type["notificationsServiceGetNotificationRecords:::offset"]=""
operation_parameters_collection_type["notificationsServiceGetNotificationRecords:::limit"]=""
operation_parameters_collection_type["notificationsServiceGetNotificationRecords:::include_filter_counts"]=""
operation_parameters_collection_type["notificationsServiceGetTicketStatus:::ticket_id"]=""
operation_parameters_collection_type["notificationsServiceGetTicketStatus:::integration_id"]=""
operation_parameters_collection_type["notificationsServiceTestIntegration:::Notificationsv3TestIntegrationRequest"]=""
operation_parameters_collection_type["notificationsServiceUpdateNotificationRecord:::Notificationsv3UpdateNotificationRecordRequest"]=""
operation_parameters_collection_type["outliersEngineGetSourceStatistics:::source.server_ip"]=""
operation_parameters_collection_type["outliersEngineGetSourceStatistics:::source.database_name"]=""
operation_parameters_collection_type["outliersEngineGetSourceStatistics:::source.db_user"]=""
operation_parameters_collection_type["outliersEngineGetSourceStatistics:::attributes_limit"]=""
operation_parameters_collection_type["outliersEngineRunSimulator:::Outliersenginev3RunSimulatorRequest"]=""
operation_parameters_collection_type["outliersEngineUpdateWorkingHoursPeriods:::Outliersenginev3UpdateWorkingHoursPeriodsRequest"]=""
operation_parameters_collection_type["outliersEngineUploadAndAnalyzePeriod:::body"]=""
operation_parameters_collection_type["outliersEngineUserClustering:::body"]=""
operation_parameters_collection_type["pipelineconfigServiceDeleteTenantResources:::tenant_id"]=""
operation_parameters_collection_type["pipelineconfigServiceDeleteTenantResources:::resource"]=""
operation_parameters_collection_type["policyBuilderClonePolicy:::policy_id"]=""
operation_parameters_collection_type["policyBuilderClonePolicy:::Policybuilderv3ClonePolicyRequest"]=""
operation_parameters_collection_type["policyBuilderCreatePolicy:::Policybuilderv3CreateUpdatePolicyRequest"]=""
operation_parameters_collection_type["policyBuilderDeleteGdpSyncEntry:::sync_ids"]="multi"
operation_parameters_collection_type["policyBuilderDeletePolicies:::policy_ids"]="multi"
operation_parameters_collection_type["policyBuilderGetPolicyDetails:::policy_id"]=""
operation_parameters_collection_type["policyBuilderGetPolicyNamesFromRuleIDs:::Policybuilderv3GetPolicyNamesFromRuleIDsRequest"]=""
operation_parameters_collection_type["policyBuilderGetReceivers:::action_id"]="multi"
operation_parameters_collection_type["policyBuilderGetReceivers:::validate_cache"]=""
operation_parameters_collection_type["policyBuilderGetRuleMetadata:::rule_type"]=""
operation_parameters_collection_type["policyBuilderInsertGdpPolicy:::Policybuilderv3InsertGdpPolicySyncRequest"]=""
operation_parameters_collection_type["policyBuilderInsertGdpPolicyMetaData:::central_manager_id"]=""
operation_parameters_collection_type["policyBuilderInsertGdpPolicyMetaData:::Policybuilderv3InsertGdpPolicyMetaDataRequest"]=""
operation_parameters_collection_type["policyBuilderInstallPolicies:::Policybuilderv3InstallPoliciesRequest"]=""
operation_parameters_collection_type["policyBuilderIntegrationCheck:::integration_id"]=""
operation_parameters_collection_type["policyBuilderIntegrationCheck:::template_id"]=""
operation_parameters_collection_type["policyBuilderPoliciesGroups:::group_ids"]="multi"
operation_parameters_collection_type["policyBuilderRuleValidation:::Policybuilderv3GetRuleValidationRequest"]=""
operation_parameters_collection_type["policyBuilderStorePoliciesGdp:::central_manager_id"]=""
operation_parameters_collection_type["policyBuilderStorePoliciesGdp:::Policybuilderv3StorePolicyGdpRequest"]=""
operation_parameters_collection_type["qSDataManagerRegisterScan:::Qspmdatamanagerv3ScanRequest"]=""
operation_parameters_collection_type["qSDataManagerRetrieveScan:::scan_id"]=""
operation_parameters_collection_type["qSPluginManagerInvokeAppProv:::plugin_id"]=""
operation_parameters_collection_type["qSPluginManagerInvokeAppProv:::Qspmpluginmanagerv3PluginRQ"]=""
operation_parameters_collection_type["qSPluginManagerInvokeExplorerV1:::plugin_id"]=""
operation_parameters_collection_type["qSPluginManagerInvokeExplorerV1:::Qspmpluginmanagerv3PluginRQ"]=""
operation_parameters_collection_type["qSPluginManagerInvokeExplorerV2:::plugin_id"]=""
operation_parameters_collection_type["qSPluginManagerInvokeExplorerV2:::Qspmpluginmanagerv3PluginRQ"]=""
operation_parameters_collection_type["qSPluginManagerInvokePlugin:::plugin_id"]=""
operation_parameters_collection_type["qSPluginManagerInvokePlugin:::Qspmpluginmanagerv3PluginRQ"]=""
operation_parameters_collection_type["qSPluginManagerInvokePolicy:::plugin_id"]=""
operation_parameters_collection_type["qSPluginManagerInvokePolicy:::Qspmpluginmanagerv3PolicyPluginRQ"]=""
operation_parameters_collection_type["qSPolicyManagerBatchStatusUpdate:::body"]=""
operation_parameters_collection_type["qSPolicyManagerCreateTicket:::Qspmpolicymanagerv3CreateTicketRequest"]=""
operation_parameters_collection_type["qSPolicyManagerProcessPolicyDimentionRecords:::Qspmpolicymanagerv3ProcessPolicyDimentionRecordsRequest"]=""
operation_parameters_collection_type["qSPolicyManagerUpdateTicketStatus:::Qspmpolicymanagerv3UpdateTicketStatusRequest"]=""
operation_parameters_collection_type["reportsRunnerGetActiveQueries:::Reportsrunnerv3GetActiveQueriesRequest"]=""
operation_parameters_collection_type["reportsRunnerGetAuditDataCount:::report_id"]=""
operation_parameters_collection_type["reportsRunnerGetAuditDataCount:::Reportsrunnerv3GetAuditDataCountRequest"]=""
operation_parameters_collection_type["reportsRunnerGetChartData:::Reportsrunnerv3GetChartDataRequest"]=""
operation_parameters_collection_type["reportsRunnerGetChartDatav2:::Reportsrunnerv3GetChartDataRequestv2"]=""
operation_parameters_collection_type["reportsRunnerGetReportColumnFacet:::Reportsrunnerv3GetReportColumnFacetRequest"]=""
operation_parameters_collection_type["reportsRunnerGetReportDataCount:::Reportsrunnerv3GetReportDataCountRequest"]=""
operation_parameters_collection_type["reportsRunnerRunAuditReport:::report_id"]=""
operation_parameters_collection_type["reportsRunnerRunAuditReport:::Reportsrunnerv3RunAuditReportRequest"]=""
operation_parameters_collection_type["reportsRunnerRunReport:::Reportsrunnerv3RunReportRequest"]=""
operation_parameters_collection_type["reportsRunnerStopQuery:::Reportsrunnerv3StopQueryRequest"]=""
operation_parameters_collection_type["reportsServiceCreateCategory:::Reportsv3CreateCategoryRequest"]=""
operation_parameters_collection_type["reportsServiceCreateChart:::Reportsv3CreateChartRequest"]=""
operation_parameters_collection_type["reportsServiceCreateChartTemplatev2:::Reportsv3CreateChartTemplatev2Request"]=""
operation_parameters_collection_type["reportsServiceCreateChartv2:::Reportsv3CreateChartv2Request"]=""
operation_parameters_collection_type["reportsServiceCreateFieldsByCategory:::Reportsv3CreateFieldsByCategoryRequest"]=""
operation_parameters_collection_type["reportsServiceCreateJoin:::Reportsv3CreateJoinRequest"]=""
operation_parameters_collection_type["reportsServiceCreateReport:::Reportsv3CreateReportRequest"]=""
operation_parameters_collection_type["reportsServiceCreateVariant:::Reportsv3CreateVariantRequest"]=""
operation_parameters_collection_type["reportsServiceDeleteCategory:::category_id"]=""
operation_parameters_collection_type["reportsServiceDeleteCategory:::table_name"]=""
operation_parameters_collection_type["reportsServiceDeleteChart:::chart_id"]=""
operation_parameters_collection_type["reportsServiceDeleteChartTemplatev2:::template_id"]=""
operation_parameters_collection_type["reportsServiceDeleteChartv2:::chart_id"]=""
operation_parameters_collection_type["reportsServiceDeleteFieldsByCategory:::header_ids"]="multi"
operation_parameters_collection_type["reportsServiceDeleteFieldsByCategory:::table_name"]=""
operation_parameters_collection_type["reportsServiceDeleteJoin:::join_id"]=""
operation_parameters_collection_type["reportsServiceDeleteReport:::report_id"]=""
operation_parameters_collection_type["reportsServiceDeleteVariant:::variant_id"]=""
operation_parameters_collection_type["reportsServiceGetCategories:::report_id"]=""
operation_parameters_collection_type["reportsServiceGetChartSettings:::chart_id"]=""
operation_parameters_collection_type["reportsServiceGetChartSettings:::report_id"]=""
operation_parameters_collection_type["reportsServiceGetChartSettingsv2:::chart_id"]=""
operation_parameters_collection_type["reportsServiceGetChartSettingsv2:::report_id"]=""
operation_parameters_collection_type["reportsServiceGetFieldsByCategories:::category_ids"]="multi"
operation_parameters_collection_type["reportsServiceGetFieldsByCategory:::category_id"]=""
operation_parameters_collection_type["reportsServiceGetFieldsByCategory:::report_id"]=""
operation_parameters_collection_type["reportsServiceGetFieldsByCategory:::table_name"]=""
operation_parameters_collection_type["reportsServiceGetJoins:::category_id"]=""
operation_parameters_collection_type["reportsServiceGetQueryByReportDefinition:::Reportsv3GetQueryByReportDefinitionRequest"]=""
operation_parameters_collection_type["reportsServiceGetQueryByReportID:::Reportsv3GetQueryByReportIDRequest"]=""
operation_parameters_collection_type["reportsServiceGetReportDefinition:::report_id"]=""
operation_parameters_collection_type["reportsServiceGetReportGroups:::groups"]="multi"
operation_parameters_collection_type["reportsServiceGetReportSynopsis:::report_id"]=""
operation_parameters_collection_type["reportsServiceGetReportTimestampHeader:::category_id"]=""
operation_parameters_collection_type["reportsServiceGetReportTimestampHeader:::table_names"]="multi"
operation_parameters_collection_type["reportsServiceGetReports:::category_id"]=""
operation_parameters_collection_type["reportsServiceGetReports:::table_name"]=""
operation_parameters_collection_type["reportsServiceGetReportsForJoin:::join_id"]=""
operation_parameters_collection_type["reportsServiceGetVariant:::variant_id"]=""
operation_parameters_collection_type["reportsServicePartialChartUpdate:::chart_id"]=""
operation_parameters_collection_type["reportsServicePartialChartUpdate:::Reportsv3PartialChartUpdateRequest"]=""
operation_parameters_collection_type["reportsServicePartialReportUpdate:::report_id"]=""
operation_parameters_collection_type["reportsServicePartialReportUpdate:::Reportsv3PartialReportUpdateRequest"]=""
operation_parameters_collection_type["reportsServiceRunVariantOperation:::Reportsv3RunVariantOperationRequest"]=""
operation_parameters_collection_type["reportsServiceTranspose:::Reportsv3TransposeRequest"]=""
operation_parameters_collection_type["reportsServiceUpdateChart:::chart_id"]=""
operation_parameters_collection_type["reportsServiceUpdateChart:::Reportsv3UpdateChartRequest"]=""
operation_parameters_collection_type["reportsServiceUpdateChartv2:::chart_id"]=""
operation_parameters_collection_type["reportsServiceUpdateChartv2:::Reportsv3UpdateChartv2Request"]=""
operation_parameters_collection_type["reportsServiceUpdateJoin:::join_id"]=""
operation_parameters_collection_type["reportsServiceUpdateJoin:::Reportsv3UpdateJoinRequest"]=""
operation_parameters_collection_type["reportsServiceUpdateReport:::report_id"]=""
operation_parameters_collection_type["reportsServiceUpdateReport:::Reportsv3UpdateReportRequest"]=""
operation_parameters_collection_type["reportsServiceUpdateVariantOverride:::variant_id"]=""
operation_parameters_collection_type["reportsServiceUpdateVariantOverride:::Reportsv3UpdateVariantOverrideRequest"]=""
operation_parameters_collection_type["riskAnalyticsControllerEnableDisableRiskEventFeedback:::Riskanalyticscontrollerv3EnableDisableRiskEventFeedbackRequest"]=""
operation_parameters_collection_type["riskAnalyticsControllerEnableDisableRiskEventProcess:::Riskanalyticscontrollerv3EnableDisableRiskEventProcessRequest"]=""
operation_parameters_collection_type["riskAnalyticsControllerGetRiskEventClassificationsList:::risk_id"]=""
operation_parameters_collection_type["riskAnalyticsControllerGetRiskEventDataForSummarization:::risk_id"]=""
operation_parameters_collection_type["riskAnalyticsControllerGetRiskEventDataForSummarization:::include_indicators"]=""
operation_parameters_collection_type["riskAnalyticsControllerGetRiskEventDataForSummarization:::num_findings_limit"]=""
operation_parameters_collection_type["riskAnalyticsControllerGetRiskEventDetails:::risk_id"]=""
operation_parameters_collection_type["riskAnalyticsControllerGetRiskEventRow:::status"]=""
operation_parameters_collection_type["riskAnalyticsControllerGetRiskEventRow:::date_from"]=""
operation_parameters_collection_type["riskAnalyticsControllerGetRiskEventRow:::date_to"]=""
operation_parameters_collection_type["riskAnalyticsControllerGetRiskEventRow:::pivot.type"]=""
operation_parameters_collection_type["riskAnalyticsControllerGetRiskEventRow:::pivot.id"]=""
operation_parameters_collection_type["riskAnalyticsControllerGetRiskEventRow:::pivot.db_user"]=""
operation_parameters_collection_type["riskAnalyticsControllerGetRiskEventRow:::pivot.database"]=""
operation_parameters_collection_type["riskAnalyticsControllerGetRiskEventRow:::pivot.server_ip"]=""
operation_parameters_collection_type["riskAnalyticsControllerGetRiskEventRow:::pivot.os_user"]=""
operation_parameters_collection_type["riskAnalyticsControllerGetRiskEventRow:::pivot.database_source_field"]=""
operation_parameters_collection_type["riskAnalyticsControllerGetRiskEventVulnerabilityAssessmentDetails:::risk_id"]=""
operation_parameters_collection_type["riskAnalyticsControllerGetRiskObservationDetails:::lead_feature_id"]=""
operation_parameters_collection_type["riskAnalyticsControllerGetRiskObservationDetails:::observation_type"]=""
operation_parameters_collection_type["riskAnalyticsControllerRiskEventTuning:::Riskanalyticscontrollerv3RiskEventTuningRequest"]=""
operation_parameters_collection_type["riskAnalyticsControllerSetRiskEventStatus:::Riskanalyticscontrollerv3SetRiskEventStatusRequest"]=""
operation_parameters_collection_type["riskAnalyticsControllerSetUserUISettings:::Riskanalyticscontrollerv3SetUserUISettingsRequest"]=""
operation_parameters_collection_type["riskAnalyticsControllerUpdateRiskFeedback:::Riskanalyticscontrollerv3UpdateRiskFeedbackRequest"]=""
operation_parameters_collection_type["riskAnalyticsDataProcessorGetRiskContext:::risk_id"]=""
operation_parameters_collection_type["riskAnalyticsDataProcessorGetRiskContext:::timezone"]=""
operation_parameters_collection_type["riskAnalyticsDataProcessorGetRiskPredefinedQuestions:::risk_id"]=""
operation_parameters_collection_type["riskAnalyticsEngineUpdateLeadGeneratorConfig:::Riskanalyticsenginev3UpdateLeadGeneratorConfigRequest"]=""
operation_parameters_collection_type["schedulerServiceCreateScheduledJob:::Schedulerv3CreateScheduledJobRequest"]=""
operation_parameters_collection_type["schedulerServiceDeleteScheduledJob:::schedule_id"]=""
operation_parameters_collection_type["schedulerServiceGetDependencies:::config_type"]=""
operation_parameters_collection_type["schedulerServiceGetScheduledJobDetails:::schedule_id"]=""
operation_parameters_collection_type["schedulerServiceGetScheduledJobs:::Offset"]=""
operation_parameters_collection_type["schedulerServiceGetScheduledJobs:::Limit"]=""
operation_parameters_collection_type["schedulerServiceGetSchedulesByReport:::report_id"]=""
operation_parameters_collection_type["schedulerServiceGetSchedulesByReport:::Schedulerv3GetSchedulesByReportRequest"]=""
operation_parameters_collection_type["schedulerServiceSearchScheduledJobs:::Schedulerv3SearchScheduledJobsRequest"]=""
operation_parameters_collection_type["schedulerServiceSearchScheduledTaskRuns:::Schedulerv3SearchScheduledTaskRunsRequest"]=""
operation_parameters_collection_type["schedulerServiceUpdateScheduledJob:::schedule_id"]=""
operation_parameters_collection_type["schedulerServiceUpdateScheduledJob:::Schedulerv3UpdateScheduledJobRequest"]=""
operation_parameters_collection_type["snifAssistServiceTestRegex:::Snifassistv3TestRegexRequest"]=""
operation_parameters_collection_type["streamsServiceCheckAWSCredentials:::Streamsv3CheckAWSCredentialsRequest"]=""
operation_parameters_collection_type["streamsServiceCheckAzureEventHub:::Streamsv3CheckAzureEventHubRequest"]=""
operation_parameters_collection_type["streamsServiceCheckAzureStorageString:::Streamsv3CheckAzureStorageStringRequest"]=""
operation_parameters_collection_type["streamsServiceListAWSStreams:::Streamsv3ListAWSStreamsRequest"]=""
operation_parameters_collection_type["templatesServiceCreateIntegration:::Templatesv3CreateIntegrationRequest"]=""
operation_parameters_collection_type["templatesServiceCreateTemplate:::Templatesv3CreateTemplateRequest"]=""
operation_parameters_collection_type["templatesServiceDeleteIntegration:::integration_id"]=""
operation_parameters_collection_type["templatesServiceDeleteTemplate:::template_id"]=""
operation_parameters_collection_type["templatesServiceGetOriginDefaultContent:::origin"]=""
operation_parameters_collection_type["templatesServiceGetOriginDefaultContent:::integration"]=""
operation_parameters_collection_type["templatesServiceGetOriginDefaultContent:::mime_type"]=""
operation_parameters_collection_type["templatesServiceGetOriginFields:::origin"]=""
operation_parameters_collection_type["templatesServiceGetTemplate:::template_id"]=""
operation_parameters_collection_type["templatesServiceGetTemplate:::include_integration_name"]=""
operation_parameters_collection_type["templatesServiceGetTemplates:::integration_id"]=""
operation_parameters_collection_type["templatesServiceGetTemplates:::filter_integration"]="multi"
operation_parameters_collection_type["templatesServiceGetTemplates:::filter_origin"]="multi"
operation_parameters_collection_type["templatesServiceGetTemplates:::filter_mime_type"]="multi"
operation_parameters_collection_type["templatesServiceGetTemplates:::filter_tags"]="multi"
operation_parameters_collection_type["templatesServiceGetTemplates:::filter_enabled_only"]=""
operation_parameters_collection_type["templatesServiceGetTemplates:::include_integration_name"]=""
operation_parameters_collection_type["templatesServiceTestTemplate:::Templatesv3TestTemplateRequest"]=""
operation_parameters_collection_type["templatesServiceTransformTemplate:::Templatesv3TransformTemplateRequest"]=""
operation_parameters_collection_type["templatesServiceTransformTemplateJSON:::Templatesv3TransformTemplateJSONRequest"]=""
operation_parameters_collection_type["templatesServiceUpdateTemplate:::template_id"]=""
operation_parameters_collection_type["templatesServiceUpdateTemplate:::Templatesv3UpdateTemplateRequest"]=""
operation_parameters_collection_type["tenantuserCreateAPIKey:::Tenantuserv3CreateApiKeyRequest"]=""
operation_parameters_collection_type["tenantuserDeleteAPIKey:::id"]=""
operation_parameters_collection_type["tenantuserDeleteRole:::role_id"]=""
operation_parameters_collection_type["tenantuserGetPrivilege:::privilege.privilege_id"]=""
operation_parameters_collection_type["tenantuserGetPrivilege:::privilege.type"]=""
operation_parameters_collection_type["tenantuserGetPrivileges:::roles"]="multi"
operation_parameters_collection_type["tenantuserGetPrivileges:::type"]=""
operation_parameters_collection_type["tenantuserGetRole:::role_id"]=""
operation_parameters_collection_type["tenantuserGetUser:::user_id"]=""
operation_parameters_collection_type["tenantuserGetUserNames:::Tenantuserv3GetUserNamesRequest"]=""
operation_parameters_collection_type["tenantuserGetUserTenant:::user_id"]=""
operation_parameters_collection_type["tenantuserPostPrivilegesBulk:::Tenantuserv3PostPrivilegesBulkRequest"]=""
operation_parameters_collection_type["tenantuserPostRole:::Tenantuserv3PostRoleRequest"]=""
operation_parameters_collection_type["tenantuserUpdatePrivilege:::privilege_id"]=""
operation_parameters_collection_type["tenantuserUpdatePrivilege:::Tenantuserv3UpdatePrivilegeRequest"]=""
operation_parameters_collection_type["tenantuserUpdatePrivilegesRoleBulk:::Tenantuserv3UpdatePrivilegesBulkRequest"]=""
operation_parameters_collection_type["tenantuserUpdateRole:::role_id"]=""
operation_parameters_collection_type["tenantuserUpdateRole:::Tenantuserv3UpdateRoleRequest"]=""
operation_parameters_collection_type["tenantuserUpdateUserRoleBulk:::Tenantuserv3UpdateUserRoleBulkRequest"]=""
operation_parameters_collection_type["getLinkedVendor:::vendorId"]=""
operation_parameters_collection_type["getSingleLinkedVendor:::vendorId"]=""
operation_parameters_collection_type["listLinkedVendorDataStores:::vendorId"]=""
operation_parameters_collection_type["listLinkedVendorDataStores:::filter"]=""
operation_parameters_collection_type["listLinkedVendorDataStores:::sort"]=""
operation_parameters_collection_type["listLinkedVendorDataStores:::pageSize"]=""
operation_parameters_collection_type["listLinkedVendorDataStores:::nextToken"]=""
operation_parameters_collection_type["listTrustedAssets:::filter"]=""
operation_parameters_collection_type["universalConnectorManagerUploadPlugin:::Universalconnectormanagerv3UploadPluginRequest"]=""
operation_parameters_collection_type["workflowCreateCase:::Workflowv3CreateCaseRequest"]=""
operation_parameters_collection_type["workflowCreateTask:::case_id"]=""
operation_parameters_collection_type["workflowCreateTask:::Workflowv3CreateTaskRequest"]=""
operation_parameters_collection_type["workflowGetCases:::case_id"]=""
operation_parameters_collection_type["workflowGetCases:::sort_by"]=""
operation_parameters_collection_type["workflowGetCases:::offset"]=""
operation_parameters_collection_type["workflowGetCases:::limit"]=""
operation_parameters_collection_type["workflowGetCasesCount:::Workflowv3GetCasesCountRequest"]=""
operation_parameters_collection_type["workflowGetFilename:::case_id"]=""
operation_parameters_collection_type["workflowGetFilename:::task_id"]=""
operation_parameters_collection_type["workflowGetJobsCount:::case_id"]=""
operation_parameters_collection_type["workflowGetJobsCount:::Workflowv3GetJobsCountRequest"]=""
operation_parameters_collection_type["workflowGetReportResult:::case_id"]=""
operation_parameters_collection_type["workflowGetReportResult:::task_id"]=""
operation_parameters_collection_type["workflowGetReportResult:::offset"]=""
operation_parameters_collection_type["workflowGetReportResult:::limit"]=""
operation_parameters_collection_type["workflowGetTasks:::case_id"]=""
operation_parameters_collection_type["workflowGetTasks:::task_id"]=""
operation_parameters_collection_type["workflowGetTasksCount:::case_id"]=""
operation_parameters_collection_type["workflowGetTasksCount:::Workflowv3GetTasksCountRequest"]=""
operation_parameters_collection_type["workflowSearchCases:::Workflowv3SearchCasesRequest"]=""
operation_parameters_collection_type["workflowSearchReports:::Workflowv3SearchCasesRequest"]=""
operation_parameters_collection_type["workflowSearchTasks:::case_id"]=""
operation_parameters_collection_type["workflowSearchTasks:::Workflowv3SearchTasksRequest"]=""
operation_parameters_collection_type["workflowUpdateCases:::Workflowv3UpdateCasesRequest"]=""
operation_parameters_collection_type["workflowUpdateTasks:::case_id"]=""
operation_parameters_collection_type["workflowUpdateTasks:::Workflowv3UpdateTasksRequest"]=""


##
# Map for body parameters passed after operation as
# PARAMETER==STRING_VALUE or PARAMETER:=NUMERIC_VALUE
# These will be mapped to top level json keys ( { "PARAMETER": "VALUE" })
declare -A body_parameters

##
# These arguments will be directly passed to cURL
curl_arguments=""

##
# The host for making the request
host=""

##
# The user credentials for basic authentication
basic_auth_credential=""

##
# The user API key
apikey_auth_credential=""

##
# If true, the script will only output the actual cURL command that would be
# used
print_curl=false

##
# The operation ID passed on the command line
operation=""

##
# The provided Accept header value
header_accept=""

##
# The provided Content-type header value
header_content_type=""

##
# If there is any body content on the stdin pass it to the body of the request
body_content_temp_file=""

##
# If this variable is set to true, the request will be performed even
# if parameters for required query, header or body values are not provided
# (path parameters are still required).
force=false

##
# Declare some mime types abbreviations for easier content-type and accepts
# headers specification
declare -A mime_type_abbreviations
# text/*
mime_type_abbreviations["text"]="text/plain"
mime_type_abbreviations["html"]="text/html"
mime_type_abbreviations["md"]="text/x-markdown"
mime_type_abbreviations["csv"]="text/csv"
mime_type_abbreviations["css"]="text/css"
mime_type_abbreviations["rtf"]="text/rtf"
# application/*
mime_type_abbreviations["json"]="application/json"
mime_type_abbreviations["xml"]="application/xml"
mime_type_abbreviations["yaml"]="application/yaml"
mime_type_abbreviations["js"]="application/javascript"
mime_type_abbreviations["bin"]="application/octet-stream"
mime_type_abbreviations["rdf"]="application/rdf+xml"
# image/*
mime_type_abbreviations["jpg"]="image/jpeg"
mime_type_abbreviations["png"]="image/png"
mime_type_abbreviations["gif"]="image/gif"
mime_type_abbreviations["bmp"]="image/bmp"
mime_type_abbreviations["tiff"]="image/tiff"


##############################################################################
#
# Escape special URL characters
# Based on table at http://www.w3schools.com/tags/ref_urlencode.asp
#
##############################################################################
url_escape() {
    local raw_url="$1"

    value=$(sed -e 's/ /%20/g' \
       -e 's/!/%21/g' \
       -e 's/"/%22/g' \
       -e 's/#/%23/g' \
       -e 's/\&/%26/g' \
       -e 's/'\''/%28/g' \
       -e 's/(/%28/g' \
       -e 's/)/%29/g' \
       -e 's/:/%3A/g' \
       -e 's/\\t/%09/g' \
       -e 's/?/%3F/g' <<<"$raw_url");

    echo "$value"
}

##############################################################################
#
# Lookup the mime type abbreviation in the mime_type_abbreviations array.
# If not present assume the user provided a valid mime type
#
##############################################################################
lookup_mime_type() {
    local mime_type="$1"

    if [[ ${mime_type_abbreviations[$mime_type]} ]]; then
        echo "${mime_type_abbreviations[$mime_type]}"
    else
        echo "$mime_type"
    fi
}

##############################################################################
#
# Converts an associative array into a list of cURL header
# arguments (-H "KEY: VALUE")
#
##############################################################################
header_arguments_to_curl() {
    local headers_curl=""
    local api_key_header=""
    local api_key_header_in_cli=""
    api_key_header="authorization"

    for key in "${!header_arguments[@]}"; do
        headers_curl+="-H \"${key}: ${header_arguments[${key}]}\" "
        if [[ "${key}XX" == "${api_key_header}XX" ]]; then
            api_key_header_in_cli="YES"
        fi
    done
    #
    # If the api_key was not provided in the header, try one from the
    # environment variable
    #
    if [[ -z $api_key_header_in_cli && -n $apikey_auth_credential ]]; then
        headers_curl+="-H \"${api_key_header}: ${apikey_auth_credential}\""
    fi
    headers_curl+=" "

    echo "${headers_curl}"
}

##############################################################################
#
# Converts an associative array into a simple JSON with keys as top
# level object attributes
#
# \todo Add conversion of more complex attributes using paths
#
##############################################################################
body_parameters_to_json() {
    if [[ $RAW_BODY == "1" ]]; then
        echo "-d '${body_parameters["RAW_BODY"]}'"
    else
        local body_json="-d '{"
        local count=0
        for key in "${!body_parameters[@]}"; do
            if [[ $((count++)) -gt 0 ]]; then
                body_json+=", "
            fi
            body_json+="\"${key}\": ${body_parameters[${key}]}"
        done
        body_json+="}'"

        if [[ "${#body_parameters[@]}" -eq 0 ]]; then
            echo ""
        else
            echo "${body_json}"
        fi
    fi
}

##############################################################################
#
# Converts an associative array into form urlencoded string
#
##############################################################################
body_parameters_to_form_urlencoded() {
    local body_form_urlencoded="-d '"
    local count=0
    for key in "${!body_parameters[@]}"; do
        if [[ $((count++)) -gt 0 ]]; then
            body_form_urlencoded+="&"
        fi
        body_form_urlencoded+="${key}=${body_parameters[${key}]}"
    done
    body_form_urlencoded+="'"

    if [[ "${#body_parameters[@]}" -eq 0 ]]; then
        echo ""
    else
        echo "${body_form_urlencoded}"
    fi
}

##############################################################################
#
# Helper method for showing error because for example echo in
# build_request_path() is evaluated as part of command line not printed on
# output. Anyway better idea for resource clean up ;-).
#
##############################################################################
ERROR_MSG=""
function finish {
    if [[ -n "$ERROR_MSG" ]]; then
        echo >&2 "${OFF}${RED}$ERROR_MSG"
        echo >&2 "${OFF}Check usage: '${script_name} --help'"
    fi
}
trap finish EXIT


##############################################################################
#
# Validate and build request path including query parameters
#
##############################################################################
build_request_path() {
    local path_template=$1
    local -n path_params=$2
    local -n query_params=$3


    #
    # Check input parameters count against minimum and maximum required
    #
    if [[ "$force" = false ]]; then
        local was_error=""
        for qparam in "${query_params[@]}" "${path_params[@]}"; do
            local parameter_values
            mapfile -t parameter_values < <(sed -e 's/'":::"'/\n/g' <<<"${operation_parameters[$qparam]}")

            #
            # Check if the number of provided values is not less than minimum required
            #
            if [[ ${#parameter_values[@]} -lt ${operation_parameters_minimum_occurrences["${operation}:::${qparam}"]} ]]; then
                echo "ERROR: Too few values provided for '${qparam}' parameter."
                was_error=true
            fi

            #
            # Check if the number of provided values is not more than maximum
            #
            if [[ ${operation_parameters_maximum_occurrences["${operation}:::${qparam}"]} -gt 0 \
                  && ${#parameter_values[@]} -gt ${operation_parameters_maximum_occurrences["${operation}:::${qparam}"]} ]]; then
                echo "ERROR: Too many values provided for '${qparam}' parameter"
                was_error=true
            fi
        done
        if [[ -n "$was_error" ]]; then
            exit 1
        fi
    fi

    # First replace all path parameters in the path
    for pparam in "${path_params[@]}"; do
        local path_regex="(.*)(\\{$pparam\\})(.*)"
        if [[ $path_template =~ $path_regex ]]; then
            path_template=${BASH_REMATCH[1]}${operation_parameters[$pparam]}${BASH_REMATCH[3]}
        fi
    done

    local query_request_part=""

    for qparam in "${query_params[@]}"; do
        if [[ "${operation_parameters[$qparam]}" == "" ]]; then
            continue
        fi

        # Get the array of parameter values
        local parameter_value=""
        local parameter_values
        mapfile -t parameter_values < <(sed -e 's/'":::"'/\n/g' <<<"${operation_parameters[$qparam]}")



        #
        # Append parameters without specific cardinality
        #
        local collection_type="${operation_parameters_collection_type["${operation}:::${qparam}"]}"
        if [[ "${collection_type}" == "" ]]; then
            local vcount=0
            for qvalue in "${parameter_values[@]}"; do
                if [[ $((vcount++)) -gt 0 ]]; then
                    parameter_value+="&"
                fi
                parameter_value+="${qparam}=${qvalue}"
            done
        #
        # Append parameters specified as 'multi' collections i.e. param=value1&param=value2&...
        #
        elif [[ "${collection_type}" == "multi" ]]; then
            local vcount=0
            for qvalue in "${parameter_values[@]}"; do
                if [[ $((vcount++)) -gt 0 ]]; then
                    parameter_value+="&"
                fi
                parameter_value+="${qparam}=${qvalue}"
            done
        #
        # Append parameters specified as 'csv' collections i.e. param=value1,value2,...
        #
        elif [[ "${collection_type}" == "csv" ]]; then
            parameter_value+="${qparam}="
            local vcount=0
            for qvalue in "${parameter_values[@]}"; do
                if [[ $((vcount++)) -gt 0 ]]; then
                    parameter_value+=","
                fi
                parameter_value+="${qvalue}"
            done
        #
        # Append parameters specified as 'ssv' collections i.e. param="value1 value2 ..."
        #
        elif [[ "${collection_type}" == "ssv" ]]; then
            parameter_value+="${qparam}="
            local vcount=0
            for qvalue in "${parameter_values[@]}"; do
                if [[ $((vcount++)) -gt 0 ]]; then
                    parameter_value+=" "
                fi
                parameter_value+="${qvalue}"
            done
        #
        # Append parameters specified as 'tsv' collections i.e. param="value1\tvalue2\t..."
        #
        elif [[ "${collection_type}" == "tsv" ]]; then
            parameter_value+="${qparam}="
            local vcount=0
            for qvalue in "${parameter_values[@]}"; do
                if [[ $((vcount++)) -gt 0 ]]; then
                    parameter_value+="\\t"
                fi
                parameter_value+="${qvalue}"
            done
        else
            echo "Unsupported collection format \"${collection_type}\""
            exit 1
        fi

        if [[ -n "${parameter_value}" ]]; then
            if [[ -n "${query_request_part}" ]]; then
                query_request_part+="&"
            fi
            query_request_part+="${parameter_value}"
        fi

    done


    # Now append query parameters - if any
    if [[ -n "${query_request_part}" ]]; then
        path_template+="?${query_request_part}"
    fi

    echo "$path_template"
}



###############################################################################
#
# Print main help message
#
###############################################################################
print_help() {
cat <<EOF

${BOLD}${WHITE}IBM Guardium Data Security Center command line client (API version 3)${OFF}

${BOLD}${WHITE}Usage${OFF}

  ${GREEN}${script_name}${OFF} [-h|--help] [-V|--version] [--about] [${RED}<curl-options>${OFF}]
           [-ac|--accept ${GREEN}<mime-type>${OFF}] [-ct,--content-type ${GREEN}<mime-type>${OFF}]
           [--host ${CYAN}<url>${OFF}] [--dry-run] [-nc|--no-colors] ${YELLOW}<operation>${OFF} [-h|--help]
           [${BLUE}<headers>${OFF}] [${MAGENTA}<parameters>${OFF}] [${MAGENTA}<body-parameters>${OFF}]

  - ${CYAN}<url>${OFF} - endpoint of the REST service without basepath

  - ${RED}<curl-options>${OFF} - any valid cURL options can be passed before ${YELLOW}<operation>${OFF}
  - ${GREEN}<mime-type>${OFF} - either full mime-type or one of supported abbreviations:
                   (text, html, md, csv, css, rtf, json, xml, yaml, js, bin,
                    rdf, jpg, png, gif, bmp, tiff)
  - ${BLUE}<headers>${OFF} - HTTP headers can be passed in the form ${YELLOW}HEADER${OFF}:${BLUE}VALUE${OFF}
  - ${MAGENTA}<parameters>${OFF} - REST operation parameters can be passed in the following
                   forms:
                   * ${YELLOW}KEY${OFF}=${BLUE}VALUE${OFF} - path or query parameters
  - ${MAGENTA}<body-parameters>${OFF} - simple JSON body content (first level only) can be build
                        using the following arguments:
                        * ${YELLOW}KEY${OFF}==${BLUE}VALUE${OFF} - body parameters which will be added to body
                                      JSON as '{ ..., "${YELLOW}KEY${OFF}": "${BLUE}VALUE${OFF}", ... }'
                        * ${YELLOW}KEY${OFF}:=${BLUE}VALUE${OFF} - body parameters which will be added to body
                                      JSON as '{ ..., "${YELLOW}KEY${OFF}": ${BLUE}VALUE${OFF}, ... }'

EOF
    echo -e "${BOLD}${WHITE}Authentication methods${OFF}"
    echo -e ""
    echo -e "  - ${BLUE}Api-key${OFF} - add '${RED}authorization:<api-key>${OFF}' after ${YELLOW}<operation>${OFF}"
    
    echo -e "  - ${BLUE}Basic AUTH${OFF} - add '-u <username>:<password>' before ${YELLOW}<operation>${OFF}"
    
    echo ""
    echo -e "${BOLD}${WHITE}Operations (grouped by tags)${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}[analyticsEventsService]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}analyticsEventsServiceDeleteCacheKey${OFF};Summary: Delete cache key
Description: Return delete key result message. (AUTH) (AUTH)
  ${CYAN}analyticsEventsServicePostQSAdvisorRisk${OFF};Summary: For QS Advisor risk notification only
Description: Sends QS Advisor risk notification with recipients and returns a status (AUTH) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[assetsService]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}assetsServiceAssetIngestion${OFF};AssetIngestion - Asset Ingestion Api to ingest assets from different applications including asset extensibility assets. (AUTH) (AUTH)
  ${CYAN}assetsServiceAssetIngestionManualTrigger${OFF};AssetIngestionManualTrigger - Manual trigger for Scheduled Asset Ingestion of databases. (AUTH) (AUTH)
  ${CYAN}assetsServiceClonePolicy${OFF};ClonePolicy - Clone a policy. (AUTH) (AUTH)
  ${CYAN}assetsServiceCreateUpdatePolicy${OFF};CreateUpdatePolicy - Create/update new Policy. (AUTH) (AUTH)
  ${CYAN}assetsServiceDeleteFilterTemplateForAssets${OFF};DeleteFilterTemplateForAssets - Deleting a template using TemplateID in manage assets. (AUTH) (AUTH)
  ${CYAN}assetsServiceDeletePolicies${OFF};DeletePolicies - Delete Policy returns response code and message. (AUTH) (AUTH)
  ${CYAN}assetsServiceFetchAssetChangeLog${OFF};FetchAssetChangeLog - Fetch the logs for any actions performed on assets. (AUTH) (AUTH)
  ${CYAN}assetsServiceFetchAssetDashboard${OFF};FetchAssetDashboard - Gets Filter Templates for Dshboard Widgets. (AUTH) (AUTH)
  ${CYAN}assetsServiceFetchAssetList${OFF};FetchAssetList - Asset Fetch Api . (AUTH) (AUTH)
  ${CYAN}assetsServiceFetchAssetsForMergeSplit${OFF};FetchAssetsForMergeSplit : Fetch assets for Merge and Split. (AUTH) (AUTH)
  ${CYAN}assetsServiceFindAssetName${OFF};FindAssetName - Checks if the given Asset Name has already been assigned to an asset. (AUTH) (AUTH)
  ${CYAN}assetsServiceGetAssetOverview${OFF};GetAssetOverview - Get asset overview widgets data for a particular asset. (AUTH) (AUTH)
  ${CYAN}assetsServiceGetAssetTopology${OFF};GetAssetTopology- Get list of topology for a parent asset. (AUTH) (AUTH)
  ${CYAN}assetsServiceGetFilterTemplateForAssets${OFF};GetFilterTemplateForAssets - Get list of filters query templates for manage assets. (AUTH) (AUTH)
  ${CYAN}assetsServiceGetFiltersForAssets${OFF};GetFiltersForAssets - Get a list of filters category and sub category with all data. (AUTH) (AUTH)
  ${CYAN}assetsServiceListPolicy${OFF};ListPolicy - List all policies. (AUTH) (AUTH)
  ${CYAN}assetsServiceListRule${OFF};ListRule - List all rules for a policy. (AUTH) (AUTH)
  ${CYAN}assetsServiceListTagDomains${OFF};ListTagDomains - Get Tag categories by request parameters . (AUTH) (AUTH)
  ${CYAN}assetsServiceListTags${OFF};ListTags - Get Tags for Manage Tags listing screen . (AUTH) (AUTH)
  ${CYAN}assetsServiceMergeOrSplitAssets${OFF};MergeOrSplitAssets - Merge or split the selected assets. (AUTH) (AUTH)
  ${CYAN}assetsServiceSaveAssignedTags${OFF};SaveAssignedTags - Save Assigned Tags to TAG_DSDEF_MAP table. (AUTH) (AUTH)
  ${CYAN}assetsServiceSaveTagConceptData${OFF};SaveTagConceptData - creates a custom tag (AUTH) (AUTH)
  ${CYAN}assetsServiceSaveTagDomainData${OFF};SaveTagDomainData - creates a custom category to be assigned to a tag (AUTH) (AUTH)
  ${CYAN}assetsServiceSaveUpdateFilterTemplateForAssets${OFF};SaveUpdateFilterTemplateForAssets - Save/Update a filters query to use as template in manage assets along with reordering of template list. (AUTH) (AUTH)
  ${CYAN}assetsServiceSetBannerState${OFF};SetBannerState - Set banner state for asset inventory page. (AUTH) (AUTH)
  ${CYAN}assetsServiceUpdateAssetName${OFF};UpdateAssetName - Udates the name of the asset as given by the user. (AUTH) (AUTH)
  ${CYAN}assetsServiceUpdatePolicy${OFF};UpdatePolicy - Update existing Policy status. (AUTH) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[auditService]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}auditServiceGetActivityRecords${OFF};Summary: Get activity records
Description: Return activity records that match the arguments passed in the request. 
Multiple values can be passed to the (UID, Context, ActionTaken, PerformedBy) fields by supplying a 
comma-separated list to the corresponding fields in the request.  For instance to check for 
multiple Contexts set the field to \"op1, op2, op3\". (AUTH) (AUTH)
  ${CYAN}auditServicePutDownloadActivityRecord${OFF};Summary: Put download activity record
Description: Create an activity log record with the arguments passed in the request. (AUTH) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[authServerService]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}authServerServiceCreateOauthClient${OFF};Summary: Create Oauth client
Description: Create/register new Oauth client. (AUTH) (AUTH)
  ${CYAN}authServerServiceDeleteOauthClient${OFF};Summary: Delete Oauth client
Description: Delete registered Oauth client by clientId. (AUTH) (AUTH)
  ${CYAN}authServerServiceGetAccessToken${OFF};Summary: Get access token
Description: Get access token from passed clientId and secret. (AUTH)
  ${CYAN}authServerServiceGetOauthClient${OFF};Summary: Get Oauth client
Description: Get registered Oauth client by clientId. (AUTH) (AUTH)
  ${CYAN}authServerServiceGetUser${OFF};Summary: Get user
Description: Get user. (AUTH) (AUTH)
  ${CYAN}authServerServiceListOauthClient${OFF};Summary: List Oauth client
Description: List all registered Oauth client. (AUTH) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[cloudAccounts]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}addAnalyzedRegion${OFF};Add a new region for data classification (AUTH)
  ${CYAN}addCloudAccounts${OFF};Add cloud account connections to DSPM (AUTH)
  ${CYAN}generateAtlassianConfluenceAuthUrl${OFF};Generate a Confluence authentication URL (AUTH)
  ${CYAN}generateAtlassianJiraAuthUrl${OFF};Generate a JIRA authentication URL (AUTH)
  ${CYAN}generateAzureAuthUrl${OFF};Generate azure authorization url (AUTH)
  ${CYAN}generateOffice365AuthUrl${OFF};Generate a Microsoft 365 consent URL (AUTH)
  ${CYAN}generateSlackAuthUrl${OFF};Generate a Slack authentication URL (AUTH)
  ${CYAN}generateSnowflakeAuthUrl${OFF};Validate and Generate a Snowflake OAuth URL (AUTH)
  ${CYAN}getAnalyzedRegionStatus${OFF};Get the status of analyzer installation for a region (AUTH)
  ${CYAN}getAzureAdminConsentStatus${OFF};Get Azure admin consent status (AUTH)
  ${CYAN}getCloudAccountInstallationStatus${OFF};Get the installation status of a cloud account (AUTH)
  ${CYAN}getRefreshTokenExpiry${OFF};Get Snowflake Refresh Token Expiry date (AUTH)
  ${CYAN}listLinkedAccounts${OFF};List cloud accounts connected to DSPM (AUTH)
  ${CYAN}removeAccounts${OFF};Post cloud account ID connections to be removed (AUTH)
  ${CYAN}removeAccountsInstructions${OFF};Post cloud account IDs and get instructions to remove the accounts (AUTH)
  ${CYAN}retrieveServiceAccountId${OFF};Get Google Workspace authentication (AUTH)
  ${CYAN}snowflakeIntegrationScript${OFF};Generate Snowflake Integration Script (AUTH)
  ${CYAN}submitGoogleWorkspaceAdminEmail${OFF};Submit email for service account authorization (AUTH)
  ${CYAN}submitOffice365TenantInfo${OFF};Submit Microsoft 365 customer information (AUTH)
  ${CYAN}submitSlackAuthCode${OFF};Submit a Slack authentication code (AUTH)
  ${CYAN}submitSnowflakeAuthCode${OFF};Submit Snowflake oAuth code (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[complianceAccelerator]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}complianceAcceleratorCreateWorkspace${OFF};Summary: Create workspace
Description: Create a workspace. (AUTH) (AUTH)
  ${CYAN}complianceAcceleratorDeleteComplianceWorkspaces${OFF};Summary: Delete compliance workspaces
Description: Delete workspaces. (AUTH) (AUTH)
  ${CYAN}complianceAcceleratorGetComplianceInfo${OFF};Summary: Get compliance info
Description: Return stored compliance data. (AUTH) (AUTH)
  ${CYAN}complianceAcceleratorHydrateWorkspace${OFF};HydrateWorkspace - Hydrates specified objects within a workspace (AUTH) (AUTH)
  ${CYAN}complianceAcceleratorStoreComplianceInfo${OFF};Summary: Store compliance info
Description: Store compliance data. (AUTH) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[connectionsService]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}connectionsServiceCreateConnectionsAccounts${OFF};Summary: Create Connections accounts
Description: Create Connections acccounts. (AUTH) (AUTH)
  ${CYAN}connectionsServiceCreateConnectionsConfigs${OFF};Summary: Create connections configs
Description: Create Connection config by connection type. (AUTH) (AUTH)
  ${CYAN}connectionsServiceCreatePlugin${OFF};Summary: Create plugin
Description: Create UC generic plugin (AUTH) (AUTH)
  ${CYAN}connectionsServiceCreateSettings${OFF};Summary: Create settings
Description: Create Settings. (AUTH) (AUTH)
  ${CYAN}connectionsServiceDeleteConnectionsAccounts${OFF};Summary: Delete Connections accounts
Description: Delete Connections acccounts. (AUTH) (AUTH)
  ${CYAN}connectionsServiceDeleteConnectionsConfigs${OFF};Summary: Delete connections configs
Description: Delete Connection config by connection id. (AUTH) (AUTH)
  ${CYAN}connectionsServiceDeleteConnector${OFF};Summary: Delete connector
Description: Delete a Connection. (AUTH) (AUTH)
  ${CYAN}connectionsServiceDeletePlugin${OFF};Summary: Delete plugin.
Description: Delete plugin. (AUTH) (AUTH)
  ${CYAN}connectionsServiceGetBannerState${OFF};Summary: Get banner state for object verb page. 
Description: Get banner state for object verb page. (AUTH) (AUTH)
  ${CYAN}connectionsServiceGetConnectionsAccounts${OFF};Summary: Get Connections accounts
Description: Get Connections acccounts. (AUTH) (AUTH)
  ${CYAN}connectionsServiceGetConnectionsConfigs${OFF};Summary: Get connections configs
Description: Get Connection config by connection type. (AUTH) (AUTH)
  ${CYAN}connectionsServiceGetConnectionsWithFilters${OFF};Summary: Get connections with filters
Description: Get connections with filters. (AUTH) (AUTH)
  ${CYAN}connectionsServiceGetConnectorsSummary${OFF};Summary: Get connectors summary
Description: Get a summary of Connectors. (AUTH) (AUTH)
  ${CYAN}connectionsServiceGetDataSources${OFF};Summary: Get data sources
Description: Get a list of data sources. (AUTH) (AUTH)
  ${CYAN}connectionsServiceGetGuardRecordFields${OFF};Summary: Get list of guard record fields. 
Description: Get list of guard record fields. (AUTH) (AUTH)
  ${CYAN}connectionsServiceGetHeaders${OFF};Summary: Get headers
Description: Get a list of Headers. (AUTH) (AUTH)
  ${CYAN}connectionsServiceGetPlugins${OFF};Summary: Get plugins 
Description: Get custom universal connector plugins (AUTH) (AUTH)
  ${CYAN}connectionsServiceGetSettings${OFF};Summary: Get settings
Description: Get a list of Settings. (AUTH) (AUTH)
  ${CYAN}connectionsServicePartialUpdateConnectors${OFF};Summary: Partial update connectors
Description: Partial update of Connectors. (AUTH) (AUTH)
  ${CYAN}connectionsServicePostStapCommand${OFF};Summary: Post stap command
Description: Send a STAP command down to kafka for snif-assist. (AUTH) (AUTH)
  ${CYAN}connectionsServiceUpdateBannerState${OFF};Summary: Update banner state for object verb page. 
Description: Update banner state for object verb page. (AUTH) (AUTH)
  ${CYAN}connectionsServiceUpdateConnectionsAccounts${OFF};Summary: Update Connections accounts
Description: Update Connections acccounts. (AUTH) (AUTH)
  ${CYAN}connectionsServiceUpdateConnectionsConfigs${OFF};Summary: Update connections configs
Description: Update Connection config by connection id. (AUTH) (AUTH)
  ${CYAN}connectionsServiceUpdateConnectors${OFF};Summary: Update connectors
Description: Update a list of Connectors. (AUTH) (AUTH)
  ${CYAN}connectionsServiceUpdatePlugin${OFF};Summary: Update plugin.
Description: Update plugin. (AUTH) (AUTH)
  ${CYAN}connectionsServiceUpdateSettings${OFF};Summary: Update settings
Description: Update Settings. (AUTH) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[dashboardsService]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}dashboardsServiceCreateDashboard${OFF};Summary: Create dashboard
Description: Create a unique dashboard. (AUTH) (AUTH)
  ${CYAN}dashboardsServiceDeleteDashboard${OFF};Summary: Delete dashboard
Description: Delete a unique dashboard. (AUTH) (AUTH)
  ${CYAN}dashboardsServiceGetDashboards${OFF};Summary: Get dashboards
Description: Get a list of dashboards with all data. (AUTH) (AUTH)
  ${CYAN}dashboardsServiceUpdateDashboard${OFF};Summary: Update dashboard
Description: Update a dashboard. (AUTH) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[dataMovements]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}getActualFlow${OFF};Get actual flow by providing its ID (AUTH)
  ${CYAN}getActualFlowsSummary${OFF};Get summary of actual flows (AUTH)
  ${CYAN}getPotentialFlow${OFF};Get potential flow by providing its ID (AUTH)
  ${CYAN}getPotentialFlowPath${OFF};Get potential flow path by providing its ID (AUTH)
  ${CYAN}getPotentialFlowsSummary${OFF};Get summary of potential flows according to the filter applied (AUTH)
  ${CYAN}listActualFlowPaths${OFF};Get summary of actual flows according to the filter applied (AUTH)
  ${CYAN}listActualFlows${OFF};List actual flows (AUTH)
  ${CYAN}listPotentialFlows${OFF};List potential flows (AUTH)
  ${CYAN}listPotentialFlowsPaths${OFF};List potential flow paths (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[dataResources]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}getDataResource${OFF};Get a specific data resource by its ID (AUTH)
  ${CYAN}getDataResourcesSummary${OFF};Data resources summary (AUTH)
  ${CYAN}listDataResources${OFF};List data resources that match a given filter (AUTH)
  ${CYAN}listDataResourcesNames${OFF};List names of data resources (AUTH)
  ${CYAN}removeResource${OFF};Remove resource from DSPM (AUTH)
  ${CYAN}updateResourceReviewStatus${OFF};Set review status of a data resource (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[dataSensitivities]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}getSensitivitiesSummary${OFF};Get the summary of sensitivities (AUTH)
  ${CYAN}getSensitivity${OFF};Get sensitivity details by providing its ID (AUTH)
  ${CYAN}listSensitivities${OFF};List sensitivities (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[dataStores]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}getDataStore${OFF};Get a data store by its ID (AUTH)
  ${CYAN}getDataStoresSummary${OFF};Get summary of data stores (AUTH)
  ${CYAN}listAllDataStoresLabels${OFF};List labels of data stores. (AUTH)
  ${CYAN}listDataStores${OFF};List data stores (AUTH)
  ${CYAN}listDataStoresCloudTagsKeys${OFF};List the cloud tag keys of data stores that can be filtered on the basis of prefixes. (AUTH)
  ${CYAN}listDataStoresCloudTagsValues${OFF};List the cloud tag values of data stores that can be filtered on the basis of prefixes and cloud tag key names. (AUTH)
  ${CYAN}listDataStoresNames${OFF};List name of filterable data stores (AUTH)
  ${CYAN}rescanDataStore${OFF};Post data store rescan request (AUTH)
  ${CYAN}setDataStoreLabel${OFF};Label a data store with an existing or new label (AUTH)
  ${CYAN}updateDatastoreCustodian${OFF};Update the name of a Data store custodian (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[dataVulnerabilities]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}addVulnerabilityStatusComment${OFF};Add vulnerability status comment (AUTH)
  ${CYAN}getVulnerabilitiesSummary${OFF};Get vulnerabilities summary (AUTH)
  ${CYAN}getVulnerability${OFF};Get vulnerability details by ID (AUTH)
  ${CYAN}listVulnerabilities${OFF};List vulnerabilities based on an applied filter (AUTH)
  ${CYAN}listVulnerabilitiesByDataStore${OFF};List vulnerabilities of data stores (AUTH)
  ${CYAN}removeVulnerabilityStatusComment${OFF};Delete vulnerability status comment (AUTH)
  ${CYAN}setVulnerabilityStatus${OFF};Set status of a vulnerability (AUTH)
  ${CYAN}updateVulnerabilityStatusComment${OFF};Set vulnerability status (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[databootstrapperService]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}databootstrapperServiceLoadData${OFF};Summary: Load data
Description: Load data for a tenant. (AUTH) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[datamartProcessorService]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}datamartProcessorServiceGetDatamartInfo${OFF};Summary: Get datamarts
Description: Return a list of files inside a datamart to the caller. (AUTH) (AUTH)
  ${CYAN}datamartProcessorServiceGetDatamarts${OFF};Summary: Get datamarts
Description: Return a list of datamarts for a time interval to the caller. (AUTH) (AUTH)
  ${CYAN}datamartProcessorServiceGetEarliestStartTime${OFF};Summary: Get rarliest start time
Description: Return the earliest time period of data available in database. (AUTH) (AUTH)
  ${CYAN}datamartProcessorServiceSendAllCompleteFilesToQueue${OFF}; (AUTH) (AUTH)
  ${CYAN}datamartProcessorServiceStoreExtractionLogs${OFF};Summary: Store extraction logs
Description: Store the datamart extraction logs inside GI. (AUTH) (AUTH)
  ${CYAN}uploadDatamart${OFF};Summary: Upload datamart
Description: Upload datamart file for ingestion. (AUTH) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[ecosystemService]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}ecosystemServiceCreateDataset${OFF};Summary: Create dataset
Description: Save a definition in the database. (AUTH) (AUTH)
  ${CYAN}ecosystemServiceDataInsert${OFF};Summary: Data insert
Description: Process Data received from webhook API and insert. (AUTH) (AUTH)
  ${CYAN}ecosystemServiceDeleteDatasets${OFF};Summary: Delete datasets
Description: Delete an array of datasets. (AUTH) (AUTH)
  ${CYAN}ecosystemServiceGetDatasetData${OFF};Summary: Get dataset data
Description: Return data report for a given dataset. (AUTH) (AUTH)
  ${CYAN}ecosystemServiceGetDatasetDetail${OFF};Summary: Get dataset detail
Description: Return detail on a dataset definition. (AUTH) (AUTH)
  ${CYAN}ecosystemServiceGetDatasets${OFF};Summary: Get datasets
Description: Return dataset list that matches the specified filter. (AUTH) (AUTH)
  ${CYAN}ecosystemServiceGetPurgableRows${OFF};Summary: Get purgable rows
Description: Check the number of rows that can be purged. (AUTH) (AUTH)
  ${CYAN}ecosystemServicePurgeData${OFF};Summary: Purge data
Description: Purge data. (AUTH) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[featureFlagsService]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}featureFlagsServiceDeleteFeatureFlagOverrides${OFF};Summary: Delete feature Flag overrides
Description: Delete feature Flag overrides from database. (AUTH) (AUTH)
  ${CYAN}featureFlagsServiceGetFeatureFlagOverrides${OFF};Summary: Get feature Flag overrides
Description: Get feature Flag overrides by Feature Flag Name. (AUTH) (AUTH)
  ${CYAN}featureFlagsServiceGetFeatureFlags${OFF};Summary: Get feature flags
Description: Get feature flags by Feature Flag Name. (AUTH) (AUTH)
  ${CYAN}featureFlagsServiceUpdateFeatureFlagOverrides${OFF};Summary: Update feature Flag overrides
Description: Update feature Flag overrides in the database. (AUTH) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[groupBuilder]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}groupBuilderCancelImportGroup${OFF};Summary: Cancel import group
Description: Cancel import refresh for selected groups. (AUTH) (AUTH)
  ${CYAN}groupBuilderCreateGroup${OFF};Summary: Create group
Description: Create new groups. (AUTH) (AUTH)
  ${CYAN}groupBuilderDeleteGroup${OFF};Summary: Delete group
Description: Delete specified groups if the group ID is not used for reports. (AUTH) (AUTH)
  ${CYAN}groupBuilderEditGroup${OFF};Summary: Edit group
Description: Add or delete group members. (AUTH) (AUTH)
  ${CYAN}groupBuilderExportGroup${OFF};Summary: Export group
Description: Export group content to a file based on a group ID. (AUTH) (AUTH)
  ${CYAN}groupBuilderGetGroupDetails${OFF};Summary: Get group details
Description: Get details of group specified by group ID. (AUTH) (AUTH)
  ${CYAN}groupBuilderGetGroupMembers${OFF};Summary: Get group members
Description: Get members of all the group ids provided in the request. To be consumed by policy builder ms. (AUTH) (AUTH)
  ${CYAN}groupBuilderGetGroupSyncMapping${OFF};Summary: Get gdp to gi group mapping
Description: Get insights to gdp group sync mapping. (AUTH) (AUTH)
  ${CYAN}groupBuilderGetGroupTypeMapping${OFF};Summary: Get group type mapping
Description: Get insights to gdp group types mapping. (AUTH) (AUTH)
  ${CYAN}groupBuilderGetGroupTypes${OFF};Summary: Get group types
Description: Get a list of available group types. (AUTH) (AUTH)
  ${CYAN}groupBuilderGetGroups${OFF};Summary: Get groups
Description: Get a list of imported group members. (AUTH) (AUTH)
  ${CYAN}groupBuilderGetImportGroups${OFF};Summary: Get import groups
Description: Get unsynchronized groups from a central manager. (AUTH) (AUTH)
  ${CYAN}groupBuilderImportGroup${OFF};Summary: Import group
Description: Import selected groups from a central manager. (This API is called from GDP only) (AUTH) (AUTH)
  ${CYAN}groupBuilderRefreshGroups${OFF};Summary: Refresh groups
Description: Refresh tenants selected imported groups. (AUTH) (AUTH)
  ${CYAN}groupBuilderResetGroups${OFF};Summary: Reset groups
Description: Resets tenants selected predefined groups. (AUTH) (AUTH)
  ${CYAN}groupBuilderStoreGroupMembersGdp${OFF};Summary: Store group members Gdp
Description: Store GDP groups. (This API is called from GDP only) (AUTH) (AUTH)
  ${CYAN}groupBuilderStoreGroupsGdp${OFF};Summary: Store groups Gdp
Description: Store GDP groups. (This API is called from GDP only) (AUTH) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[guardiumConnector]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}guardiumConnectorAddCM${OFF};Summary: Add CM
Description: Add a Central Manager to the tenant database. (AUTH) (AUTH)
  ${CYAN}guardiumConnectorAddDatamarts${OFF};Description: stores datamarts details from GDP (AUTH) (AUTH)
  ${CYAN}guardiumConnectorAddDmExclusion${OFF};Summary: Add DM exclusion
Description: Add datamart to exclusion list. (AUTH) (AUTH)
  ${CYAN}guardiumConnectorAddTask${OFF};Summary: Add task
Description: Add a task to be executed on GDP. (AUTH) (AUTH)
  ${CYAN}guardiumConnectorBlockUser${OFF};Summary: Block user
Description: Block a database user on Guardium Data Protection or on a supported Database as a Service instance. (AUTH) (AUTH)
  ${CYAN}guardiumConnectorConfigureAggregatorExport${OFF};Summary: Configure aggregator export
Description: Configure datamart export from the Aggregators to GI. (AUTH) (AUTH)
  ${CYAN}guardiumConnectorConfigureCollectorExport${OFF};Summary: Configure collector export
Description: Schedule export historical data for collectors. (AUTH) (AUTH)
  ${CYAN}guardiumConnectorConfigureStreaming${OFF};Summary: Configure streaming
Description: Enable or disable streaming. (AUTH) (AUTH)
  ${CYAN}guardiumConnectorDatamartVersionCheck${OFF};Description: validates if central manager has datamart support for event model (AUTH) (AUTH)
  ${CYAN}guardiumConnectorDeleteCM${OFF};Summary: Delete CM
Description: Delete a Central Manager by ID (Name, Hostname or IP). (AUTH) (AUTH)
  ${CYAN}guardiumConnectorDeleteDmExclusion${OFF};Summary: Delete DM exclusion
Description: Delete a datamart from exclusion list. (AUTH) (AUTH)
  ${CYAN}guardiumConnectorDeleteTask${OFF};Summary: Delete task
Description: Delete a task by central manager id and task id. (AUTH) (AUTH)
  ${CYAN}guardiumConnectorDeleteTasks${OFF};Summary: Delete tasks
Description: Delete a central manager's tasks by central manager id. (AUTH) (AUTH)
  ${CYAN}guardiumConnectorGetAggregatorsConfig${OFF};Summary: Get aggregators config
Description: Return a list of managed units from the config collection in tenant database. (AUTH) (AUTH)
  ${CYAN}guardiumConnectorGetCMs${OFF};Summary: Get CMs
Description: Return a list of Central Managers from the tenant database with additional processing. (AUTH) (AUTH)
  ${CYAN}guardiumConnectorGetCMsConfig${OFF};Summary: Get CMs config
Description: Return a list of Central Managers from the tenant database. (AUTH) (AUTH)
  ${CYAN}guardiumConnectorGetCollectorsConfig${OFF};Summary: Get collectors config
Description: Return the list of collectors configuration from the tenant database. (AUTH) (AUTH)
  ${CYAN}guardiumConnectorGetDatamarts${OFF};Description: returns full list of supported datamarts including type (historical or non-historical) (AUTH) (AUTH)
  ${CYAN}guardiumConnectorGetDmExclusion${OFF};Summary: Get DM exclusion
Description: Return datamarts in the exclusion list. (AUTH) (AUTH)
  ${CYAN}guardiumConnectorGetGdpPolicyInfo${OFF};Summary: Get guardium policy definition
Description: returns the policy definition on the cm (AUTH) (AUTH)
  ${CYAN}guardiumConnectorGetGdpPolicySummaries${OFF};Summary: Get guardium policy summary
Description: returns the summaries of all policies on that central manager (AUTH) (AUTH)
  ${CYAN}guardiumConnectorGetHealthInfo${OFF};Summary: Get gealth info
Description: Get health information from Guardium Data Protection central mamangers. (AUTH) (AUTH)
  ${CYAN}guardiumConnectorGetLatestDMExtractionProfile${OFF};Summary: Get latest DM extraction profile
Description: Return the Datamart Extraction Profile for Guardium. (AUTH) (AUTH)
  ${CYAN}guardiumConnectorGetStreamingStatus${OFF};Summary: Get streaming status
Description: Return the streaming configuration. (AUTH) (AUTH)
  ${CYAN}guardiumConnectorGetSyncDMs${OFF};Summary: Get sync DMs
Description: Return the list of tasks from a central manager. (AUTH) (AUTH)
  ${CYAN}guardiumConnectorGetTaskTypes${OFF};Summary: Get task types
Description: Return the list of supported task types. (AUTH) (AUTH)
  ${CYAN}guardiumConnectorGetTasks${OFF};Summary: Get tasks
Description: Return the list of tasks from a central manager. (AUTH) (AUTH)
  ${CYAN}guardiumConnectorRunGDPReport${OFF};Summary: Run GDP report
Description: Run GDP report. (AUTH) (AUTH)
  ${CYAN}guardiumConnectorSetupCM${OFF};Summary: Setup CM
Description: Set up the registration between a GDP Central manager and Guardium. (AUTH) (AUTH)
  ${CYAN}guardiumConnectorSetupDatamarts${OFF};Description: setup custom datamart execution mode (AUTH) (AUTH)
  ${CYAN}guardiumConnectorTaskError${OFF};Summary: Task error
Description: Log error messages from GDP task execution. (AUTH) (AUTH)
  ${CYAN}guardiumConnectorTestDatabaseConnection${OFF};Summary: Test database connection
Description: Return database connection results. (AUTH)
  ${CYAN}guardiumConnectorUpdateDmExclusion${OFF};Summary: Update DM exclusion
Description: Update the atamart exclusion list. (AUTH) (AUTH)
  ${CYAN}guardiumConnectorUpdateStreaming${OFF};Summary: Update streaming
Description: Update streaming status into GI. (AUTH) (AUTH)
  ${CYAN}guardiumConnectorUpdateTask${OFF};Summary: Update task
Description: Update a task that gets executed on GDP. (AUTH) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[healthCollector]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}healthCollectorGetDataWarehouseUsage${OFF};Summary: Get data warehouse usage info
Description: Get information from Db2 related to usage (AUTH) (AUTH)
  ${CYAN}healthCollectorGetGDPHealthInfo${OFF};Summary: Get GDP health info
Description: Get information from MongoDB for Guardium central managers using health-connector service. (AUTH) (AUTH)
  ${CYAN}healthCollectorGetHistoricalHealthInfo${OFF};Summary: Get historical health info
Description: Retrieve historical s-tap related statistics from health-collector service. (AUTH) (AUTH)
  ${CYAN}healthCollectorGetObjectStorageUsage${OFF};Summary: Get object storage usage info
Description: Get information from object storage about tenant bucket usage (AUTH) (AUTH)
  ${CYAN}healthCollectorGetPVCUsage${OFF};Summary: Get the PVC usage information
Description: Get information about the PVC usage in the OCP cluster (AUTH) (AUTH)
  ${CYAN}healthCollectorGetPodRestarts${OFF};Summary: Get the pod restart information
Description: Get information about the number of restarts by pod in OCP (AUTH) (AUTH)
  ${CYAN}healthCollectorGetStreamsIngestion${OFF};Summary: Get streams ingestion volume over a given time
Description: Get information about streams ingestion volume (AUTH) (AUTH)
  ${CYAN}healthCollectorGetTopGDPCollectors${OFF};Summary: Get the top GDP collectors which send data to GI
Description: Get information about the top GDP collectors (AUTH) (AUTH)
  ${CYAN}healthCollectorStoreHealthInfo${OFF};Summary: Store health info
Description: Store health info from GDP into GI. (This API is called from GDP only) (AUTH) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[jumpboxService]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}jumpboxServiceAuthorize${OFF};Summary: Authorize
Description: Authenticate a user and return a JWT. (AUTH) (AUTH)
  ${CYAN}jumpboxServiceDeleteTenant${OFF};Summary: Delete tenant
Description: Delete a tenant. (AUTH)
  ${CYAN}jumpboxServiceDeleteUser${OFF};Summary: Delete user
Description: Delete the user. (AUTH) (AUTH)
  ${CYAN}jumpboxServiceGetTenant${OFF};Summary: Get tenant
Description: Get a tenant. (AUTH)
  ${CYAN}jumpboxServiceGetTenants${OFF};Summary: Get tenants
Description: Get all tenant base on UID. (AUTH) (AUTH)
  ${CYAN}jumpboxServiceGetUsers${OFF};Summary: Get users
Description: Get all users base on a tenantID. (AUTH) (AUTH)
  ${CYAN}jumpboxServicePostTenants${OFF};Summary: Post tenants
Description: Create a tenant. (AUTH) (AUTH)
  ${CYAN}jumpboxServicePostUsers${OFF};Summary: Post users
Description: Create users. (AUTH) (AUTH)
  ${CYAN}jumpboxServiceSearchUsers${OFF};Summary: Search users
Description: Search for all users matching the provided string. (AUTH) (AUTH)
  ${CYAN}jumpboxServiceTestUser${OFF};Summary: Test user
Description: Test a user lookup to a given LDAP. (AUTH) (AUTH)
  ${CYAN}jumpboxServiceUpdateTenant${OFF};Summary: Update tenant
Description: Update a tenant. (AUTH)
  ${CYAN}jumpboxServiceUpdateUsers${OFF};Summary: Update users
Description: Update an array of users. (AUTH) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[notificationsService]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}notificationsServiceCreateTicket${OFF};Summary: Create ticket
Description: Create ticket based on information passed in. (AUTH) (AUTH)
  ${CYAN}notificationsServiceGetFolders${OFF};Summary: Get folders
Description: Get folder for the integration connection provided. (AUTH) (AUTH)
  ${CYAN}notificationsServiceGetNotificationFilename${OFF};Summary: Get notification filename
Description: Return filename associated with the notifications record referenced in the associated context record.
The notification id is required but may be set in the associated authentication token or explicitly in the request. (AUTH) (AUTH)
  ${CYAN}notificationsServiceGetNotificationRecord${OFF};Summary: Get notification record
Description: Return notifications record with the specified ID. (AUTH) (AUTH)
  ${CYAN}notificationsServiceGetNotificationRecords${OFF};Summary: Get notification records
Description: Return notifications records that match the specified filter. (AUTH) (AUTH)
  ${CYAN}notificationsServiceGetTicketStatus${OFF};Summary: Get ticket status
Description: Get the status of the given ticket (AUTH) (AUTH)
  ${CYAN}notificationsServiceTestIntegration${OFF};Summary: Test integration
Description: Test the integration connection with the arguments passed in the TestIntegrationRequest.  When possible
a test message is sent to the integration to ensure it is functional. (AUTH) (AUTH)
  ${CYAN}notificationsServiceUpdateNotificationRecord${OFF};Summary: Update notification record
Description: Update a notification record with the specified values.  The ID field is required and must match an existing notification.
All fields other than the ID are optional.
Creation timestamp, user and other administrative fields can not updated. (AUTH) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[outliersEngine]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}outliersEngineGetSourceStatistics${OFF};Summary: Get source statistics
Description: Return statistics regarding the input source, including distribution of verbs, source program, working hours etc. (AUTH) (AUTH)
  ${CYAN}outliersEngineGetStatistics${OFF};Summary: Get statistics
Description: Return statistics regarding number of outliers, clusters and un/completed periods. (AUTH) (AUTH)
  ${CYAN}outliersEngineGetWorkingHoursPeriods${OFF};Summary: Get working hours periods
Description: Get a list of the working hours periods. (AUTH) (AUTH)
  ${CYAN}outliersEngineRunSimulator${OFF};Summary: Run simulator
Description: Run outlier simulator. (AUTH) (AUTH)
  ${CYAN}outliersEngineUpdateWorkingHoursPeriods${OFF};Summary: Update working hours periods
Description: Update the working hours periods values. (AUTH) (AUTH)
  ${CYAN}outliersEngineUploadAndAnalyzePeriod${OFF};Summary: Upload and analyze period
Description: Run outliers detection on ready periods. (AUTH) (AUTH)
  ${CYAN}outliersEngineUserClustering${OFF};Summary: User clustering
Description: Run user-clustering on current sources. (AUTH) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[pipelineconfigService]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}pipelineconfigServiceDeleteTenantResources${OFF};Summary: Delete a tenant resource
Description: Delete tenant specific resources such as db2, mongo, postgres and s3. (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[policyBuilder]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}policyBuilderClonePolicy${OFF};Summary: Clone policy
Description: Clone a policy. (AUTH) (AUTH)
  ${CYAN}policyBuilderCreatePolicy${OFF};Summary: Create policy
Description: Create Policy returns response code and message. (AUTH) (AUTH)
  ${CYAN}policyBuilderDeleteGdpSyncEntry${OFF};Summary: Delete GDP policy sync entry
Description: Deletes GDP policy from sync collection (AUTH) (AUTH)
  ${CYAN}policyBuilderDeletePolicies${OFF};Summary: Delete policies
Description: Delete Policy returns response code and message. (AUTH) (AUTH)
  ${CYAN}policyBuilderGetGdpPolicyMetaData${OFF};Summary: Get GDP policy summary information
Description: Get GDP's CM's policy summary from mogodb (AUTH) (AUTH)
  ${CYAN}policyBuilderGetPolicies${OFF};Summary: Get policies
Description: Return a list of policies to the caller. (AUTH) (AUTH)
  ${CYAN}policyBuilderGetPolicyDetails${OFF};Summary: Get policy details
Description: Return a list of rules inside the policy. (AUTH) (AUTH)
  ${CYAN}policyBuilderGetPolicyNamesFromRuleIDs${OFF};Summary: GetPolicy names from rule IDs
Description: Return a map where the key is the rule ID and value is the policy name that has the rule ID. (AUTH) (AUTH)
  ${CYAN}policyBuilderGetPolicySyncList${OFF};Summary: Get list of synced polices
Description: Returns the list and status of sync entries (AUTH) (AUTH)
  ${CYAN}policyBuilderGetReceivers${OFF};Summary: Get receivers
Description: Get all the receivers associated with actions. (AUTH) (AUTH)
  ${CYAN}policyBuilderGetRuleMetadata${OFF};Summary: Get rule metadata
Description: Return a list of rule parameters and actions to the caller. (AUTH) (AUTH)
  ${CYAN}policyBuilderInsertGdpPolicy${OFF};Summary: Insert GDP policy sync entry
Description: Inserts GDP policy's name into sync collection (AUTH) (AUTH)
  ${CYAN}policyBuilderInsertGdpPolicyMetaData${OFF};Summary: Insert gdp policy summaries
Description: Inserts GDP's CM's policy summary information into mogodb. (This API is called from GDP only) (AUTH) (AUTH)
  ${CYAN}policyBuilderInstallPolicies${OFF};Summary: Install policies
Description: Activate Policies request performs activations. (AUTH) (AUTH)
  ${CYAN}policyBuilderIntegrationCheck${OFF};Summary: Integration check
Description: Check if integration id is being used in policies. (AUTH) (AUTH)
  ${CYAN}policyBuilderPoliciesGroups${OFF};Summary: Policies groups
Description: Get policy groups. (AUTH) (AUTH)
  ${CYAN}policyBuilderRuleValidation${OFF};Summary: Rule validation
Description: Validate a rule parameters and actions. (AUTH) (AUTH)
  ${CYAN}policyBuilderStorePoliciesGdp${OFF};Summary: Store policies Gdp
Description: Store policies.  (This API is called from GDP only) (AUTH) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[qSDataManager]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}qSDataManagerGetMasterData${OFF};Summary: master data for all entities
Description: Retrieves All Dimension and Fact tables data. (AUTH) (AUTH)
  ${CYAN}qSDataManagerRegisterScan${OFF};Summary: Insert ScanDetails
Description: Register new data into scan dimension table. (AUTH) (AUTH)
  ${CYAN}qSDataManagerRetrieveScan${OFF};Summary: Fetch ScanDetails
Description: Fetch details from scan dimension table. (AUTH) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[qSPluginManager]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}qSPluginManagerInvokeAppProv${OFF};Summary: Invoke only application provisioning data plugin
Description:Parses app input file and triggers dataload (AUTH) (AUTH)
  ${CYAN}qSPluginManagerInvokeExplorerV1${OFF};Summary: Invoke only explorer inventory data plugin
Description:Parses explorer input file and triggers dataload (AUTH) (AUTH)
  ${CYAN}qSPluginManagerInvokeExplorerV2${OFF};Summary: Invoke only explorer analytics data plugin
Description:Parses explorer input file and triggers dataload (AUTH) (AUTH)
  ${CYAN}qSPluginManagerInvokePlugin${OFF};Summary: Invoke consolidated or only network data plugin
Description:Parses input files and triggers dataload (AUTH) (AUTH)
  ${CYAN}qSPluginManagerInvokePolicy${OFF};Summary: Invoke only policy data plugin
Description:Parses policy input file and triggers dataload (AUTH) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[qSPolicyManager]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}qSPolicyManagerBatchStatusUpdate${OFF};BatchStatusUpdate - trigger the batch to update the status of the Ticket . (AUTH) (AUTH)
  ${CYAN}qSPolicyManagerCreateTicket${OFF};CreateTicket - Create a new Incident . (AUTH) (AUTH)
  ${CYAN}qSPolicyManagerFetchFilesfromBuckets${OFF};FetchFilesfromBuckets - fetch the file(s) from bucket of the object storage (AUTH) (AUTH)
  ${CYAN}qSPolicyManagerProcessPolicyDimentionRecords${OFF};ProcessPolicyDimentionRecords - fetch the records from Policy Dimention and update Policy Fact table (AUTH) (AUTH)
  ${CYAN}qSPolicyManagerUpdateTicketStatus${OFF};UpdateTicketStatus - Update the ticket status based on the IntegrationId and TicketId . (AUTH) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[reportsRunner]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}reportsRunnerGetActiveQueries${OFF};Summary: Get running queries
Description: Get queries that are running more than certain time (AUTH) (AUTH)
  ${CYAN}reportsRunnerGetAuditDataCount${OFF};Summary: Get audit data count
Description: Get audit data. (AUTH) (AUTH)
  ${CYAN}reportsRunnerGetChartData${OFF};Summary: Get chart data
Description: Get Chart data by chart ID or by specifying report definition and chart settings. (AUTH) (AUTH)
  ${CYAN}reportsRunnerGetChartDatav2${OFF}; (AUTH) (AUTH)
  ${CYAN}reportsRunnerGetReportColumnFacet${OFF};Summary: Get report column facet
Description: Get counts that is group by values for the selected column. (AUTH) (AUTH)
  ${CYAN}reportsRunnerGetReportDataCount${OFF};Summary: Get report data count
Description: Get report data. (AUTH) (AUTH)
  ${CYAN}reportsRunnerRunAuditReport${OFF};Summary: Run audit report
Description: Run task report by SQL based ob report ID and filter definition. (AUTH) (AUTH)
  ${CYAN}reportsRunnerRunReport${OFF};Summary: Run report
Description: Run report by report ID or by specifying report definition. (AUTH) (AUTH)
  ${CYAN}reportsRunnerStopQuery${OFF};Summary: Stop query
Description: Stop a query based on the id (AUTH) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[reportsService]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}reportsServiceCreateCategory${OFF};Summary: Create a category
Description: Create a report category (AUTH) (AUTH)
  ${CYAN}reportsServiceCreateChart${OFF};Summary: Create chart
Description: Create custom chart based on provided properties. (AUTH) (AUTH)
  ${CYAN}reportsServiceCreateChartTemplatev2${OFF};Summary: Create chart template v2
Description: Create custom VEGA chart template. (AUTH) (AUTH)
  ${CYAN}reportsServiceCreateChartv2${OFF};Summary: Create chart v2
Description: Create custom VEGA chart based on provided properties. (AUTH) (AUTH)
  ${CYAN}reportsServiceCreateFieldsByCategory${OFF};Summary - Create fields by category
Description: Cteate category fields based on provided properties. (AUTH) (AUTH)
  ${CYAN}reportsServiceCreateJoin${OFF};Summary: Create a join
Description: Create a custom report join (AUTH) (AUTH)
  ${CYAN}reportsServiceCreateReport${OFF};Summary: Create report
Description: Create custom report based on provided properties. (AUTH) (AUTH)
  ${CYAN}reportsServiceCreateVariant${OFF};Summary: Create a variant
Description: Create a variant for reports (AUTH) (AUTH)
  ${CYAN}reportsServiceDeleteCategory${OFF};Summary: Delete a category
Description: Delete a report category (AUTH) (AUTH)
  ${CYAN}reportsServiceDeleteChart${OFF};Summary: Delete chart
Description: Delete a custom chart. (AUTH) (AUTH)
  ${CYAN}reportsServiceDeleteChartTemplatev2${OFF};Summary: Delete chart template v2
Description: Delete a custom VEGA chart template. (AUTH) (AUTH)
  ${CYAN}reportsServiceDeleteChartv2${OFF};Summary: Delete chart v2
Description: Delete a custom VEGA chart. (AUTH) (AUTH)
  ${CYAN}reportsServiceDeleteFieldsByCategory${OFF};Summary - Delete fields by category
Description: Delete category fields based on provided properties. (AUTH) (AUTH)
  ${CYAN}reportsServiceDeleteJoin${OFF};Summary: Delete a join
Description: Delete a custom join (AUTH) (AUTH)
  ${CYAN}reportsServiceDeleteReport${OFF};Summary: Delete report
Description: Delete a custom report. (AUTH) (AUTH)
  ${CYAN}reportsServiceDeleteVariant${OFF};Summary: Delete a variant
Description: Delete a variant (AUTH) (AUTH)
  ${CYAN}reportsServiceGetCategories${OFF};Summary:  Get all available report categories.
Description: Get all category related fields or all possible fields. (AUTH) (AUTH)
  ${CYAN}reportsServiceGetChartSettings${OFF};Summary: Get chart settings
Description: Get a custom chart based on provided report id. (AUTH) (AUTH)
  ${CYAN}reportsServiceGetChartSettingsv2${OFF};Summary: Get chart settings v2
Description: Get a custom VEGA chart based on provided report id. (AUTH) (AUTH)
  ${CYAN}reportsServiceGetChartTemplatesv2${OFF};Summary: Get chart template v2
Description: Get all custom VEGA chart templates. (AUTH) (AUTH)
  ${CYAN}reportsServiceGetFieldsByCategories${OFF};Summary: Get fields by categories
Description: Get all category related fields or all possible fields based on a list of categories. (AUTH) (AUTH)
  ${CYAN}reportsServiceGetFieldsByCategory${OFF};Summary: Get fields by category
Description: Get all category related fields or all possible fields. (AUTH) (AUTH)
  ${CYAN}reportsServiceGetJoins${OFF};Summary: Get all joins
Description: Get all custom joins. (AUTH) (AUTH)
  ${CYAN}reportsServiceGetQueryByReportDefinition${OFF};Summary: Get query by report definition
Description: Get query by report definition. (AUTH) (AUTH)
  ${CYAN}reportsServiceGetQueryByReportID${OFF};Summary: Get query by report ID
Description: Get query by report ID. (AUTH) (AUTH)
  ${CYAN}reportsServiceGetReportDefinition${OFF};Summary: Get report definition
Description: Get report definition. (AUTH) (AUTH)
  ${CYAN}reportsServiceGetReportGroups${OFF};Summary: Get report groups
Description: Get reports used by the provided groups. (AUTH) (AUTH)
  ${CYAN}reportsServiceGetReportSynopsis${OFF};Summary: Get report synopsis
Description: Return BriefReport. (AUTH) (AUTH)
  ${CYAN}reportsServiceGetReportTimestampHeader${OFF};Summary: Get report timestamp header
Description: Get where to take a report timestamp given an entity. (AUTH) (AUTH)
  ${CYAN}reportsServiceGetReports${OFF};Summary: Get reports
Description: Get reports list. (AUTH) (AUTH)
  ${CYAN}reportsServiceGetReportsForJoin${OFF};Summary: Get the reports that use a join
Description: Get the reports that use a join and the headers that are imported by the reports using the join (AUTH) (AUTH)
  ${CYAN}reportsServiceGetReportsTags${OFF};Summary: Get reports tags
Description: Get all report distinct tags. (AUTH) (AUTH)
  ${CYAN}reportsServiceGetVariant${OFF};Summary: Get a variant
Description: Get a given variant (AUTH) (AUTH)
  ${CYAN}reportsServiceGetVariants${OFF};Summary: Get all variants
Description: Get all variants in reports (AUTH) (AUTH)
  ${CYAN}reportsServicePartialChartUpdate${OFF};Summary: Partial chart update
Description: Update a custom chart with partial information. (AUTH) (AUTH)
  ${CYAN}reportsServicePartialReportUpdate${OFF};Summary: Partial report update
Description: Update a custom report with partial information. (AUTH) (AUTH)
  ${CYAN}reportsServiceRunVariantOperation${OFF};Summary: Run a variant
Description: Run the operations in a variant (AUTH) (AUTH)
  ${CYAN}reportsServiceTranspose${OFF};Summary: Transpose
Description: Return the corresponding full sql data. (AUTH) (AUTH)
  ${CYAN}reportsServiceUpdateChart${OFF};Summary: Update chart
Description: Update a custom chart. (AUTH) (AUTH)
  ${CYAN}reportsServiceUpdateChartv2${OFF};Summary: Update chart v2
Description: Update a custom VEGA chart. (AUTH) (AUTH)
  ${CYAN}reportsServiceUpdateJoin${OFF};Summary: Update a join
Description: Update a custom join (AUTH) (AUTH)
  ${CYAN}reportsServiceUpdateReport${OFF};Summary: Update report
Description: Update a custom report. (AUTH) (AUTH)
  ${CYAN}reportsServiceUpdateVariantOverride${OFF};Summary: Update a variant
Description: Update a variant with a custom override (AUTH) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[riskAnalyticsController]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}riskAnalyticsControllerEnableDisableRiskEventFeedback${OFF};Summary: Enable disable risk rvent feedback
Description: Enable or disable the collect feedback process. (AUTH) (AUTH)
  ${CYAN}riskAnalyticsControllerEnableDisableRiskEventProcess${OFF};Summary: Enable disable risk event process
Description: Enable or disable the risk event process. (AUTH) (AUTH)
  ${CYAN}riskAnalyticsControllerGetAllClassificationsList${OFF};Summary: Get all classifications
Description: Get all possible classifications for a risk event. (AUTH) (AUTH)
  ${CYAN}riskAnalyticsControllerGetRiskEventClassificationsList${OFF};Summary: Get risk event classifications list
Description: retrieves the ClassificationMatchDetails for a given risk id – classification that did not matched will be with class_value 0. (AUTH) (AUTH)
  ${CYAN}riskAnalyticsControllerGetRiskEventDataForSummarization${OFF};Summary: Get risk event data needed for summarization task
Description: Retrieve the full information about this risk event including all findings data (AUTH) (AUTH)
  ${CYAN}riskAnalyticsControllerGetRiskEventDetails${OFF};Summary: Get risk event details
Description: Return the details of a risk event, including risk general info and a list of observations. (AUTH) (AUTH)
  ${CYAN}riskAnalyticsControllerGetRiskEventProcessStatus${OFF};Summary: Get risk event process status
Description: Get the risk event process status. (AUTH) (AUTH)
  ${CYAN}riskAnalyticsControllerGetRiskEventRow${OFF};Summary: Get risk event row
Description: Return a list of risk events. (AUTH) (AUTH)
  ${CYAN}riskAnalyticsControllerGetRiskEventVulnerabilityAssessmentDetails${OFF};Summary: Get vulnerability assessment details for a given risk event
Description: Retrieve the information about failed VA tests for assets database and db user (AUTH) (AUTH)
  ${CYAN}riskAnalyticsControllerGetRiskFeedback${OFF};Summary: Get risk feedback
Description: Get all feedbacks that are in status NEW/WIP and change them to status WIP. (AUTH) (AUTH)
  ${CYAN}riskAnalyticsControllerGetRiskObservationDetails${OFF};Summary: Get risk observation details
Description: Return details of a single risk observation. (AUTH) (AUTH)
  ${CYAN}riskAnalyticsControllerGetUserUISettings${OFF};Summary: Get user UI settings
Description: Get the user settings by user id to display the risk in the UI. (AUTH) (AUTH)
  ${CYAN}riskAnalyticsControllerRiskEventTuning${OFF};Summary: Risk event tuning
Description: Perform tuning risk event actions. (AUTH) (AUTH)
  ${CYAN}riskAnalyticsControllerSetRiskEventStatus${OFF};Summary: Set risk event status
Description: Update the risk status and justification. (AUTH) (AUTH)
  ${CYAN}riskAnalyticsControllerSetUserUISettings${OFF};Summary: Set user UI settings
Description: Set the user settings by user id in the mongo collection. WARNING: this API should not be used manually or by a system external to Guardium. Using this API to change a user settings may prevent the user from using the Risk Event function within Guardium. (AUTH) (AUTH)
  ${CYAN}riskAnalyticsControllerUpdateRiskFeedback${OFF};Summary: Update risk feedback
Description: Provide feedback for one or more risk events (AUTH) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[riskAnalyticsDataProcessor]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}riskAnalyticsDataProcessorGetRiskContext${OFF};Summary: Get Risk Event Context
Description: Retrieve the context of the given risk ID. This context will be used for LLM interactions. (AUTH) (AUTH)
  ${CYAN}riskAnalyticsDataProcessorGetRiskPredefinedQuestions${OFF};Summary: Get Risk Event Predefined Questions
Description: Retrieve the Predefined Questions of the given risk ID. This Predefined Questions will be used quick actions recommendations. (AUTH) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[riskAnalyticsEngine]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}riskAnalyticsEngineGetLeadGeneratorConfig${OFF};Summary: Get lead generator config
Description: Retrieve the configuration of a lead generator. (AUTH) (AUTH)
  ${CYAN}riskAnalyticsEngineUpdateLeadGeneratorConfig${OFF};Summary: Update lead generator config
Description: Update the configuration of a leads generator. (AUTH) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[riskAnalyticsMlClassification]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}riskAnalyticsMlClassificationResetModelToDefaults${OFF};Summary: Reset the model to its default weights.
Description: Load the initial model instead of the existing model - this action is irreversible. (AUTH) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[schedulerService]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}schedulerServiceCreateScheduledJob${OFF};Summary: Create scheduled job
Description: Create a new scheduled job with tasks. (AUTH) (AUTH)
  ${CYAN}schedulerServiceDeleteScheduledJob${OFF};Summary: Delete scheduled job
Description: Delete a single scheduled job. (AUTH) (AUTH)
  ${CYAN}schedulerServiceGetDependencies${OFF};Summary: Get dependencies
Description: returns IDs of distribution rules, response templates, or processing rules that are in use (AUTH) (AUTH)
  ${CYAN}schedulerServiceGetDistributionRules${OFF};Summary: Get distribution rules
Description: Return a list of distribution rule IDs that are used by the scheduler
Distribution rules can't be edited if it is used by a scheduled job. (AUTH) (AUTH)
  ${CYAN}schedulerServiceGetScheduledJobDetails${OFF};Summary: Get scheduled job
Description: Return a single ScheduledJob in detail. (AUTH) (AUTH)
  ${CYAN}schedulerServiceGetScheduledJobs${OFF};Summary: Get scheduled jobs
Description: Return a list of scheduled jobs and the linked tasks. (AUTH) (AUTH)
  ${CYAN}schedulerServiceGetSchedulesByReport${OFF};Summary: Get schedules by report
Description: Return an array of scheduled job IDs that run the report_id.  An empty array is returned if the report_id is not scheduled. (AUTH) (AUTH)
  ${CYAN}schedulerServiceGetTags${OFF};Summary: Get tags
Description: Return an array of all the unique tags from scheduled jobs. (AUTH) (AUTH)
  ${CYAN}schedulerServiceSearchScheduledJobs${OFF};Summary: Search scheduled jobs
Description: Return a filtered list of scheduled jobs and the linked tasks. (AUTH) (AUTH)
  ${CYAN}schedulerServiceSearchScheduledTaskRuns${OFF};Summary: Search scheduled task runs
Description: Return a list of scheduled task run, start date, end date, status (AUTH) (AUTH)
  ${CYAN}schedulerServiceUpdateScheduledJob${OFF};Summary: Update scheduled job
Description: Update a single schedule job. (AUTH) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[snifAssistService]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}snifAssistServiceTestRegex${OFF};Summary: Test regex
Description: Match a text string with a regular expression using the same sniffer 
code used in production to match a regex. (AUTH) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[streamsService]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}streamsServiceCheckAWSCredentials${OFF};Summary: Check AWS credentials
Description: Service to verify AWS credentials. (AUTH) (AUTH)
  ${CYAN}streamsServiceCheckAzureEventHub${OFF};Summary: Check Azure event hub
Description: Service to check Azure event hub. (AUTH) (AUTH)
  ${CYAN}streamsServiceCheckAzureStorageString${OFF};Summary: Check Azure storage string
Description: Service to verify Azure storage connection. (AUTH)
  ${CYAN}streamsServiceGetAWSRegions${OFF};Summary: Get AWS regions
Description: Service to get AWS regions. (AUTH) (AUTH)
  ${CYAN}streamsServiceListAWSStreams${OFF};Summary: List AWS streams
Description: Service to list AWS Kinesis streams. (AUTH) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[templatesService]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}templatesServiceCreateIntegration${OFF};Summary: Create integration
Description: Create a set of new templates for a new integration. (AUTH) (AUTH)
  ${CYAN}templatesServiceCreateTemplate${OFF};Summary: Create template
Description: Create a new template. (AUTH) (AUTH)
  ${CYAN}templatesServiceDeleteIntegration${OFF};Summary: Delete integration
Description: Delete all templates associated with an integration. (AUTH) (AUTH)
  ${CYAN}templatesServiceDeleteTemplate${OFF};Summary: Delete template
Description: Delete a specific template. (AUTH) (AUTH)
  ${CYAN}templatesServiceGetOriginDefaultContent${OFF};Summary: Get origin default content
Description: Return the default content for a template with a specified origin and MIME type. (AUTH) (AUTH)
  ${CYAN}templatesServiceGetOriginFields${OFF};Summary: Get origin fields
Description: Return the fields available with a specific origin. (AUTH) (AUTH)
  ${CYAN}templatesServiceGetTemplate${OFF};Summary: Get template
Description: Return a specific template by id. (AUTH) (AUTH)
  ${CYAN}templatesServiceGetTemplates${OFF};Summary: Get templates
Description: Return all templates based on supplied filters. (AUTH) (AUTH)
  ${CYAN}templatesServiceTestTemplate${OFF};Summary: Test template
Description: Analyze a specified template to ensure will function correctly when utilized. (AUTH) (AUTH)
  ${CYAN}templatesServiceTransformTemplate${OFF};Summary: Transform template
Description: Process the specified template and returns the Title and Content based on supplied data. (AUTH) (AUTH)
  ${CYAN}templatesServiceTransformTemplateJSON${OFF};Summary: Transform template JSON
Description: Process the specified template and returns the Title and Content based on supplied json data string. (AUTH) (AUTH)
  ${CYAN}templatesServiceUpdateTemplate${OFF};Summary: Update template
Description: Update a single template. (AUTH) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[tenantuser]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}tenantuserCreateAPIKey${OFF};Summary: Create API key
Description: Create API Key. (AUTH)
  ${CYAN}tenantuserDeleteAPIKey${OFF};Summary: Delete API key
Description: Delete APIKey Document based on the document id. (AUTH)
  ${CYAN}tenantuserDeleteRole${OFF};Summary: Delete role
Description: Delete a role. (AUTH) (AUTH)
  ${CYAN}tenantuserGetAPIKeys${OFF};Summary: Get API keys
Description: Get all APIKeys base on a tenant ID. (AUTH)
  ${CYAN}tenantuserGetCurrentUser${OFF};Summary: Get current user
Description: Return the currently authenticated user. (AUTH) (AUTH)
  ${CYAN}tenantuserGetPrivilege${OFF};Summary: Get privilege
Description: Return privilege. (AUTH) (AUTH)
  ${CYAN}tenantuserGetPrivileges${OFF};Summary: Get privileges
Description: Return all available privileges (pages, restapi, reports, etc) if no roles are specified
If roles are specified, returns cumulative privileges for the list of roles. (AUTH) (AUTH)
  ${CYAN}tenantuserGetRole${OFF};Summary: Get role
Description: Return single role. (AUTH) (AUTH)
  ${CYAN}tenantuserGetRoles${OFF};Summary: Get roles
Description: Return all roles without privileges. (AUTH) (AUTH)
  ${CYAN}tenantuserGetUser${OFF};Summary: Get user
Description: Return full user for specified user_id. (AUTH) (AUTH)
  ${CYAN}tenantuserGetUserNames${OFF};Summary: Get user names
Description: Get user names. (AUTH) (AUTH)
  ${CYAN}tenantuserGetUserTenant${OFF};Summary: Get user tenant
Description: Return the user plus tenant information. (AUTH) (AUTH)
  ${CYAN}tenantuserPostPrivilegesBulk${OFF};Summary: Post privileges bulk
Description: Perform bulk user add preivilege. (AUTH) (AUTH)
  ${CYAN}tenantuserPostRole${OFF};Summary: Post role
Description: Create a new role. (AUTH) (AUTH)
  ${CYAN}tenantuserUpdatePrivilege${OFF};Summary: Update privilege
Description: Update privilege. (AUTH) (AUTH)
  ${CYAN}tenantuserUpdatePrivilegesRoleBulk${OFF};Summary: Update privileges role bulk
Description: Perform bulk user update role. (AUTH) (AUTH)
  ${CYAN}tenantuserUpdateRole${OFF};Summary: Update role
Description: Update single role. (AUTH) (AUTH)
  ${CYAN}tenantuserUpdateUserRoleBulk${OFF};Summary: Update user role bulk
Description: Perform bulk user add or remove role. (AUTH) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[thirdPartyVendors]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}getLinkedVendor${OFF};Get additional details of a specific third party vendor (AUTH)
  ${CYAN}getSingleLinkedVendor${OFF};Get the third party vendors list (AUTH)
  ${CYAN}listLinkedVendorDataStores${OFF};Get the data stores associated with a third party vendor (AUTH)
  ${CYAN}listLinkedVendors${OFF};Get the summary of a third party vendor (AUTH)
  ${CYAN}listTrustedAssets${OFF};Get a list of all the actual trusted assets (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[universalConnectorManager]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}universalConnectorManagerGetCertificate${OFF};Summary: Get certificate
Description: Get the certificate that allows secure communication between data sources and universal connections in Guardium. (AUTH) (AUTH)
  ${CYAN}universalConnectorManagerGetConnectors${OFF};Summary: Get connectors
Description: Get all the connectors Universal Connector can support. Includes a list of event pipelines (input--filter pairs), along with the supported data source types and platforms. (AUTH) (AUTH)
  ${CYAN}universalConnectorManagerListConnectionsSummary${OFF};Summary: List connections summary
Description: List a summary of Universal Connector configured connections (AKA datasources). (AUTH) (AUTH)
  ${CYAN}universalConnectorManagerPluginsList${OFF};Summary: Plugins list
Description: List of all universal connector plugins. (AUTH) (AUTH)
  ${CYAN}universalConnectorManagerUploadPlugin${OFF};Summary: Upload plugin
Description: Upload a plugin-package for Universal Connector. (AUTH) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}[workflow]${OFF}"
read -r -d '' ops <<EOF
  ${CYAN}workflowCreateCase${OFF};Summary: Create case
Description: Create single case. (AUTH) (AUTH)
  ${CYAN}workflowCreateTask${OFF};Summary: Create task
Description: Create single task within a parent case. (AUTH) (AUTH)
  ${CYAN}workflowGetCases${OFF};Summary: Get cases
Description: Return all cases requested. (AUTH) (AUTH)
  ${CYAN}workflowGetCasesCount${OFF};Summary: Get cases count
Description: Get case count. (AUTH) (AUTH)
  ${CYAN}workflowGetFilename${OFF};Summary: Get filename
Description: Return filename associated with the task referenced in the associated context record. (AUTH) (AUTH)
  ${CYAN}workflowGetJobsCount${OFF};Summary: Get jobs count
Description: Get jobs count. (AUTH) (AUTH)
  ${CYAN}workflowGetReportResult${OFF};Summary: Get report result
Description: Return a page of results. (AUTH) (AUTH)
  ${CYAN}workflowGetTasks${OFF};Summary: Get tasks
Description: Return all tasks requested. (AUTH) (AUTH)
  ${CYAN}workflowGetTasksCount${OFF};Summary: Get cases count
Description: Get case count. (AUTH) (AUTH)
  ${CYAN}workflowSearchCases${OFF};Summary: Search cases
Description: Return a subset of cases. (AUTH) (AUTH)
  ${CYAN}workflowSearchReports${OFF};Summary: Get a list of report IDs
Description: Returns a list of report IDs referenced in all cases and tasks (AUTH) (AUTH)
  ${CYAN}workflowSearchTasks${OFF};Summary: Search cases
Description: Return a subset of cases. (AUTH) (AUTH)
  ${CYAN}workflowUpdateCases${OFF};Summary: Update cases
Description: Update multiple cases in one request. (AUTH) (AUTH)
  ${CYAN}workflowUpdateTasks${OFF};Summary: Update tasks
Description: Update multiple tasks for the same parent in one request. (AUTH) (AUTH)
EOF
echo "  $ops" | column -t -s ';'
    echo ""
    echo -e "${BOLD}${WHITE}Options${OFF}"
    echo -e "  -h,--help\\t\\t\\t\\tPrint this help"
    echo -e "  -V,--version\\t\\t\\t\\tPrint API version"
    echo -e "  --about\\t\\t\\t\\tPrint the information about service"
    echo -e "  --host ${CYAN}<url>${OFF}\\t\\t\\t\\tSpecify the host URL "
echo -e "              \\t\\t\\t\\t(e.g. 'https://localhost')"

    echo -e "  --force\\t\\t\\t\\tForce command invocation in spite of missing"
    echo -e "         \\t\\t\\t\\trequired parameters or wrong content type"
    echo -e "  --dry-run\\t\\t\\t\\tPrint out the cURL command without"
    echo -e "           \\t\\t\\t\\texecuting it"
    echo -e "  -nc,--no-colors\\t\\t\\tEnforce print without colors, otherwise autodetected"
    echo -e "  -ac,--accept ${YELLOW}<mime-type>${OFF}\\t\\tSet the 'Accept' header in the request"
    echo -e "  -ct,--content-type ${YELLOW}<mime-type>${OFF}\\tSet the 'Content-type' header in "
    echo -e "                                \\tthe request"
    echo ""
}


##############################################################################
#
# Print REST service description
#
##############################################################################
print_about() {
    echo ""
    echo -e "${BOLD}${WHITE}IBM Guardium Data Security Center command line client (API version 3)${OFF}"
    echo ""
    echo -e "License: "
    echo -e "Contact: "
    echo ""
read -r -d '' appdescription <<EOF

Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
EOF
echo "$appdescription" | paste -sd' ' | fold -sw 80
}


##############################################################################
#
# Print REST api version
#
##############################################################################
print_version() {
    echo ""
    echo -e "${BOLD}IBM Guardium Data Security Center command line client (API version 3)${OFF}"
    echo ""
}

##############################################################################
#
# Print help for analyticsEventsServiceDeleteCacheKey operation
#
##############################################################################
print_analyticsEventsServiceDeleteCacheKey_help() {
    echo ""
    echo -e "${BOLD}${WHITE}analyticsEventsServiceDeleteCacheKey - Summary: Delete cache key
Description: Return delete key result message.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}cache_key${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - The cache key to delete. ${YELLOW}Specify as: cache_key=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for analyticsEventsServicePostQSAdvisorRisk operation
#
##############################################################################
print_analyticsEventsServicePostQSAdvisorRisk_help() {
    echo ""
    echo -e "${BOLD}${WHITE}analyticsEventsServicePostQSAdvisorRisk - Summary: For QS Advisor risk notification only
Description: Sends QS Advisor risk notification with recipients and returns a status${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for assetsServiceAssetIngestion operation
#
##############################################################################
print_assetsServiceAssetIngestion_help() {
    echo ""
    echo -e "${BOLD}${WHITE}assetsServiceAssetIngestion - AssetIngestion - Asset Ingestion Api to ingest assets from different applications including asset extensibility assets.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for assetsServiceAssetIngestionManualTrigger operation
#
##############################################################################
print_assetsServiceAssetIngestionManualTrigger_help() {
    echo ""
    echo -e "${BOLD}${WHITE}assetsServiceAssetIngestionManualTrigger - AssetIngestionManualTrigger - Manual trigger for Scheduled Asset Ingestion of databases.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for assetsServiceClonePolicy operation
#
##############################################################################
print_assetsServiceClonePolicy_help() {
    echo ""
    echo -e "${BOLD}${WHITE}assetsServiceClonePolicy - ClonePolicy - Clone a policy.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}policy_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Policy id that needs to be cloned. ${YELLOW}Specify as: policy_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for assetsServiceCreateUpdatePolicy operation
#
##############################################################################
print_assetsServiceCreateUpdatePolicy_help() {
    echo ""
    echo -e "${BOLD}${WHITE}assetsServiceCreateUpdatePolicy - CreateUpdatePolicy - Create/update new Policy.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for assetsServiceDeleteFilterTemplateForAssets operation
#
##############################################################################
print_assetsServiceDeleteFilterTemplateForAssets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}assetsServiceDeleteFilterTemplateForAssets - DeleteFilterTemplateForAssets - Deleting a template using TemplateID in manage assets.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}template_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - template id to be deleted ${YELLOW}Specify as: template_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for assetsServiceDeletePolicies operation
#
##############################################################################
print_assetsServiceDeletePolicies_help() {
    echo ""
    echo -e "${BOLD}${WHITE}assetsServiceDeletePolicies - DeletePolicies - Delete Policy returns response code and message.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}policy_ids${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Policy ids.${YELLOW} Specify as: policy_ids=value1 policy_ids=value2 policy_ids=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for assetsServiceFetchAssetChangeLog operation
#
##############################################################################
print_assetsServiceFetchAssetChangeLog_help() {
    echo ""
    echo -e "${BOLD}${WHITE}assetsServiceFetchAssetChangeLog - FetchAssetChangeLog - Fetch the logs for any actions performed on assets.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for assetsServiceFetchAssetDashboard operation
#
##############################################################################
print_assetsServiceFetchAssetDashboard_help() {
    echo ""
    echo -e "${BOLD}${WHITE}assetsServiceFetchAssetDashboard - FetchAssetDashboard - Gets Filter Templates for Dshboard Widgets.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}widget_type${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - ID of the Dashboard Widget ${YELLOW}Specify as: widget_type=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}date_range.start${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - start of date range for ui widget.${YELLOW} Specify as: date_range.start=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}date_range.end${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - end of date range for ui widget.${YELLOW} Specify as: date_range.end=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}date_range.type${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - type of date range for ui widget.${YELLOW} Specify as: date_range.type=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}date_range.key${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - key for ui widget.${YELLOW} Specify as: date_range.key=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}date_range.error${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - error for ui widget.${YELLOW} Specify as: date_range.error=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}date_range.start_number${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - start_number for ui widget.${YELLOW} Specify as: date_range.start_number=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}date_range.start_unit${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - start of date range for ui widget.${YELLOW} Specify as: date_range.start_unit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}date_range.end_number${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - start of date range for ui widget.${YELLOW} Specify as: date_range.end_number=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}date_range.end_unit${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - start of date range for ui widget.${YELLOW} Specify as: date_range.end_unit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}timeline_value_selected${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Name of the timeline value selected from drop down.${YELLOW} Specify as: timeline_value_selected=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}tag_id${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Tag ID.${YELLOW} Specify as: tag_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for assetsServiceFetchAssetList operation
#
##############################################################################
print_assetsServiceFetchAssetList_help() {
    echo ""
    echo -e "${BOLD}${WHITE}assetsServiceFetchAssetList - FetchAssetList - Asset Fetch Api .${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for assetsServiceFetchAssetsForMergeSplit operation
#
##############################################################################
print_assetsServiceFetchAssetsForMergeSplit_help() {
    echo ""
    echo -e "${BOLD}${WHITE}assetsServiceFetchAssetsForMergeSplit - FetchAssetsForMergeSplit : Fetch assets for Merge and Split.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}asset_id${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Asset grouper Id.${YELLOW} Specify as: asset_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page_number${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - Page number.${YELLOW} Specify as: page_number=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page_size${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - Page size.${YELLOW} Specify as: page_size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}action${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Action : merge or split.${YELLOW} Specify as: action=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}search_key${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Search from the list based on asset name, database name, ip or host.${YELLOW} Specify as: search_key=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for assetsServiceFindAssetName operation
#
##############################################################################
print_assetsServiceFindAssetName_help() {
    echo ""
    echo -e "${BOLD}${WHITE}assetsServiceFindAssetName - FindAssetName - Checks if the given Asset Name has already been assigned to an asset.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}asset_name${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Name of asset.${YELLOW} Specify as: asset_name=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for assetsServiceGetAssetOverview operation
#
##############################################################################
print_assetsServiceGetAssetOverview_help() {
    echo ""
    echo -e "${BOLD}${WHITE}assetsServiceGetAssetOverview - GetAssetOverview - Get asset overview widgets data for a particular asset.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}asset_id${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Asset grouper Id.${YELLOW} Specify as: asset_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}page_number${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - Page number.${YELLOW} Specify as: page_number=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}size${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - Page size.${YELLOW} Specify as: size=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}widget${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: ALL)${OFF} - Widget type.

 - ALL: All Asset Overview Widgets.
 - CLASSIFICATION: Classification Asset Overview Widgets.
 - TAG: Tag Asset Overview Widgets.
 - RESOURCE: Resource Asset Overview Widgets.${YELLOW} Specify as: widget=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}ip${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Asset IP.${YELLOW} Specify as: ip=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}host${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Asset Host.${YELLOW} Specify as: host=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}database${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Database Name.${YELLOW} Specify as: database=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}asset_entity_type${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - asset ntity type.${YELLOW} Specify as: asset_entity_type=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for assetsServiceGetAssetTopology operation
#
##############################################################################
print_assetsServiceGetAssetTopology_help() {
    echo ""
    echo -e "${BOLD}${WHITE}assetsServiceGetAssetTopology - GetAssetTopology- Get list of topology for a parent asset.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for assetsServiceGetFilterTemplateForAssets operation
#
##############################################################################
print_assetsServiceGetFilterTemplateForAssets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}assetsServiceGetFilterTemplateForAssets - GetFilterTemplateForAssets - Get list of filters query templates for manage assets.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}template_id${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - template id to be deleted.${YELLOW} Specify as: template_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for assetsServiceGetFiltersForAssets operation
#
##############################################################################
print_assetsServiceGetFiltersForAssets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}assetsServiceGetFiltersForAssets - GetFiltersForAssets - Get a list of filters category and sub category with all data.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for assetsServiceListPolicy operation
#
##############################################################################
print_assetsServiceListPolicy_help() {
    echo ""
    echo -e "${BOLD}${WHITE}assetsServiceListPolicy - ListPolicy - List all policies.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for assetsServiceListRule operation
#
##############################################################################
print_assetsServiceListRule_help() {
    echo ""
    echo -e "${BOLD}${WHITE}assetsServiceListRule - ListRule - List all rules for a policy.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}policy_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Policy ID ${YELLOW}Specify as: policy_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for assetsServiceListTagDomains operation
#
##############################################################################
print_assetsServiceListTagDomains_help() {
    echo ""
    echo -e "${BOLD}${WHITE}assetsServiceListTagDomains - ListTagDomains - Get Tag categories by request parameters .${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}dom_grouper${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Optional: dom_grouper required if we want to fetch domains based on the group.${YELLOW} Specify as: dom_grouper=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}purpose${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Optional: purpose required if we want to fetch domains based on the purpose.${YELLOW} Specify as: purpose=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}need_tag${OFF} ${BLUE}[boolean]${OFF} ${CYAN}(default: null)${OFF} - Optional: If we need Tag  based on the Domains.${YELLOW} Specify as: need_tag=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for assetsServiceListTags operation
#
##############################################################################
print_assetsServiceListTags_help() {
    echo ""
    echo -e "${BOLD}${WHITE}assetsServiceListTags - ListTags - Get Tags for Manage Tags listing screen .${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}asset_id${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - asset id - Asset ID.${YELLOW} Specify as: asset_id=value1 asset_id=value2 asset_id=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for assetsServiceMergeOrSplitAssets operation
#
##############################################################################
print_assetsServiceMergeOrSplitAssets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}assetsServiceMergeOrSplitAssets - MergeOrSplitAssets - Merge or split the selected assets.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for assetsServiceSaveAssignedTags operation
#
##############################################################################
print_assetsServiceSaveAssignedTags_help() {
    echo ""
    echo -e "${BOLD}${WHITE}assetsServiceSaveAssignedTags - SaveAssignedTags - Save Assigned Tags to TAG_DSDEF_MAP table.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for assetsServiceSaveTagConceptData operation
#
##############################################################################
print_assetsServiceSaveTagConceptData_help() {
    echo ""
    echo -e "${BOLD}${WHITE}assetsServiceSaveTagConceptData - SaveTagConceptData - creates a custom tag${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for assetsServiceSaveTagDomainData operation
#
##############################################################################
print_assetsServiceSaveTagDomainData_help() {
    echo ""
    echo -e "${BOLD}${WHITE}assetsServiceSaveTagDomainData - SaveTagDomainData - creates a custom category to be assigned to a tag${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for assetsServiceSaveUpdateFilterTemplateForAssets operation
#
##############################################################################
print_assetsServiceSaveUpdateFilterTemplateForAssets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}assetsServiceSaveUpdateFilterTemplateForAssets - SaveUpdateFilterTemplateForAssets - Save/Update a filters query to use as template in manage assets along with reordering of template list.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for assetsServiceSetBannerState operation
#
##############################################################################
print_assetsServiceSetBannerState_help() {
    echo ""
    echo -e "${BOLD}${WHITE}assetsServiceSetBannerState - SetBannerState - Set banner state for asset inventory page.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for assetsServiceUpdateAssetName operation
#
##############################################################################
print_assetsServiceUpdateAssetName_help() {
    echo ""
    echo -e "${BOLD}${WHITE}assetsServiceUpdateAssetName - UpdateAssetName - Udates the name of the asset as given by the user.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for assetsServiceUpdatePolicy operation
#
##############################################################################
print_assetsServiceUpdatePolicy_help() {
    echo ""
    echo -e "${BOLD}${WHITE}assetsServiceUpdatePolicy - UpdatePolicy - Update existing Policy status.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for auditServiceGetActivityRecords operation
#
##############################################################################
print_auditServiceGetActivityRecords_help() {
    echo ""
    echo -e "${BOLD}${WHITE}auditServiceGetActivityRecords - Summary: Get activity records
Description: Return activity records that match the arguments passed in the request. 
Multiple values can be passed to the (UID, Context, ActionTaken, PerformedBy) fields by supplying a 
comma-separated list to the corresponding fields in the request.  For instance to check for 
multiple Contexts set the field to \"op1, op2, op3\".${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}start_time${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Return records starting at this time (>=).${YELLOW} Specify as: start_time=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}end_time${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Return records ending before this time (<).${YELLOW} Specify as: end_time=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}uid${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Return records with this service/collection id.${YELLOW} Specify as: uid=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}action_taken${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Return records matching this operation (CRUD or other action).${YELLOW} Specify as: action_taken=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}context${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Return records for this service/collection.${YELLOW} Specify as: context=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}changes_made${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Return records created only for this reason.${YELLOW} Specify as: changes_made=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}performed_by${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Return records originating with the specified user id.${YELLOW} Specify as: performed_by=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}context_description${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Return records with this label.${YELLOW} Specify as: context_description=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}query${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Return records based on the query.${YELLOW} Specify as: query=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - The amount to offset the rows by for pagination.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - The max amount of rows to return for pagination.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[boolean]${OFF} ${CYAN}(default: null)${OFF} - Return eligable filters if this is true.${YELLOW} Specify as: filter=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for auditServicePutDownloadActivityRecord operation
#
##############################################################################
print_auditServicePutDownloadActivityRecord_help() {
    echo ""
    echo -e "${BOLD}${WHITE}auditServicePutDownloadActivityRecord - Summary: Put download activity record
Description: Create an activity log record with the arguments passed in the request.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for authServerServiceCreateOauthClient operation
#
##############################################################################
print_authServerServiceCreateOauthClient_help() {
    echo ""
    echo -e "${BOLD}${WHITE}authServerServiceCreateOauthClient - Summary: Create Oauth client
Description: Create/register new Oauth client.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for authServerServiceDeleteOauthClient operation
#
##############################################################################
print_authServerServiceDeleteOauthClient_help() {
    echo ""
    echo -e "${BOLD}${WHITE}authServerServiceDeleteOauthClient - Summary: Delete Oauth client
Description: Delete registered Oauth client by clientId.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}client_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - ClientID of registered OAuth. ${YELLOW}Specify as: client_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for authServerServiceGetAccessToken operation
#
##############################################################################
print_authServerServiceGetAccessToken_help() {
    echo ""
    echo -e "${BOLD}${WHITE}authServerServiceGetAccessToken - Summary: Get access token
Description: Get access token from passed clientId and secret.${OFF}${BLUE}(AUTH - BASIC)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for authServerServiceGetOauthClient operation
#
##############################################################################
print_authServerServiceGetOauthClient_help() {
    echo ""
    echo -e "${BOLD}${WHITE}authServerServiceGetOauthClient - Summary: Get Oauth client
Description: Get registered Oauth client by clientId.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}client_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - ClientID of registered OAuth. ${YELLOW}Specify as: client_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for authServerServiceGetUser operation
#
##############################################################################
print_authServerServiceGetUser_help() {
    echo ""
    echo -e "${BOLD}${WHITE}authServerServiceGetUser - Summary: Get user
Description: Get user.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for authServerServiceListOauthClient operation
#
##############################################################################
print_authServerServiceListOauthClient_help() {
    echo ""
    echo -e "${BOLD}${WHITE}authServerServiceListOauthClient - Summary: List Oauth client
Description: List all registered Oauth client.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for addAnalyzedRegion operation
#
##############################################################################
print_addAnalyzedRegion_help() {
    echo ""
    echo -e "${BOLD}${WHITE}addAnalyzedRegion - Add a new region for data classification${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Install a new analyzer in the specified region to enable data classification in that region." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for addCloudAccounts operation
#
##############################################################################
print_addCloudAccounts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}addCloudAccounts - Add cloud account connections to DSPM${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "You can add a single or multiple cloud account connections from the same cloud provider.<BR>Adding these cloud account connections will trigger Guardium DSPM for data store discovery.<BR>To enable data classification, run the 'Add a new region for data classification' API." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for generateAtlassianConfluenceAuthUrl operation
#
##############################################################################
print_generateAtlassianConfluenceAuthUrl_help() {
    echo ""
    echo -e "${BOLD}${WHITE}generateAtlassianConfluenceAuthUrl - Generate a Confluence authentication URL${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Generate an Atlassian authentication URL for Confluence integration." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for generateAtlassianJiraAuthUrl operation
#
##############################################################################
print_generateAtlassianJiraAuthUrl_help() {
    echo ""
    echo -e "${BOLD}${WHITE}generateAtlassianJiraAuthUrl - Generate a JIRA authentication URL${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Generate an Atlassian authentication URL for JIRA integration." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for generateAzureAuthUrl operation
#
##############################################################################
print_generateAzureAuthUrl_help() {
    echo ""
    echo -e "${BOLD}${WHITE}generateAzureAuthUrl - Generate azure authorization url${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Generate azure authorization url." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}tenantId${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Tenant Id of the new Azure account, GUID format.${YELLOW} Specify as: tenantId=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for generateOffice365AuthUrl operation
#
##############################################################################
print_generateOffice365AuthUrl_help() {
    echo ""
    echo -e "${BOLD}${WHITE}generateOffice365AuthUrl - Generate a Microsoft 365 consent URL${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Generate an administrator consent URL for Microsoft 365 integration." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for generateSlackAuthUrl operation
#
##############################################################################
print_generateSlackAuthUrl_help() {
    echo ""
    echo -e "${BOLD}${WHITE}generateSlackAuthUrl - Generate a Slack authentication URL${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Generate a Slack authentication URL." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for generateSnowflakeAuthUrl operation
#
##############################################################################
print_generateSnowflakeAuthUrl_help() {
    echo ""
    echo -e "${BOLD}${WHITE}generateSnowflakeAuthUrl - Validate and Generate a Snowflake OAuth URL${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Generate an administrator consent URL for Snowflake integration." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for getAnalyzedRegionStatus operation
#
##############################################################################
print_getAnalyzedRegionStatus_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getAnalyzedRegionStatus - Get the status of analyzer installation for a region${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get the installation status of Guardium DSPM for a region." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}cloudProvider${OFF} ${BLUE}[CloudServiceProvider]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - The cloud provider for the cloud account${YELLOW} Specify as: cloudProvider=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}region${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - The region code${YELLOW} Specify as: region=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for getAzureAdminConsentStatus operation
#
##############################################################################
print_getAzureAdminConsentStatus_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getAzureAdminConsentStatus - Get Azure admin consent status${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get Azure admin consent status." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;true if the customer has granted admin permissions, false otherwise${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for getCloudAccountInstallationStatus operation
#
##############################################################################
print_getCloudAccountInstallationStatus_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getCloudAccountInstallationStatus - Get the installation status of a cloud account${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get the installation status of a cloud account." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}cloudProvider${OFF} ${BLUE}[CloudServiceProvider]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - The cloud provider of the cloud account ${YELLOW}Specify as: cloudProvider=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}cloudAccountId${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - The cloud account identifier ${YELLOW}Specify as: cloudAccountId=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for getRefreshTokenExpiry operation
#
##############################################################################
print_getRefreshTokenExpiry_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getRefreshTokenExpiry - Get Snowflake Refresh Token Expiry date${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get Snowflake Refresh Token Expiry date." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}providerId${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - The ID of the provider ${YELLOW}Specify as: providerId=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for listLinkedAccounts operation
#
##############################################################################
print_listLinkedAccounts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}listLinkedAccounts - List cloud accounts connected to DSPM${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get a list of all the connected cloud accounts monitored by Guardium DSPM." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for removeAccounts operation
#
##############################################################################
print_removeAccounts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}removeAccounts - Post cloud account ID connections to be removed${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Post cloud account ID connections to be removed from Guardium DSPM." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}accountIds${OFF} ${BLUE}[array[string]]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: accountIds=value1 accountIds=value2 accountIds=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}serviceProvider${OFF} ${BLUE}[ServiceProvider]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: serviceProvider=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;OK${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
    code=500
    echo -e "${result_color_table[${code:0:1}]}  500;Internal Server Error${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for removeAccountsInstructions operation
#
##############################################################################
print_removeAccountsInstructions_help() {
    echo ""
    echo -e "${BOLD}${WHITE}removeAccountsInstructions - Post cloud account IDs and get instructions to remove the accounts${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Post cloud accounts IDs and get instructions to remove the accounts from the cloud service provider." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}accountIds${OFF} ${BLUE}[array[string]]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: accountIds=value1 accountIds=value2 accountIds=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}serviceProvider${OFF} ${BLUE}[ServiceProvider]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: serviceProvider=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;string${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;Not Found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
    code=500
    echo -e "${result_color_table[${code:0:1}]}  500;Internal Server Error${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for retrieveServiceAccountId operation
#
##############################################################################
print_retrieveServiceAccountId_help() {
    echo ""
    echo -e "${BOLD}${WHITE}retrieveServiceAccountId - Get Google Workspace authentication${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Retrieve a service account ID to use it for Google Workspace authentication." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for snowflakeIntegrationScript operation
#
##############################################################################
print_snowflakeIntegrationScript_help() {
    echo ""
    echo -e "${BOLD}${WHITE}snowflakeIntegrationScript - Generate Snowflake Integration Script${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Generate Snowflake integration Script." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for submitGoogleWorkspaceAdminEmail operation
#
##############################################################################
print_submitGoogleWorkspaceAdminEmail_help() {
    echo ""
    echo -e "${BOLD}${WHITE}submitGoogleWorkspaceAdminEmail - Submit email for service account authorization${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Submit admin email for service account authorization and return service-account authorization status." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for submitOffice365TenantInfo operation
#
##############################################################################
print_submitOffice365TenantInfo_help() {
    echo ""
    echo -e "${BOLD}${WHITE}submitOffice365TenantInfo - Submit Microsoft 365 customer information${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Submit customer information for Microsoft 365 integration." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for submitSlackAuthCode operation
#
##############################################################################
print_submitSlackAuthCode_help() {
    echo ""
    echo -e "${BOLD}${WHITE}submitSlackAuthCode - Submit a Slack authentication code${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Submit a Slack authentication code." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for submitSnowflakeAuthCode operation
#
##############################################################################
print_submitSnowflakeAuthCode_help() {
    echo ""
    echo -e "${BOLD}${WHITE}submitSnowflakeAuthCode - Submit Snowflake oAuth code${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Storing code that is returned from Snowflake oAuth." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
    code=500
    echo -e "${result_color_table[${code:0:1}]}  500;Internal Server Error${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
    code=503
    echo -e "${result_color_table[${code:0:1}]}  503;Service Unavailable${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for complianceAcceleratorCreateWorkspace operation
#
##############################################################################
print_complianceAcceleratorCreateWorkspace_help() {
    echo ""
    echo -e "${BOLD}${WHITE}complianceAcceleratorCreateWorkspace - Summary: Create workspace
Description: Create a workspace.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.(streaming responses)${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for complianceAcceleratorDeleteComplianceWorkspaces operation
#
##############################################################################
print_complianceAcceleratorDeleteComplianceWorkspaces_help() {
    echo ""
    echo -e "${BOLD}${WHITE}complianceAcceleratorDeleteComplianceWorkspaces - Summary: Delete compliance workspaces
Description: Delete workspaces.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}regulations${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Id to be deleted.${YELLOW} Specify as: regulations=value1 regulations=value2 regulations=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}deleteAll${OFF} ${BLUE}[boolean]${OFF} ${CYAN}(default: null)${OFF} - if you want to delete a whole configuration.${YELLOW} Specify as: deleteAll=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for complianceAcceleratorGetComplianceInfo operation
#
##############################################################################
print_complianceAcceleratorGetComplianceInfo_help() {
    echo ""
    echo -e "${BOLD}${WHITE}complianceAcceleratorGetComplianceInfo - Summary: Get compliance info
Description: Return stored compliance data.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for complianceAcceleratorHydrateWorkspace operation
#
##############################################################################
print_complianceAcceleratorHydrateWorkspace_help() {
    echo ""
    echo -e "${BOLD}${WHITE}complianceAcceleratorHydrateWorkspace - HydrateWorkspace - Hydrates specified objects within a workspace${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for complianceAcceleratorStoreComplianceInfo operation
#
##############################################################################
print_complianceAcceleratorStoreComplianceInfo_help() {
    echo ""
    echo -e "${BOLD}${WHITE}complianceAcceleratorStoreComplianceInfo - Summary: Store compliance info
Description: Store compliance data.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for connectionsServiceCreateConnectionsAccounts operation
#
##############################################################################
print_connectionsServiceCreateConnectionsAccounts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}connectionsServiceCreateConnectionsAccounts - Summary: Create Connections accounts
Description: Create Connections acccounts.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for connectionsServiceCreateConnectionsConfigs operation
#
##############################################################################
print_connectionsServiceCreateConnectionsConfigs_help() {
    echo ""
    echo -e "${BOLD}${WHITE}connectionsServiceCreateConnectionsConfigs - Summary: Create connections configs
Description: Create Connection config by connection type.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for connectionsServiceCreatePlugin operation
#
##############################################################################
print_connectionsServiceCreatePlugin_help() {
    echo ""
    echo -e "${BOLD}${WHITE}connectionsServiceCreatePlugin - Summary: Create plugin
Description: Create UC generic plugin${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for connectionsServiceCreateSettings operation
#
##############################################################################
print_connectionsServiceCreateSettings_help() {
    echo ""
    echo -e "${BOLD}${WHITE}connectionsServiceCreateSettings - Summary: Create settings
Description: Create Settings.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for connectionsServiceDeleteConnectionsAccounts operation
#
##############################################################################
print_connectionsServiceDeleteConnectionsAccounts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}connectionsServiceDeleteConnectionsAccounts - Summary: Delete Connections accounts
Description: Delete Connections acccounts.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}account_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Account id. ${YELLOW}Specify as: account_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for connectionsServiceDeleteConnectionsConfigs operation
#
##############################################################################
print_connectionsServiceDeleteConnectionsConfigs_help() {
    echo ""
    echo -e "${BOLD}${WHITE}connectionsServiceDeleteConnectionsConfigs - Summary: Delete connections configs
Description: Delete Connection config by connection id.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}connection_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Connection id. ${YELLOW}Specify as: connection_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for connectionsServiceDeleteConnector operation
#
##############################################################################
print_connectionsServiceDeleteConnector_help() {
    echo ""
    echo -e "${BOLD}${WHITE}connectionsServiceDeleteConnector - Summary: Delete connector
Description: Delete a Connection.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}connection_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - The connection id ${YELLOW}Specify as: connection_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for connectionsServiceDeletePlugin operation
#
##############################################################################
print_connectionsServiceDeletePlugin_help() {
    echo ""
    echo -e "${BOLD}${WHITE}connectionsServiceDeletePlugin - Summary: Delete plugin.
Description: Delete plugin.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - plugin id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for connectionsServiceGetBannerState operation
#
##############################################################################
print_connectionsServiceGetBannerState_help() {
    echo ""
    echo -e "${BOLD}${WHITE}connectionsServiceGetBannerState - Summary: Get banner state for object verb page. 
Description: Get banner state for object verb page.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for connectionsServiceGetConnectionsAccounts operation
#
##############################################################################
print_connectionsServiceGetConnectionsAccounts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}connectionsServiceGetConnectionsAccounts - Summary: Get Connections accounts
Description: Get Connections acccounts.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}account_id${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Optional: account id.${YELLOW} Specify as: account_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}access_key${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Optional: acccount access key.${YELLOW} Specify as: access_key=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for connectionsServiceGetConnectionsConfigs operation
#
##############################################################################
print_connectionsServiceGetConnectionsConfigs_help() {
    echo ""
    echo -e "${BOLD}${WHITE}connectionsServiceGetConnectionsConfigs - Summary: Get connections configs
Description: Get Connection config by connection type.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}type${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: UNDEFINED_TYPE)${OFF} - The type of connector.${YELLOW} Specify as: type=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}connection_id${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Optional: if connection id did not provide then return all connections.${YELLOW} Specify as: connection_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for connectionsServiceGetConnectionsWithFilters operation
#
##############################################################################
print_connectionsServiceGetConnectionsWithFilters_help() {
    echo ""
    echo -e "${BOLD}${WHITE}connectionsServiceGetConnectionsWithFilters - Summary: Get connections with filters
Description: Get connections with filters.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for connectionsServiceGetConnectorsSummary operation
#
##############################################################################
print_connectionsServiceGetConnectorsSummary_help() {
    echo ""
    echo -e "${BOLD}${WHITE}connectionsServiceGetConnectorsSummary - Summary: Get connectors summary
Description: Get a summary of Connectors.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for connectionsServiceGetDataSources operation
#
##############################################################################
print_connectionsServiceGetDataSources_help() {
    echo ""
    echo -e "${BOLD}${WHITE}connectionsServiceGetDataSources - Summary: Get data sources
Description: Get a list of data sources.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for connectionsServiceGetGuardRecordFields operation
#
##############################################################################
print_connectionsServiceGetGuardRecordFields_help() {
    echo ""
    echo -e "${BOLD}${WHITE}connectionsServiceGetGuardRecordFields - Summary: Get list of guard record fields. 
Description: Get list of guard record fields.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for connectionsServiceGetHeaders operation
#
##############################################################################
print_connectionsServiceGetHeaders_help() {
    echo ""
    echo -e "${BOLD}${WHITE}connectionsServiceGetHeaders - Summary: Get headers
Description: Get a list of Headers.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for connectionsServiceGetPlugins operation
#
##############################################################################
print_connectionsServiceGetPlugins_help() {
    echo ""
    echo -e "${BOLD}${WHITE}connectionsServiceGetPlugins - Summary: Get plugins 
Description: Get custom universal connector plugins${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Optional: if no plug-in id is provided, returns list of all plug-ins.${YELLOW} Specify as: id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for connectionsServiceGetSettings operation
#
##############################################################################
print_connectionsServiceGetSettings_help() {
    echo ""
    echo -e "${BOLD}${WHITE}connectionsServiceGetSettings - Summary: Get settings
Description: Get a list of Settings.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for connectionsServicePartialUpdateConnectors operation
#
##############################################################################
print_connectionsServicePartialUpdateConnectors_help() {
    echo ""
    echo -e "${BOLD}${WHITE}connectionsServicePartialUpdateConnectors - Summary: Partial update connectors
Description: Partial update of Connectors.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for connectionsServicePostStapCommand operation
#
##############################################################################
print_connectionsServicePostStapCommand_help() {
    echo ""
    echo -e "${BOLD}${WHITE}connectionsServicePostStapCommand - Summary: Post stap command
Description: Send a STAP command down to kafka for snif-assist.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for connectionsServiceUpdateBannerState operation
#
##############################################################################
print_connectionsServiceUpdateBannerState_help() {
    echo ""
    echo -e "${BOLD}${WHITE}connectionsServiceUpdateBannerState - Summary: Update banner state for object verb page. 
Description: Update banner state for object verb page.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for connectionsServiceUpdateConnectionsAccounts operation
#
##############################################################################
print_connectionsServiceUpdateConnectionsAccounts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}connectionsServiceUpdateConnectionsAccounts - Summary: Update Connections accounts
Description: Update Connections acccounts.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for connectionsServiceUpdateConnectionsConfigs operation
#
##############################################################################
print_connectionsServiceUpdateConnectionsConfigs_help() {
    echo ""
    echo -e "${BOLD}${WHITE}connectionsServiceUpdateConnectionsConfigs - Summary: Update connections configs
Description: Update Connection config by connection id.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for connectionsServiceUpdateConnectors operation
#
##############################################################################
print_connectionsServiceUpdateConnectors_help() {
    echo ""
    echo -e "${BOLD}${WHITE}connectionsServiceUpdateConnectors - Summary: Update connectors
Description: Update a list of Connectors.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for connectionsServiceUpdatePlugin operation
#
##############################################################################
print_connectionsServiceUpdatePlugin_help() {
    echo ""
    echo -e "${BOLD}${WHITE}connectionsServiceUpdatePlugin - Summary: Update plugin.
Description: Update plugin.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - id ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for connectionsServiceUpdateSettings operation
#
##############################################################################
print_connectionsServiceUpdateSettings_help() {
    echo ""
    echo -e "${BOLD}${WHITE}connectionsServiceUpdateSettings - Summary: Update settings
Description: Update Settings.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for dashboardsServiceCreateDashboard operation
#
##############################################################################
print_dashboardsServiceCreateDashboard_help() {
    echo ""
    echo -e "${BOLD}${WHITE}dashboardsServiceCreateDashboard - Summary: Create dashboard
Description: Create a unique dashboard.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - Unique dashboard." | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for dashboardsServiceDeleteDashboard operation
#
##############################################################################
print_dashboardsServiceDeleteDashboard_help() {
    echo ""
    echo -e "${BOLD}${WHITE}dashboardsServiceDeleteDashboard - Summary: Delete dashboard
Description: Delete a unique dashboard.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}dashboard_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - The id of the dashboard to be deleted. ${YELLOW}Specify as: dashboard_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for dashboardsServiceGetDashboards operation
#
##############################################################################
print_dashboardsServiceGetDashboards_help() {
    echo ""
    echo -e "${BOLD}${WHITE}dashboardsServiceGetDashboards - Summary: Get dashboards
Description: Get a list of dashboards with all data.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for dashboardsServiceUpdateDashboard operation
#
##############################################################################
print_dashboardsServiceUpdateDashboard_help() {
    echo ""
    echo -e "${BOLD}${WHITE}dashboardsServiceUpdateDashboard - Summary: Update dashboard
Description: Update a dashboard.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}dashboard_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - The id of the dashboard that was updated. ${YELLOW}Specify as: dashboard_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getActualFlow operation
#
##############################################################################
print_getActualFlow_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getActualFlow - Get actual flow by providing its ID${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get a detailed information about an actual flow by providing its ID." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for getActualFlowsSummary operation
#
##############################################################################
print_getActualFlowsSummary_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getActualFlowsSummary - Get summary of actual flows${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get a summary of all the actual flows discovered by Guardium DSPM, that is, details about source and destination, and other information." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[ListActualFlowsFilterParameter]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: filter=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for getPotentialFlow operation
#
##############################################################################
print_getPotentialFlow_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getPotentialFlow - Get potential flow by providing its ID${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get a detailed information about a potential flow by providing the flow ID." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}flowId${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: flowId=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;potential flow not found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getPotentialFlowPath operation
#
##############################################################################
print_getPotentialFlowPath_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getPotentialFlowPath - Get potential flow path by providing its ID${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get details of a specific potential flow of data by providing its ID." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}flowPathId${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: flowPathId=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=404
    echo -e "${result_color_table[${code:0:1}]}  404;potential flow path not found${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getPotentialFlowsSummary operation
#
##############################################################################
print_getPotentialFlowsSummary_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getPotentialFlowsSummary - Get summary of potential flows according to the filter applied${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get a summary of all the potential flows based on a filter applied." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[PotentialFlowsFilterOptions]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: filter=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for listActualFlowPaths operation
#
##############################################################################
print_listActualFlowPaths_help() {
    echo ""
    echo -e "${BOLD}${WHITE}listActualFlowPaths - Get summary of actual flows according to the filter applied${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get detailed information about the actual flows according to the filter applied." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[ListActualFlowPathsSortParameter]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: sort=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[ListActualFlowPathsFilterParameter]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: filter=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}pageSize${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: pageSize=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}nextToken${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: nextToken=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for listActualFlows operation
#
##############################################################################
print_listActualFlows_help() {
    echo ""
    echo -e "${BOLD}${WHITE}listActualFlows - List actual flows${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List all the actual flows (based on logs) of users and services across your entire cloud accounts and SasS applications." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[ListActualFlowsSortParameter]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: sort=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[ListActualFlowsFilterParameter]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: filter=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}pageSize${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: pageSize=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}nextToken${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: nextToken=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for listPotentialFlows operation
#
##############################################################################
print_listPotentialFlows_help() {
    echo ""
    echo -e "${BOLD}${WHITE}listPotentialFlows - List potential flows${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List all the potential flows of users and services across your entire cloud accounts and SaaS applications." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[PotentialFlowsFilterOptions]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: filter=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}pageSize${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: pageSize=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}nextToken${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: nextToken=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for listPotentialFlowsPaths operation
#
##############################################################################
print_listPotentialFlowsPaths_help() {
    echo ""
    echo -e "${BOLD}${WHITE}listPotentialFlowsPaths - List potential flow paths${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List all the potential flow paths based on an applied filter." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[PotentialFlowsPathsFilterOptions]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: filter=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}pageSize${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: pageSize=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}nextToken${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: nextToken=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for getDataResource operation
#
##############################################################################
print_getDataResource_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getDataResource - Get a specific data resource by its ID${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get additional details on a specific data resource by providing its ID." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}dataResourceId${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Data resource ID ${YELLOW}Specify as: dataResourceId=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for getDataResourcesSummary operation
#
##############################################################################
print_getDataResourcesSummary_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getDataResourcesSummary - Data resources summary${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get a summary of all the data resource, that is, number of data resources, types of data resources, and other information." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}dataStoreId${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Data store id${YELLOW} Specify as: dataStoreId=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[ListDataResourcesFilterParameter]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: filter=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for listDataResources operation
#
##############################################################################
print_listDataResources_help() {
    echo ""
    echo -e "${BOLD}${WHITE}listDataResources - List data resources that match a given filter${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get a list of data resources based on the filter applied. You can filter by data store ID, data resource ID, data resource name, and more.<BR><B>Note:</B> Filter needs to be HTML encoded." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}dataStoreId${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: dataStoreId=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[ListDataResourcesFilterParameter]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: filter=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[ListDataResourcesSortParameter]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: sort=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}pageSize${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: pageSize=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}nextToken${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: nextToken=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for listDataResourcesNames operation
#
##############################################################################
print_listDataResourcesNames_help() {
    echo ""
    echo -e "${BOLD}${WHITE}listDataResourcesNames - List names of data resources${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List and filter data resources by their names" | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}prefix${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Prefix of data resource name${YELLOW} Specify as: prefix=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}dataStoreId${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: dataStoreId=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for removeResource operation
#
##############################################################################
print_removeResource_help() {
    echo ""
    echo -e "${BOLD}${WHITE}removeResource - Remove resource from DSPM${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Removes a resource, with all its sensitivities, from Guardium DSPM dashboard. This action does not remove the resource from the resource's source environment." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}dataResourceId${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Data resource ID ${YELLOW}Specify as: dataResourceId=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}dataStoreId${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Data store ID${YELLOW} Specify as: dataStoreId=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for updateResourceReviewStatus operation
#
##############################################################################
print_updateResourceReviewStatus_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateResourceReviewStatus - Set review status of a data resource${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Set the review status of a specific data resource in a specific data store." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}dataResourceId${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Data resource id ${YELLOW}Specify as: dataResourceId=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getSensitivitiesSummary operation
#
##############################################################################
print_getSensitivitiesSummary_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getSensitivitiesSummary - Get the summary of sensitivities${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get a summarised information about all sensitivities classified by Guardium DSPM." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[ListSensitivitiesFilterParameter]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: filter=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for getSensitivity operation
#
##############################################################################
print_getSensitivity_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getSensitivity - Get sensitivity details by providing its ID${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get details of a sensitivity by providing its ID." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}sensitivityId${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: sensitivityId=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for listSensitivities operation
#
##############################################################################
print_listSensitivities_help() {
    echo ""
    echo -e "${BOLD}${WHITE}listSensitivities - List sensitivities${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get a list of all the sensitivities based on an applied filter." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[ListSensitivitiesFilterParameter]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: filter=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[LastSeenSortSchema]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: sort=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}pageSize${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: pageSize=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}nextToken${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: nextToken=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for getDataStore operation
#
##############################################################################
print_getDataStore_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getDataStore - Get a data store by its ID${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get details of a specific data store by its ID." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}dataStoreId${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - ID of the data store ${YELLOW}Specify as: dataStoreId=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for getDataStoresSummary operation
#
##############################################################################
print_getDataStoresSummary_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getDataStoresSummary - Get summary of data stores${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get a summary of all the data stores, that is, name of data resources, types of data stores, and other information." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[ListDataStoresFilterParameter]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: filter=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for listAllDataStoresLabels operation
#
##############################################################################
print_listAllDataStoresLabels_help() {
    echo ""
    echo -e "${BOLD}${WHITE}listAllDataStoresLabels - List labels of data stores.${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get a list of all the labels of custom data stores." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}prefix${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Prefix of data store label${YELLOW} Specify as: prefix=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}maxResults${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: maxResults=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for listDataStores operation
#
##############################################################################
print_listDataStores_help() {
    echo ""
    echo -e "${BOLD}${WHITE}listDataStores - List data stores${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "List all data stores discovered by Guardium DSPM." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[ListDataStoresFilterParameter]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: filter=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[ListDataStoresSortParameter]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: sort=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}pageSize${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: pageSize=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}nextToken${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: nextToken=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for listDataStoresCloudTagsKeys operation
#
##############################################################################
print_listDataStoresCloudTagsKeys_help() {
    echo ""
    echo -e "${BOLD}${WHITE}listDataStoresCloudTagsKeys - List the cloud tag keys of data stores that can be filtered on the basis of prefixes.${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get a list of the available cloud tag keys of data stores that can be filtered on the basis of prefixes." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}prefix${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Prefix of cloud tag key${YELLOW} Specify as: prefix=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}maxResults${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: maxResults=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for listDataStoresCloudTagsValues operation
#
##############################################################################
print_listDataStoresCloudTagsValues_help() {
    echo ""
    echo -e "${BOLD}${WHITE}listDataStoresCloudTagsValues - List the cloud tag values of data stores that can be filtered on the basis of prefixes and cloud tag key names.${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get a list of the available cloud tag values of data stores that can be filtered on the basis of prefixes and cloud tag key names." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}prefix${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Prefix of cloud tag value${YELLOW} Specify as: prefix=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}tagKey${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: tagKey=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}maxResults${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: maxResults=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for listDataStoresNames operation
#
##############################################################################
print_listDataStoresNames_help() {
    echo ""
    echo -e "${BOLD}${WHITE}listDataStoresNames - List name of filterable data stores${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Lists the data stores that can be filtered or classified." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}prefix${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Prefix of data store name${YELLOW} Specify as: prefix=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for rescanDataStore operation
#
##############################################################################
print_rescanDataStore_help() {
    echo ""
    echo -e "${BOLD}${WHITE}rescanDataStore - Post data store rescan request${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Post the request for a data store rescan." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for setDataStoreLabel operation
#
##############################################################################
print_setDataStoreLabel_help() {
    echo ""
    echo -e "${BOLD}${WHITE}setDataStoreLabel - Label a data store with an existing or new label${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Add or update a custom label for a data store." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}dataStoreId${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Data store ID ${YELLOW}Specify as: dataStoreId=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for updateDatastoreCustodian operation
#
##############################################################################
print_updateDatastoreCustodian_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateDatastoreCustodian - Update the name of a Data store custodian${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Add or update the name of a specific data store." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for addVulnerabilityStatusComment operation
#
##############################################################################
print_addVulnerabilityStatusComment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}addVulnerabilityStatusComment - Add vulnerability status comment${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Add or update the status comment of a vulnerability status to keep track of the workflow progress." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}vulnerabilityId${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: vulnerabilityId=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}statusId${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: statusId=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for getVulnerabilitiesSummary operation
#
##############################################################################
print_getVulnerabilitiesSummary_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getVulnerabilitiesSummary - Get vulnerabilities summary${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get a summary of all the vulnerabilities. You can also filter the results of the vulnerabilities based on the vulnerebility's type, threat, status, and so on.<BR><B>Note:</B> Filter needs to be HTML Encoded." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[VulnerabilitiesFilterOptions]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: filter=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for getVulnerability operation
#
##############################################################################
print_getVulnerability_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getVulnerability - Get vulnerability details by ID${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get vulnerability details by providing its ID." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}vulnerabilityId${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: vulnerabilityId=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for listVulnerabilities operation
#
##############################################################################
print_listVulnerabilities_help() {
    echo ""
    echo -e "${BOLD}${WHITE}listVulnerabilities - List vulnerabilities based on an applied filter${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get a list of data vulnerabilities based on a filter applied. You can filter by ID of the vulnerability, type of the vulnerability, and so on.<BR><B>Note:</B> Filter needs to be HTML encoded." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[VulnerabilitiesFilterOptions]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: filter=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[ListVulnerabilitiesSortParameter]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: sort=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}pageSize${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: pageSize=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}nextToken${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: nextToken=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for listVulnerabilitiesByDataStore operation
#
##############################################################################
print_listVulnerabilitiesByDataStore_help() {
    echo ""
    echo -e "${BOLD}${WHITE}listVulnerabilitiesByDataStore - List vulnerabilities of data stores${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get a list of all the vulnerabilities of data stores." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[VulnerabilitiesByDataStoreFilterOptions]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: filter=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[ListVulnerabilitiesByDataStoreSortParameter]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: sort=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}pageSize${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: pageSize=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}nextToken${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: nextToken=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for removeVulnerabilityStatusComment operation
#
##############################################################################
print_removeVulnerabilityStatusComment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}removeVulnerabilityStatusComment - Delete vulnerability status comment${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Delete a status comment of a vulnerability status." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}vulnerabilityId${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: vulnerabilityId=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}statusId${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: statusId=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}commentId${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: commentId=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for setVulnerabilityStatus operation
#
##############################################################################
print_setVulnerabilityStatus_help() {
    echo ""
    echo -e "${BOLD}${WHITE}setVulnerabilityStatus - Set status of a vulnerability${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Add or update the status of a vulnerability to track its progress." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}vulnerabilityId${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: vulnerabilityId=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for updateVulnerabilityStatusComment operation
#
##############################################################################
print_updateVulnerabilityStatusComment_help() {
    echo ""
    echo -e "${BOLD}${WHITE}updateVulnerabilityStatusComment - Set vulnerability status${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Set a vulnerability status of a vulnerability." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}vulnerabilityId${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: vulnerabilityId=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}statusId${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: statusId=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}commentId${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: commentId=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for databootstrapperServiceLoadData operation
#
##############################################################################
print_databootstrapperServiceLoadData_help() {
    echo ""
    echo -e "${BOLD}${WHITE}databootstrapperServiceLoadData - Summary: Load data
Description: Load data for a tenant.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for datamartProcessorServiceGetDatamartInfo operation
#
##############################################################################
print_datamartProcessorServiceGetDatamartInfo_help() {
    echo ""
    echo -e "${BOLD}${WHITE}datamartProcessorServiceGetDatamartInfo - Summary: Get datamarts
Description: Return a list of files inside a datamart to the caller.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}ingestion_id${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Ingestion id.${YELLOW} Specify as: ingestion_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for datamartProcessorServiceGetDatamarts operation
#
##############################################################################
print_datamartProcessorServiceGetDatamarts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}datamartProcessorServiceGetDatamarts - Summary: Get datamarts
Description: Return a list of datamarts for a time interval to the caller.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}period_start${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Data starting time period in UTC.${YELLOW} Specify as: period_start=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}period_end${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Data ending time period in UTC.${YELLOW} Specify as: period_end=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for datamartProcessorServiceGetEarliestStartTime operation
#
##############################################################################
print_datamartProcessorServiceGetEarliestStartTime_help() {
    echo ""
    echo -e "${BOLD}${WHITE}datamartProcessorServiceGetEarliestStartTime - Summary: Get rarliest start time
Description: Return the earliest time period of data available in database.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for datamartProcessorServiceSendAllCompleteFilesToQueue operation
#
##############################################################################
print_datamartProcessorServiceSendAllCompleteFilesToQueue_help() {
    echo ""
    echo -e "${BOLD}${WHITE}datamartProcessorServiceSendAllCompleteFilesToQueue - ${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for datamartProcessorServiceStoreExtractionLogs operation
#
##############################################################################
print_datamartProcessorServiceStoreExtractionLogs_help() {
    echo ""
    echo -e "${BOLD}${WHITE}datamartProcessorServiceStoreExtractionLogs - Summary: Store extraction logs
Description: Store the datamart extraction logs inside GI.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}request_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Request id which co-relates to request. ${YELLOW}Specify as: request_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for uploadDatamart operation
#
##############################################################################
print_uploadDatamart_help() {
    echo ""
    echo -e "${BOLD}${WHITE}uploadDatamart - Summary: Upload datamart
Description: Upload datamart file for ingestion.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;Successful${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for ecosystemServiceCreateDataset operation
#
##############################################################################
print_ecosystemServiceCreateDataset_help() {
    echo ""
    echo -e "${BOLD}${WHITE}ecosystemServiceCreateDataset - Summary: Create dataset
Description: Save a definition in the database.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for ecosystemServiceDataInsert operation
#
##############################################################################
print_ecosystemServiceDataInsert_help() {
    echo ""
    echo -e "${BOLD}${WHITE}ecosystemServiceDataInsert - Summary: Data insert
Description: Process Data received from webhook API and insert.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}dataset_name${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Data set target name. ${YELLOW}Specify as: dataset_name=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for ecosystemServiceDeleteDatasets operation
#
##############################################################################
print_ecosystemServiceDeleteDatasets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}ecosystemServiceDeleteDatasets - Summary: Delete datasets
Description: Delete an array of datasets.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}dataset_names${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Name of the dataset, required field.${YELLOW} Specify as: dataset_names=value1 dataset_names=value2 dataset_names=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for ecosystemServiceGetDatasetData operation
#
##############################################################################
print_ecosystemServiceGetDatasetData_help() {
    echo ""
    echo -e "${BOLD}${WHITE}ecosystemServiceGetDatasetData - Summary: Get dataset data
Description: Return data report for a given dataset.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}dataset_name${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Name of the dataset. ${YELLOW}Specify as: dataset_name=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - The amount to offset the rows by for pagination.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - The max amount of rows to return for pagination.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}return_header${OFF} ${BLUE}[boolean]${OFF} ${CYAN}(default: null)${OFF} - If needs to return header information. It is for pagination. The first page needs header, the rest doesn't need.${YELLOW} Specify as: return_header=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}field${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Search field.${YELLOW} Specify as: field=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}value${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Search value.${YELLOW} Specify as: value=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort_field${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Field to sort.${YELLOW} Specify as: sort_field=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort_order${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: NONE)${OFF} - Sort order.${YELLOW} Specify as: sort_order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for ecosystemServiceGetDatasetDetail operation
#
##############################################################################
print_ecosystemServiceGetDatasetDetail_help() {
    echo ""
    echo -e "${BOLD}${WHITE}ecosystemServiceGetDatasetDetail - Summary: Get dataset detail
Description: Return detail on a dataset definition.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}dataset_name${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Name of the dataset. ${YELLOW}Specify as: dataset_name=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for ecosystemServiceGetDatasets operation
#
##############################################################################
print_ecosystemServiceGetDatasets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}ecosystemServiceGetDatasets - Summary: Get datasets
Description: Return dataset list that matches the specified filter.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter.start_time${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Return datasets created at this time or later (>=).${YELLOW} Specify as: filter.start_time=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter.end_time${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Return datasets created before this time (<).${YELLOW} Specify as: filter.end_time=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter.dataset_names${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - The state filter groups commonly paired states.
Only returns records that include the specified names.${YELLOW} Specify as: filter.dataset_names=value1 filter.dataset_names=value2 filter.dataset_names=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - The amount to offset the rows by for pagination.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - The max amount of rows to return for pagination.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}include_filter_counts${OFF} ${BLUE}[boolean]${OFF} ${CYAN}(default: null)${OFF} - Computing the filter counts is relatively expensive, only compute when needed.${YELLOW} Specify as: include_filter_counts=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for ecosystemServiceGetPurgableRows operation
#
##############################################################################
print_ecosystemServiceGetPurgableRows_help() {
    echo ""
    echo -e "${BOLD}${WHITE}ecosystemServiceGetPurgableRows - Summary: Get purgable rows
Description: Check the number of rows that can be purged.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for ecosystemServicePurgeData operation
#
##############################################################################
print_ecosystemServicePurgeData_help() {
    echo ""
    echo -e "${BOLD}${WHITE}ecosystemServicePurgeData - Summary: Purge data
Description: Purge data.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}dataset_names${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Name of the datasets, required field.${YELLOW} Specify as: dataset_names=value1 dataset_names=value2 dataset_names=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for featureFlagsServiceDeleteFeatureFlagOverrides operation
#
##############################################################################
print_featureFlagsServiceDeleteFeatureFlagOverrides_help() {
    echo ""
    echo -e "${BOLD}${WHITE}featureFlagsServiceDeleteFeatureFlagOverrides - Summary: Delete feature Flag overrides
Description: Delete feature Flag overrides from database.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}flag_name${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Flag name.${YELLOW} Specify as: flag_name=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}tenant_id${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Optional tenant id.${YELLOW} Specify as: tenant_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for featureFlagsServiceGetFeatureFlagOverrides operation
#
##############################################################################
print_featureFlagsServiceGetFeatureFlagOverrides_help() {
    echo ""
    echo -e "${BOLD}${WHITE}featureFlagsServiceGetFeatureFlagOverrides - Summary: Get feature Flag overrides
Description: Get feature Flag overrides by Feature Flag Name.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}tenant_id${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Optional tenant id.${YELLOW} Specify as: tenant_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}flag_names${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Optional flag names; if empty then return all flag.${YELLOW} Specify as: flag_names=value1 flag_names=value2 flag_names=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for featureFlagsServiceGetFeatureFlags operation
#
##############################################################################
print_featureFlagsServiceGetFeatureFlags_help() {
    echo ""
    echo -e "${BOLD}${WHITE}featureFlagsServiceGetFeatureFlags - Summary: Get feature flags
Description: Get feature flags by Feature Flag Name.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}tenant_id${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Tenant id.${YELLOW} Specify as: tenant_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}flag_names${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Optional flag names; if empty then return all flag.${YELLOW} Specify as: flag_names=value1 flag_names=value2 flag_names=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for featureFlagsServiceUpdateFeatureFlagOverrides operation
#
##############################################################################
print_featureFlagsServiceUpdateFeatureFlagOverrides_help() {
    echo ""
    echo -e "${BOLD}${WHITE}featureFlagsServiceUpdateFeatureFlagOverrides - Summary: Update feature Flag overrides
Description: Update feature Flag overrides in the database.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for groupBuilderCancelImportGroup operation
#
##############################################################################
print_groupBuilderCancelImportGroup_help() {
    echo ""
    echo -e "${BOLD}${WHITE}groupBuilderCancelImportGroup - Summary: Cancel import group
Description: Cancel import refresh for selected groups.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}group_ids${OFF} ${BLUE}[array[integer]]${OFF} ${CYAN}(default: null)${OFF} - Group IDs to delete.${YELLOW} Specify as: group_ids=value1 group_ids=value2 group_ids=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for groupBuilderCreateGroup operation
#
##############################################################################
print_groupBuilderCreateGroup_help() {
    echo ""
    echo -e "${BOLD}${WHITE}groupBuilderCreateGroup - Summary: Create group
Description: Create new groups.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for groupBuilderDeleteGroup operation
#
##############################################################################
print_groupBuilderDeleteGroup_help() {
    echo ""
    echo -e "${BOLD}${WHITE}groupBuilderDeleteGroup - Summary: Delete group
Description: Delete specified groups if the group ID is not used for reports.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}group_ids${OFF} ${BLUE}[array[integer]]${OFF} ${CYAN}(default: null)${OFF} - Group IDs to delete.${YELLOW} Specify as: group_ids=value1 group_ids=value2 group_ids=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for groupBuilderEditGroup operation
#
##############################################################################
print_groupBuilderEditGroup_help() {
    echo ""
    echo -e "${BOLD}${WHITE}groupBuilderEditGroup - Summary: Edit group
Description: Add or delete group members.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}group_id${OFF} ${BLUE}[integer]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Group ID. ${YELLOW}Specify as: group_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for groupBuilderExportGroup operation
#
##############################################################################
print_groupBuilderExportGroup_help() {
    echo ""
    echo -e "${BOLD}${WHITE}groupBuilderExportGroup - Summary: Export group
Description: Export group content to a file based on a group ID.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for groupBuilderGetGroupDetails operation
#
##############################################################################
print_groupBuilderGetGroupDetails_help() {
    echo ""
    echo -e "${BOLD}${WHITE}groupBuilderGetGroupDetails - Summary: Get group details
Description: Get details of group specified by group ID.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}group_id${OFF} ${BLUE}[integer]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Group ID. ${YELLOW}Specify as: group_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter by group member name.${YELLOW} Specify as: filter=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}order${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Order by ascending (ASC) or descending (DESC).${YELLOW} Specify as: order=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for groupBuilderGetGroupMembers operation
#
##############################################################################
print_groupBuilderGetGroupMembers_help() {
    echo ""
    echo -e "${BOLD}${WHITE}groupBuilderGetGroupMembers - Summary: Get group members
Description: Get members of all the group ids provided in the request. To be consumed by policy builder ms.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for groupBuilderGetGroupSyncMapping operation
#
##############################################################################
print_groupBuilderGetGroupSyncMapping_help() {
    echo ""
    echo -e "${BOLD}${WHITE}groupBuilderGetGroupSyncMapping - Summary: Get gdp to gi group mapping
Description: Get insights to gdp group sync mapping.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}central_manager_id${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Central manager.${YELLOW} Specify as: central_manager_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for groupBuilderGetGroupTypeMapping operation
#
##############################################################################
print_groupBuilderGetGroupTypeMapping_help() {
    echo ""
    echo -e "${BOLD}${WHITE}groupBuilderGetGroupTypeMapping - Summary: Get group type mapping
Description: Get insights to gdp group types mapping.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for groupBuilderGetGroupTypes operation
#
##############################################################################
print_groupBuilderGetGroupTypes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}groupBuilderGetGroupTypes - Summary: Get group types
Description: Get a list of available group types.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for groupBuilderGetGroups operation
#
##############################################################################
print_groupBuilderGetGroups_help() {
    echo ""
    echo -e "${BOLD}${WHITE}groupBuilderGetGroups - Summary: Get groups
Description: Get a list of imported group members.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}do_not_include_member_count${OFF} ${BLUE}[boolean]${OFF} ${CYAN}(default: null)${OFF} - Return group names, ID's, type ID's, nested bool, and tuple count only if the flag is true.${YELLOW} Specify as: do_not_include_member_count=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}only_full_access${OFF} ${BLUE}[boolean]${OFF} ${CYAN}(default: null)${OFF} - Only return groups that user has full-access to.${YELLOW} Specify as: only_full_access=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}non_nested${OFF} ${BLUE}[boolean]${OFF} ${CYAN}(default: null)${OFF} - Only return non-nested groups.${YELLOW} Specify as: non_nested=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for groupBuilderGetImportGroups operation
#
##############################################################################
print_groupBuilderGetImportGroups_help() {
    echo ""
    echo -e "${BOLD}${WHITE}groupBuilderGetImportGroups - Summary: Get import groups
Description: Get unsynchronized groups from a central manager.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}central_manager_id${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Central manager host name.${YELLOW} Specify as: central_manager_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for groupBuilderImportGroup operation
#
##############################################################################
print_groupBuilderImportGroup_help() {
    echo ""
    echo -e "${BOLD}${WHITE}groupBuilderImportGroup - Summary: Import group
Description: Import selected groups from a central manager. (This API is called from GDP only)${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for groupBuilderRefreshGroups operation
#
##############################################################################
print_groupBuilderRefreshGroups_help() {
    echo ""
    echo -e "${BOLD}${WHITE}groupBuilderRefreshGroups - Summary: Refresh groups
Description: Refresh tenants selected imported groups.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for groupBuilderResetGroups operation
#
##############################################################################
print_groupBuilderResetGroups_help() {
    echo ""
    echo -e "${BOLD}${WHITE}groupBuilderResetGroups - Summary: Reset groups
Description: Resets tenants selected predefined groups.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for groupBuilderStoreGroupMembersGdp operation
#
##############################################################################
print_groupBuilderStoreGroupMembersGdp_help() {
    echo ""
    echo -e "${BOLD}${WHITE}groupBuilderStoreGroupMembersGdp - Summary: Store group members Gdp
Description: Store GDP groups. (This API is called from GDP only)${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}central_manager_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - ID of central manager. ${YELLOW}Specify as: central_manager_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for groupBuilderStoreGroupsGdp operation
#
##############################################################################
print_groupBuilderStoreGroupsGdp_help() {
    echo ""
    echo -e "${BOLD}${WHITE}groupBuilderStoreGroupsGdp - Summary: Store groups Gdp
Description: Store GDP groups. (This API is called from GDP only)${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}central_manager_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - ID of central manager. ${YELLOW}Specify as: central_manager_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for guardiumConnectorAddCM operation
#
##############################################################################
print_guardiumConnectorAddCM_help() {
    echo ""
    echo -e "${BOLD}${WHITE}guardiumConnectorAddCM - Summary: Add CM
Description: Add a Central Manager to the tenant database.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for guardiumConnectorAddDatamarts operation
#
##############################################################################
print_guardiumConnectorAddDatamarts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}guardiumConnectorAddDatamarts - Description: stores datamarts details from GDP${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}central_manager_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - central manager ${YELLOW}Specify as: central_manager_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for guardiumConnectorAddDmExclusion operation
#
##############################################################################
print_guardiumConnectorAddDmExclusion_help() {
    echo ""
    echo -e "${BOLD}${WHITE}guardiumConnectorAddDmExclusion - Summary: Add DM exclusion
Description: Add datamart to exclusion list.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for guardiumConnectorAddTask operation
#
##############################################################################
print_guardiumConnectorAddTask_help() {
    echo ""
    echo -e "${BOLD}${WHITE}guardiumConnectorAddTask - Summary: Add task
Description: Add a task to be executed on GDP.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}central_manager_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - ID of central manager. ${YELLOW}Specify as: central_manager_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for guardiumConnectorBlockUser operation
#
##############################################################################
print_guardiumConnectorBlockUser_help() {
    echo ""
    echo -e "${BOLD}${WHITE}guardiumConnectorBlockUser - Summary: Block user
Description: Block a database user on Guardium Data Protection or on a supported Database as a Service instance.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for guardiumConnectorConfigureAggregatorExport operation
#
##############################################################################
print_guardiumConnectorConfigureAggregatorExport_help() {
    echo ""
    echo -e "${BOLD}${WHITE}guardiumConnectorConfigureAggregatorExport - Summary: Configure aggregator export
Description: Configure datamart export from the Aggregators to GI.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}central_manager_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Central Manager ID. ${YELLOW}Specify as: central_manager_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for guardiumConnectorConfigureCollectorExport operation
#
##############################################################################
print_guardiumConnectorConfigureCollectorExport_help() {
    echo ""
    echo -e "${BOLD}${WHITE}guardiumConnectorConfigureCollectorExport - Summary: Configure collector export
Description: Schedule export historical data for collectors.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}central_manager_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Central Manager ID. ${YELLOW}Specify as: central_manager_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for guardiumConnectorConfigureStreaming operation
#
##############################################################################
print_guardiumConnectorConfigureStreaming_help() {
    echo ""
    echo -e "${BOLD}${WHITE}guardiumConnectorConfigureStreaming - Summary: Configure streaming
Description: Enable or disable streaming.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}central_manager_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Central Manager ID. ${YELLOW}Specify as: central_manager_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for guardiumConnectorDatamartVersionCheck operation
#
##############################################################################
print_guardiumConnectorDatamartVersionCheck_help() {
    echo ""
    echo -e "${BOLD}${WHITE}guardiumConnectorDatamartVersionCheck - Description: validates if central manager has datamart support for event model${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}central_manager_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Central manager ${YELLOW}Specify as: central_manager_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for guardiumConnectorDeleteCM operation
#
##############################################################################
print_guardiumConnectorDeleteCM_help() {
    echo ""
    echo -e "${BOLD}${WHITE}guardiumConnectorDeleteCM - Summary: Delete CM
Description: Delete a Central Manager by ID (Name, Hostname or IP).${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}central_manager_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Central Manager ID. ${YELLOW}Specify as: central_manager_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}force${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - Flag to force delete CM and associated tasks (0=validate CM is online before deleting, 1=force delete CM).${YELLOW} Specify as: force=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for guardiumConnectorDeleteDmExclusion operation
#
##############################################################################
print_guardiumConnectorDeleteDmExclusion_help() {
    echo ""
    echo -e "${BOLD}${WHITE}guardiumConnectorDeleteDmExclusion - Summary: Delete DM exclusion
Description: Delete a datamart from exclusion list.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}datamart${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Datamart name.${YELLOW} Specify as: datamart=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for guardiumConnectorDeleteTask operation
#
##############################################################################
print_guardiumConnectorDeleteTask_help() {
    echo ""
    echo -e "${BOLD}${WHITE}guardiumConnectorDeleteTask - Summary: Delete task
Description: Delete a task by central manager id and task id.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}central_manager_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - ID of central manager. ${YELLOW}Specify as: central_manager_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}task_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - ID of task being deleted. ${YELLOW}Specify as: task_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for guardiumConnectorDeleteTasks operation
#
##############################################################################
print_guardiumConnectorDeleteTasks_help() {
    echo ""
    echo -e "${BOLD}${WHITE}guardiumConnectorDeleteTasks - Summary: Delete tasks
Description: Delete a central manager's tasks by central manager id.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}central_manager_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - ID of central manager. ${YELLOW}Specify as: central_manager_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for guardiumConnectorGetAggregatorsConfig operation
#
##############################################################################
print_guardiumConnectorGetAggregatorsConfig_help() {
    echo ""
    echo -e "${BOLD}${WHITE}guardiumConnectorGetAggregatorsConfig - Summary: Get aggregators config
Description: Return a list of managed units from the config collection in tenant database.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}central_manager_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Central Manager ID. ${YELLOW}Specify as: central_manager_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for guardiumConnectorGetCMs operation
#
##############################################################################
print_guardiumConnectorGetCMs_help() {
    echo ""
    echo -e "${BOLD}${WHITE}guardiumConnectorGetCMs - Summary: Get CMs
Description: Return a list of Central Managers from the tenant database with additional processing.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}run_additional_checks${OFF} ${BLUE}[boolean]${OFF} ${CYAN}(default: null)${OFF} - Retrieve the streaming status for all Managed Units that are reporting to a particular Central Manager.${YELLOW} Specify as: run_additional_checks=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for guardiumConnectorGetCMsConfig operation
#
##############################################################################
print_guardiumConnectorGetCMsConfig_help() {
    echo ""
    echo -e "${BOLD}${WHITE}guardiumConnectorGetCMsConfig - Summary: Get CMs config
Description: Return a list of Central Managers from the tenant database.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for guardiumConnectorGetCollectorsConfig operation
#
##############################################################################
print_guardiumConnectorGetCollectorsConfig_help() {
    echo ""
    echo -e "${BOLD}${WHITE}guardiumConnectorGetCollectorsConfig - Summary: Get collectors config
Description: Return the list of collectors configuration from the tenant database.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}central_manager_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Central Manager ID. ${YELLOW}Specify as: central_manager_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for guardiumConnectorGetDatamarts operation
#
##############################################################################
print_guardiumConnectorGetDatamarts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}guardiumConnectorGetDatamarts - Description: returns full list of supported datamarts including type (historical or non-historical)${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}central_manager_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - central manager hostname ${YELLOW}Specify as: central_manager_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for guardiumConnectorGetDmExclusion operation
#
##############################################################################
print_guardiumConnectorGetDmExclusion_help() {
    echo ""
    echo -e "${BOLD}${WHITE}guardiumConnectorGetDmExclusion - Summary: Get DM exclusion
Description: Return datamarts in the exclusion list.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for guardiumConnectorGetGdpPolicyInfo operation
#
##############################################################################
print_guardiumConnectorGetGdpPolicyInfo_help() {
    echo ""
    echo -e "${BOLD}${WHITE}guardiumConnectorGetGdpPolicyInfo - Summary: Get guardium policy definition
Description: returns the policy definition on the cm${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}central_manager_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Central manager hostname ${YELLOW}Specify as: central_manager_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}policy_name${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Policy name.${YELLOW} Specify as: policy_name=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for guardiumConnectorGetGdpPolicySummaries operation
#
##############################################################################
print_guardiumConnectorGetGdpPolicySummaries_help() {
    echo ""
    echo -e "${BOLD}${WHITE}guardiumConnectorGetGdpPolicySummaries - Summary: Get guardium policy summary
Description: returns the summaries of all policies on that central manager${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}central_manager_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Central manager hostname ${YELLOW}Specify as: central_manager_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for guardiumConnectorGetHealthInfo operation
#
##############################################################################
print_guardiumConnectorGetHealthInfo_help() {
    echo ""
    echo -e "${BOLD}${WHITE}guardiumConnectorGetHealthInfo - Summary: Get gealth info
Description: Get health information from Guardium Data Protection central mamangers.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}central_manager_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Central Manager ID. ${YELLOW}Specify as: central_manager_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}use_fallback${OFF} ${BLUE}[boolean]${OFF} ${CYAN}(default: null)${OFF} - Flag indicating if the older gdp api is to be called in case it doesn't support new api.${YELLOW} Specify as: use_fallback=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for guardiumConnectorGetLatestDMExtractionProfile operation
#
##############################################################################
print_guardiumConnectorGetLatestDMExtractionProfile_help() {
    echo ""
    echo -e "${BOLD}${WHITE}guardiumConnectorGetLatestDMExtractionProfile - Summary: Get latest DM extraction profile
Description: Return the Datamart Extraction Profile for Guardium.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}central_manager_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Central Manager ID. ${YELLOW}Specify as: central_manager_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for guardiumConnectorGetStreamingStatus operation
#
##############################################################################
print_guardiumConnectorGetStreamingStatus_help() {
    echo ""
    echo -e "${BOLD}${WHITE}guardiumConnectorGetStreamingStatus - Summary: Get streaming status
Description: Return the streaming configuration.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}central_manager_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Central Manager ID. ${YELLOW}Specify as: central_manager_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for guardiumConnectorGetSyncDMs operation
#
##############################################################################
print_guardiumConnectorGetSyncDMs_help() {
    echo ""
    echo -e "${BOLD}${WHITE}guardiumConnectorGetSyncDMs - Summary: Get sync DMs
Description: Return the list of tasks from a central manager.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}central_manager_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - ID of central manager. ${YELLOW}Specify as: central_manager_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for guardiumConnectorGetTaskTypes operation
#
##############################################################################
print_guardiumConnectorGetTaskTypes_help() {
    echo ""
    echo -e "${BOLD}${WHITE}guardiumConnectorGetTaskTypes - Summary: Get task types
Description: Return the list of supported task types.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for guardiumConnectorGetTasks operation
#
##############################################################################
print_guardiumConnectorGetTasks_help() {
    echo ""
    echo -e "${BOLD}${WHITE}guardiumConnectorGetTasks - Summary: Get tasks
Description: Return the list of tasks from a central manager.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}central_manager_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - ID of central manager. ${YELLOW}Specify as: central_manager_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}task_id${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - ID of task.${YELLOW} Specify as: task_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}task_type${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Type of task.${YELLOW} Specify as: task_type=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}key_object${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Key object.${YELLOW} Specify as: key_object=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for guardiumConnectorRunGDPReport operation
#
##############################################################################
print_guardiumConnectorRunGDPReport_help() {
    echo ""
    echo -e "${BOLD}${WHITE}guardiumConnectorRunGDPReport - Summary: Run GDP report
Description: Run GDP report.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}central_manager_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Central Manager ID. ${YELLOW}Specify as: central_manager_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for guardiumConnectorSetupCM operation
#
##############################################################################
print_guardiumConnectorSetupCM_help() {
    echo ""
    echo -e "${BOLD}${WHITE}guardiumConnectorSetupCM - Summary: Setup CM
Description: Set up the registration between a GDP Central manager and Guardium.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for guardiumConnectorSetupDatamarts operation
#
##############################################################################
print_guardiumConnectorSetupDatamarts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}guardiumConnectorSetupDatamarts - Description: setup custom datamart execution mode${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}central_manager_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - central manager ${YELLOW}Specify as: central_manager_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for guardiumConnectorTaskError operation
#
##############################################################################
print_guardiumConnectorTaskError_help() {
    echo ""
    echo -e "${BOLD}${WHITE}guardiumConnectorTaskError - Summary: Task error
Description: Log error messages from GDP task execution.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}central_manager_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - ID of central manager. ${YELLOW}Specify as: central_manager_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for guardiumConnectorTestDatabaseConnection operation
#
##############################################################################
print_guardiumConnectorTestDatabaseConnection_help() {
    echo ""
    echo -e "${BOLD}${WHITE}guardiumConnectorTestDatabaseConnection - Summary: Test database connection
Description: Return database connection results.${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for guardiumConnectorUpdateDmExclusion operation
#
##############################################################################
print_guardiumConnectorUpdateDmExclusion_help() {
    echo ""
    echo -e "${BOLD}${WHITE}guardiumConnectorUpdateDmExclusion - Summary: Update DM exclusion
Description: Update the atamart exclusion list.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for guardiumConnectorUpdateStreaming operation
#
##############################################################################
print_guardiumConnectorUpdateStreaming_help() {
    echo ""
    echo -e "${BOLD}${WHITE}guardiumConnectorUpdateStreaming - Summary: Update streaming
Description: Update streaming status into GI.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}central_manager_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - ID of central manager. ${YELLOW}Specify as: central_manager_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for guardiumConnectorUpdateTask operation
#
##############################################################################
print_guardiumConnectorUpdateTask_help() {
    echo ""
    echo -e "${BOLD}${WHITE}guardiumConnectorUpdateTask - Summary: Update task
Description: Update a task that gets executed on GDP.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}central_manager_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - ID of central manager. ${YELLOW}Specify as: central_manager_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}task_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - ID of task being updated. ${YELLOW}Specify as: task_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for healthCollectorGetDataWarehouseUsage operation
#
##############################################################################
print_healthCollectorGetDataWarehouseUsage_help() {
    echo ""
    echo -e "${BOLD}${WHITE}healthCollectorGetDataWarehouseUsage - Summary: Get data warehouse usage info
Description: Get information from Db2 related to usage${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}type${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - The type of metric to retrieve ${YELLOW}Specify as: type=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}start_time${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - The start time from which the data needs to be calculated.${YELLOW} Specify as: start_time=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}end_time${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - The end time from which the data needs to be calculated.${YELLOW} Specify as: end_time=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for healthCollectorGetGDPHealthInfo operation
#
##############################################################################
print_healthCollectorGetGDPHealthInfo_help() {
    echo ""
    echo -e "${BOLD}${WHITE}healthCollectorGetGDPHealthInfo - Summary: Get GDP health info
Description: Get information from MongoDB for Guardium central managers using health-connector service.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for healthCollectorGetHistoricalHealthInfo operation
#
##############################################################################
print_healthCollectorGetHistoricalHealthInfo_help() {
    echo ""
    echo -e "${BOLD}${WHITE}healthCollectorGetHistoricalHealthInfo - Summary: Get historical health info
Description: Retrieve historical s-tap related statistics from health-collector service.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}unit${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: UNKNOWN_UNIT)${OFF} - Type of unit for which data needs to be retrieved.${YELLOW} Specify as: unit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}cm_id${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Optional value if the data is for a particular cm. If it is empty the data for all cms would be retrieved.${YELLOW} Specify as: cm_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}start_time${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - The start time from which the data needs to be calculated.${YELLOW} Specify as: start_time=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}end_time${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - The end time from which the data needs to be calculated.${YELLOW} Specify as: end_time=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for healthCollectorGetObjectStorageUsage operation
#
##############################################################################
print_healthCollectorGetObjectStorageUsage_help() {
    echo ""
    echo -e "${BOLD}${WHITE}healthCollectorGetObjectStorageUsage - Summary: Get object storage usage info
Description: Get information from object storage about tenant bucket usage${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}type${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - The type of metric to retrieve ${YELLOW}Specify as: type=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}start_time${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - The start time from which the data needs to be calculated.${YELLOW} Specify as: start_time=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}end_time${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - The end time from which the data needs to be calculated.${YELLOW} Specify as: end_time=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for healthCollectorGetPVCUsage operation
#
##############################################################################
print_healthCollectorGetPVCUsage_help() {
    echo ""
    echo -e "${BOLD}${WHITE}healthCollectorGetPVCUsage - Summary: Get the PVC usage information
Description: Get information about the PVC usage in the OCP cluster${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}type${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - The type of metric to retrieve ${YELLOW}Specify as: type=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}start_time${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - The start time from which the data needs to be calculated.${YELLOW} Specify as: start_time=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}end_time${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - The end time from which the data needs to be calculated.${YELLOW} Specify as: end_time=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for healthCollectorGetPodRestarts operation
#
##############################################################################
print_healthCollectorGetPodRestarts_help() {
    echo ""
    echo -e "${BOLD}${WHITE}healthCollectorGetPodRestarts - Summary: Get the pod restart information
Description: Get information about the number of restarts by pod in OCP${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}type${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - The type of metric to retrieve ${YELLOW}Specify as: type=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}start_time${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - The start time from which the data needs to be calculated.${YELLOW} Specify as: start_time=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}end_time${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - The end time from which the data needs to be calculated.${YELLOW} Specify as: end_time=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for healthCollectorGetStreamsIngestion operation
#
##############################################################################
print_healthCollectorGetStreamsIngestion_help() {
    echo ""
    echo -e "${BOLD}${WHITE}healthCollectorGetStreamsIngestion - Summary: Get streams ingestion volume over a given time
Description: Get information about streams ingestion volume${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}type${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - The type of metric to retrieve ${YELLOW}Specify as: type=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}start_time${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - The start time from which the data needs to be calculated.${YELLOW} Specify as: start_time=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}end_time${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - The end time from which the data needs to be calculated.${YELLOW} Specify as: end_time=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for healthCollectorGetTopGDPCollectors operation
#
##############################################################################
print_healthCollectorGetTopGDPCollectors_help() {
    echo ""
    echo -e "${BOLD}${WHITE}healthCollectorGetTopGDPCollectors - Summary: Get the top GDP collectors which send data to GI
Description: Get information about the top GDP collectors${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}type${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - The type of metric to retrieve ${YELLOW}Specify as: type=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}start_time${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - The start time from which the data needs to be calculated.${YELLOW} Specify as: start_time=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}end_time${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - The end time from which the data needs to be calculated.${YELLOW} Specify as: end_time=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for healthCollectorStoreHealthInfo operation
#
##############################################################################
print_healthCollectorStoreHealthInfo_help() {
    echo ""
    echo -e "${BOLD}${WHITE}healthCollectorStoreHealthInfo - Summary: Store health info
Description: Store health info from GDP into GI. (This API is called from GDP only)${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}central_manager_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - ID of central manager. ${YELLOW}Specify as: central_manager_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for jumpboxServiceAuthorize operation
#
##############################################################################
print_jumpboxServiceAuthorize_help() {
    echo ""
    echo -e "${BOLD}${WHITE}jumpboxServiceAuthorize - Summary: Authorize
Description: Authenticate a user and return a JWT.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for jumpboxServiceDeleteTenant operation
#
##############################################################################
print_jumpboxServiceDeleteTenant_help() {
    echo ""
    echo -e "${BOLD}${WHITE}jumpboxServiceDeleteTenant - Summary: Delete tenant
Description: Delete a tenant.${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}tenant_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Tenant id. ${YELLOW}Specify as: tenant_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}is_permanent_delete${OFF} ${BLUE}[boolean]${OFF} ${CYAN}(default: null)${OFF} - Delete tenant permanently if true.${YELLOW} Specify as: is_permanent_delete=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}async${OFF} ${BLUE}[boolean]${OFF} ${CYAN}(default: null)${OFF} - Async.${YELLOW} Specify as: async=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for jumpboxServiceDeleteUser operation
#
##############################################################################
print_jumpboxServiceDeleteUser_help() {
    echo ""
    echo -e "${BOLD}${WHITE}jumpboxServiceDeleteUser - Summary: Delete user
Description: Delete the user.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - The user id. ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for jumpboxServiceGetTenant operation
#
##############################################################################
print_jumpboxServiceGetTenant_help() {
    echo ""
    echo -e "${BOLD}${WHITE}jumpboxServiceGetTenant - Summary: Get tenant
Description: Get a tenant.${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}tenant_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Tenant id. ${YELLOW}Specify as: tenant_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}include_inactive${OFF} ${BLUE}[boolean]${OFF} ${CYAN}(default: null)${OFF} - Include inactive.${YELLOW} Specify as: include_inactive=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}include_not_ready${OFF} ${BLUE}[boolean]${OFF} ${CYAN}(default: null)${OFF} - Include tenants that are not ready(are in state of being created or deleted).${YELLOW} Specify as: include_not_ready=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for jumpboxServiceGetTenants operation
#
##############################################################################
print_jumpboxServiceGetTenants_help() {
    echo ""
    echo -e "${BOLD}${WHITE}jumpboxServiceGetTenants - Summary: Get tenants
Description: Get all tenant base on UID.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}uid${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Email.${YELLOW} Specify as: uid=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}external_id${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - External id.${YELLOW} Specify as: external_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}include_inactive${OFF} ${BLUE}[boolean]${OFF} ${CYAN}(default: null)${OFF} - Include inactive.${YELLOW} Specify as: include_inactive=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}include_not_ready${OFF} ${BLUE}[boolean]${OFF} ${CYAN}(default: null)${OFF} - Include tenants that are not ready(are in state of being created or deleted).${YELLOW} Specify as: include_not_ready=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for jumpboxServiceGetUsers operation
#
##############################################################################
print_jumpboxServiceGetUsers_help() {
    echo ""
    echo -e "${BOLD}${WHITE}jumpboxServiceGetUsers - Summary: Get users
Description: Get all users base on a tenantID.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}uid${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Email.${YELLOW} Specify as: uid=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for jumpboxServicePostTenants operation
#
##############################################################################
print_jumpboxServicePostTenants_help() {
    echo ""
    echo -e "${BOLD}${WHITE}jumpboxServicePostTenants - Summary: Post tenants
Description: Create a tenant.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for jumpboxServicePostUsers operation
#
##############################################################################
print_jumpboxServicePostUsers_help() {
    echo ""
    echo -e "${BOLD}${WHITE}jumpboxServicePostUsers - Summary: Post users
Description: Create users.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for jumpboxServiceSearchUsers operation
#
##############################################################################
print_jumpboxServiceSearchUsers_help() {
    echo ""
    echo -e "${BOLD}${WHITE}jumpboxServiceSearchUsers - Summary: Search users
Description: Search for all users matching the provided string.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for jumpboxServiceTestUser operation
#
##############################################################################
print_jumpboxServiceTestUser_help() {
    echo ""
    echo -e "${BOLD}${WHITE}jumpboxServiceTestUser - Summary: Test user
Description: Test a user lookup to a given LDAP.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for jumpboxServiceUpdateTenant operation
#
##############################################################################
print_jumpboxServiceUpdateTenant_help() {
    echo ""
    echo -e "${BOLD}${WHITE}jumpboxServiceUpdateTenant - Summary: Update tenant
Description: Update a tenant.${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}tenant_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Tenant id. ${YELLOW}Specify as: tenant_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for jumpboxServiceUpdateUsers operation
#
##############################################################################
print_jumpboxServiceUpdateUsers_help() {
    echo ""
    echo -e "${BOLD}${WHITE}jumpboxServiceUpdateUsers - Summary: Update users
Description: Update an array of users.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for notificationsServiceCreateTicket operation
#
##############################################################################
print_notificationsServiceCreateTicket_help() {
    echo ""
    echo -e "${BOLD}${WHITE}notificationsServiceCreateTicket - Summary: Create ticket
Description: Create ticket based on information passed in.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for notificationsServiceGetFolders operation
#
##############################################################################
print_notificationsServiceGetFolders_help() {
    echo ""
    echo -e "${BOLD}${WHITE}notificationsServiceGetFolders - Summary: Get folders
Description: Get folder for the integration connection provided.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for notificationsServiceGetNotificationFilename operation
#
##############################################################################
print_notificationsServiceGetNotificationFilename_help() {
    echo ""
    echo -e "${BOLD}${WHITE}notificationsServiceGetNotificationFilename - Summary: Get notification filename
Description: Return filename associated with the notifications record referenced in the associated context record.
The notification id is required but may be set in the associated authentication token or explicitly in the request.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}notification_id${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Params are located in the requests context (tenant id, user email, notification id).${YELLOW} Specify as: notification_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for notificationsServiceGetNotificationRecord operation
#
##############################################################################
print_notificationsServiceGetNotificationRecord_help() {
    echo ""
    echo -e "${BOLD}${WHITE}notificationsServiceGetNotificationRecord - Summary: Get notification record
Description: Return notifications record with the specified ID.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}notification_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - ID for the record to return. ${YELLOW}Specify as: notification_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for notificationsServiceGetNotificationRecords operation
#
##############################################################################
print_notificationsServiceGetNotificationRecords_help() {
    echo ""
    echo -e "${BOLD}${WHITE}notificationsServiceGetNotificationRecords - Summary: Get notification records
Description: Return notifications records that match the specified filter.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter.start_time${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Return records created at this time or later (>=).${YELLOW} Specify as: filter.start_time=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter.end_time${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Return records created before this time (<).${YELLOW} Specify as: filter.end_time=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter.state${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: INCLUDE_ALL)${OFF} - Only return record that include the specified state.${YELLOW} Specify as: filter.state=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter.origins${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Only return record that includes the specified origins.${YELLOW} Specify as: filter.origins=value1 filter.origins=value2 filter.origins=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter.origin_data${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Only return record that with the specified origin_data.${YELLOW} Specify as: filter.origin_data=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - The amount to offset the rows by for pagination.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - The max amount of rows to return for pagination.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}include_filter_counts${OFF} ${BLUE}[boolean]${OFF} ${CYAN}(default: null)${OFF} - Computing the filter counts is relatively expensive, only compute when needed.${YELLOW} Specify as: include_filter_counts=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for notificationsServiceGetTicketStatus operation
#
##############################################################################
print_notificationsServiceGetTicketStatus_help() {
    echo ""
    echo -e "${BOLD}${WHITE}notificationsServiceGetTicketStatus - Summary: Get ticket status
Description: Get the status of the given ticket${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}ticket_id${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - The ID of the ticket to fetch.${YELLOW} Specify as: ticket_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}integration_id${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - The ID of the ticketing integration.${YELLOW} Specify as: integration_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for notificationsServiceTestIntegration operation
#
##############################################################################
print_notificationsServiceTestIntegration_help() {
    echo ""
    echo -e "${BOLD}${WHITE}notificationsServiceTestIntegration - Summary: Test integration
Description: Test the integration connection with the arguments passed in the TestIntegrationRequest.  When possible
a test message is sent to the integration to ensure it is functional.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for notificationsServiceUpdateNotificationRecord operation
#
##############################################################################
print_notificationsServiceUpdateNotificationRecord_help() {
    echo ""
    echo -e "${BOLD}${WHITE}notificationsServiceUpdateNotificationRecord - Summary: Update notification record
Description: Update a notification record with the specified values.  The ID field is required and must match an existing notification.
All fields other than the ID are optional.
Creation timestamp, user and other administrative fields can not updated.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for outliersEngineGetSourceStatistics operation
#
##############################################################################
print_outliersEngineGetSourceStatistics_help() {
    echo ""
    echo -e "${BOLD}${WHITE}outliersEngineGetSourceStatistics - Summary: Get source statistics
Description: Return statistics regarding the input source, including distribution of verbs, source program, working hours etc.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}source.server_ip${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - server ip.${YELLOW} Specify as: source.server_ip=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}source.database_name${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - database name.${YELLOW} Specify as: source.database_name=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}source.db_user${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - db user name (optional).${YELLOW} Specify as: source.db_user=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}attributes_limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - The number of attributes to return for each SourceAttributeType - optional.${YELLOW} Specify as: attributes_limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for outliersEngineGetStatistics operation
#
##############################################################################
print_outliersEngineGetStatistics_help() {
    echo ""
    echo -e "${BOLD}${WHITE}outliersEngineGetStatistics - Summary: Get statistics
Description: Return statistics regarding number of outliers, clusters and un/completed periods.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for outliersEngineGetWorkingHoursPeriods operation
#
##############################################################################
print_outliersEngineGetWorkingHoursPeriods_help() {
    echo ""
    echo -e "${BOLD}${WHITE}outliersEngineGetWorkingHoursPeriods - Summary: Get working hours periods
Description: Get a list of the working hours periods.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for outliersEngineRunSimulator operation
#
##############################################################################
print_outliersEngineRunSimulator_help() {
    echo ""
    echo -e "${BOLD}${WHITE}outliersEngineRunSimulator - Summary: Run simulator
Description: Run outlier simulator.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for outliersEngineUpdateWorkingHoursPeriods operation
#
##############################################################################
print_outliersEngineUpdateWorkingHoursPeriods_help() {
    echo ""
    echo -e "${BOLD}${WHITE}outliersEngineUpdateWorkingHoursPeriods - Summary: Update working hours periods
Description: Update the working hours periods values.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for outliersEngineUploadAndAnalyzePeriod operation
#
##############################################################################
print_outliersEngineUploadAndAnalyzePeriod_help() {
    echo ""
    echo -e "${BOLD}${WHITE}outliersEngineUploadAndAnalyzePeriod - Summary: Upload and analyze period
Description: Run outliers detection on ready periods.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for outliersEngineUserClustering operation
#
##############################################################################
print_outliersEngineUserClustering_help() {
    echo ""
    echo -e "${BOLD}${WHITE}outliersEngineUserClustering - Summary: User clustering
Description: Run user-clustering on current sources.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for pipelineconfigServiceDeleteTenantResources operation
#
##############################################################################
print_pipelineconfigServiceDeleteTenantResources_help() {
    echo ""
    echo -e "${BOLD}${WHITE}pipelineconfigServiceDeleteTenantResources - Summary: Delete a tenant resource
Description: Delete tenant specific resources such as db2, mongo, postgres and s3.${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}tenant_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - unique tenant ID ${YELLOW}Specify as: tenant_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}resource${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - resource specifies the specific resource to delete ${YELLOW}Specify as: resource=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for policyBuilderClonePolicy operation
#
##############################################################################
print_policyBuilderClonePolicy_help() {
    echo ""
    echo -e "${BOLD}${WHITE}policyBuilderClonePolicy - Summary: Clone policy
Description: Clone a policy.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}policy_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Policy id that needs to be cloned. ${YELLOW}Specify as: policy_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for policyBuilderCreatePolicy operation
#
##############################################################################
print_policyBuilderCreatePolicy_help() {
    echo ""
    echo -e "${BOLD}${WHITE}policyBuilderCreatePolicy - Summary: Create policy
Description: Create Policy returns response code and message.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for policyBuilderDeleteGdpSyncEntry operation
#
##############################################################################
print_policyBuilderDeleteGdpSyncEntry_help() {
    echo ""
    echo -e "${BOLD}${WHITE}policyBuilderDeleteGdpSyncEntry - Summary: Delete GDP policy sync entry
Description: Deletes GDP policy from sync collection${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}sync_ids${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Policy sync entry id to delete from sync.${YELLOW} Specify as: sync_ids=value1 sync_ids=value2 sync_ids=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for policyBuilderDeletePolicies operation
#
##############################################################################
print_policyBuilderDeletePolicies_help() {
    echo ""
    echo -e "${BOLD}${WHITE}policyBuilderDeletePolicies - Summary: Delete policies
Description: Delete Policy returns response code and message.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}policy_ids${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Policy ids.${YELLOW} Specify as: policy_ids=value1 policy_ids=value2 policy_ids=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for policyBuilderGetGdpPolicyMetaData operation
#
##############################################################################
print_policyBuilderGetGdpPolicyMetaData_help() {
    echo ""
    echo -e "${BOLD}${WHITE}policyBuilderGetGdpPolicyMetaData - Summary: Get GDP policy summary information
Description: Get GDP's CM's policy summary from mogodb${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for policyBuilderGetPolicies operation
#
##############################################################################
print_policyBuilderGetPolicies_help() {
    echo ""
    echo -e "${BOLD}${WHITE}policyBuilderGetPolicies - Summary: Get policies
Description: Return a list of policies to the caller.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for policyBuilderGetPolicyDetails operation
#
##############################################################################
print_policyBuilderGetPolicyDetails_help() {
    echo ""
    echo -e "${BOLD}${WHITE}policyBuilderGetPolicyDetails - Summary: Get policy details
Description: Return a list of rules inside the policy.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}policy_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Policy id. ${YELLOW}Specify as: policy_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for policyBuilderGetPolicyNamesFromRuleIDs operation
#
##############################################################################
print_policyBuilderGetPolicyNamesFromRuleIDs_help() {
    echo ""
    echo -e "${BOLD}${WHITE}policyBuilderGetPolicyNamesFromRuleIDs - Summary: GetPolicy names from rule IDs
Description: Return a map where the key is the rule ID and value is the policy name that has the rule ID.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for policyBuilderGetPolicySyncList operation
#
##############################################################################
print_policyBuilderGetPolicySyncList_help() {
    echo ""
    echo -e "${BOLD}${WHITE}policyBuilderGetPolicySyncList - Summary: Get list of synced polices
Description: Returns the list and status of sync entries${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for policyBuilderGetReceivers operation
#
##############################################################################
print_policyBuilderGetReceivers_help() {
    echo ""
    echo -e "${BOLD}${WHITE}policyBuilderGetReceivers - Summary: Get receivers
Description: Get all the receivers associated with actions.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}action_id${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Action id.${YELLOW} Specify as: action_id=value1 action_id=value2 action_id=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}validate_cache${OFF} ${BLUE}[boolean]${OFF} ${CYAN}(default: null)${OFF} - Flag that indicates if cache needs to be validated.${YELLOW} Specify as: validate_cache=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for policyBuilderGetRuleMetadata operation
#
##############################################################################
print_policyBuilderGetRuleMetadata_help() {
    echo ""
    echo -e "${BOLD}${WHITE}policyBuilderGetRuleMetadata - Summary: Get rule metadata
Description: Return a list of rule parameters and actions to the caller.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}rule_type${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: ACCESS)${OFF} - Rule type integer to indicate rule type.${YELLOW} Specify as: rule_type=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for policyBuilderInsertGdpPolicy operation
#
##############################################################################
print_policyBuilderInsertGdpPolicy_help() {
    echo ""
    echo -e "${BOLD}${WHITE}policyBuilderInsertGdpPolicy - Summary: Insert GDP policy sync entry
Description: Inserts GDP policy's name into sync collection${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for policyBuilderInsertGdpPolicyMetaData operation
#
##############################################################################
print_policyBuilderInsertGdpPolicyMetaData_help() {
    echo ""
    echo -e "${BOLD}${WHITE}policyBuilderInsertGdpPolicyMetaData - Summary: Insert gdp policy summaries
Description: Inserts GDP's CM's policy summary information into mogodb. (This API is called from GDP only)${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}central_manager_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - ID of central manager. ${YELLOW}Specify as: central_manager_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for policyBuilderInstallPolicies operation
#
##############################################################################
print_policyBuilderInstallPolicies_help() {
    echo ""
    echo -e "${BOLD}${WHITE}policyBuilderInstallPolicies - Summary: Install policies
Description: Activate Policies request performs activations.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for policyBuilderIntegrationCheck operation
#
##############################################################################
print_policyBuilderIntegrationCheck_help() {
    echo ""
    echo -e "${BOLD}${WHITE}policyBuilderIntegrationCheck - Summary: Integration check
Description: Check if integration id is being used in policies.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}integration_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Integration Id to check if it is being used in policies. ${YELLOW}Specify as: integration_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}template_id${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Template Id to check if it is being used in policies.${YELLOW} Specify as: template_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for policyBuilderPoliciesGroups operation
#
##############################################################################
print_policyBuilderPoliciesGroups_help() {
    echo ""
    echo -e "${BOLD}${WHITE}policyBuilderPoliciesGroups - Summary: Policies groups
Description: Get policy groups.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}group_ids${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Group ids to check if they are being used in policies.${YELLOW} Specify as: group_ids=value1 group_ids=value2 group_ids=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for policyBuilderRuleValidation operation
#
##############################################################################
print_policyBuilderRuleValidation_help() {
    echo ""
    echo -e "${BOLD}${WHITE}policyBuilderRuleValidation - Summary: Rule validation
Description: Validate a rule parameters and actions.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for policyBuilderStorePoliciesGdp operation
#
##############################################################################
print_policyBuilderStorePoliciesGdp_help() {
    echo ""
    echo -e "${BOLD}${WHITE}policyBuilderStorePoliciesGdp - Summary: Store policies Gdp
Description: Store policies.  (This API is called from GDP only)${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}central_manager_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - ID of central manager. ${YELLOW}Specify as: central_manager_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for qSDataManagerGetMasterData operation
#
##############################################################################
print_qSDataManagerGetMasterData_help() {
    echo ""
    echo -e "${BOLD}${WHITE}qSDataManagerGetMasterData - Summary: master data for all entities
Description: Retrieves All Dimension and Fact tables data.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for qSDataManagerRegisterScan operation
#
##############################################################################
print_qSDataManagerRegisterScan_help() {
    echo ""
    echo -e "${BOLD}${WHITE}qSDataManagerRegisterScan - Summary: Insert ScanDetails
Description: Register new data into scan dimension table.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for qSDataManagerRetrieveScan operation
#
##############################################################################
print_qSDataManagerRetrieveScan_help() {
    echo ""
    echo -e "${BOLD}${WHITE}qSDataManagerRetrieveScan - Summary: Fetch ScanDetails
Description: Fetch details from scan dimension table.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}scan_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: scan_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for qSPluginManagerInvokeAppProv operation
#
##############################################################################
print_qSPluginManagerInvokeAppProv_help() {
    echo ""
    echo -e "${BOLD}${WHITE}qSPluginManagerInvokeAppProv - Summary: Invoke only application provisioning data plugin
Description:Parses app input file and triggers dataload${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}plugin_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Unique identifier for the plugin ${YELLOW}Specify as: plugin_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for qSPluginManagerInvokeExplorerV1 operation
#
##############################################################################
print_qSPluginManagerInvokeExplorerV1_help() {
    echo ""
    echo -e "${BOLD}${WHITE}qSPluginManagerInvokeExplorerV1 - Summary: Invoke only explorer inventory data plugin
Description:Parses explorer input file and triggers dataload${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}plugin_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Unique identifier for the plugin ${YELLOW}Specify as: plugin_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for qSPluginManagerInvokeExplorerV2 operation
#
##############################################################################
print_qSPluginManagerInvokeExplorerV2_help() {
    echo ""
    echo -e "${BOLD}${WHITE}qSPluginManagerInvokeExplorerV2 - Summary: Invoke only explorer analytics data plugin
Description:Parses explorer input file and triggers dataload${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}plugin_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Unique identifier for the plugin ${YELLOW}Specify as: plugin_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for qSPluginManagerInvokePlugin operation
#
##############################################################################
print_qSPluginManagerInvokePlugin_help() {
    echo ""
    echo -e "${BOLD}${WHITE}qSPluginManagerInvokePlugin - Summary: Invoke consolidated or only network data plugin
Description:Parses input files and triggers dataload${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}plugin_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Unique identifier for the plugin ${YELLOW}Specify as: plugin_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for qSPluginManagerInvokePolicy operation
#
##############################################################################
print_qSPluginManagerInvokePolicy_help() {
    echo ""
    echo -e "${BOLD}${WHITE}qSPluginManagerInvokePolicy - Summary: Invoke only policy data plugin
Description:Parses policy input file and triggers dataload${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}plugin_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Unique identifier for the plugin ${YELLOW}Specify as: plugin_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for qSPolicyManagerBatchStatusUpdate operation
#
##############################################################################
print_qSPolicyManagerBatchStatusUpdate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}qSPolicyManagerBatchStatusUpdate - BatchStatusUpdate - trigger the batch to update the status of the Ticket .${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for qSPolicyManagerCreateTicket operation
#
##############################################################################
print_qSPolicyManagerCreateTicket_help() {
    echo ""
    echo -e "${BOLD}${WHITE}qSPolicyManagerCreateTicket - CreateTicket - Create a new Incident .${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for qSPolicyManagerFetchFilesfromBuckets operation
#
##############################################################################
print_qSPolicyManagerFetchFilesfromBuckets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}qSPolicyManagerFetchFilesfromBuckets - FetchFilesfromBuckets - fetch the file(s) from bucket of the object storage${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for qSPolicyManagerProcessPolicyDimentionRecords operation
#
##############################################################################
print_qSPolicyManagerProcessPolicyDimentionRecords_help() {
    echo ""
    echo -e "${BOLD}${WHITE}qSPolicyManagerProcessPolicyDimentionRecords - ProcessPolicyDimentionRecords - fetch the records from Policy Dimention and update Policy Fact table${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for qSPolicyManagerUpdateTicketStatus operation
#
##############################################################################
print_qSPolicyManagerUpdateTicketStatus_help() {
    echo ""
    echo -e "${BOLD}${WHITE}qSPolicyManagerUpdateTicketStatus - UpdateTicketStatus - Update the ticket status based on the IntegrationId and TicketId .${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsRunnerGetActiveQueries operation
#
##############################################################################
print_reportsRunnerGetActiveQueries_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsRunnerGetActiveQueries - Summary: Get running queries
Description: Get queries that are running more than certain time${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsRunnerGetAuditDataCount operation
#
##############################################################################
print_reportsRunnerGetAuditDataCount_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsRunnerGetAuditDataCount - Summary: Get audit data count
Description: Get audit data.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}report_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Optional: the ID of the Report we wish to run (e.g. 000000000000000000000905). ${YELLOW}Specify as: report_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsRunnerGetChartData operation
#
##############################################################################
print_reportsRunnerGetChartData_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsRunnerGetChartData - Summary: Get chart data
Description: Get Chart data by chart ID or by specifying report definition and chart settings.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsRunnerGetChartDatav2 operation
#
##############################################################################
print_reportsRunnerGetChartDatav2_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsRunnerGetChartDatav2 - ${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsRunnerGetReportColumnFacet operation
#
##############################################################################
print_reportsRunnerGetReportColumnFacet_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsRunnerGetReportColumnFacet - Summary: Get report column facet
Description: Get counts that is group by values for the selected column.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsRunnerGetReportDataCount operation
#
##############################################################################
print_reportsRunnerGetReportDataCount_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsRunnerGetReportDataCount - Summary: Get report data count
Description: Get report data.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsRunnerRunAuditReport operation
#
##############################################################################
print_reportsRunnerRunAuditReport_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsRunnerRunAuditReport - Summary: Run audit report
Description: Run task report by SQL based ob report ID and filter definition.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}report_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - The ID of the Report we wish to run (e.g. 000000000000000000000905). ${YELLOW}Specify as: report_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.(streaming responses)${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsRunnerRunReport operation
#
##############################################################################
print_reportsRunnerRunReport_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsRunnerRunReport - Summary: Run report
Description: Run report by report ID or by specifying report definition.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.(streaming responses)${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsRunnerStopQuery operation
#
##############################################################################
print_reportsRunnerStopQuery_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsRunnerStopQuery - Summary: Stop query
Description: Stop a query based on the id${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceCreateCategory operation
#
##############################################################################
print_reportsServiceCreateCategory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceCreateCategory - Summary: Create a category
Description: Create a report category${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceCreateChart operation
#
##############################################################################
print_reportsServiceCreateChart_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceCreateChart - Summary: Create chart
Description: Create custom chart based on provided properties.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceCreateChartTemplatev2 operation
#
##############################################################################
print_reportsServiceCreateChartTemplatev2_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceCreateChartTemplatev2 - Summary: Create chart template v2
Description: Create custom VEGA chart template.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceCreateChartv2 operation
#
##############################################################################
print_reportsServiceCreateChartv2_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceCreateChartv2 - Summary: Create chart v2
Description: Create custom VEGA chart based on provided properties.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceCreateFieldsByCategory operation
#
##############################################################################
print_reportsServiceCreateFieldsByCategory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceCreateFieldsByCategory - Summary - Create fields by category
Description: Cteate category fields based on provided properties.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceCreateJoin operation
#
##############################################################################
print_reportsServiceCreateJoin_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceCreateJoin - Summary: Create a join
Description: Create a custom report join${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceCreateReport operation
#
##############################################################################
print_reportsServiceCreateReport_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceCreateReport - Summary: Create report
Description: Create custom report based on provided properties.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceCreateVariant operation
#
##############################################################################
print_reportsServiceCreateVariant_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceCreateVariant - Summary: Create a variant
Description: Create a variant for reports${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceDeleteCategory operation
#
##############################################################################
print_reportsServiceDeleteCategory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceDeleteCategory - Summary: Delete a category
Description: Delete a report category${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}category_id${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - category id.${YELLOW} Specify as: category_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}table_name${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - table name.${YELLOW} Specify as: table_name=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceDeleteChart operation
#
##############################################################################
print_reportsServiceDeleteChart_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceDeleteChart - Summary: Delete chart
Description: Delete a custom chart.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}chart_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - The id of the chart to be deleted. ${YELLOW}Specify as: chart_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceDeleteChartTemplatev2 operation
#
##############################################################################
print_reportsServiceDeleteChartTemplatev2_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceDeleteChartTemplatev2 - Summary: Delete chart template v2
Description: Delete a custom VEGA chart template.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}template_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Unique template ID. ${YELLOW}Specify as: template_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceDeleteChartv2 operation
#
##############################################################################
print_reportsServiceDeleteChartv2_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceDeleteChartv2 - Summary: Delete chart v2
Description: Delete a custom VEGA chart.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}chart_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - The ID of the chart for deletion. ${YELLOW}Specify as: chart_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceDeleteFieldsByCategory operation
#
##############################################################################
print_reportsServiceDeleteFieldsByCategory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceDeleteFieldsByCategory - Summary - Delete fields by category
Description: Delete category fields based on provided properties.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}header_ids${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Header ids.${YELLOW} Specify as: header_ids=value1 header_ids=value2 header_ids=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}table_name${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - table name.${YELLOW} Specify as: table_name=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceDeleteJoin operation
#
##############################################################################
print_reportsServiceDeleteJoin_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceDeleteJoin - Summary: Delete a join
Description: Delete a custom join${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}join_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - The id of the join to be deleted. ${YELLOW}Specify as: join_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceDeleteReport operation
#
##############################################################################
print_reportsServiceDeleteReport_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceDeleteReport - Summary: Delete report
Description: Delete a custom report.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}report_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - The id of the Report to be deleted. ${YELLOW}Specify as: report_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceDeleteVariant operation
#
##############################################################################
print_reportsServiceDeleteVariant_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceDeleteVariant - Summary: Delete a variant
Description: Delete a variant${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}variant_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - The id of the variant to delete ${YELLOW}Specify as: variant_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceGetCategories operation
#
##############################################################################
print_reportsServiceGetCategories_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceGetCategories - Summary:  Get all available report categories.
Description: Get all category related fields or all possible fields.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}report_id${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Report ID.${YELLOW} Specify as: report_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceGetChartSettings operation
#
##############################################################################
print_reportsServiceGetChartSettings_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceGetChartSettings - Summary: Get chart settings
Description: Get a custom chart based on provided report id.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}chart_id${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Unique Chart ID.${YELLOW} Specify as: chart_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}report_id${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Unique Report ID.${YELLOW} Specify as: report_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceGetChartSettingsv2 operation
#
##############################################################################
print_reportsServiceGetChartSettingsv2_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceGetChartSettingsv2 - Summary: Get chart settings v2
Description: Get a custom VEGA chart based on provided report id.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}chart_id${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Unique Chart ID.${YELLOW} Specify as: chart_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}report_id${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Unique Report ID.${YELLOW} Specify as: report_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceGetChartTemplatesv2 operation
#
##############################################################################
print_reportsServiceGetChartTemplatesv2_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceGetChartTemplatesv2 - Summary: Get chart template v2
Description: Get all custom VEGA chart templates.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceGetFieldsByCategories operation
#
##############################################################################
print_reportsServiceGetFieldsByCategories_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceGetFieldsByCategories - Summary: Get fields by categories
Description: Get all category related fields or all possible fields based on a list of categories.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}category_ids${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Category IDs.${YELLOW} Specify as: category_ids=value1 category_ids=value2 category_ids=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceGetFieldsByCategory operation
#
##############################################################################
print_reportsServiceGetFieldsByCategory_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceGetFieldsByCategory - Summary: Get fields by category
Description: Get all category related fields or all possible fields.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}category_id${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Category ID.${YELLOW} Specify as: category_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}report_id${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Report ID.${YELLOW} Specify as: report_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}table_name${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - optional table name parameter.${YELLOW} Specify as: table_name=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceGetJoins operation
#
##############################################################################
print_reportsServiceGetJoins_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceGetJoins - Summary: Get all joins
Description: Get all custom joins.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}category_id${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Category ID (Optional).${YELLOW} Specify as: category_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceGetQueryByReportDefinition operation
#
##############################################################################
print_reportsServiceGetQueryByReportDefinition_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceGetQueryByReportDefinition - Summary: Get query by report definition
Description: Get query by report definition.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceGetQueryByReportID operation
#
##############################################################################
print_reportsServiceGetQueryByReportID_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceGetQueryByReportID - Summary: Get query by report ID
Description: Get query by report ID.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceGetReportDefinition operation
#
##############################################################################
print_reportsServiceGetReportDefinition_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceGetReportDefinition - Summary: Get report definition
Description: Get report definition.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}report_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Unique Report ID. ${YELLOW}Specify as: report_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceGetReportGroups operation
#
##############################################################################
print_reportsServiceGetReportGroups_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceGetReportGroups - Summary: Get report groups
Description: Get reports used by the provided groups.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}groups${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - List of group IDs that should be checked for usage in each report.${YELLOW} Specify as: groups=value1 groups=value2 groups=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceGetReportSynopsis operation
#
##############################################################################
print_reportsServiceGetReportSynopsis_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceGetReportSynopsis - Summary: Get report synopsis
Description: Return BriefReport.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}report_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Unique Report ID. ${YELLOW}Specify as: report_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceGetReportTimestampHeader operation
#
##############################################################################
print_reportsServiceGetReportTimestampHeader_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceGetReportTimestampHeader - Summary: Get report timestamp header
Description: Get where to take a report timestamp given an entity.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}category_id${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Category ID parameter.${YELLOW} Specify as: category_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}table_names${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - List of all header tables.${YELLOW} Specify as: table_names=value1 table_names=value2 table_names=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceGetReports operation
#
##############################################################################
print_reportsServiceGetReports_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceGetReports - Summary: Get reports
Description: Get reports list.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}category_id${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Optional Category ID parameter.${YELLOW} Specify as: category_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}table_name${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Optional table name parameter.${YELLOW} Specify as: table_name=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceGetReportsForJoin operation
#
##############################################################################
print_reportsServiceGetReportsForJoin_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceGetReportsForJoin - Summary: Get the reports that use a join
Description: Get the reports that use a join and the headers that are imported by the reports using the join${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}join_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} -  ${YELLOW}Specify as: join_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceGetReportsTags operation
#
##############################################################################
print_reportsServiceGetReportsTags_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceGetReportsTags - Summary: Get reports tags
Description: Get all report distinct tags.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceGetVariant operation
#
##############################################################################
print_reportsServiceGetVariant_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceGetVariant - Summary: Get a variant
Description: Get a given variant${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}variant_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - The variant id ${YELLOW}Specify as: variant_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceGetVariants operation
#
##############################################################################
print_reportsServiceGetVariants_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceGetVariants - Summary: Get all variants
Description: Get all variants in reports${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServicePartialChartUpdate operation
#
##############################################################################
print_reportsServicePartialChartUpdate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServicePartialChartUpdate - Summary: Partial chart update
Description: Update a custom chart with partial information.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}chart_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Unique chart ID. ${YELLOW}Specify as: chart_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServicePartialReportUpdate operation
#
##############################################################################
print_reportsServicePartialReportUpdate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServicePartialReportUpdate - Summary: Partial report update
Description: Update a custom report with partial information.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}report_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Unique Report ID. ${YELLOW}Specify as: report_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceRunVariantOperation operation
#
##############################################################################
print_reportsServiceRunVariantOperation_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceRunVariantOperation - Summary: Run a variant
Description: Run the operations in a variant${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceTranspose operation
#
##############################################################################
print_reportsServiceTranspose_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceTranspose - Summary: Transpose
Description: Return the corresponding full sql data.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceUpdateChart operation
#
##############################################################################
print_reportsServiceUpdateChart_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceUpdateChart - Summary: Update chart
Description: Update a custom chart.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}chart_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Unique chart ID. ${YELLOW}Specify as: chart_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceUpdateChartv2 operation
#
##############################################################################
print_reportsServiceUpdateChartv2_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceUpdateChartv2 - Summary: Update chart v2
Description: Update a custom VEGA chart.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}chart_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Unique chart ID. ${YELLOW}Specify as: chart_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceUpdateJoin operation
#
##############################################################################
print_reportsServiceUpdateJoin_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceUpdateJoin - Summary: Update a join
Description: Update a custom join${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}join_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Unique join ID. ${YELLOW}Specify as: join_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceUpdateReport operation
#
##############################################################################
print_reportsServiceUpdateReport_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceUpdateReport - Summary: Update report
Description: Update a custom report.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}report_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Unique Report ID. ${YELLOW}Specify as: report_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for reportsServiceUpdateVariantOverride operation
#
##############################################################################
print_reportsServiceUpdateVariantOverride_help() {
    echo ""
    echo -e "${BOLD}${WHITE}reportsServiceUpdateVariantOverride - Summary: Update a variant
Description: Update a variant with a custom override${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}variant_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - The variant id ${YELLOW}Specify as: variant_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for riskAnalyticsControllerEnableDisableRiskEventFeedback operation
#
##############################################################################
print_riskAnalyticsControllerEnableDisableRiskEventFeedback_help() {
    echo ""
    echo -e "${BOLD}${WHITE}riskAnalyticsControllerEnableDisableRiskEventFeedback - Summary: Enable disable risk rvent feedback
Description: Enable or disable the collect feedback process.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for riskAnalyticsControllerEnableDisableRiskEventProcess operation
#
##############################################################################
print_riskAnalyticsControllerEnableDisableRiskEventProcess_help() {
    echo ""
    echo -e "${BOLD}${WHITE}riskAnalyticsControllerEnableDisableRiskEventProcess - Summary: Enable disable risk event process
Description: Enable or disable the risk event process.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for riskAnalyticsControllerGetAllClassificationsList operation
#
##############################################################################
print_riskAnalyticsControllerGetAllClassificationsList_help() {
    echo ""
    echo -e "${BOLD}${WHITE}riskAnalyticsControllerGetAllClassificationsList - Summary: Get all classifications
Description: Get all possible classifications for a risk event.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for riskAnalyticsControllerGetRiskEventClassificationsList operation
#
##############################################################################
print_riskAnalyticsControllerGetRiskEventClassificationsList_help() {
    echo ""
    echo -e "${BOLD}${WHITE}riskAnalyticsControllerGetRiskEventClassificationsList - Summary: Get risk event classifications list
Description: retrieves the ClassificationMatchDetails for a given risk id – classification that did not matched will be with class_value 0.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}risk_id${OFF} ${BLUE}[integer]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Risk id ${YELLOW}Specify as: risk_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for riskAnalyticsControllerGetRiskEventDataForSummarization operation
#
##############################################################################
print_riskAnalyticsControllerGetRiskEventDataForSummarization_help() {
    echo ""
    echo -e "${BOLD}${WHITE}riskAnalyticsControllerGetRiskEventDataForSummarization - Summary: Get risk event data needed for summarization task
Description: Retrieve the full information about this risk event including all findings data${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}risk_id${OFF} ${BLUE}[integer]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Risk ID ${YELLOW}Specify as: risk_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}include_indicators${OFF} ${BLUE}[boolean]${OFF} ${CYAN}(default: null)${OFF} - Indicates whether to include indicators in the response or not.${YELLOW} Specify as: include_indicators=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}num_findings_limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - Max number of hours to get for the risk.${YELLOW} Specify as: num_findings_limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for riskAnalyticsControllerGetRiskEventDetails operation
#
##############################################################################
print_riskAnalyticsControllerGetRiskEventDetails_help() {
    echo ""
    echo -e "${BOLD}${WHITE}riskAnalyticsControllerGetRiskEventDetails - Summary: Get risk event details
Description: Return the details of a risk event, including risk general info and a list of observations.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}risk_id${OFF} ${BLUE}[integer]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Risk id. ${YELLOW}Specify as: risk_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for riskAnalyticsControllerGetRiskEventProcessStatus operation
#
##############################################################################
print_riskAnalyticsControllerGetRiskEventProcessStatus_help() {
    echo ""
    echo -e "${BOLD}${WHITE}riskAnalyticsControllerGetRiskEventProcessStatus - Summary: Get risk event process status
Description: Get the risk event process status.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for riskAnalyticsControllerGetRiskEventRow operation
#
##############################################################################
print_riskAnalyticsControllerGetRiskEventRow_help() {
    echo ""
    echo -e "${BOLD}${WHITE}riskAnalyticsControllerGetRiskEventRow - Summary: Get risk event row
Description: Return a list of risk events.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}status${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: UNDEFINED_STATUS)${OFF} - Status to retrieve only the status events, blank to retrieve all.${YELLOW} Specify as: status=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}date_from${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - The API retrieves risk events that were open in a time range. date_from defines the start of this time range. format YYYY-MM-DDTHH:mm:ssZ.${YELLOW} Specify as: date_from=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}date_to${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - The API retrieves risk events that were open in a time range. date_to defines the end of this time range. format YYYY-MM-DDTHH:mm:ssZ.${YELLOW} Specify as: date_to=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}pivot.type${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: UNDEFINED_PIVOT_TYPE)${OFF} - Pivot type - enum.${YELLOW} Specify as: pivot.type=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}pivot.id${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Pivot id -  all pivot fields separated by semicolon.${YELLOW} Specify as: pivot.id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}pivot.db_user${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Optional db_user - if pivot is db user.${YELLOW} Specify as: pivot.db_user=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}pivot.database${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Optional database - if pivot is db user / database.${YELLOW} Specify as: pivot.database=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}pivot.server_ip${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Optional server_ip - if pivot is db user / database.${YELLOW} Specify as: pivot.server_ip=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}pivot.os_user${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Optional os_user - if pivot is os user.${YELLOW} Specify as: pivot.os_user=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}pivot.database_source_field${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: UNDEFINED)${OFF} - Optional database_source_field (values database name/service name depends on the server type) - if pivot is db user / database.${YELLOW} Specify as: pivot.database_source_field=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for riskAnalyticsControllerGetRiskEventVulnerabilityAssessmentDetails operation
#
##############################################################################
print_riskAnalyticsControllerGetRiskEventVulnerabilityAssessmentDetails_help() {
    echo ""
    echo -e "${BOLD}${WHITE}riskAnalyticsControllerGetRiskEventVulnerabilityAssessmentDetails - Summary: Get vulnerability assessment details for a given risk event
Description: Retrieve the information about failed VA tests for assets database and db user${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}risk_id${OFF} ${BLUE}[integer]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Risk ID ${YELLOW}Specify as: risk_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for riskAnalyticsControllerGetRiskFeedback operation
#
##############################################################################
print_riskAnalyticsControllerGetRiskFeedback_help() {
    echo ""
    echo -e "${BOLD}${WHITE}riskAnalyticsControllerGetRiskFeedback - Summary: Get risk feedback
Description: Get all feedbacks that are in status NEW/WIP and change them to status WIP.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for riskAnalyticsControllerGetRiskObservationDetails operation
#
##############################################################################
print_riskAnalyticsControllerGetRiskObservationDetails_help() {
    echo ""
    echo -e "${BOLD}${WHITE}riskAnalyticsControllerGetRiskObservationDetails - Summary: Get risk observation details
Description: Return details of a single risk observation.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}lead_feature_id${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - Lead feature id.${YELLOW} Specify as: lead_feature_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}observation_type${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: UNDEFINED_OBSERVATION_TYPE)${OFF} - Observation type.${YELLOW} Specify as: observation_type=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for riskAnalyticsControllerGetUserUISettings operation
#
##############################################################################
print_riskAnalyticsControllerGetUserUISettings_help() {
    echo ""
    echo -e "${BOLD}${WHITE}riskAnalyticsControllerGetUserUISettings - Summary: Get user UI settings
Description: Get the user settings by user id to display the risk in the UI.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for riskAnalyticsControllerRiskEventTuning operation
#
##############################################################################
print_riskAnalyticsControllerRiskEventTuning_help() {
    echo ""
    echo -e "${BOLD}${WHITE}riskAnalyticsControllerRiskEventTuning - Summary: Risk event tuning
Description: Perform tuning risk event actions.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for riskAnalyticsControllerSetRiskEventStatus operation
#
##############################################################################
print_riskAnalyticsControllerSetRiskEventStatus_help() {
    echo ""
    echo -e "${BOLD}${WHITE}riskAnalyticsControllerSetRiskEventStatus - Summary: Set risk event status
Description: Update the risk status and justification.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for riskAnalyticsControllerSetUserUISettings operation
#
##############################################################################
print_riskAnalyticsControllerSetUserUISettings_help() {
    echo ""
    echo -e "${BOLD}${WHITE}riskAnalyticsControllerSetUserUISettings - Summary: Set user UI settings
Description: Set the user settings by user id in the mongo collection. WARNING: this API should not be used manually or by a system external to Guardium. Using this API to change a user settings may prevent the user from using the Risk Event function within Guardium.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for riskAnalyticsControllerUpdateRiskFeedback operation
#
##############################################################################
print_riskAnalyticsControllerUpdateRiskFeedback_help() {
    echo ""
    echo -e "${BOLD}${WHITE}riskAnalyticsControllerUpdateRiskFeedback - Summary: Update risk feedback
Description: Provide feedback for one or more risk events${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for riskAnalyticsDataProcessorGetRiskContext operation
#
##############################################################################
print_riskAnalyticsDataProcessorGetRiskContext_help() {
    echo ""
    echo -e "${BOLD}${WHITE}riskAnalyticsDataProcessorGetRiskContext - Summary: Get Risk Event Context
Description: Retrieve the context of the given risk ID. This context will be used for LLM interactions.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}risk_id${OFF} ${BLUE}[integer]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Risk id. ${YELLOW}Specify as: risk_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}timezone${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Timezone in IANA format.${YELLOW} Specify as: timezone=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for riskAnalyticsDataProcessorGetRiskPredefinedQuestions operation
#
##############################################################################
print_riskAnalyticsDataProcessorGetRiskPredefinedQuestions_help() {
    echo ""
    echo -e "${BOLD}${WHITE}riskAnalyticsDataProcessorGetRiskPredefinedQuestions - Summary: Get Risk Event Predefined Questions
Description: Retrieve the Predefined Questions of the given risk ID. This Predefined Questions will be used quick actions recommendations.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}risk_id${OFF} ${BLUE}[integer]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Risk id. ${YELLOW}Specify as: risk_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for riskAnalyticsEngineGetLeadGeneratorConfig operation
#
##############################################################################
print_riskAnalyticsEngineGetLeadGeneratorConfig_help() {
    echo ""
    echo -e "${BOLD}${WHITE}riskAnalyticsEngineGetLeadGeneratorConfig - Summary: Get lead generator config
Description: Retrieve the configuration of a lead generator.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for riskAnalyticsEngineUpdateLeadGeneratorConfig operation
#
##############################################################################
print_riskAnalyticsEngineUpdateLeadGeneratorConfig_help() {
    echo ""
    echo -e "${BOLD}${WHITE}riskAnalyticsEngineUpdateLeadGeneratorConfig - Summary: Update lead generator config
Description: Update the configuration of a leads generator.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for riskAnalyticsMlClassificationResetModelToDefaults operation
#
##############################################################################
print_riskAnalyticsMlClassificationResetModelToDefaults_help() {
    echo ""
    echo -e "${BOLD}${WHITE}riskAnalyticsMlClassificationResetModelToDefaults - Summary: Reset the model to its default weights.
Description: Load the initial model instead of the existing model - this action is irreversible.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for schedulerServiceCreateScheduledJob operation
#
##############################################################################
print_schedulerServiceCreateScheduledJob_help() {
    echo ""
    echo -e "${BOLD}${WHITE}schedulerServiceCreateScheduledJob - Summary: Create scheduled job
Description: Create a new scheduled job with tasks.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for schedulerServiceDeleteScheduledJob operation
#
##############################################################################
print_schedulerServiceDeleteScheduledJob_help() {
    echo ""
    echo -e "${BOLD}${WHITE}schedulerServiceDeleteScheduledJob - Summary: Delete scheduled job
Description: Delete a single scheduled job.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}schedule_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Unique ID, required for delete. ${YELLOW}Specify as: schedule_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for schedulerServiceGetDependencies operation
#
##############################################################################
print_schedulerServiceGetDependencies_help() {
    echo ""
    echo -e "${BOLD}${WHITE}schedulerServiceGetDependencies - Summary: Get dependencies
Description: returns IDs of distribution rules, response templates, or processing rules that are in use${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}config_type${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - specify the configuration entry type: Distribution.Rule, workflow_investigation_link, workflow_response_template, etc.${YELLOW} Specify as: config_type=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for schedulerServiceGetDistributionRules operation
#
##############################################################################
print_schedulerServiceGetDistributionRules_help() {
    echo ""
    echo -e "${BOLD}${WHITE}schedulerServiceGetDistributionRules - Summary: Get distribution rules
Description: Return a list of distribution rule IDs that are used by the scheduler
Distribution rules can't be edited if it is used by a scheduled job.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for schedulerServiceGetScheduledJobDetails operation
#
##############################################################################
print_schedulerServiceGetScheduledJobDetails_help() {
    echo ""
    echo -e "${BOLD}${WHITE}schedulerServiceGetScheduledJobDetails - Summary: Get scheduled job
Description: Return a single ScheduledJob in detail.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}schedule_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Used to return a single scheduledjob. ${YELLOW}Specify as: schedule_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for schedulerServiceGetScheduledJobs operation
#
##############################################################################
print_schedulerServiceGetScheduledJobs_help() {
    echo ""
    echo -e "${BOLD}${WHITE}schedulerServiceGetScheduledJobs - Summary: Get scheduled jobs
Description: Return a list of scheduled jobs and the linked tasks.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}Offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - Optional: the amount to offset the rows by for pagination.${YELLOW} Specify as: Offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}Limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - Optional: the max amount of rows to return for pagination.${YELLOW} Specify as: Limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for schedulerServiceGetSchedulesByReport operation
#
##############################################################################
print_schedulerServiceGetSchedulesByReport_help() {
    echo ""
    echo -e "${BOLD}${WHITE}schedulerServiceGetSchedulesByReport - Summary: Get schedules by report
Description: Return an array of scheduled job IDs that run the report_id.  An empty array is returned if the report_id is not scheduled.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}report_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Report ID for the scheduled report. ${YELLOW}Specify as: report_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for schedulerServiceGetTags operation
#
##############################################################################
print_schedulerServiceGetTags_help() {
    echo ""
    echo -e "${BOLD}${WHITE}schedulerServiceGetTags - Summary: Get tags
Description: Return an array of all the unique tags from scheduled jobs.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for schedulerServiceSearchScheduledJobs operation
#
##############################################################################
print_schedulerServiceSearchScheduledJobs_help() {
    echo ""
    echo -e "${BOLD}${WHITE}schedulerServiceSearchScheduledJobs - Summary: Search scheduled jobs
Description: Return a filtered list of scheduled jobs and the linked tasks.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for schedulerServiceSearchScheduledTaskRuns operation
#
##############################################################################
print_schedulerServiceSearchScheduledTaskRuns_help() {
    echo ""
    echo -e "${BOLD}${WHITE}schedulerServiceSearchScheduledTaskRuns - Summary: Search scheduled task runs
Description: Return a list of scheduled task run, start date, end date, status${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for schedulerServiceUpdateScheduledJob operation
#
##############################################################################
print_schedulerServiceUpdateScheduledJob_help() {
    echo ""
    echo -e "${BOLD}${WHITE}schedulerServiceUpdateScheduledJob - Summary: Update scheduled job
Description: Update a single schedule job.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}schedule_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Unique ID, required for update. ${YELLOW}Specify as: schedule_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for snifAssistServiceTestRegex operation
#
##############################################################################
print_snifAssistServiceTestRegex_help() {
    echo ""
    echo -e "${BOLD}${WHITE}snifAssistServiceTestRegex - Summary: Test regex
Description: Match a text string with a regular expression using the same sniffer 
code used in production to match a regex.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for streamsServiceCheckAWSCredentials operation
#
##############################################################################
print_streamsServiceCheckAWSCredentials_help() {
    echo ""
    echo -e "${BOLD}${WHITE}streamsServiceCheckAWSCredentials - Summary: Check AWS credentials
Description: Service to verify AWS credentials.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for streamsServiceCheckAzureEventHub operation
#
##############################################################################
print_streamsServiceCheckAzureEventHub_help() {
    echo ""
    echo -e "${BOLD}${WHITE}streamsServiceCheckAzureEventHub - Summary: Check Azure event hub
Description: Service to check Azure event hub.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for streamsServiceCheckAzureStorageString operation
#
##############################################################################
print_streamsServiceCheckAzureStorageString_help() {
    echo ""
    echo -e "${BOLD}${WHITE}streamsServiceCheckAzureStorageString - Summary: Check Azure storage string
Description: Service to verify Azure storage connection.${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for streamsServiceGetAWSRegions operation
#
##############################################################################
print_streamsServiceGetAWSRegions_help() {
    echo ""
    echo -e "${BOLD}${WHITE}streamsServiceGetAWSRegions - Summary: Get AWS regions
Description: Service to get AWS regions.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for streamsServiceListAWSStreams operation
#
##############################################################################
print_streamsServiceListAWSStreams_help() {
    echo ""
    echo -e "${BOLD}${WHITE}streamsServiceListAWSStreams - Summary: List AWS streams
Description: Service to list AWS Kinesis streams.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for templatesServiceCreateIntegration operation
#
##############################################################################
print_templatesServiceCreateIntegration_help() {
    echo ""
    echo -e "${BOLD}${WHITE}templatesServiceCreateIntegration - Summary: Create integration
Description: Create a set of new templates for a new integration.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for templatesServiceCreateTemplate operation
#
##############################################################################
print_templatesServiceCreateTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}templatesServiceCreateTemplate - Summary: Create template
Description: Create a new template.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for templatesServiceDeleteIntegration operation
#
##############################################################################
print_templatesServiceDeleteIntegration_help() {
    echo ""
    echo -e "${BOLD}${WHITE}templatesServiceDeleteIntegration - Summary: Delete integration
Description: Delete all templates associated with an integration.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}integration_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Delete the templates associated with the specified integration ID. ${YELLOW}Specify as: integration_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for templatesServiceDeleteTemplate operation
#
##############################################################################
print_templatesServiceDeleteTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}templatesServiceDeleteTemplate - Summary: Delete template
Description: Delete a specific template.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}template_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Delete the template with the specified unique ID. ${YELLOW}Specify as: template_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for templatesServiceGetOriginDefaultContent operation
#
##############################################################################
print_templatesServiceGetOriginDefaultContent_help() {
    echo ""
    echo -e "${BOLD}${WHITE}templatesServiceGetOriginDefaultContent - Summary: Get origin default content
Description: Return the default content for a template with a specified origin and MIME type.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}origin${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Origin for the desired content. ${YELLOW}Specify as: origin=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}integration${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: UNDEFINED_INTEGRATION)${OFF} - Integration provides the context for the Request.${YELLOW} Specify as: integration=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}mime_type${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: PLAIN_TEXT)${OFF} - MIME type for the desired content.${YELLOW} Specify as: mime_type=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for templatesServiceGetOriginFields operation
#
##############################################################################
print_templatesServiceGetOriginFields_help() {
    echo ""
    echo -e "${BOLD}${WHITE}templatesServiceGetOriginFields - Summary: Get origin fields
Description: Return the fields available with a specific origin.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}origin${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Origin for the desired fields. ${YELLOW}Specify as: origin=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for templatesServiceGetTemplate operation
#
##############################################################################
print_templatesServiceGetTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}templatesServiceGetTemplate - Summary: Get template
Description: Return a specific template by id.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}template_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - The unique ID for the template to fetch. ${YELLOW}Specify as: template_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}include_integration_name${OFF} ${BLUE}[boolean]${OFF} ${CYAN}(default: null)${OFF} - Include the Integration name in the returned template.${YELLOW} Specify as: include_integration_name=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for templatesServiceGetTemplates operation
#
##############################################################################
print_templatesServiceGetTemplates_help() {
    echo ""
    echo -e "${BOLD}${WHITE}templatesServiceGetTemplates - Summary: Get templates
Description: Return all templates based on supplied filters.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}integration_id${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Filter on templates associated with a specific integration.${YELLOW} Specify as: integration_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_integration${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Filter on a set of integrations; ignored if empty.${YELLOW} Specify as: filter_integration=value1 filter_integration=value2 filter_integration=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_origin${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Filter on a specific set of data origins; ignored if empty.${YELLOW} Specify as: filter_origin=value1 filter_origin=value2 filter_origin=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_mime_type${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Filter on specific mime types; ignored if empty.${YELLOW} Specify as: filter_mime_type=value1 filter_mime_type=value2 filter_mime_type=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_tags${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - Filter on specific tags; ignored if empty.${YELLOW} Specify as: filter_tags=value1 filter_tags=value2 filter_tags=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter_enabled_only${OFF} ${BLUE}[boolean]${OFF} ${CYAN}(default: null)${OFF} - Filter on all templates instead of just the enabled templates.${YELLOW} Specify as: filter_enabled_only=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}include_integration_name${OFF} ${BLUE}[boolean]${OFF} ${CYAN}(default: null)${OFF} - Include the Integration name in the returned templates.${YELLOW} Specify as: include_integration_name=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for templatesServiceTestTemplate operation
#
##############################################################################
print_templatesServiceTestTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}templatesServiceTestTemplate - Summary: Test template
Description: Analyze a specified template to ensure will function correctly when utilized.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for templatesServiceTransformTemplate operation
#
##############################################################################
print_templatesServiceTransformTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}templatesServiceTransformTemplate - Summary: Transform template
Description: Process the specified template and returns the Title and Content based on supplied data.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for templatesServiceTransformTemplateJSON operation
#
##############################################################################
print_templatesServiceTransformTemplateJSON_help() {
    echo ""
    echo -e "${BOLD}${WHITE}templatesServiceTransformTemplateJSON - Summary: Transform template JSON
Description: Process the specified template and returns the Title and Content based on supplied json data string.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for templatesServiceUpdateTemplate operation
#
##############################################################################
print_templatesServiceUpdateTemplate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}templatesServiceUpdateTemplate - Summary: Update template
Description: Update a single template.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}template_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - The template id to update. ${YELLOW}Specify as: template_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for tenantuserCreateAPIKey operation
#
##############################################################################
print_tenantuserCreateAPIKey_help() {
    echo ""
    echo -e "${BOLD}${WHITE}tenantuserCreateAPIKey - Summary: Create API key
Description: Create API Key.${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for tenantuserDeleteAPIKey operation
#
##############################################################################
print_tenantuserDeleteAPIKey_help() {
    echo ""
    echo -e "${BOLD}${WHITE}tenantuserDeleteAPIKey - Summary: Delete API key
Description: Delete APIKey Document based on the document id.${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Apikey id. ${YELLOW}Specify as: id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for tenantuserDeleteRole operation
#
##############################################################################
print_tenantuserDeleteRole_help() {
    echo ""
    echo -e "${BOLD}${WHITE}tenantuserDeleteRole - Summary: Delete role
Description: Delete a role.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}role_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - ID or role deleted. ${YELLOW}Specify as: role_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for tenantuserGetAPIKeys operation
#
##############################################################################
print_tenantuserGetAPIKeys_help() {
    echo ""
    echo -e "${BOLD}${WHITE}tenantuserGetAPIKeys - Summary: Get API keys
Description: Get all APIKeys base on a tenant ID.${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for tenantuserGetCurrentUser operation
#
##############################################################################
print_tenantuserGetCurrentUser_help() {
    echo ""
    echo -e "${BOLD}${WHITE}tenantuserGetCurrentUser - Summary: Get current user
Description: Return the currently authenticated user.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for tenantuserGetPrivilege operation
#
##############################################################################
print_tenantuserGetPrivilege_help() {
    echo ""
    echo -e "${BOLD}${WHITE}tenantuserGetPrivilege - Summary: Get privilege
Description: Return privilege.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}privilege.privilege_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Privilege ID. ${YELLOW}Specify as: privilege.privilege_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}privilege.type${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Privilege Type - a report, group, and datasource may have the same ID. By passing type, the artifact can be uniquely determined.${YELLOW} Specify as: privilege.type=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for tenantuserGetPrivileges operation
#
##############################################################################
print_tenantuserGetPrivileges_help() {
    echo ""
    echo -e "${BOLD}${WHITE}tenantuserGetPrivileges - Summary: Get privileges
Description: Return all available privileges (pages, restapi, reports, etc) if no roles are specified
If roles are specified, returns cumulative privileges for the list of roles.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}roles${OFF} ${BLUE}[array[string]]${OFF} ${CYAN}(default: null)${OFF} - If empty, will return all privileges.${YELLOW} Specify as: roles=value1 roles=value2 roles=...${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}type${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Type of privilege to return: group, page, permission, report, restapi, etc.${YELLOW} Specify as: type=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for tenantuserGetRole operation
#
##############################################################################
print_tenantuserGetRole_help() {
    echo ""
    echo -e "${BOLD}${WHITE}tenantuserGetRole - Summary: Get role
Description: Return single role.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}role_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - ID of role to be returned. ${YELLOW}Specify as: role_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for tenantuserGetRoles operation
#
##############################################################################
print_tenantuserGetRoles_help() {
    echo ""
    echo -e "${BOLD}${WHITE}tenantuserGetRoles - Summary: Get roles
Description: Return all roles without privileges.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for tenantuserGetUser operation
#
##############################################################################
print_tenantuserGetUser_help() {
    echo ""
    echo -e "${BOLD}${WHITE}tenantuserGetUser - Summary: Get user
Description: Return full user for specified user_id.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - User id defaults to the current user or specify \"current\" or an actual user id. ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for tenantuserGetUserNames operation
#
##############################################################################
print_tenantuserGetUserNames_help() {
    echo ""
    echo -e "${BOLD}${WHITE}tenantuserGetUserNames - Summary: Get user names
Description: Get user names.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for tenantuserGetUserTenant operation
#
##############################################################################
print_tenantuserGetUserTenant_help() {
    echo ""
    echo -e "${BOLD}${WHITE}tenantuserGetUserTenant - Summary: Get user tenant
Description: Return the user plus tenant information.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}user_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - User id defaults to the current user or specify \"current\" or an actual user id. ${YELLOW}Specify as: user_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for tenantuserPostPrivilegesBulk operation
#
##############################################################################
print_tenantuserPostPrivilegesBulk_help() {
    echo ""
    echo -e "${BOLD}${WHITE}tenantuserPostPrivilegesBulk - Summary: Post privileges bulk
Description: Perform bulk user add preivilege.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for tenantuserPostRole operation
#
##############################################################################
print_tenantuserPostRole_help() {
    echo ""
    echo -e "${BOLD}${WHITE}tenantuserPostRole - Summary: Post role
Description: Create a new role.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for tenantuserUpdatePrivilege operation
#
##############################################################################
print_tenantuserUpdatePrivilege_help() {
    echo ""
    echo -e "${BOLD}${WHITE}tenantuserUpdatePrivilege - Summary: Update privilege
Description: Update privilege.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}privilege_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Permanent id of the privilege to be updated or created. ${YELLOW}Specify as: privilege_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for tenantuserUpdatePrivilegesRoleBulk operation
#
##############################################################################
print_tenantuserUpdatePrivilegesRoleBulk_help() {
    echo ""
    echo -e "${BOLD}${WHITE}tenantuserUpdatePrivilegesRoleBulk - Summary: Update privileges role bulk
Description: Perform bulk user update role.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for tenantuserUpdateRole operation
#
##############################################################################
print_tenantuserUpdateRole_help() {
    echo ""
    echo -e "${BOLD}${WHITE}tenantuserUpdateRole - Summary: Update role
Description: Update single role.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}role_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Permanent id of the role. ${YELLOW}Specify as: role_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for tenantuserUpdateUserRoleBulk operation
#
##############################################################################
print_tenantuserUpdateUserRoleBulk_help() {
    echo ""
    echo -e "${BOLD}${WHITE}tenantuserUpdateUserRoleBulk - Summary: Update user role bulk
Description: Perform bulk user add or remove role.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getLinkedVendor operation
#
##############################################################################
print_getLinkedVendor_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getLinkedVendor - Get additional details of a specific third party vendor${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get additional details of a specific third party vendor, such as, customer account details, sensitivities summary, and so on." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}vendorId${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - The third party vendor's account ID ${YELLOW}Specify as: vendorId=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
    code=403
    echo -e "${result_color_table[${code:0:1}]}  403;Forbidden${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
    code=500
    echo -e "${result_color_table[${code:0:1}]}  500;Internal Server Error${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
    code=503
    echo -e "${result_color_table[${code:0:1}]}  503;Service Unavailable${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for getSingleLinkedVendor operation
#
##############################################################################
print_getSingleLinkedVendor_help() {
    echo ""
    echo -e "${BOLD}${WHITE}getSingleLinkedVendor - Get the third party vendors list${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get details about a third party vendor." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}vendorId${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - vendor id ${YELLOW}Specify as: vendorId=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for listLinkedVendorDataStores operation
#
##############################################################################
print_listLinkedVendorDataStores_help() {
    echo ""
    echo -e "${BOLD}${WHITE}listLinkedVendorDataStores - Get the data stores associated with a third party vendor${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get a list of all the data stores that a third party vendor can access. Find out whether the data stores have sensitivities and which role can access the data stores." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}vendorId${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - The third party vendor's account ID ${YELLOW}Specify as: vendorId=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[ListVendorDataStoresFilterParameter]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: filter=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort${OFF} ${BLUE}[ListLinkedVendorDataStoresSortParameter]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: sort=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}pageSize${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: pageSize=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}nextToken${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: nextToken=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for listLinkedVendors operation
#
##############################################################################
print_listLinkedVendors_help() {
    echo ""
    echo -e "${BOLD}${WHITE}listLinkedVendors - Get the summary of a third party vendor${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get a list of all third party vendors associated to your cloud environments (relevant for the cloud environments connected to Guardium DSPM only)." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for listTrustedAssets operation
#
##############################################################################
print_listTrustedAssets_help() {
    echo ""
    echo -e "${BOLD}${WHITE}listTrustedAssets - Get a list of all the actual trusted assets${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "Get a list of roles, buckets or service principles, and their entitled permissions associated to your cloud environments connected to Guardium DSPM." | paste -sd' ' | fold -sw 80
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}filter${OFF} ${BLUE}[ListTrusteesFilterParameter]${OFF} ${CYAN}(default: null)${OFF} - ${YELLOW} Specify as: filter=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;success${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
    code=400
    echo -e "${result_color_table[${code:0:1}]}  400;Bad Request${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
        echo -e "       ${BOLD}${WHITE}Response headers${OFF}"
        echo -e "       ${BLUE}Access-Control-Allow-Origin${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Methods${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
        echo -e "       ${BLUE}Access-Control-Allow-Headers${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/        /'
}
##############################################################################
#
# Print help for universalConnectorManagerGetCertificate operation
#
##############################################################################
print_universalConnectorManagerGetCertificate_help() {
    echo ""
    echo -e "${BOLD}${WHITE}universalConnectorManagerGetCertificate - Summary: Get certificate
Description: Get the certificate that allows secure communication between data sources and universal connections in Guardium.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for universalConnectorManagerGetConnectors operation
#
##############################################################################
print_universalConnectorManagerGetConnectors_help() {
    echo ""
    echo -e "${BOLD}${WHITE}universalConnectorManagerGetConnectors - Summary: Get connectors
Description: Get all the connectors Universal Connector can support. Includes a list of event pipelines (input--filter pairs), along with the supported data source types and platforms.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for universalConnectorManagerListConnectionsSummary operation
#
##############################################################################
print_universalConnectorManagerListConnectionsSummary_help() {
    echo ""
    echo -e "${BOLD}${WHITE}universalConnectorManagerListConnectionsSummary - Summary: List connections summary
Description: List a summary of Universal Connector configured connections (AKA datasources).${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for universalConnectorManagerPluginsList operation
#
##############################################################################
print_universalConnectorManagerPluginsList_help() {
    echo ""
    echo -e "${BOLD}${WHITE}universalConnectorManagerPluginsList - Summary: Plugins list
Description: List of all universal connector plugins.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for universalConnectorManagerUploadPlugin operation
#
##############################################################################
print_universalConnectorManagerUploadPlugin_help() {
    echo ""
    echo -e "${BOLD}${WHITE}universalConnectorManagerUploadPlugin - Summary: Upload plugin
Description: Upload a plugin-package for Universal Connector.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for workflowCreateCase operation
#
##############################################################################
print_workflowCreateCase_help() {
    echo ""
    echo -e "${BOLD}${WHITE}workflowCreateCase - Summary: Create case
Description: Create single case.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for workflowCreateTask operation
#
##############################################################################
print_workflowCreateTask_help() {
    echo ""
    echo -e "${BOLD}${WHITE}workflowCreateTask - Summary: Create task
Description: Create single task within a parent case.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}case_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Create tasks with common parent. ${YELLOW}Specify as: case_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for workflowGetCases operation
#
##############################################################################
print_workflowGetCases_help() {
    echo ""
    echo -e "${BOLD}${WHITE}workflowGetCases - Summary: Get cases
Description: Return all cases requested.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}case_id${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Optional case_id to get a response of an array of one member.${YELLOW} Specify as: case_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}sort_by${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Optional field to sort by | first character determines ascending (>) or descending (<).${YELLOW} Specify as: sort_by=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - Optional starting point for the page of data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - Optional page size.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for workflowGetCasesCount operation
#
##############################################################################
print_workflowGetCasesCount_help() {
    echo ""
    echo -e "${BOLD}${WHITE}workflowGetCasesCount - Summary: Get cases count
Description: Get case count.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for workflowGetFilename operation
#
##############################################################################
print_workflowGetFilename_help() {
    echo ""
    echo -e "${BOLD}${WHITE}workflowGetFilename - Summary: Get filename
Description: Return filename associated with the task referenced in the associated context record.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}case_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Can be \"*\" if JWT token contains the case_id. ${YELLOW}Specify as: case_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}task_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Can be \"*\" if JWT token contains the task_id. ${YELLOW}Specify as: task_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for workflowGetJobsCount operation
#
##############################################################################
print_workflowGetJobsCount_help() {
    echo ""
    echo -e "${BOLD}${WHITE}workflowGetJobsCount - Summary: Get jobs count
Description: Get jobs count.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}case_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Case ID - can be * for all ${YELLOW}Specify as: case_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for workflowGetReportResult operation
#
##############################################################################
print_workflowGetReportResult_help() {
    echo ""
    echo -e "${BOLD}${WHITE}workflowGetReportResult - Summary: Get report result
Description: Return a page of results.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}case_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - ID to get the case  (read-only). ${YELLOW}Specify as: case_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}task_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - ID to get the task for case(read-only). ${YELLOW}Specify as: task_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}offset${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - Optional starting point for the page of data.${YELLOW} Specify as: offset=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}limit${OFF} ${BLUE}[integer]${OFF} ${CYAN}(default: null)${OFF} - Optional page size.${YELLOW} Specify as: limit=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for workflowGetTasks operation
#
##############################################################################
print_workflowGetTasks_help() {
    echo ""
    echo -e "${BOLD}${WHITE}workflowGetTasks - Summary: Get tasks
Description: Return all tasks requested.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}case_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Mandaroty: The parent case which contains the tasks. ${YELLOW}Specify as: case_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}task_id${OFF} ${BLUE}[string]${OFF} ${CYAN}(default: null)${OFF} - Optional: task_id to return an array of one.${YELLOW} Specify as: task_id=value${OFF}" \
        | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for workflowGetTasksCount operation
#
##############################################################################
print_workflowGetTasksCount_help() {
    echo ""
    echo -e "${BOLD}${WHITE}workflowGetTasksCount - Summary: Get cases count
Description: Get case count.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}case_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Case ID - can be * for all ${YELLOW}Specify as: case_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for workflowSearchCases operation
#
##############################################################################
print_workflowSearchCases_help() {
    echo ""
    echo -e "${BOLD}${WHITE}workflowSearchCases - Summary: Search cases
Description: Return a subset of cases.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for workflowSearchReports operation
#
##############################################################################
print_workflowSearchReports_help() {
    echo ""
    echo -e "${BOLD}${WHITE}workflowSearchReports - Summary: Get a list of report IDs
Description: Returns a list of report IDs referenced in all cases and tasks${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for workflowSearchTasks operation
#
##############################################################################
print_workflowSearchTasks_help() {
    echo ""
    echo -e "${BOLD}${WHITE}workflowSearchTasks - Summary: Search cases
Description: Return a subset of cases.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}case_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Case ID - can be * for all ${YELLOW}Specify as: case_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for workflowUpdateCases operation
#
##############################################################################
print_workflowUpdateCases_help() {
    echo ""
    echo -e "${BOLD}${WHITE}workflowUpdateCases - Summary: Update cases
Description: Update multiple cases in one request.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}
##############################################################################
#
# Print help for workflowUpdateTasks operation
#
##############################################################################
print_workflowUpdateTasks_help() {
    echo ""
    echo -e "${BOLD}${WHITE}workflowUpdateTasks - Summary: Update tasks
Description: Update multiple tasks for the same parent in one request.${OFF}${BLUE}(AUTH - BASIC)${OFF}${BLUE}(AUTH - HEADER)${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo -e "${BOLD}${WHITE}Parameters${OFF}"
    echo -e "  * ${GREEN}case_id${OFF} ${BLUE}[string]${OFF} ${RED}(required)${OFF} ${CYAN}(default: null)${OFF} - Update tasks belonging to common parent. ${YELLOW}Specify as: case_id=value${OFF}" | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e "  * ${GREEN}body${OFF} ${BLUE}[application/json]${OFF} ${RED}(required)${OFF}${OFF} - " | paste -sd' ' | fold -sw 80 | sed '2,$s/^/    /'
    echo -e ""
    echo ""
    echo -e "${BOLD}${WHITE}Responses${OFF}"
    code=200
    echo -e "${result_color_table[${code:0:1}]}  200;A successful response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
    code=0
    echo -e "${result_color_table[${code:0:1}]}  0;An unexpected error response.${OFF}" | paste -sd' ' | column -t -s ';' | fold -sw 80 | sed '2,$s/^/       /'
}


##############################################################################
#
# Call analyticsEventsServiceDeleteCacheKey operation
#
##############################################################################
call_analyticsEventsServiceDeleteCacheKey() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(cache_key)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/eventscache/{cache_key}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call analyticsEventsServicePostQSAdvisorRisk operation
#
##############################################################################
call_analyticsEventsServicePostQSAdvisorRisk() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/risk/qs_advisor" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call assetsServiceAssetIngestion operation
#
##############################################################################
call_assetsServiceAssetIngestion() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/assets/ingestion" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call assetsServiceAssetIngestionManualTrigger operation
#
##############################################################################
call_assetsServiceAssetIngestionManualTrigger() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/assets/ingestion/trigger" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call assetsServiceClonePolicy operation
#
##############################################################################
call_assetsServiceClonePolicy() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(policy_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/assets/policies/{policy_id}/clone" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call assetsServiceCreateUpdatePolicy operation
#
##############################################################################
call_assetsServiceCreateUpdatePolicy() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/assets/policies" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call assetsServiceDeleteFilterTemplateForAssets operation
#
##############################################################################
call_assetsServiceDeleteFilterTemplateForAssets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(template_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/assets/filters/template/{template_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call assetsServiceDeletePolicies operation
#
##############################################################################
call_assetsServiceDeletePolicies() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(policy_ids    )
    local path

    if ! path=$(build_request_path "/api/v3/assets/policies" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call assetsServiceFetchAssetChangeLog operation
#
##############################################################################
call_assetsServiceFetchAssetChangeLog() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/assets/logs" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call assetsServiceFetchAssetDashboard operation
#
##############################################################################
call_assetsServiceFetchAssetDashboard() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(widget_type)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(date_range.start date_range.end date_range.type date_range.key date_range.error date_range.start_number date_range.start_unit date_range.end_number date_range.end_unit timeline_value_selected tag_id    )
    local path

    if ! path=$(build_request_path "/api/v3/assets/dashboard/{widget_type}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call assetsServiceFetchAssetList operation
#
##############################################################################
call_assetsServiceFetchAssetList() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/assets" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call assetsServiceFetchAssetsForMergeSplit operation
#
##############################################################################
call_assetsServiceFetchAssetsForMergeSplit() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(asset_id page_number page_size action search_key    )
    local path

    if ! path=$(build_request_path "/api/v3/assets/configuration" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call assetsServiceFindAssetName operation
#
##############################################################################
call_assetsServiceFindAssetName() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(asset_name    )
    local path

    if ! path=$(build_request_path "/api/v3/assets/name" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call assetsServiceGetAssetOverview operation
#
##############################################################################
call_assetsServiceGetAssetOverview() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(asset_id page_number size widget ip host database asset_entity_type    )
    local path

    if ! path=$(build_request_path "/api/v3/assets/overview" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call assetsServiceGetAssetTopology operation
#
##############################################################################
call_assetsServiceGetAssetTopology() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/assets/topology" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call assetsServiceGetFilterTemplateForAssets operation
#
##############################################################################
call_assetsServiceGetFilterTemplateForAssets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(template_id    )
    local path

    if ! path=$(build_request_path "/api/v3/assets/filters/templates" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call assetsServiceGetFiltersForAssets operation
#
##############################################################################
call_assetsServiceGetFiltersForAssets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/assets/filters" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call assetsServiceListPolicy operation
#
##############################################################################
call_assetsServiceListPolicy() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/assets/policies" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call assetsServiceListRule operation
#
##############################################################################
call_assetsServiceListRule() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(policy_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/assets/policies/{policy_id}/rules" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call assetsServiceListTagDomains operation
#
##############################################################################
call_assetsServiceListTagDomains() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(dom_grouper purpose need_tag    )
    local path

    if ! path=$(build_request_path "/api/v3/assets/tags/categories" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call assetsServiceListTags operation
#
##############################################################################
call_assetsServiceListTags() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(asset_id    )
    local path

    if ! path=$(build_request_path "/api/v3/assets/tags" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call assetsServiceMergeOrSplitAssets operation
#
##############################################################################
call_assetsServiceMergeOrSplitAssets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/assets/configuration" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call assetsServiceSaveAssignedTags operation
#
##############################################################################
call_assetsServiceSaveAssignedTags() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/assets/tags/assign" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call assetsServiceSaveTagConceptData operation
#
##############################################################################
call_assetsServiceSaveTagConceptData() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/assets/tags" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call assetsServiceSaveTagDomainData operation
#
##############################################################################
call_assetsServiceSaveTagDomainData() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/assets/tags/categories" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call assetsServiceSaveUpdateFilterTemplateForAssets operation
#
##############################################################################
call_assetsServiceSaveUpdateFilterTemplateForAssets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/assets/filters/templates" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call assetsServiceSetBannerState operation
#
##############################################################################
call_assetsServiceSetBannerState() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/assets/banner" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call assetsServiceUpdateAssetName operation
#
##############################################################################
call_assetsServiceUpdateAssetName() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/assets/name" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call assetsServiceUpdatePolicy operation
#
##############################################################################
call_assetsServiceUpdatePolicy() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/assets/policies" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call auditServiceGetActivityRecords operation
#
##############################################################################
call_auditServiceGetActivityRecords() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(start_time end_time uid action_taken context changes_made performed_by context_description query offset limit filter    )
    local path

    if ! path=$(build_request_path "/api/v3/activity" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call auditServicePutDownloadActivityRecord operation
#
##############################################################################
call_auditServicePutDownloadActivityRecord() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/activity" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call authServerServiceCreateOauthClient operation
#
##############################################################################
call_authServerServiceCreateOauthClient() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/oauth/clients" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call authServerServiceDeleteOauthClient operation
#
##############################################################################
call_authServerServiceDeleteOauthClient() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(client_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/oauth/clients/{client_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call authServerServiceGetAccessToken operation
#
##############################################################################
call_authServerServiceGetAccessToken() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v3/oauth/token" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call authServerServiceGetOauthClient operation
#
##############################################################################
call_authServerServiceGetOauthClient() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(client_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/oauth/clients/{client_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call authServerServiceGetUser operation
#
##############################################################################
call_authServerServiceGetUser() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/auth/user" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call authServerServiceListOauthClient operation
#
##############################################################################
call_authServerServiceListOauthClient() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/oauth/clients" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call addAnalyzedRegion operation
#
##############################################################################
call_addAnalyzedRegion() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/cloudAccounts/cloudProviders/analyzedRegions" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call addCloudAccounts operation
#
##############################################################################
call_addCloudAccounts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/cloudAccounts/cloudProviders" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call generateAtlassianConfluenceAuthUrl operation
#
##############################################################################
call_generateAtlassianConfluenceAuthUrl() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/cloudAccounts/saasApps/atlassian-confluence/generateAuthUrl" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call generateAtlassianJiraAuthUrl operation
#
##############################################################################
call_generateAtlassianJiraAuthUrl() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/cloudAccounts/saasApps/atlassian-jira/generateAuthUrl" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call generateAzureAuthUrl operation
#
##############################################################################
call_generateAzureAuthUrl() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(tenantId  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/cloudAccounts/azure/generateAuthUrl" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call generateOffice365AuthUrl operation
#
##############################################################################
call_generateOffice365AuthUrl() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/cloudAccounts/saasApps/office365/generateAuthUrl" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call generateSlackAuthUrl operation
#
##############################################################################
call_generateSlackAuthUrl() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/cloudAccounts/saasApps/slack/generateAuthUrl" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call generateSnowflakeAuthUrl operation
#
##############################################################################
call_generateSnowflakeAuthUrl() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/cloudAccounts/saasApps/snowflake/generateAuthUrl" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call getAnalyzedRegionStatus operation
#
##############################################################################
call_getAnalyzedRegionStatus() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(cloudProvider region  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/cloudAccounts/cloudProviders/analyzedRegions/status" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getAzureAdminConsentStatus operation
#
##############################################################################
call_getAzureAdminConsentStatus() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/cloudAccounts/azure/getAdminConsentStatus" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getCloudAccountInstallationStatus operation
#
##############################################################################
call_getCloudAccountInstallationStatus() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(cloudProvider cloudAccountId)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/cloudAccounts/{cloudProvider}/{cloudAccountId}/installationStatus" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getRefreshTokenExpiry operation
#
##############################################################################
call_getRefreshTokenExpiry() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(providerId)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/cloudAccounts/saasApps/snowflake/getRefreshTokenExpiry/{providerId}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call listLinkedAccounts operation
#
##############################################################################
call_listLinkedAccounts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/cloudAccounts/linkedAccounts" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call removeAccounts operation
#
##############################################################################
call_removeAccounts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(accountIds serviceProvider  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/cloudAccounts/removeAccounts" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call removeAccountsInstructions operation
#
##############################################################################
call_removeAccountsInstructions() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(accountIds serviceProvider  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/cloudAccounts/removeAccountsInstructions" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call retrieveServiceAccountId operation
#
##############################################################################
call_retrieveServiceAccountId() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/cloudAccounts/saasApps/google/retrieveServiceAccountId" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call snowflakeIntegrationScript operation
#
##############################################################################
call_snowflakeIntegrationScript() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/cloudAccounts/saasApps/snowflake/snowflakeIntegrationScript" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call submitGoogleWorkspaceAdminEmail operation
#
##############################################################################
call_submitGoogleWorkspaceAdminEmail() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/cloudAccounts/saasApps/google/submitAdminEmail" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call submitOffice365TenantInfo operation
#
##############################################################################
call_submitOffice365TenantInfo() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/cloudAccounts/saasApps/office365/submitTenantInfo" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call submitSlackAuthCode operation
#
##############################################################################
call_submitSlackAuthCode() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/cloudAccounts/saasApps/slack/submitAuthCode" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call submitSnowflakeAuthCode operation
#
##############################################################################
call_submitSnowflakeAuthCode() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/cloudAccounts/saasApps/snowflake/submitAuthCode" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call complianceAcceleratorCreateWorkspace operation
#
##############################################################################
call_complianceAcceleratorCreateWorkspace() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/compliance/workspace" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call complianceAcceleratorDeleteComplianceWorkspaces operation
#
##############################################################################
call_complianceAcceleratorDeleteComplianceWorkspaces() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(regulations deleteAll    )
    local path

    if ! path=$(build_request_path "/api/v3/compliance" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call complianceAcceleratorGetComplianceInfo operation
#
##############################################################################
call_complianceAcceleratorGetComplianceInfo() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/compliance" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call complianceAcceleratorHydrateWorkspace operation
#
##############################################################################
call_complianceAcceleratorHydrateWorkspace() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/compliance/workspace/hydrate" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call complianceAcceleratorStoreComplianceInfo operation
#
##############################################################################
call_complianceAcceleratorStoreComplianceInfo() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/compliance" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call connectionsServiceCreateConnectionsAccounts operation
#
##############################################################################
call_connectionsServiceCreateConnectionsAccounts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/connections/accounts" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call connectionsServiceCreateConnectionsConfigs operation
#
##############################################################################
call_connectionsServiceCreateConnectionsConfigs() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/connections/configs" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call connectionsServiceCreatePlugin operation
#
##############################################################################
call_connectionsServiceCreatePlugin() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/connections/plugins" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call connectionsServiceCreateSettings operation
#
##############################################################################
call_connectionsServiceCreateSettings() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/connections/settings" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call connectionsServiceDeleteConnectionsAccounts operation
#
##############################################################################
call_connectionsServiceDeleteConnectionsAccounts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(account_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/connections/accounts/{account_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call connectionsServiceDeleteConnectionsConfigs operation
#
##############################################################################
call_connectionsServiceDeleteConnectionsConfigs() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(connection_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/connections/configs/{connection_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call connectionsServiceDeleteConnector operation
#
##############################################################################
call_connectionsServiceDeleteConnector() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(connection_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/connections/{connection_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call connectionsServiceDeletePlugin operation
#
##############################################################################
call_connectionsServiceDeletePlugin() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/connections/plugins/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call connectionsServiceGetBannerState operation
#
##############################################################################
call_connectionsServiceGetBannerState() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/connections/banner" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call connectionsServiceGetConnectionsAccounts operation
#
##############################################################################
call_connectionsServiceGetConnectionsAccounts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(account_id access_key    )
    local path

    if ! path=$(build_request_path "/api/v3/connections/accounts" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call connectionsServiceGetConnectionsConfigs operation
#
##############################################################################
call_connectionsServiceGetConnectionsConfigs() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(type connection_id    )
    local path

    if ! path=$(build_request_path "/api/v3/connections/configs" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call connectionsServiceGetConnectionsWithFilters operation
#
##############################################################################
call_connectionsServiceGetConnectionsWithFilters() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/connections" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call connectionsServiceGetConnectorsSummary operation
#
##############################################################################
call_connectionsServiceGetConnectorsSummary() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/connections/summary" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call connectionsServiceGetDataSources operation
#
##############################################################################
call_connectionsServiceGetDataSources() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/connections/datasources" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call connectionsServiceGetGuardRecordFields operation
#
##############################################################################
call_connectionsServiceGetGuardRecordFields() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/connections/fields" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call connectionsServiceGetHeaders operation
#
##############################################################################
call_connectionsServiceGetHeaders() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/connections/headers" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call connectionsServiceGetPlugins operation
#
##############################################################################
call_connectionsServiceGetPlugins() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(id    )
    local path

    if ! path=$(build_request_path "/api/v3/connections/plugins" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call connectionsServiceGetSettings operation
#
##############################################################################
call_connectionsServiceGetSettings() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/connections/settings" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call connectionsServicePartialUpdateConnectors operation
#
##############################################################################
call_connectionsServicePartialUpdateConnectors() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/connections" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call connectionsServicePostStapCommand operation
#
##############################################################################
call_connectionsServicePostStapCommand() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/stap/commands" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call connectionsServiceUpdateBannerState operation
#
##############################################################################
call_connectionsServiceUpdateBannerState() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/connections/banner" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call connectionsServiceUpdateConnectionsAccounts operation
#
##############################################################################
call_connectionsServiceUpdateConnectionsAccounts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/connections/accounts" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call connectionsServiceUpdateConnectionsConfigs operation
#
##############################################################################
call_connectionsServiceUpdateConnectionsConfigs() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/connections/configs" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call connectionsServiceUpdateConnectors operation
#
##############################################################################
call_connectionsServiceUpdateConnectors() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/connections" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call connectionsServiceUpdatePlugin operation
#
##############################################################################
call_connectionsServiceUpdatePlugin() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/connections/plugins/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call connectionsServiceUpdateSettings operation
#
##############################################################################
call_connectionsServiceUpdateSettings() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/connections/settings" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call dashboardsServiceCreateDashboard operation
#
##############################################################################
call_dashboardsServiceCreateDashboard() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/dashboards" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call dashboardsServiceDeleteDashboard operation
#
##############################################################################
call_dashboardsServiceDeleteDashboard() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(dashboard_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/dashboards/{dashboard_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call dashboardsServiceGetDashboards operation
#
##############################################################################
call_dashboardsServiceGetDashboards() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/dashboards" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call dashboardsServiceUpdateDashboard operation
#
##############################################################################
call_dashboardsServiceUpdateDashboard() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(dashboard_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/dashboards/{dashboard_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call getActualFlow operation
#
##############################################################################
call_getActualFlow() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/dataMovements/actualFlows/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getActualFlowsSummary operation
#
##############################################################################
call_getActualFlowsSummary() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(filter  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/dataMovements/actualFlows/summary" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getPotentialFlow operation
#
##############################################################################
call_getPotentialFlow() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(flowId)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/dataMovements/potentialFlows/{flowId}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getPotentialFlowPath operation
#
##############################################################################
call_getPotentialFlowPath() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(flowPathId)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/dataMovements/potentialFlows/paths/{flowPathId}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getPotentialFlowsSummary operation
#
##############################################################################
call_getPotentialFlowsSummary() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(filter  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/dataMovements/potentialFlows/summary" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call listActualFlowPaths operation
#
##############################################################################
call_listActualFlowPaths() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(sort filter pageSize nextToken  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/dataMovements/actualFlowPaths" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call listActualFlows operation
#
##############################################################################
call_listActualFlows() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(sort filter pageSize nextToken  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/dataMovements/actualFlows" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call listPotentialFlows operation
#
##############################################################################
call_listPotentialFlows() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(filter pageSize nextToken  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/dataMovements/potentialFlows" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call listPotentialFlowsPaths operation
#
##############################################################################
call_listPotentialFlowsPaths() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(filter pageSize nextToken  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/dataMovements/potentialFlows/paths" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getDataResource operation
#
##############################################################################
call_getDataResource() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(dataResourceId)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/dataResources/{dataResourceId}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getDataResourcesSummary operation
#
##############################################################################
call_getDataResourcesSummary() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(dataStoreId filter  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/dataResources/summary" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call listDataResources operation
#
##############################################################################
call_listDataResources() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(dataStoreId filter sort pageSize nextToken  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/dataResources" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call listDataResourcesNames operation
#
##############################################################################
call_listDataResourcesNames() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(prefix dataStoreId  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/dataResources/names" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call removeResource operation
#
##############################################################################
call_removeResource() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(dataResourceId)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(dataStoreId  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/dataResources/{dataResourceId}/removeResource" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call updateResourceReviewStatus operation
#
##############################################################################
call_updateResourceReviewStatus() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(dataResourceId)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/dataResources/{dataResourceId}/reviewed" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call getSensitivitiesSummary operation
#
##############################################################################
call_getSensitivitiesSummary() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(filter  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/sensitivities/summary" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getSensitivity operation
#
##############################################################################
call_getSensitivity() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(sensitivityId)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/sensitivities/{sensitivityId}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call listSensitivities operation
#
##############################################################################
call_listSensitivities() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(filter sort pageSize nextToken  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/sensitivities" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getDataStore operation
#
##############################################################################
call_getDataStore() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(dataStoreId)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/dataStores/{dataStoreId}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getDataStoresSummary operation
#
##############################################################################
call_getDataStoresSummary() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(filter  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/dataStores/summary" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call listAllDataStoresLabels operation
#
##############################################################################
call_listAllDataStoresLabels() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(prefix maxResults  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/dataStores/labels" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call listDataStores operation
#
##############################################################################
call_listDataStores() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(filter sort pageSize nextToken  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/dataStores" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call listDataStoresCloudTagsKeys operation
#
##############################################################################
call_listDataStoresCloudTagsKeys() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(prefix maxResults  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/dataStores/cloudTags/keys" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call listDataStoresCloudTagsValues operation
#
##############################################################################
call_listDataStoresCloudTagsValues() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(prefix tagKey maxResults  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/dataStores/cloudTags/values" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call listDataStoresNames operation
#
##############################################################################
call_listDataStoresNames() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(prefix  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/dataStores/filters/name" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call rescanDataStore operation
#
##############################################################################
call_rescanDataStore() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/dataStores/rescan" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call setDataStoreLabel operation
#
##############################################################################
call_setDataStoreLabel() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(dataStoreId)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/dataStores/{dataStoreId}/labels" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateDatastoreCustodian operation
#
##############################################################################
call_updateDatastoreCustodian() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/dataStores/custodian" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call addVulnerabilityStatusComment operation
#
##############################################################################
call_addVulnerabilityStatusComment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(vulnerabilityId statusId)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/vulnerabilities/{vulnerabilityId}/statuses/{statusId}/comments" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call getVulnerabilitiesSummary operation
#
##############################################################################
call_getVulnerabilitiesSummary() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(filter  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/vulnerabilities/summary" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getVulnerability operation
#
##############################################################################
call_getVulnerability() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(vulnerabilityId)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/vulnerabilities/{vulnerabilityId}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call listVulnerabilities operation
#
##############################################################################
call_listVulnerabilities() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(filter sort pageSize nextToken  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/vulnerabilities" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call listVulnerabilitiesByDataStore operation
#
##############################################################################
call_listVulnerabilitiesByDataStore() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(filter sort pageSize nextToken  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/vulnerabilities/byDataStore" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call removeVulnerabilityStatusComment operation
#
##############################################################################
call_removeVulnerabilityStatusComment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(vulnerabilityId statusId commentId)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/vulnerabilities/{vulnerabilityId}/statuses/{statusId}/comments/{commentId}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call setVulnerabilityStatus operation
#
##############################################################################
call_setVulnerabilityStatus() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(vulnerabilityId)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/vulnerabilities/{vulnerabilityId}/statuses" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call updateVulnerabilityStatusComment operation
#
##############################################################################
call_updateVulnerabilityStatusComment() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(vulnerabilityId statusId commentId)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/vulnerabilities/{vulnerabilityId}/statuses/{statusId}/comments/{commentId}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call databootstrapperServiceLoadData operation
#
##############################################################################
call_databootstrapperServiceLoadData() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/databootstrapper/data" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call datamartProcessorServiceGetDatamartInfo operation
#
##############################################################################
call_datamartProcessorServiceGetDatamartInfo() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(ingestion_id    )
    local path

    if ! path=$(build_request_path "/api/v3/datamarts/info" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call datamartProcessorServiceGetDatamarts operation
#
##############################################################################
call_datamartProcessorServiceGetDatamarts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(period_start period_end    )
    local path

    if ! path=$(build_request_path "/api/v3/datamarts" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call datamartProcessorServiceGetEarliestStartTime operation
#
##############################################################################
call_datamartProcessorServiceGetEarliestStartTime() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/datamarts/earliest_start_time" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call datamartProcessorServiceSendAllCompleteFilesToQueue operation
#
##############################################################################
call_datamartProcessorServiceSendAllCompleteFilesToQueue() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/datamarts/repush_files" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call datamartProcessorServiceStoreExtractionLogs operation
#
##############################################################################
call_datamartProcessorServiceStoreExtractionLogs() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(request_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/datamarts/{request_id}/dm_extraction_logs" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call uploadDatamart operation
#
##############################################################################
call_uploadDatamart() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/datamarts/upload" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    body_form_urlencoded=$(body_parameters_to_form_urlencoded)
    if [[ "$print_curl" = true ]]; then
        echo "curl ${body_form_urlencoded} ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl ${body_form_urlencoded} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call ecosystemServiceCreateDataset operation
#
##############################################################################
call_ecosystemServiceCreateDataset() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/integrations/datasets" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call ecosystemServiceDataInsert operation
#
##############################################################################
call_ecosystemServiceDataInsert() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(dataset_name)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/integrations/datasets/{dataset_name}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call ecosystemServiceDeleteDatasets operation
#
##############################################################################
call_ecosystemServiceDeleteDatasets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(dataset_names    )
    local path

    if ! path=$(build_request_path "/api/v3/integrations/datasets" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call ecosystemServiceGetDatasetData operation
#
##############################################################################
call_ecosystemServiceGetDatasetData() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(dataset_name)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(offset limit return_header field value sort_field sort_order    )
    local path

    if ! path=$(build_request_path "/api/v3/integrations/datasets/{dataset_name}/data" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call ecosystemServiceGetDatasetDetail operation
#
##############################################################################
call_ecosystemServiceGetDatasetDetail() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(dataset_name)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/integrations/datasets/{dataset_name}/details" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call ecosystemServiceGetDatasets operation
#
##############################################################################
call_ecosystemServiceGetDatasets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(filter.start_time filter.end_time filter.dataset_names offset limit include_filter_counts    )
    local path

    if ! path=$(build_request_path "/api/v3/integrations/datasets" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call ecosystemServiceGetPurgableRows operation
#
##############################################################################
call_ecosystemServiceGetPurgableRows() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/integrations/purge" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call ecosystemServicePurgeData operation
#
##############################################################################
call_ecosystemServicePurgeData() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(dataset_names    )
    local path

    if ! path=$(build_request_path "/api/v3/integrations/datasets/data" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call featureFlagsServiceDeleteFeatureFlagOverrides operation
#
##############################################################################
call_featureFlagsServiceDeleteFeatureFlagOverrides() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(flag_name tenant_id    )
    local path

    if ! path=$(build_request_path "/api/v3/feature_flags/overrides" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call featureFlagsServiceGetFeatureFlagOverrides operation
#
##############################################################################
call_featureFlagsServiceGetFeatureFlagOverrides() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(tenant_id flag_names    )
    local path

    if ! path=$(build_request_path "/api/v3/feature_flags/overrides" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call featureFlagsServiceGetFeatureFlags operation
#
##############################################################################
call_featureFlagsServiceGetFeatureFlags() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(tenant_id flag_names    )
    local path

    if ! path=$(build_request_path "/api/v3/feature_flags" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call featureFlagsServiceUpdateFeatureFlagOverrides operation
#
##############################################################################
call_featureFlagsServiceUpdateFeatureFlagOverrides() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/feature_flags/overrides" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call groupBuilderCancelImportGroup operation
#
##############################################################################
call_groupBuilderCancelImportGroup() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(group_ids    )
    local path

    if ! path=$(build_request_path "/api/v3/groups_import" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call groupBuilderCreateGroup operation
#
##############################################################################
call_groupBuilderCreateGroup() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/groups" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call groupBuilderDeleteGroup operation
#
##############################################################################
call_groupBuilderDeleteGroup() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(group_ids    )
    local path

    if ! path=$(build_request_path "/api/v3/groups" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call groupBuilderEditGroup operation
#
##############################################################################
call_groupBuilderEditGroup() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(group_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/groups/{group_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call groupBuilderExportGroup operation
#
##############################################################################
call_groupBuilderExportGroup() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/groups_export" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call groupBuilderGetGroupDetails operation
#
##############################################################################
call_groupBuilderGetGroupDetails() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(group_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(filter order    )
    local path

    if ! path=$(build_request_path "/api/v3/groups/{group_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call groupBuilderGetGroupMembers operation
#
##############################################################################
call_groupBuilderGetGroupMembers() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/groups/search" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call groupBuilderGetGroupSyncMapping operation
#
##############################################################################
call_groupBuilderGetGroupSyncMapping() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(central_manager_id    )
    local path

    if ! path=$(build_request_path "/api/v3/groups/mappings/sync" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call groupBuilderGetGroupTypeMapping operation
#
##############################################################################
call_groupBuilderGetGroupTypeMapping() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/groups-mappings" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call groupBuilderGetGroupTypes operation
#
##############################################################################
call_groupBuilderGetGroupTypes() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/group_types" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call groupBuilderGetGroups operation
#
##############################################################################
call_groupBuilderGetGroups() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(do_not_include_member_count only_full_access non_nested    )
    local path

    if ! path=$(build_request_path "/api/v3/groups" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call groupBuilderGetImportGroups operation
#
##############################################################################
call_groupBuilderGetImportGroups() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(central_manager_id    )
    local path

    if ! path=$(build_request_path "/api/v3/groups_import" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call groupBuilderImportGroup operation
#
##############################################################################
call_groupBuilderImportGroup() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/groups_import" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call groupBuilderRefreshGroups operation
#
##############################################################################
call_groupBuilderRefreshGroups() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/groups/refresh" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call groupBuilderResetGroups operation
#
##############################################################################
call_groupBuilderResetGroups() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/groups/reset" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call groupBuilderStoreGroupMembersGdp operation
#
##############################################################################
call_groupBuilderStoreGroupMembersGdp() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(central_manager_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/central_managers/{central_manager_id}/groups/members" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call groupBuilderStoreGroupsGdp operation
#
##############################################################################
call_groupBuilderStoreGroupsGdp() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(central_manager_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/central_managers/{central_manager_id}/groups" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call guardiumConnectorAddCM operation
#
##############################################################################
call_guardiumConnectorAddCM() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/central_managers" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call guardiumConnectorAddDatamarts operation
#
##############################################################################
call_guardiumConnectorAddDatamarts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(central_manager_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/central_managers/{central_manager_id}/datamarts" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call guardiumConnectorAddDmExclusion operation
#
##############################################################################
call_guardiumConnectorAddDmExclusion() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/datamarts/exclusion_list" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call guardiumConnectorAddTask operation
#
##############################################################################
call_guardiumConnectorAddTask() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(central_manager_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/central_managers/{central_manager_id}/tasks" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call guardiumConnectorBlockUser operation
#
##############################################################################
call_guardiumConnectorBlockUser() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/block_user" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call guardiumConnectorConfigureAggregatorExport operation
#
##############################################################################
call_guardiumConnectorConfigureAggregatorExport() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(central_manager_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/central_managers/{central_manager_id}/aggregator_config_export" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call guardiumConnectorConfigureCollectorExport operation
#
##############################################################################
call_guardiumConnectorConfigureCollectorExport() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(central_manager_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/central_managers/{central_manager_id}/collector_config_export" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call guardiumConnectorConfigureStreaming operation
#
##############################################################################
call_guardiumConnectorConfigureStreaming() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(central_manager_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/central_managers/{central_manager_id}/streaming" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call guardiumConnectorDatamartVersionCheck operation
#
##############################################################################
call_guardiumConnectorDatamartVersionCheck() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(central_manager_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/central_managers/{central_manager_id}/datamart_version" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call guardiumConnectorDeleteCM operation
#
##############################################################################
call_guardiumConnectorDeleteCM() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(central_manager_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(force    )
    local path

    if ! path=$(build_request_path "/api/v3/central_managers/{central_manager_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call guardiumConnectorDeleteDmExclusion operation
#
##############################################################################
call_guardiumConnectorDeleteDmExclusion() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(datamart    )
    local path

    if ! path=$(build_request_path "/api/v3/datamarts/exclusion_list" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call guardiumConnectorDeleteTask operation
#
##############################################################################
call_guardiumConnectorDeleteTask() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(central_manager_id task_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/central_managers/{central_manager_id}/tasks/{task_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call guardiumConnectorDeleteTasks operation
#
##############################################################################
call_guardiumConnectorDeleteTasks() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(central_manager_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/central_managers/{central_manager_id}/tasks" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call guardiumConnectorGetAggregatorsConfig operation
#
##############################################################################
call_guardiumConnectorGetAggregatorsConfig() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(central_manager_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/central_managers/{central_manager_id}/aggregators_config" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call guardiumConnectorGetCMs operation
#
##############################################################################
call_guardiumConnectorGetCMs() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(run_additional_checks    )
    local path

    if ! path=$(build_request_path "/api/v3/central_managers" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call guardiumConnectorGetCMsConfig operation
#
##############################################################################
call_guardiumConnectorGetCMsConfig() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/central_managers_config" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call guardiumConnectorGetCollectorsConfig operation
#
##############################################################################
call_guardiumConnectorGetCollectorsConfig() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(central_manager_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/central_managers/{central_manager_id}/collectors_config" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call guardiumConnectorGetDatamarts operation
#
##############################################################################
call_guardiumConnectorGetDatamarts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(central_manager_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/central_managers/{central_manager_id}/datamarts" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call guardiumConnectorGetDmExclusion operation
#
##############################################################################
call_guardiumConnectorGetDmExclusion() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/datamarts/exclusion_list" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call guardiumConnectorGetGdpPolicyInfo operation
#
##############################################################################
call_guardiumConnectorGetGdpPolicyInfo() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(central_manager_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(policy_name    )
    local path

    if ! path=$(build_request_path "/api/v3/central_managers/{central_manager_id}/policies/info" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call guardiumConnectorGetGdpPolicySummaries operation
#
##############################################################################
call_guardiumConnectorGetGdpPolicySummaries() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(central_manager_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/central_managers/{central_manager_id}/policies/summaries" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call guardiumConnectorGetHealthInfo operation
#
##############################################################################
call_guardiumConnectorGetHealthInfo() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(central_manager_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(use_fallback    )
    local path

    if ! path=$(build_request_path "/api/v3/central_managers/{central_manager_id}/health_info" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call guardiumConnectorGetLatestDMExtractionProfile operation
#
##############################################################################
call_guardiumConnectorGetLatestDMExtractionProfile() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(central_manager_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/central_managers/{central_manager_id}/datamart_extraction_profile" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call guardiumConnectorGetStreamingStatus operation
#
##############################################################################
call_guardiumConnectorGetStreamingStatus() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(central_manager_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/central_managers/{central_manager_id}/streaming" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call guardiumConnectorGetSyncDMs operation
#
##############################################################################
call_guardiumConnectorGetSyncDMs() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(central_manager_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/central_managers/{central_manager_id}/sync" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call guardiumConnectorGetTaskTypes operation
#
##############################################################################
call_guardiumConnectorGetTaskTypes() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/central_managers/task_types" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call guardiumConnectorGetTasks operation
#
##############################################################################
call_guardiumConnectorGetTasks() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(central_manager_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(task_id task_type key_object    )
    local path

    if ! path=$(build_request_path "/api/v3/central_managers/{central_manager_id}/tasks" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call guardiumConnectorRunGDPReport operation
#
##############################################################################
call_guardiumConnectorRunGDPReport() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(central_manager_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/central_managers/{central_manager_id}/run_report" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call guardiumConnectorSetupCM operation
#
##############################################################################
call_guardiumConnectorSetupCM() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/central_managers/setup" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call guardiumConnectorSetupDatamarts operation
#
##############################################################################
call_guardiumConnectorSetupDatamarts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(central_manager_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/central_managers/{central_manager_id}/datamarts/setup" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call guardiumConnectorTaskError operation
#
##############################################################################
call_guardiumConnectorTaskError() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(central_manager_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/central_managers/{central_manager_id}/tasks/error" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call guardiumConnectorTestDatabaseConnection operation
#
##############################################################################
call_guardiumConnectorTestDatabaseConnection() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v3/test_database" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call guardiumConnectorUpdateDmExclusion operation
#
##############################################################################
call_guardiumConnectorUpdateDmExclusion() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/datamarts/exclusion_list" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call guardiumConnectorUpdateStreaming operation
#
##############################################################################
call_guardiumConnectorUpdateStreaming() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(central_manager_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/central_managers/{central_manager_id}/streaming" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call guardiumConnectorUpdateTask operation
#
##############################################################################
call_guardiumConnectorUpdateTask() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(central_manager_id task_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/central_managers/{central_manager_id}/tasks/{task_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call healthCollectorGetDataWarehouseUsage operation
#
##############################################################################
call_healthCollectorGetDataWarehouseUsage() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(type)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(start_time end_time    )
    local path

    if ! path=$(build_request_path "/api/v3/metrics/warehouse/{type}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call healthCollectorGetGDPHealthInfo operation
#
##############################################################################
call_healthCollectorGetGDPHealthInfo() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/health" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call healthCollectorGetHistoricalHealthInfo operation
#
##############################################################################
call_healthCollectorGetHistoricalHealthInfo() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(unit cm_id start_time end_time    )
    local path

    if ! path=$(build_request_path "/api/v3/health/history" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call healthCollectorGetObjectStorageUsage operation
#
##############################################################################
call_healthCollectorGetObjectStorageUsage() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(type)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(start_time end_time    )
    local path

    if ! path=$(build_request_path "/api/v3/metrics/object_storage/{type}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call healthCollectorGetPVCUsage operation
#
##############################################################################
call_healthCollectorGetPVCUsage() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(type)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(start_time end_time    )
    local path

    if ! path=$(build_request_path "/api/v3/metrics/pvc/{type}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call healthCollectorGetPodRestarts operation
#
##############################################################################
call_healthCollectorGetPodRestarts() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(type)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(start_time end_time    )
    local path

    if ! path=$(build_request_path "/api/v3/metrics/pods/{type}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call healthCollectorGetStreamsIngestion operation
#
##############################################################################
call_healthCollectorGetStreamsIngestion() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(type)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(start_time end_time    )
    local path

    if ! path=$(build_request_path "/api/v3/metrics/streams/{type}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call healthCollectorGetTopGDPCollectors operation
#
##############################################################################
call_healthCollectorGetTopGDPCollectors() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(type)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(start_time end_time    )
    local path

    if ! path=$(build_request_path "/api/v3/metrics/collectors/{type}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call healthCollectorStoreHealthInfo operation
#
##############################################################################
call_healthCollectorStoreHealthInfo() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(central_manager_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/health/central_managers/{central_manager_id}/health_info" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call jumpboxServiceAuthorize operation
#
##############################################################################
call_jumpboxServiceAuthorize() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/authorization" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call jumpboxServiceDeleteTenant operation
#
##############################################################################
call_jumpboxServiceDeleteTenant() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(tenant_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(is_permanent_delete async  )
    local path

    if ! path=$(build_request_path "/api/v3/tenants/{tenant_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call jumpboxServiceDeleteUser operation
#
##############################################################################
call_jumpboxServiceDeleteUser() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(user_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/users/{user_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call jumpboxServiceGetTenant operation
#
##############################################################################
call_jumpboxServiceGetTenant() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(tenant_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(include_inactive include_not_ready  )
    local path

    if ! path=$(build_request_path "/api/v3/tenants/{tenant_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call jumpboxServiceGetTenants operation
#
##############################################################################
call_jumpboxServiceGetTenants() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(uid external_id include_inactive include_not_ready    )
    local path

    if ! path=$(build_request_path "/api/v3/tenants" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call jumpboxServiceGetUsers operation
#
##############################################################################
call_jumpboxServiceGetUsers() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(uid    )
    local path

    if ! path=$(build_request_path "/api/v3/users" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call jumpboxServicePostTenants operation
#
##############################################################################
call_jumpboxServicePostTenants() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/tenants" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call jumpboxServicePostUsers operation
#
##############################################################################
call_jumpboxServicePostUsers() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/users" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call jumpboxServiceSearchUsers operation
#
##############################################################################
call_jumpboxServiceSearchUsers() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/users/search" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call jumpboxServiceTestUser operation
#
##############################################################################
call_jumpboxServiceTestUser() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/users/test" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call jumpboxServiceUpdateTenant operation
#
##############################################################################
call_jumpboxServiceUpdateTenant() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(tenant_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v3/tenants/{tenant_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call jumpboxServiceUpdateUsers operation
#
##############################################################################
call_jumpboxServiceUpdateUsers() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/users" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call notificationsServiceCreateTicket operation
#
##############################################################################
call_notificationsServiceCreateTicket() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/integrations/ticket" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call notificationsServiceGetFolders operation
#
##############################################################################
call_notificationsServiceGetFolders() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/integrations/folders" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call notificationsServiceGetNotificationFilename operation
#
##############################################################################
call_notificationsServiceGetNotificationFilename() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(notification_id    )
    local path

    if ! path=$(build_request_path "/api/v3/notifications/filename" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call notificationsServiceGetNotificationRecord operation
#
##############################################################################
call_notificationsServiceGetNotificationRecord() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(notification_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/notifications/details/{notification_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call notificationsServiceGetNotificationRecords operation
#
##############################################################################
call_notificationsServiceGetNotificationRecords() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(filter.start_time filter.end_time filter.state filter.origins filter.origin_data offset limit include_filter_counts    )
    local path

    if ! path=$(build_request_path "/api/v3/notifications" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call notificationsServiceGetTicketStatus operation
#
##############################################################################
call_notificationsServiceGetTicketStatus() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(ticket_id integration_id    )
    local path

    if ! path=$(build_request_path "/api/v3/integrations/ticket/status" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call notificationsServiceTestIntegration operation
#
##############################################################################
call_notificationsServiceTestIntegration() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/integrations/test" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call notificationsServiceUpdateNotificationRecord operation
#
##############################################################################
call_notificationsServiceUpdateNotificationRecord() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/notifications" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call outliersEngineGetSourceStatistics operation
#
##############################################################################
call_outliersEngineGetSourceStatistics() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(source.server_ip source.database_name source.db_user attributes_limit    )
    local path

    if ! path=$(build_request_path "/api/v3/outliers/source/statistics" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call outliersEngineGetStatistics operation
#
##############################################################################
call_outliersEngineGetStatistics() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/outliers/statistics" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call outliersEngineGetWorkingHoursPeriods operation
#
##############################################################################
call_outliersEngineGetWorkingHoursPeriods() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/outliers/working_hours_periods" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call outliersEngineRunSimulator operation
#
##############################################################################
call_outliersEngineRunSimulator() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/outliers/simulator" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call outliersEngineUpdateWorkingHoursPeriods operation
#
##############################################################################
call_outliersEngineUpdateWorkingHoursPeriods() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/outliers/working_hours_periods" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call outliersEngineUploadAndAnalyzePeriod operation
#
##############################################################################
call_outliersEngineUploadAndAnalyzePeriod() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/outliers" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call outliersEngineUserClustering operation
#
##############################################################################
call_outliersEngineUserClustering() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/outliers/clusters" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call pipelineconfigServiceDeleteTenantResources operation
#
##############################################################################
call_pipelineconfigServiceDeleteTenantResources() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(tenant_id resource)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v3/resources/{tenant_id}/{resource}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call policyBuilderClonePolicy operation
#
##############################################################################
call_policyBuilderClonePolicy() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(policy_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/policies/clone/{policy_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call policyBuilderCreatePolicy operation
#
##############################################################################
call_policyBuilderCreatePolicy() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/policies" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call policyBuilderDeleteGdpSyncEntry operation
#
##############################################################################
call_policyBuilderDeleteGdpSyncEntry() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(sync_ids    )
    local path

    if ! path=$(build_request_path "/api/v3/policies/sync_entry" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call policyBuilderDeletePolicies operation
#
##############################################################################
call_policyBuilderDeletePolicies() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(policy_ids    )
    local path

    if ! path=$(build_request_path "/api/v3/policies" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call policyBuilderGetGdpPolicyMetaData operation
#
##############################################################################
call_policyBuilderGetGdpPolicyMetaData() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/policies/metadata_list" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call policyBuilderGetPolicies operation
#
##############################################################################
call_policyBuilderGetPolicies() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/policies" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call policyBuilderGetPolicyDetails operation
#
##############################################################################
call_policyBuilderGetPolicyDetails() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(policy_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/policies/{policy_id}/details" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call policyBuilderGetPolicyNamesFromRuleIDs operation
#
##############################################################################
call_policyBuilderGetPolicyNamesFromRuleIDs() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/policies/policy_names" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call policyBuilderGetPolicySyncList operation
#
##############################################################################
call_policyBuilderGetPolicySyncList() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/policies/sync_list" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call policyBuilderGetReceivers operation
#
##############################################################################
call_policyBuilderGetReceivers() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(action_id validate_cache    )
    local path

    if ! path=$(build_request_path "/api/v3/policies/receivers" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call policyBuilderGetRuleMetadata operation
#
##############################################################################
call_policyBuilderGetRuleMetadata() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(rule_type    )
    local path

    if ! path=$(build_request_path "/api/v3/rules/metadata" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call policyBuilderInsertGdpPolicy operation
#
##############################################################################
call_policyBuilderInsertGdpPolicy() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/policies/sync_entry" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call policyBuilderInsertGdpPolicyMetaData operation
#
##############################################################################
call_policyBuilderInsertGdpPolicyMetaData() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(central_manager_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/central_managers/{central_manager_id}/policies/policy_metadata" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call policyBuilderInstallPolicies operation
#
##############################################################################
call_policyBuilderInstallPolicies() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/policies/install" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call policyBuilderIntegrationCheck operation
#
##############################################################################
call_policyBuilderIntegrationCheck() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(integration_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(template_id    )
    local path

    if ! path=$(build_request_path "/api/v3/policies/integration_check/{integration_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call policyBuilderPoliciesGroups operation
#
##############################################################################
call_policyBuilderPoliciesGroups() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(group_ids    )
    local path

    if ! path=$(build_request_path "/api/v3/policies/groups" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call policyBuilderRuleValidation operation
#
##############################################################################
call_policyBuilderRuleValidation() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/rules/validate" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call policyBuilderStorePoliciesGdp operation
#
##############################################################################
call_policyBuilderStorePoliciesGdp() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(central_manager_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/policies/{central_manager_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call qSDataManagerGetMasterData operation
#
##############################################################################
call_qSDataManagerGetMasterData() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/datamanager/master-data" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call qSDataManagerRegisterScan operation
#
##############################################################################
call_qSDataManagerRegisterScan() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/datamanager/scan" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call qSDataManagerRetrieveScan operation
#
##############################################################################
call_qSDataManagerRetrieveScan() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(scan_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/datamanager/scan/{scan_id}/data" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call qSPluginManagerInvokeAppProv operation
#
##############################################################################
call_qSPluginManagerInvokeAppProv() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(plugin_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/plugins/{plugin_id}/application" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call qSPluginManagerInvokeExplorerV1 operation
#
##############################################################################
call_qSPluginManagerInvokeExplorerV1() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(plugin_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/plugins/{plugin_id}/explorer" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call qSPluginManagerInvokeExplorerV2 operation
#
##############################################################################
call_qSPluginManagerInvokeExplorerV2() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(plugin_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/plugins/{plugin_id}/explorer/analytics" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call qSPluginManagerInvokePlugin operation
#
##############################################################################
call_qSPluginManagerInvokePlugin() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(plugin_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/plugins/{plugin_id}/network" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call qSPluginManagerInvokePolicy operation
#
##############################################################################
call_qSPluginManagerInvokePolicy() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(plugin_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/plugins/{plugin_id}/policy" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call qSPolicyManagerBatchStatusUpdate operation
#
##############################################################################
call_qSPolicyManagerBatchStatusUpdate() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/policy_manager/tickets/status" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call qSPolicyManagerCreateTicket operation
#
##############################################################################
call_qSPolicyManagerCreateTicket() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/policy_manager/ticket" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call qSPolicyManagerFetchFilesfromBuckets operation
#
##############################################################################
call_qSPolicyManagerFetchFilesfromBuckets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/policy_manager/os-files" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call qSPolicyManagerProcessPolicyDimentionRecords operation
#
##############################################################################
call_qSPolicyManagerProcessPolicyDimentionRecords() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/policy_manager/policy/process" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call qSPolicyManagerUpdateTicketStatus operation
#
##############################################################################
call_qSPolicyManagerUpdateTicketStatus() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/policy_manager/ticket/status" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call reportsRunnerGetActiveQueries operation
#
##############################################################################
call_reportsRunnerGetActiveQueries() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/queries/search" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call reportsRunnerGetAuditDataCount operation
#
##############################################################################
call_reportsRunnerGetAuditDataCount() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(report_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/reports/{report_id}/audit_count" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call reportsRunnerGetChartData operation
#
##############################################################################
call_reportsRunnerGetChartData() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/charts/run" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call reportsRunnerGetChartDatav2 operation
#
##############################################################################
call_reportsRunnerGetChartDatav2() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/flex-charts/run" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call reportsRunnerGetReportColumnFacet operation
#
##############################################################################
call_reportsRunnerGetReportColumnFacet() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/reports/facet" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call reportsRunnerGetReportDataCount operation
#
##############################################################################
call_reportsRunnerGetReportDataCount() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/reports/count" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call reportsRunnerRunAuditReport operation
#
##############################################################################
call_reportsRunnerRunAuditReport() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(report_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/audit/{report_id}/run" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call reportsRunnerRunReport operation
#
##############################################################################
call_reportsRunnerRunReport() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/reports/run" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call reportsRunnerStopQuery operation
#
##############################################################################
call_reportsRunnerStopQuery() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/queries/stop" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call reportsServiceCreateCategory operation
#
##############################################################################
call_reportsServiceCreateCategory() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/reports/categories" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call reportsServiceCreateChart operation
#
##############################################################################
call_reportsServiceCreateChart() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/charts" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call reportsServiceCreateChartTemplatev2 operation
#
##############################################################################
call_reportsServiceCreateChartTemplatev2() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/flex-charts/templates" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call reportsServiceCreateChartv2 operation
#
##############################################################################
call_reportsServiceCreateChartv2() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/flex-charts" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call reportsServiceCreateFieldsByCategory operation
#
##############################################################################
call_reportsServiceCreateFieldsByCategory() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/reports/fields" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call reportsServiceCreateJoin operation
#
##############################################################################
call_reportsServiceCreateJoin() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/reports/categories/joins" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call reportsServiceCreateReport operation
#
##############################################################################
call_reportsServiceCreateReport() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/reports" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call reportsServiceCreateVariant operation
#
##############################################################################
call_reportsServiceCreateVariant() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/reports/variants" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call reportsServiceDeleteCategory operation
#
##############################################################################
call_reportsServiceDeleteCategory() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(category_id table_name    )
    local path

    if ! path=$(build_request_path "/api/v3/reports/categories" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call reportsServiceDeleteChart operation
#
##############################################################################
call_reportsServiceDeleteChart() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(chart_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/charts/{chart_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call reportsServiceDeleteChartTemplatev2 operation
#
##############################################################################
call_reportsServiceDeleteChartTemplatev2() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(template_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/flex-charts/templates/{template_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call reportsServiceDeleteChartv2 operation
#
##############################################################################
call_reportsServiceDeleteChartv2() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(chart_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/flex-charts/{chart_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call reportsServiceDeleteFieldsByCategory operation
#
##############################################################################
call_reportsServiceDeleteFieldsByCategory() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(header_ids table_name    )
    local path

    if ! path=$(build_request_path "/api/v3/reports/fields" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call reportsServiceDeleteJoin operation
#
##############################################################################
call_reportsServiceDeleteJoin() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(join_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/reports/categories/joins/{join_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call reportsServiceDeleteReport operation
#
##############################################################################
call_reportsServiceDeleteReport() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(report_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/reports/{report_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call reportsServiceDeleteVariant operation
#
##############################################################################
call_reportsServiceDeleteVariant() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(variant_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/reports/variants/{variant_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call reportsServiceGetCategories operation
#
##############################################################################
call_reportsServiceGetCategories() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(report_id    )
    local path

    if ! path=$(build_request_path "/api/v3/reports/categories" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call reportsServiceGetChartSettings operation
#
##############################################################################
call_reportsServiceGetChartSettings() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(chart_id report_id    )
    local path

    if ! path=$(build_request_path "/api/v3/charts" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call reportsServiceGetChartSettingsv2 operation
#
##############################################################################
call_reportsServiceGetChartSettingsv2() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(chart_id report_id    )
    local path

    if ! path=$(build_request_path "/api/v3/flex-charts" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call reportsServiceGetChartTemplatesv2 operation
#
##############################################################################
call_reportsServiceGetChartTemplatesv2() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/flex-charts/templates" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call reportsServiceGetFieldsByCategories operation
#
##############################################################################
call_reportsServiceGetFieldsByCategories() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(category_ids    )
    local path

    if ! path=$(build_request_path "/api/v3/reports/fields/categories" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call reportsServiceGetFieldsByCategory operation
#
##############################################################################
call_reportsServiceGetFieldsByCategory() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(category_id report_id table_name    )
    local path

    if ! path=$(build_request_path "/api/v3/reports/fields" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call reportsServiceGetJoins operation
#
##############################################################################
call_reportsServiceGetJoins() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(category_id    )
    local path

    if ! path=$(build_request_path "/api/v3/reports/categories/joins" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call reportsServiceGetQueryByReportDefinition operation
#
##############################################################################
call_reportsServiceGetQueryByReportDefinition() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/reports/query/definition" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call reportsServiceGetQueryByReportID operation
#
##############################################################################
call_reportsServiceGetQueryByReportID() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/reports/query/id" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call reportsServiceGetReportDefinition operation
#
##############################################################################
call_reportsServiceGetReportDefinition() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(report_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/reports/{report_id}/definition" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call reportsServiceGetReportGroups operation
#
##############################################################################
call_reportsServiceGetReportGroups() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(groups    )
    local path

    if ! path=$(build_request_path "/api/v3/reports_groups" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call reportsServiceGetReportSynopsis operation
#
##############################################################################
call_reportsServiceGetReportSynopsis() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(report_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/reports/{report_id}/synopsis" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call reportsServiceGetReportTimestampHeader operation
#
##############################################################################
call_reportsServiceGetReportTimestampHeader() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(category_id table_names    )
    local path

    if ! path=$(build_request_path "/api/v3/reports/headers/timestamp/default" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call reportsServiceGetReports operation
#
##############################################################################
call_reportsServiceGetReports() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(category_id table_name    )
    local path

    if ! path=$(build_request_path "/api/v3/reports" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call reportsServiceGetReportsForJoin operation
#
##############################################################################
call_reportsServiceGetReportsForJoin() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(join_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/reports/categories/joins/{join_id}/reports" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call reportsServiceGetReportsTags operation
#
##############################################################################
call_reportsServiceGetReportsTags() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/reports/tags" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call reportsServiceGetVariant operation
#
##############################################################################
call_reportsServiceGetVariant() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(variant_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/reports/variants/{variant_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call reportsServiceGetVariants operation
#
##############################################################################
call_reportsServiceGetVariants() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/reports/variants" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call reportsServicePartialChartUpdate operation
#
##############################################################################
call_reportsServicePartialChartUpdate() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(chart_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/charts/{chart_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call reportsServicePartialReportUpdate operation
#
##############################################################################
call_reportsServicePartialReportUpdate() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(report_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/reports/{report_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call reportsServiceRunVariantOperation operation
#
##############################################################################
call_reportsServiceRunVariantOperation() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/reports/variants/run" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call reportsServiceTranspose operation
#
##############################################################################
call_reportsServiceTranspose() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/reports/transpose" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call reportsServiceUpdateChart operation
#
##############################################################################
call_reportsServiceUpdateChart() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(chart_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/charts/{chart_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call reportsServiceUpdateChartv2 operation
#
##############################################################################
call_reportsServiceUpdateChartv2() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(chart_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/flex-charts/{chart_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call reportsServiceUpdateJoin operation
#
##############################################################################
call_reportsServiceUpdateJoin() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(join_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/reports/categories/joins/{join_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call reportsServiceUpdateReport operation
#
##############################################################################
call_reportsServiceUpdateReport() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(report_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/reports/{report_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call reportsServiceUpdateVariantOverride operation
#
##############################################################################
call_reportsServiceUpdateVariantOverride() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(variant_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/reports/variants/{variant_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call riskAnalyticsControllerEnableDisableRiskEventFeedback operation
#
##############################################################################
call_riskAnalyticsControllerEnableDisableRiskEventFeedback() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/risk_feedback/status" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call riskAnalyticsControllerEnableDisableRiskEventProcess operation
#
##############################################################################
call_riskAnalyticsControllerEnableDisableRiskEventProcess() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/risk_process/status" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call riskAnalyticsControllerGetAllClassificationsList operation
#
##############################################################################
call_riskAnalyticsControllerGetAllClassificationsList() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/risk_events/classifications" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call riskAnalyticsControllerGetRiskEventClassificationsList operation
#
##############################################################################
call_riskAnalyticsControllerGetRiskEventClassificationsList() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(risk_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/risk_events/feedback/{risk_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call riskAnalyticsControllerGetRiskEventDataForSummarization operation
#
##############################################################################
call_riskAnalyticsControllerGetRiskEventDataForSummarization() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(risk_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(include_indicators num_findings_limit    )
    local path

    if ! path=$(build_request_path "/api/v3/risk_events/summarization/data/{risk_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call riskAnalyticsControllerGetRiskEventDetails operation
#
##############################################################################
call_riskAnalyticsControllerGetRiskEventDetails() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(risk_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/risk_events/details/{risk_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call riskAnalyticsControllerGetRiskEventProcessStatus operation
#
##############################################################################
call_riskAnalyticsControllerGetRiskEventProcessStatus() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/risk_process/status" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call riskAnalyticsControllerGetRiskEventRow operation
#
##############################################################################
call_riskAnalyticsControllerGetRiskEventRow() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(status date_from date_to pivot.type pivot.id pivot.db_user pivot.database pivot.server_ip pivot.os_user pivot.database_source_field    )
    local path

    if ! path=$(build_request_path "/api/v3/risk_events" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call riskAnalyticsControllerGetRiskEventVulnerabilityAssessmentDetails operation
#
##############################################################################
call_riskAnalyticsControllerGetRiskEventVulnerabilityAssessmentDetails() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(risk_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/risk_events/va/{risk_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call riskAnalyticsControllerGetRiskFeedback operation
#
##############################################################################
call_riskAnalyticsControllerGetRiskFeedback() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/risk_events/feedback" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call riskAnalyticsControllerGetRiskObservationDetails operation
#
##############################################################################
call_riskAnalyticsControllerGetRiskObservationDetails() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(lead_feature_id observation_type    )
    local path

    if ! path=$(build_request_path "/api/v3/risk_events/observations" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call riskAnalyticsControllerGetUserUISettings operation
#
##############################################################################
call_riskAnalyticsControllerGetUserUISettings() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/risk_events/user_ui_settings" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call riskAnalyticsControllerRiskEventTuning operation
#
##############################################################################
call_riskAnalyticsControllerRiskEventTuning() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/risk_events/tuning" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call riskAnalyticsControllerSetRiskEventStatus operation
#
##############################################################################
call_riskAnalyticsControllerSetRiskEventStatus() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/risk_events/status" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call riskAnalyticsControllerSetUserUISettings operation
#
##############################################################################
call_riskAnalyticsControllerSetUserUISettings() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/risk_events/user_ui_settings" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call riskAnalyticsControllerUpdateRiskFeedback operation
#
##############################################################################
call_riskAnalyticsControllerUpdateRiskFeedback() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/risk_events/feedback" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call riskAnalyticsDataProcessorGetRiskContext operation
#
##############################################################################
call_riskAnalyticsDataProcessorGetRiskContext() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(risk_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(timezone    )
    local path

    if ! path=$(build_request_path "/api/v3/risk_events/context/{risk_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call riskAnalyticsDataProcessorGetRiskPredefinedQuestions operation
#
##############################################################################
call_riskAnalyticsDataProcessorGetRiskPredefinedQuestions() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(risk_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/risk_events/{risk_id}/questions" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call riskAnalyticsEngineGetLeadGeneratorConfig operation
#
##############################################################################
call_riskAnalyticsEngineGetLeadGeneratorConfig() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/risk/lead_generator" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call riskAnalyticsEngineUpdateLeadGeneratorConfig operation
#
##############################################################################
call_riskAnalyticsEngineUpdateLeadGeneratorConfig() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/risk/lead_generator" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call riskAnalyticsMlClassificationResetModelToDefaults operation
#
##############################################################################
call_riskAnalyticsMlClassificationResetModelToDefaults() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/classification/ml/models/reset" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call schedulerServiceCreateScheduledJob operation
#
##############################################################################
call_schedulerServiceCreateScheduledJob() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/schedules" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call schedulerServiceDeleteScheduledJob operation
#
##############################################################################
call_schedulerServiceDeleteScheduledJob() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(schedule_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/schedules/{schedule_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call schedulerServiceGetDependencies operation
#
##############################################################################
call_schedulerServiceGetDependencies() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(config_type    )
    local path

    if ! path=$(build_request_path "/api/v3/schedules/dependencies" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call schedulerServiceGetDistributionRules operation
#
##############################################################################
call_schedulerServiceGetDistributionRules() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/schedules/distribution_rules" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call schedulerServiceGetScheduledJobDetails operation
#
##############################################################################
call_schedulerServiceGetScheduledJobDetails() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(schedule_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/schedules/{schedule_id}/details" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call schedulerServiceGetScheduledJobs operation
#
##############################################################################
call_schedulerServiceGetScheduledJobs() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(Offset Limit    )
    local path

    if ! path=$(build_request_path "/api/v3/schedules" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call schedulerServiceGetSchedulesByReport operation
#
##############################################################################
call_schedulerServiceGetSchedulesByReport() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(report_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/schedules/searchByReport/{report_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call schedulerServiceGetTags operation
#
##############################################################################
call_schedulerServiceGetTags() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/schedules/tags" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call schedulerServiceSearchScheduledJobs operation
#
##############################################################################
call_schedulerServiceSearchScheduledJobs() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/schedules/search" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call schedulerServiceSearchScheduledTaskRuns operation
#
##############################################################################
call_schedulerServiceSearchScheduledTaskRuns() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/schedules/runs/search" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call schedulerServiceUpdateScheduledJob operation
#
##############################################################################
call_schedulerServiceUpdateScheduledJob() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(schedule_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/schedules/{schedule_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call snifAssistServiceTestRegex operation
#
##############################################################################
call_snifAssistServiceTestRegex() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/snif/test_regex" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call streamsServiceCheckAWSCredentials operation
#
##############################################################################
call_streamsServiceCheckAWSCredentials() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/streams/credentials" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call streamsServiceCheckAzureEventHub operation
#
##############################################################################
call_streamsServiceCheckAzureEventHub() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/streams/azure_eventhub" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call streamsServiceCheckAzureStorageString operation
#
##############################################################################
call_streamsServiceCheckAzureStorageString() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v3/streams/azure_storage" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call streamsServiceGetAWSRegions operation
#
##############################################################################
call_streamsServiceGetAWSRegions() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/streams/regions" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call streamsServiceListAWSStreams operation
#
##############################################################################
call_streamsServiceListAWSStreams() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/streams" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call templatesServiceCreateIntegration operation
#
##############################################################################
call_templatesServiceCreateIntegration() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/templates/integration" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call templatesServiceCreateTemplate operation
#
##############################################################################
call_templatesServiceCreateTemplate() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/templates" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call templatesServiceDeleteIntegration operation
#
##############################################################################
call_templatesServiceDeleteIntegration() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(integration_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/templates/integrations/{integration_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call templatesServiceDeleteTemplate operation
#
##############################################################################
call_templatesServiceDeleteTemplate() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(template_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/templates/{template_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call templatesServiceGetOriginDefaultContent operation
#
##############################################################################
call_templatesServiceGetOriginDefaultContent() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(origin)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(integration mime_type    )
    local path

    if ! path=$(build_request_path "/api/v3/templates/origins/{origin}/content" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call templatesServiceGetOriginFields operation
#
##############################################################################
call_templatesServiceGetOriginFields() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(origin)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/templates/origins/{origin}/fields" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call templatesServiceGetTemplate operation
#
##############################################################################
call_templatesServiceGetTemplate() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(template_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(include_integration_name    )
    local path

    if ! path=$(build_request_path "/api/v3/templates/{template_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call templatesServiceGetTemplates operation
#
##############################################################################
call_templatesServiceGetTemplates() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(integration_id filter_integration filter_origin filter_mime_type filter_tags filter_enabled_only include_integration_name    )
    local path

    if ! path=$(build_request_path "/api/v3/templates" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call templatesServiceTestTemplate operation
#
##############################################################################
call_templatesServiceTestTemplate() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/templates/test" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call templatesServiceTransformTemplate operation
#
##############################################################################
call_templatesServiceTransformTemplate() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/templates/transform" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call templatesServiceTransformTemplateJSON operation
#
##############################################################################
call_templatesServiceTransformTemplateJSON() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/templates/transformjson" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call templatesServiceUpdateTemplate operation
#
##############################################################################
call_templatesServiceUpdateTemplate() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(template_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/templates/{template_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call tenantuserCreateAPIKey operation
#
##############################################################################
call_tenantuserCreateAPIKey() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v3/apikeys" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call tenantuserDeleteAPIKey operation
#
##############################################################################
call_tenantuserDeleteAPIKey() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v3/apikeys/{id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call tenantuserDeleteRole operation
#
##############################################################################
call_tenantuserDeleteRole() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(role_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/roles/{role_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="DELETE"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call tenantuserGetAPIKeys operation
#
##############################################################################
call_tenantuserGetAPIKeys() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v3/apikeys" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call tenantuserGetCurrentUser operation
#
##############################################################################
call_tenantuserGetCurrentUser() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/currentuser" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call tenantuserGetPrivilege operation
#
##############################################################################
call_tenantuserGetPrivilege() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(privilege.privilege_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(privilege.type    )
    local path

    if ! path=$(build_request_path "/api/v3/privileges/{privilege.privilege_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call tenantuserGetPrivileges operation
#
##############################################################################
call_tenantuserGetPrivileges() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(roles type    )
    local path

    if ! path=$(build_request_path "/api/v3/privileges" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call tenantuserGetRole operation
#
##############################################################################
call_tenantuserGetRole() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(role_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/roles/{role_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call tenantuserGetRoles operation
#
##############################################################################
call_tenantuserGetRoles() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/roles" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call tenantuserGetUser operation
#
##############################################################################
call_tenantuserGetUser() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(user_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/users/user/{user_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call tenantuserGetUserNames operation
#
##############################################################################
call_tenantuserGetUserNames() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/users/names" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call tenantuserGetUserTenant operation
#
##############################################################################
call_tenantuserGetUserTenant() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(user_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/users/tenant/{user_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call tenantuserPostPrivilegesBulk operation
#
##############################################################################
call_tenantuserPostPrivilegesBulk() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/privileges" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call tenantuserPostRole operation
#
##############################################################################
call_tenantuserPostRole() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/roles" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call tenantuserUpdatePrivilege operation
#
##############################################################################
call_tenantuserUpdatePrivilege() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(privilege_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/privileges/{privilege_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call tenantuserUpdatePrivilegesRoleBulk operation
#
##############################################################################
call_tenantuserUpdatePrivilegesRoleBulk() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/privileges" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call tenantuserUpdateRole operation
#
##############################################################################
call_tenantuserUpdateRole() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(role_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/roles/{role_id}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call tenantuserUpdateUserRoleBulk operation
#
##############################################################################
call_tenantuserUpdateUserRoleBulk() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/users/role" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PATCH"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call getLinkedVendor operation
#
##############################################################################
call_getLinkedVendor() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(vendorId)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/linkedVendors/{vendorId}/cloudAccounts" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call getSingleLinkedVendor operation
#
##############################################################################
call_getSingleLinkedVendor() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(vendorId)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/linkedVendors/{vendorId}" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call listLinkedVendorDataStores operation
#
##############################################################################
call_listLinkedVendorDataStores() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(vendorId)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(filter sort pageSize nextToken  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/linkedVendors/{vendorId}/dataStores" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call listLinkedVendors operation
#
##############################################################################
call_listLinkedVendors() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/linkedVendors" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call listTrustedAssets operation
#
##############################################################################
call_listTrustedAssets() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(filter  )
    local path

    if ! path=$(build_request_path "/api/v1/dspm/linkedVendors/trustedAssets" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call universalConnectorManagerGetCertificate operation
#
##############################################################################
call_universalConnectorManagerGetCertificate() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/certificates" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call universalConnectorManagerGetConnectors operation
#
##############################################################################
call_universalConnectorManagerGetConnectors() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/connectors" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call universalConnectorManagerListConnectionsSummary operation
#
##############################################################################
call_universalConnectorManagerListConnectionsSummary() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/universal_connections" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call universalConnectorManagerPluginsList operation
#
##############################################################################
call_universalConnectorManagerPluginsList() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/plugins" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call universalConnectorManagerUploadPlugin operation
#
##############################################################################
call_universalConnectorManagerUploadPlugin() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/plugins" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call workflowCreateCase operation
#
##############################################################################
call_workflowCreateCase() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/cases" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call workflowCreateTask operation
#
##############################################################################
call_workflowCreateTask() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(case_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/cases/{case_id}/tasks" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call workflowGetCases operation
#
##############################################################################
call_workflowGetCases() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(case_id sort_by offset limit    )
    local path

    if ! path=$(build_request_path "/api/v3/cases" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call workflowGetCasesCount operation
#
##############################################################################
call_workflowGetCasesCount() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/cases/count" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call workflowGetFilename operation
#
##############################################################################
call_workflowGetFilename() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(case_id task_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/cases/{case_id}/tasks/{task_id}/filename" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call workflowGetJobsCount operation
#
##############################################################################
call_workflowGetJobsCount() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(case_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/cases/{case_id}/jobs/count" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call workflowGetReportResult operation
#
##############################################################################
call_workflowGetReportResult() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(case_id task_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(offset limit    )
    local path

    if ! path=$(build_request_path "/api/v3/cases/{case_id}/tasks/{task_id}/result" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call workflowGetTasks operation
#
##############################################################################
call_workflowGetTasks() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(case_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(task_id    )
    local path

    if ! path=$(build_request_path "/api/v3/cases/{case_id}/tasks" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="GET"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    if [[ "$print_curl" = true ]]; then
        echo "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    else
        eval "curl -d '' ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\""
    fi
}

##############################################################################
#
# Call workflowGetTasksCount operation
#
##############################################################################
call_workflowGetTasksCount() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(case_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/cases/{case_id}/tasks/count" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call workflowSearchCases operation
#
##############################################################################
call_workflowSearchCases() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/cases/search" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call workflowSearchReports operation
#
##############################################################################
call_workflowSearchReports() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/cases/reports" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call workflowSearchTasks operation
#
##############################################################################
call_workflowSearchTasks() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(case_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/cases/{case_id}/tasks/search" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="POST"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call workflowUpdateCases operation
#
##############################################################################
call_workflowUpdateCases() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=()
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/cases" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}

##############################################################################
#
# Call workflowUpdateTasks operation
#
##############################################################################
call_workflowUpdateTasks() {
    # ignore error about 'path_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local path_parameter_names=(case_id)
    # ignore error about 'query_parameter_names' being unused; passed by reference
    # shellcheck disable=SC2034
    local query_parameter_names=(    )
    local path

    if ! path=$(build_request_path "/api/v3/cases/{case_id}/tasks" path_parameter_names query_parameter_names); then
        ERROR_MSG=$path
        exit 1
    fi
    local method="PUT"
    local headers_curl
    headers_curl=$(header_arguments_to_curl)
    if [[ -n $header_accept ]]; then
        headers_curl="${headers_curl} -H 'Accept: ${header_accept}'"
    fi

    local basic_auth_option=""
    if [[ -n $basic_auth_credential ]]; then
        basic_auth_option="-u ${basic_auth_credential}"
    fi
    local body_json_curl=""

    #
    # Check if the user provided 'Content-type' headers in the
    # command line. If not try to set them based on the OpenAPI specification
    # if values produces and consumes are defined unambiguously
    #
    if [[ -z $header_content_type ]]; then
        header_content_type="application/json"
    fi


    if [[ -z $header_content_type && "$force" = false ]]; then
        :
        echo "ERROR: Request's content-type not specified!!!"
        echo "This operation expects content-type in one of the following formats:"
        echo -e "\\t- application/json"
        echo ""
        echo "Use '--content-type' to set proper content type"
        exit 1
    else
        headers_curl="${headers_curl} -H 'Content-type: ${header_content_type}'"
    fi


    #
    # If we have received some body content over pipe, pass it from the
    # temporary file to cURL
    #
    if [[ -n $body_content_temp_file ]]; then
        if [[ "$print_curl" = true ]]; then
            echo "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        else
            eval "cat ${body_content_temp_file} | curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} \"${host}${path}\" -d @-"
        fi
        rm "${body_content_temp_file}"
    #
    # If not, try to build the content body from arguments KEY==VALUE and KEY:=VALUE
    #
    else
        body_json_curl=$(body_parameters_to_json)
        if [[ "$print_curl" = true ]]; then
            echo "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        else
            eval "curl ${basic_auth_option} ${curl_arguments} ${headers_curl} -X ${method} ${body_json_curl} \"${host}${path}\""
        fi
    fi
}



##############################################################################
#
# Main
#
##############################################################################


# Check dependencies
type curl >/dev/null 2>&1 || { echo >&2 "ERROR: You do not have 'cURL' installed."; exit 1; }
type sed >/dev/null 2>&1 || { echo >&2 "ERROR: You do not have 'sed' installed."; exit 1; }
type column >/dev/null 2>&1 || { echo >&2 "ERROR: You do not have 'bsdmainutils' installed."; exit 1; }

#
# Process command line
#
# Pass all arguments before 'operation' to cURL except the ones we override
#
take_user=false
take_host=false
take_accept_header=false
take_contenttype_header=false

for key in "$@"; do
# Take the value of -u|--user argument
if [[ "$take_user" = true ]]; then
    basic_auth_credential="$key"
    take_user=false
    continue
fi
# Take the value of --host argument
if [[ "$take_host" = true ]]; then
    host="$key"
    take_host=false
    continue
fi
# Take the value of --accept argument
if [[ "$take_accept_header" = true ]]; then
    header_accept=$(lookup_mime_type "$key")
    take_accept_header=false
    continue
fi
# Take the value of --content-type argument
if [[ "$take_contenttype_header" = true ]]; then
    header_content_type=$(lookup_mime_type "$key")
    take_contenttype_header=false
    continue
fi
case $key in
    -h|--help)
    if [[ "x$operation" == "x" ]]; then
        print_help
        exit 0
    else
        eval "print_${operation}_help"
        exit 0
    fi
    ;;
    -V|--version)
    print_version
    exit 0
    ;;
    --about)
    print_about
    exit 0
    ;;
    -u|--user)
    take_user=true
    ;;
    --host)
    take_host=true
    ;;
    --force)
    force=true
    ;;
    -ac|--accept)
    take_accept_header=true
    ;;
    -ct|--content-type)
    take_contenttype_header=true
    ;;
    --dry-run)
    print_curl=true
    ;;
    -nc|--no-colors)
        RED=""
        GREEN=""
        YELLOW=""
        BLUE=""
        MAGENTA=""
        CYAN=""
        WHITE=""
        BOLD=""
        OFF=""
        result_color_table=( "" "" "" "" "" "" "" )
    ;;
    analyticsEventsServiceDeleteCacheKey)
    operation="analyticsEventsServiceDeleteCacheKey"
    ;;
    analyticsEventsServicePostQSAdvisorRisk)
    operation="analyticsEventsServicePostQSAdvisorRisk"
    ;;
    assetsServiceAssetIngestion)
    operation="assetsServiceAssetIngestion"
    ;;
    assetsServiceAssetIngestionManualTrigger)
    operation="assetsServiceAssetIngestionManualTrigger"
    ;;
    assetsServiceClonePolicy)
    operation="assetsServiceClonePolicy"
    ;;
    assetsServiceCreateUpdatePolicy)
    operation="assetsServiceCreateUpdatePolicy"
    ;;
    assetsServiceDeleteFilterTemplateForAssets)
    operation="assetsServiceDeleteFilterTemplateForAssets"
    ;;
    assetsServiceDeletePolicies)
    operation="assetsServiceDeletePolicies"
    ;;
    assetsServiceFetchAssetChangeLog)
    operation="assetsServiceFetchAssetChangeLog"
    ;;
    assetsServiceFetchAssetDashboard)
    operation="assetsServiceFetchAssetDashboard"
    ;;
    assetsServiceFetchAssetList)
    operation="assetsServiceFetchAssetList"
    ;;
    assetsServiceFetchAssetsForMergeSplit)
    operation="assetsServiceFetchAssetsForMergeSplit"
    ;;
    assetsServiceFindAssetName)
    operation="assetsServiceFindAssetName"
    ;;
    assetsServiceGetAssetOverview)
    operation="assetsServiceGetAssetOverview"
    ;;
    assetsServiceGetAssetTopology)
    operation="assetsServiceGetAssetTopology"
    ;;
    assetsServiceGetFilterTemplateForAssets)
    operation="assetsServiceGetFilterTemplateForAssets"
    ;;
    assetsServiceGetFiltersForAssets)
    operation="assetsServiceGetFiltersForAssets"
    ;;
    assetsServiceListPolicy)
    operation="assetsServiceListPolicy"
    ;;
    assetsServiceListRule)
    operation="assetsServiceListRule"
    ;;
    assetsServiceListTagDomains)
    operation="assetsServiceListTagDomains"
    ;;
    assetsServiceListTags)
    operation="assetsServiceListTags"
    ;;
    assetsServiceMergeOrSplitAssets)
    operation="assetsServiceMergeOrSplitAssets"
    ;;
    assetsServiceSaveAssignedTags)
    operation="assetsServiceSaveAssignedTags"
    ;;
    assetsServiceSaveTagConceptData)
    operation="assetsServiceSaveTagConceptData"
    ;;
    assetsServiceSaveTagDomainData)
    operation="assetsServiceSaveTagDomainData"
    ;;
    assetsServiceSaveUpdateFilterTemplateForAssets)
    operation="assetsServiceSaveUpdateFilterTemplateForAssets"
    ;;
    assetsServiceSetBannerState)
    operation="assetsServiceSetBannerState"
    ;;
    assetsServiceUpdateAssetName)
    operation="assetsServiceUpdateAssetName"
    ;;
    assetsServiceUpdatePolicy)
    operation="assetsServiceUpdatePolicy"
    ;;
    auditServiceGetActivityRecords)
    operation="auditServiceGetActivityRecords"
    ;;
    auditServicePutDownloadActivityRecord)
    operation="auditServicePutDownloadActivityRecord"
    ;;
    authServerServiceCreateOauthClient)
    operation="authServerServiceCreateOauthClient"
    ;;
    authServerServiceDeleteOauthClient)
    operation="authServerServiceDeleteOauthClient"
    ;;
    authServerServiceGetAccessToken)
    operation="authServerServiceGetAccessToken"
    ;;
    authServerServiceGetOauthClient)
    operation="authServerServiceGetOauthClient"
    ;;
    authServerServiceGetUser)
    operation="authServerServiceGetUser"
    ;;
    authServerServiceListOauthClient)
    operation="authServerServiceListOauthClient"
    ;;
    addAnalyzedRegion)
    operation="addAnalyzedRegion"
    ;;
    addCloudAccounts)
    operation="addCloudAccounts"
    ;;
    generateAtlassianConfluenceAuthUrl)
    operation="generateAtlassianConfluenceAuthUrl"
    ;;
    generateAtlassianJiraAuthUrl)
    operation="generateAtlassianJiraAuthUrl"
    ;;
    generateAzureAuthUrl)
    operation="generateAzureAuthUrl"
    ;;
    generateOffice365AuthUrl)
    operation="generateOffice365AuthUrl"
    ;;
    generateSlackAuthUrl)
    operation="generateSlackAuthUrl"
    ;;
    generateSnowflakeAuthUrl)
    operation="generateSnowflakeAuthUrl"
    ;;
    getAnalyzedRegionStatus)
    operation="getAnalyzedRegionStatus"
    ;;
    getAzureAdminConsentStatus)
    operation="getAzureAdminConsentStatus"
    ;;
    getCloudAccountInstallationStatus)
    operation="getCloudAccountInstallationStatus"
    ;;
    getRefreshTokenExpiry)
    operation="getRefreshTokenExpiry"
    ;;
    listLinkedAccounts)
    operation="listLinkedAccounts"
    ;;
    removeAccounts)
    operation="removeAccounts"
    ;;
    removeAccountsInstructions)
    operation="removeAccountsInstructions"
    ;;
    retrieveServiceAccountId)
    operation="retrieveServiceAccountId"
    ;;
    snowflakeIntegrationScript)
    operation="snowflakeIntegrationScript"
    ;;
    submitGoogleWorkspaceAdminEmail)
    operation="submitGoogleWorkspaceAdminEmail"
    ;;
    submitOffice365TenantInfo)
    operation="submitOffice365TenantInfo"
    ;;
    submitSlackAuthCode)
    operation="submitSlackAuthCode"
    ;;
    submitSnowflakeAuthCode)
    operation="submitSnowflakeAuthCode"
    ;;
    complianceAcceleratorCreateWorkspace)
    operation="complianceAcceleratorCreateWorkspace"
    ;;
    complianceAcceleratorDeleteComplianceWorkspaces)
    operation="complianceAcceleratorDeleteComplianceWorkspaces"
    ;;
    complianceAcceleratorGetComplianceInfo)
    operation="complianceAcceleratorGetComplianceInfo"
    ;;
    complianceAcceleratorHydrateWorkspace)
    operation="complianceAcceleratorHydrateWorkspace"
    ;;
    complianceAcceleratorStoreComplianceInfo)
    operation="complianceAcceleratorStoreComplianceInfo"
    ;;
    connectionsServiceCreateConnectionsAccounts)
    operation="connectionsServiceCreateConnectionsAccounts"
    ;;
    connectionsServiceCreateConnectionsConfigs)
    operation="connectionsServiceCreateConnectionsConfigs"
    ;;
    connectionsServiceCreatePlugin)
    operation="connectionsServiceCreatePlugin"
    ;;
    connectionsServiceCreateSettings)
    operation="connectionsServiceCreateSettings"
    ;;
    connectionsServiceDeleteConnectionsAccounts)
    operation="connectionsServiceDeleteConnectionsAccounts"
    ;;
    connectionsServiceDeleteConnectionsConfigs)
    operation="connectionsServiceDeleteConnectionsConfigs"
    ;;
    connectionsServiceDeleteConnector)
    operation="connectionsServiceDeleteConnector"
    ;;
    connectionsServiceDeletePlugin)
    operation="connectionsServiceDeletePlugin"
    ;;
    connectionsServiceGetBannerState)
    operation="connectionsServiceGetBannerState"
    ;;
    connectionsServiceGetConnectionsAccounts)
    operation="connectionsServiceGetConnectionsAccounts"
    ;;
    connectionsServiceGetConnectionsConfigs)
    operation="connectionsServiceGetConnectionsConfigs"
    ;;
    connectionsServiceGetConnectionsWithFilters)
    operation="connectionsServiceGetConnectionsWithFilters"
    ;;
    connectionsServiceGetConnectorsSummary)
    operation="connectionsServiceGetConnectorsSummary"
    ;;
    connectionsServiceGetDataSources)
    operation="connectionsServiceGetDataSources"
    ;;
    connectionsServiceGetGuardRecordFields)
    operation="connectionsServiceGetGuardRecordFields"
    ;;
    connectionsServiceGetHeaders)
    operation="connectionsServiceGetHeaders"
    ;;
    connectionsServiceGetPlugins)
    operation="connectionsServiceGetPlugins"
    ;;
    connectionsServiceGetSettings)
    operation="connectionsServiceGetSettings"
    ;;
    connectionsServicePartialUpdateConnectors)
    operation="connectionsServicePartialUpdateConnectors"
    ;;
    connectionsServicePostStapCommand)
    operation="connectionsServicePostStapCommand"
    ;;
    connectionsServiceUpdateBannerState)
    operation="connectionsServiceUpdateBannerState"
    ;;
    connectionsServiceUpdateConnectionsAccounts)
    operation="connectionsServiceUpdateConnectionsAccounts"
    ;;
    connectionsServiceUpdateConnectionsConfigs)
    operation="connectionsServiceUpdateConnectionsConfigs"
    ;;
    connectionsServiceUpdateConnectors)
    operation="connectionsServiceUpdateConnectors"
    ;;
    connectionsServiceUpdatePlugin)
    operation="connectionsServiceUpdatePlugin"
    ;;
    connectionsServiceUpdateSettings)
    operation="connectionsServiceUpdateSettings"
    ;;
    dashboardsServiceCreateDashboard)
    operation="dashboardsServiceCreateDashboard"
    ;;
    dashboardsServiceDeleteDashboard)
    operation="dashboardsServiceDeleteDashboard"
    ;;
    dashboardsServiceGetDashboards)
    operation="dashboardsServiceGetDashboards"
    ;;
    dashboardsServiceUpdateDashboard)
    operation="dashboardsServiceUpdateDashboard"
    ;;
    getActualFlow)
    operation="getActualFlow"
    ;;
    getActualFlowsSummary)
    operation="getActualFlowsSummary"
    ;;
    getPotentialFlow)
    operation="getPotentialFlow"
    ;;
    getPotentialFlowPath)
    operation="getPotentialFlowPath"
    ;;
    getPotentialFlowsSummary)
    operation="getPotentialFlowsSummary"
    ;;
    listActualFlowPaths)
    operation="listActualFlowPaths"
    ;;
    listActualFlows)
    operation="listActualFlows"
    ;;
    listPotentialFlows)
    operation="listPotentialFlows"
    ;;
    listPotentialFlowsPaths)
    operation="listPotentialFlowsPaths"
    ;;
    getDataResource)
    operation="getDataResource"
    ;;
    getDataResourcesSummary)
    operation="getDataResourcesSummary"
    ;;
    listDataResources)
    operation="listDataResources"
    ;;
    listDataResourcesNames)
    operation="listDataResourcesNames"
    ;;
    removeResource)
    operation="removeResource"
    ;;
    updateResourceReviewStatus)
    operation="updateResourceReviewStatus"
    ;;
    getSensitivitiesSummary)
    operation="getSensitivitiesSummary"
    ;;
    getSensitivity)
    operation="getSensitivity"
    ;;
    listSensitivities)
    operation="listSensitivities"
    ;;
    getDataStore)
    operation="getDataStore"
    ;;
    getDataStoresSummary)
    operation="getDataStoresSummary"
    ;;
    listAllDataStoresLabels)
    operation="listAllDataStoresLabels"
    ;;
    listDataStores)
    operation="listDataStores"
    ;;
    listDataStoresCloudTagsKeys)
    operation="listDataStoresCloudTagsKeys"
    ;;
    listDataStoresCloudTagsValues)
    operation="listDataStoresCloudTagsValues"
    ;;
    listDataStoresNames)
    operation="listDataStoresNames"
    ;;
    rescanDataStore)
    operation="rescanDataStore"
    ;;
    setDataStoreLabel)
    operation="setDataStoreLabel"
    ;;
    updateDatastoreCustodian)
    operation="updateDatastoreCustodian"
    ;;
    addVulnerabilityStatusComment)
    operation="addVulnerabilityStatusComment"
    ;;
    getVulnerabilitiesSummary)
    operation="getVulnerabilitiesSummary"
    ;;
    getVulnerability)
    operation="getVulnerability"
    ;;
    listVulnerabilities)
    operation="listVulnerabilities"
    ;;
    listVulnerabilitiesByDataStore)
    operation="listVulnerabilitiesByDataStore"
    ;;
    removeVulnerabilityStatusComment)
    operation="removeVulnerabilityStatusComment"
    ;;
    setVulnerabilityStatus)
    operation="setVulnerabilityStatus"
    ;;
    updateVulnerabilityStatusComment)
    operation="updateVulnerabilityStatusComment"
    ;;
    databootstrapperServiceLoadData)
    operation="databootstrapperServiceLoadData"
    ;;
    datamartProcessorServiceGetDatamartInfo)
    operation="datamartProcessorServiceGetDatamartInfo"
    ;;
    datamartProcessorServiceGetDatamarts)
    operation="datamartProcessorServiceGetDatamarts"
    ;;
    datamartProcessorServiceGetEarliestStartTime)
    operation="datamartProcessorServiceGetEarliestStartTime"
    ;;
    datamartProcessorServiceSendAllCompleteFilesToQueue)
    operation="datamartProcessorServiceSendAllCompleteFilesToQueue"
    ;;
    datamartProcessorServiceStoreExtractionLogs)
    operation="datamartProcessorServiceStoreExtractionLogs"
    ;;
    uploadDatamart)
    operation="uploadDatamart"
    ;;
    ecosystemServiceCreateDataset)
    operation="ecosystemServiceCreateDataset"
    ;;
    ecosystemServiceDataInsert)
    operation="ecosystemServiceDataInsert"
    ;;
    ecosystemServiceDeleteDatasets)
    operation="ecosystemServiceDeleteDatasets"
    ;;
    ecosystemServiceGetDatasetData)
    operation="ecosystemServiceGetDatasetData"
    ;;
    ecosystemServiceGetDatasetDetail)
    operation="ecosystemServiceGetDatasetDetail"
    ;;
    ecosystemServiceGetDatasets)
    operation="ecosystemServiceGetDatasets"
    ;;
    ecosystemServiceGetPurgableRows)
    operation="ecosystemServiceGetPurgableRows"
    ;;
    ecosystemServicePurgeData)
    operation="ecosystemServicePurgeData"
    ;;
    featureFlagsServiceDeleteFeatureFlagOverrides)
    operation="featureFlagsServiceDeleteFeatureFlagOverrides"
    ;;
    featureFlagsServiceGetFeatureFlagOverrides)
    operation="featureFlagsServiceGetFeatureFlagOverrides"
    ;;
    featureFlagsServiceGetFeatureFlags)
    operation="featureFlagsServiceGetFeatureFlags"
    ;;
    featureFlagsServiceUpdateFeatureFlagOverrides)
    operation="featureFlagsServiceUpdateFeatureFlagOverrides"
    ;;
    groupBuilderCancelImportGroup)
    operation="groupBuilderCancelImportGroup"
    ;;
    groupBuilderCreateGroup)
    operation="groupBuilderCreateGroup"
    ;;
    groupBuilderDeleteGroup)
    operation="groupBuilderDeleteGroup"
    ;;
    groupBuilderEditGroup)
    operation="groupBuilderEditGroup"
    ;;
    groupBuilderExportGroup)
    operation="groupBuilderExportGroup"
    ;;
    groupBuilderGetGroupDetails)
    operation="groupBuilderGetGroupDetails"
    ;;
    groupBuilderGetGroupMembers)
    operation="groupBuilderGetGroupMembers"
    ;;
    groupBuilderGetGroupSyncMapping)
    operation="groupBuilderGetGroupSyncMapping"
    ;;
    groupBuilderGetGroupTypeMapping)
    operation="groupBuilderGetGroupTypeMapping"
    ;;
    groupBuilderGetGroupTypes)
    operation="groupBuilderGetGroupTypes"
    ;;
    groupBuilderGetGroups)
    operation="groupBuilderGetGroups"
    ;;
    groupBuilderGetImportGroups)
    operation="groupBuilderGetImportGroups"
    ;;
    groupBuilderImportGroup)
    operation="groupBuilderImportGroup"
    ;;
    groupBuilderRefreshGroups)
    operation="groupBuilderRefreshGroups"
    ;;
    groupBuilderResetGroups)
    operation="groupBuilderResetGroups"
    ;;
    groupBuilderStoreGroupMembersGdp)
    operation="groupBuilderStoreGroupMembersGdp"
    ;;
    groupBuilderStoreGroupsGdp)
    operation="groupBuilderStoreGroupsGdp"
    ;;
    guardiumConnectorAddCM)
    operation="guardiumConnectorAddCM"
    ;;
    guardiumConnectorAddDatamarts)
    operation="guardiumConnectorAddDatamarts"
    ;;
    guardiumConnectorAddDmExclusion)
    operation="guardiumConnectorAddDmExclusion"
    ;;
    guardiumConnectorAddTask)
    operation="guardiumConnectorAddTask"
    ;;
    guardiumConnectorBlockUser)
    operation="guardiumConnectorBlockUser"
    ;;
    guardiumConnectorConfigureAggregatorExport)
    operation="guardiumConnectorConfigureAggregatorExport"
    ;;
    guardiumConnectorConfigureCollectorExport)
    operation="guardiumConnectorConfigureCollectorExport"
    ;;
    guardiumConnectorConfigureStreaming)
    operation="guardiumConnectorConfigureStreaming"
    ;;
    guardiumConnectorDatamartVersionCheck)
    operation="guardiumConnectorDatamartVersionCheck"
    ;;
    guardiumConnectorDeleteCM)
    operation="guardiumConnectorDeleteCM"
    ;;
    guardiumConnectorDeleteDmExclusion)
    operation="guardiumConnectorDeleteDmExclusion"
    ;;
    guardiumConnectorDeleteTask)
    operation="guardiumConnectorDeleteTask"
    ;;
    guardiumConnectorDeleteTasks)
    operation="guardiumConnectorDeleteTasks"
    ;;
    guardiumConnectorGetAggregatorsConfig)
    operation="guardiumConnectorGetAggregatorsConfig"
    ;;
    guardiumConnectorGetCMs)
    operation="guardiumConnectorGetCMs"
    ;;
    guardiumConnectorGetCMsConfig)
    operation="guardiumConnectorGetCMsConfig"
    ;;
    guardiumConnectorGetCollectorsConfig)
    operation="guardiumConnectorGetCollectorsConfig"
    ;;
    guardiumConnectorGetDatamarts)
    operation="guardiumConnectorGetDatamarts"
    ;;
    guardiumConnectorGetDmExclusion)
    operation="guardiumConnectorGetDmExclusion"
    ;;
    guardiumConnectorGetGdpPolicyInfo)
    operation="guardiumConnectorGetGdpPolicyInfo"
    ;;
    guardiumConnectorGetGdpPolicySummaries)
    operation="guardiumConnectorGetGdpPolicySummaries"
    ;;
    guardiumConnectorGetHealthInfo)
    operation="guardiumConnectorGetHealthInfo"
    ;;
    guardiumConnectorGetLatestDMExtractionProfile)
    operation="guardiumConnectorGetLatestDMExtractionProfile"
    ;;
    guardiumConnectorGetStreamingStatus)
    operation="guardiumConnectorGetStreamingStatus"
    ;;
    guardiumConnectorGetSyncDMs)
    operation="guardiumConnectorGetSyncDMs"
    ;;
    guardiumConnectorGetTaskTypes)
    operation="guardiumConnectorGetTaskTypes"
    ;;
    guardiumConnectorGetTasks)
    operation="guardiumConnectorGetTasks"
    ;;
    guardiumConnectorRunGDPReport)
    operation="guardiumConnectorRunGDPReport"
    ;;
    guardiumConnectorSetupCM)
    operation="guardiumConnectorSetupCM"
    ;;
    guardiumConnectorSetupDatamarts)
    operation="guardiumConnectorSetupDatamarts"
    ;;
    guardiumConnectorTaskError)
    operation="guardiumConnectorTaskError"
    ;;
    guardiumConnectorTestDatabaseConnection)
    operation="guardiumConnectorTestDatabaseConnection"
    ;;
    guardiumConnectorUpdateDmExclusion)
    operation="guardiumConnectorUpdateDmExclusion"
    ;;
    guardiumConnectorUpdateStreaming)
    operation="guardiumConnectorUpdateStreaming"
    ;;
    guardiumConnectorUpdateTask)
    operation="guardiumConnectorUpdateTask"
    ;;
    healthCollectorGetDataWarehouseUsage)
    operation="healthCollectorGetDataWarehouseUsage"
    ;;
    healthCollectorGetGDPHealthInfo)
    operation="healthCollectorGetGDPHealthInfo"
    ;;
    healthCollectorGetHistoricalHealthInfo)
    operation="healthCollectorGetHistoricalHealthInfo"
    ;;
    healthCollectorGetObjectStorageUsage)
    operation="healthCollectorGetObjectStorageUsage"
    ;;
    healthCollectorGetPVCUsage)
    operation="healthCollectorGetPVCUsage"
    ;;
    healthCollectorGetPodRestarts)
    operation="healthCollectorGetPodRestarts"
    ;;
    healthCollectorGetStreamsIngestion)
    operation="healthCollectorGetStreamsIngestion"
    ;;
    healthCollectorGetTopGDPCollectors)
    operation="healthCollectorGetTopGDPCollectors"
    ;;
    healthCollectorStoreHealthInfo)
    operation="healthCollectorStoreHealthInfo"
    ;;
    jumpboxServiceAuthorize)
    operation="jumpboxServiceAuthorize"
    ;;
    jumpboxServiceDeleteTenant)
    operation="jumpboxServiceDeleteTenant"
    ;;
    jumpboxServiceDeleteUser)
    operation="jumpboxServiceDeleteUser"
    ;;
    jumpboxServiceGetTenant)
    operation="jumpboxServiceGetTenant"
    ;;
    jumpboxServiceGetTenants)
    operation="jumpboxServiceGetTenants"
    ;;
    jumpboxServiceGetUsers)
    operation="jumpboxServiceGetUsers"
    ;;
    jumpboxServicePostTenants)
    operation="jumpboxServicePostTenants"
    ;;
    jumpboxServicePostUsers)
    operation="jumpboxServicePostUsers"
    ;;
    jumpboxServiceSearchUsers)
    operation="jumpboxServiceSearchUsers"
    ;;
    jumpboxServiceTestUser)
    operation="jumpboxServiceTestUser"
    ;;
    jumpboxServiceUpdateTenant)
    operation="jumpboxServiceUpdateTenant"
    ;;
    jumpboxServiceUpdateUsers)
    operation="jumpboxServiceUpdateUsers"
    ;;
    notificationsServiceCreateTicket)
    operation="notificationsServiceCreateTicket"
    ;;
    notificationsServiceGetFolders)
    operation="notificationsServiceGetFolders"
    ;;
    notificationsServiceGetNotificationFilename)
    operation="notificationsServiceGetNotificationFilename"
    ;;
    notificationsServiceGetNotificationRecord)
    operation="notificationsServiceGetNotificationRecord"
    ;;
    notificationsServiceGetNotificationRecords)
    operation="notificationsServiceGetNotificationRecords"
    ;;
    notificationsServiceGetTicketStatus)
    operation="notificationsServiceGetTicketStatus"
    ;;
    notificationsServiceTestIntegration)
    operation="notificationsServiceTestIntegration"
    ;;
    notificationsServiceUpdateNotificationRecord)
    operation="notificationsServiceUpdateNotificationRecord"
    ;;
    outliersEngineGetSourceStatistics)
    operation="outliersEngineGetSourceStatistics"
    ;;
    outliersEngineGetStatistics)
    operation="outliersEngineGetStatistics"
    ;;
    outliersEngineGetWorkingHoursPeriods)
    operation="outliersEngineGetWorkingHoursPeriods"
    ;;
    outliersEngineRunSimulator)
    operation="outliersEngineRunSimulator"
    ;;
    outliersEngineUpdateWorkingHoursPeriods)
    operation="outliersEngineUpdateWorkingHoursPeriods"
    ;;
    outliersEngineUploadAndAnalyzePeriod)
    operation="outliersEngineUploadAndAnalyzePeriod"
    ;;
    outliersEngineUserClustering)
    operation="outliersEngineUserClustering"
    ;;
    pipelineconfigServiceDeleteTenantResources)
    operation="pipelineconfigServiceDeleteTenantResources"
    ;;
    policyBuilderClonePolicy)
    operation="policyBuilderClonePolicy"
    ;;
    policyBuilderCreatePolicy)
    operation="policyBuilderCreatePolicy"
    ;;
    policyBuilderDeleteGdpSyncEntry)
    operation="policyBuilderDeleteGdpSyncEntry"
    ;;
    policyBuilderDeletePolicies)
    operation="policyBuilderDeletePolicies"
    ;;
    policyBuilderGetGdpPolicyMetaData)
    operation="policyBuilderGetGdpPolicyMetaData"
    ;;
    policyBuilderGetPolicies)
    operation="policyBuilderGetPolicies"
    ;;
    policyBuilderGetPolicyDetails)
    operation="policyBuilderGetPolicyDetails"
    ;;
    policyBuilderGetPolicyNamesFromRuleIDs)
    operation="policyBuilderGetPolicyNamesFromRuleIDs"
    ;;
    policyBuilderGetPolicySyncList)
    operation="policyBuilderGetPolicySyncList"
    ;;
    policyBuilderGetReceivers)
    operation="policyBuilderGetReceivers"
    ;;
    policyBuilderGetRuleMetadata)
    operation="policyBuilderGetRuleMetadata"
    ;;
    policyBuilderInsertGdpPolicy)
    operation="policyBuilderInsertGdpPolicy"
    ;;
    policyBuilderInsertGdpPolicyMetaData)
    operation="policyBuilderInsertGdpPolicyMetaData"
    ;;
    policyBuilderInstallPolicies)
    operation="policyBuilderInstallPolicies"
    ;;
    policyBuilderIntegrationCheck)
    operation="policyBuilderIntegrationCheck"
    ;;
    policyBuilderPoliciesGroups)
    operation="policyBuilderPoliciesGroups"
    ;;
    policyBuilderRuleValidation)
    operation="policyBuilderRuleValidation"
    ;;
    policyBuilderStorePoliciesGdp)
    operation="policyBuilderStorePoliciesGdp"
    ;;
    qSDataManagerGetMasterData)
    operation="qSDataManagerGetMasterData"
    ;;
    qSDataManagerRegisterScan)
    operation="qSDataManagerRegisterScan"
    ;;
    qSDataManagerRetrieveScan)
    operation="qSDataManagerRetrieveScan"
    ;;
    qSPluginManagerInvokeAppProv)
    operation="qSPluginManagerInvokeAppProv"
    ;;
    qSPluginManagerInvokeExplorerV1)
    operation="qSPluginManagerInvokeExplorerV1"
    ;;
    qSPluginManagerInvokeExplorerV2)
    operation="qSPluginManagerInvokeExplorerV2"
    ;;
    qSPluginManagerInvokePlugin)
    operation="qSPluginManagerInvokePlugin"
    ;;
    qSPluginManagerInvokePolicy)
    operation="qSPluginManagerInvokePolicy"
    ;;
    qSPolicyManagerBatchStatusUpdate)
    operation="qSPolicyManagerBatchStatusUpdate"
    ;;
    qSPolicyManagerCreateTicket)
    operation="qSPolicyManagerCreateTicket"
    ;;
    qSPolicyManagerFetchFilesfromBuckets)
    operation="qSPolicyManagerFetchFilesfromBuckets"
    ;;
    qSPolicyManagerProcessPolicyDimentionRecords)
    operation="qSPolicyManagerProcessPolicyDimentionRecords"
    ;;
    qSPolicyManagerUpdateTicketStatus)
    operation="qSPolicyManagerUpdateTicketStatus"
    ;;
    reportsRunnerGetActiveQueries)
    operation="reportsRunnerGetActiveQueries"
    ;;
    reportsRunnerGetAuditDataCount)
    operation="reportsRunnerGetAuditDataCount"
    ;;
    reportsRunnerGetChartData)
    operation="reportsRunnerGetChartData"
    ;;
    reportsRunnerGetChartDatav2)
    operation="reportsRunnerGetChartDatav2"
    ;;
    reportsRunnerGetReportColumnFacet)
    operation="reportsRunnerGetReportColumnFacet"
    ;;
    reportsRunnerGetReportDataCount)
    operation="reportsRunnerGetReportDataCount"
    ;;
    reportsRunnerRunAuditReport)
    operation="reportsRunnerRunAuditReport"
    ;;
    reportsRunnerRunReport)
    operation="reportsRunnerRunReport"
    ;;
    reportsRunnerStopQuery)
    operation="reportsRunnerStopQuery"
    ;;
    reportsServiceCreateCategory)
    operation="reportsServiceCreateCategory"
    ;;
    reportsServiceCreateChart)
    operation="reportsServiceCreateChart"
    ;;
    reportsServiceCreateChartTemplatev2)
    operation="reportsServiceCreateChartTemplatev2"
    ;;
    reportsServiceCreateChartv2)
    operation="reportsServiceCreateChartv2"
    ;;
    reportsServiceCreateFieldsByCategory)
    operation="reportsServiceCreateFieldsByCategory"
    ;;
    reportsServiceCreateJoin)
    operation="reportsServiceCreateJoin"
    ;;
    reportsServiceCreateReport)
    operation="reportsServiceCreateReport"
    ;;
    reportsServiceCreateVariant)
    operation="reportsServiceCreateVariant"
    ;;
    reportsServiceDeleteCategory)
    operation="reportsServiceDeleteCategory"
    ;;
    reportsServiceDeleteChart)
    operation="reportsServiceDeleteChart"
    ;;
    reportsServiceDeleteChartTemplatev2)
    operation="reportsServiceDeleteChartTemplatev2"
    ;;
    reportsServiceDeleteChartv2)
    operation="reportsServiceDeleteChartv2"
    ;;
    reportsServiceDeleteFieldsByCategory)
    operation="reportsServiceDeleteFieldsByCategory"
    ;;
    reportsServiceDeleteJoin)
    operation="reportsServiceDeleteJoin"
    ;;
    reportsServiceDeleteReport)
    operation="reportsServiceDeleteReport"
    ;;
    reportsServiceDeleteVariant)
    operation="reportsServiceDeleteVariant"
    ;;
    reportsServiceGetCategories)
    operation="reportsServiceGetCategories"
    ;;
    reportsServiceGetChartSettings)
    operation="reportsServiceGetChartSettings"
    ;;
    reportsServiceGetChartSettingsv2)
    operation="reportsServiceGetChartSettingsv2"
    ;;
    reportsServiceGetChartTemplatesv2)
    operation="reportsServiceGetChartTemplatesv2"
    ;;
    reportsServiceGetFieldsByCategories)
    operation="reportsServiceGetFieldsByCategories"
    ;;
    reportsServiceGetFieldsByCategory)
    operation="reportsServiceGetFieldsByCategory"
    ;;
    reportsServiceGetJoins)
    operation="reportsServiceGetJoins"
    ;;
    reportsServiceGetQueryByReportDefinition)
    operation="reportsServiceGetQueryByReportDefinition"
    ;;
    reportsServiceGetQueryByReportID)
    operation="reportsServiceGetQueryByReportID"
    ;;
    reportsServiceGetReportDefinition)
    operation="reportsServiceGetReportDefinition"
    ;;
    reportsServiceGetReportGroups)
    operation="reportsServiceGetReportGroups"
    ;;
    reportsServiceGetReportSynopsis)
    operation="reportsServiceGetReportSynopsis"
    ;;
    reportsServiceGetReportTimestampHeader)
    operation="reportsServiceGetReportTimestampHeader"
    ;;
    reportsServiceGetReports)
    operation="reportsServiceGetReports"
    ;;
    reportsServiceGetReportsForJoin)
    operation="reportsServiceGetReportsForJoin"
    ;;
    reportsServiceGetReportsTags)
    operation="reportsServiceGetReportsTags"
    ;;
    reportsServiceGetVariant)
    operation="reportsServiceGetVariant"
    ;;
    reportsServiceGetVariants)
    operation="reportsServiceGetVariants"
    ;;
    reportsServicePartialChartUpdate)
    operation="reportsServicePartialChartUpdate"
    ;;
    reportsServicePartialReportUpdate)
    operation="reportsServicePartialReportUpdate"
    ;;
    reportsServiceRunVariantOperation)
    operation="reportsServiceRunVariantOperation"
    ;;
    reportsServiceTranspose)
    operation="reportsServiceTranspose"
    ;;
    reportsServiceUpdateChart)
    operation="reportsServiceUpdateChart"
    ;;
    reportsServiceUpdateChartv2)
    operation="reportsServiceUpdateChartv2"
    ;;
    reportsServiceUpdateJoin)
    operation="reportsServiceUpdateJoin"
    ;;
    reportsServiceUpdateReport)
    operation="reportsServiceUpdateReport"
    ;;
    reportsServiceUpdateVariantOverride)
    operation="reportsServiceUpdateVariantOverride"
    ;;
    riskAnalyticsControllerEnableDisableRiskEventFeedback)
    operation="riskAnalyticsControllerEnableDisableRiskEventFeedback"
    ;;
    riskAnalyticsControllerEnableDisableRiskEventProcess)
    operation="riskAnalyticsControllerEnableDisableRiskEventProcess"
    ;;
    riskAnalyticsControllerGetAllClassificationsList)
    operation="riskAnalyticsControllerGetAllClassificationsList"
    ;;
    riskAnalyticsControllerGetRiskEventClassificationsList)
    operation="riskAnalyticsControllerGetRiskEventClassificationsList"
    ;;
    riskAnalyticsControllerGetRiskEventDataForSummarization)
    operation="riskAnalyticsControllerGetRiskEventDataForSummarization"
    ;;
    riskAnalyticsControllerGetRiskEventDetails)
    operation="riskAnalyticsControllerGetRiskEventDetails"
    ;;
    riskAnalyticsControllerGetRiskEventProcessStatus)
    operation="riskAnalyticsControllerGetRiskEventProcessStatus"
    ;;
    riskAnalyticsControllerGetRiskEventRow)
    operation="riskAnalyticsControllerGetRiskEventRow"
    ;;
    riskAnalyticsControllerGetRiskEventVulnerabilityAssessmentDetails)
    operation="riskAnalyticsControllerGetRiskEventVulnerabilityAssessmentDetails"
    ;;
    riskAnalyticsControllerGetRiskFeedback)
    operation="riskAnalyticsControllerGetRiskFeedback"
    ;;
    riskAnalyticsControllerGetRiskObservationDetails)
    operation="riskAnalyticsControllerGetRiskObservationDetails"
    ;;
    riskAnalyticsControllerGetUserUISettings)
    operation="riskAnalyticsControllerGetUserUISettings"
    ;;
    riskAnalyticsControllerRiskEventTuning)
    operation="riskAnalyticsControllerRiskEventTuning"
    ;;
    riskAnalyticsControllerSetRiskEventStatus)
    operation="riskAnalyticsControllerSetRiskEventStatus"
    ;;
    riskAnalyticsControllerSetUserUISettings)
    operation="riskAnalyticsControllerSetUserUISettings"
    ;;
    riskAnalyticsControllerUpdateRiskFeedback)
    operation="riskAnalyticsControllerUpdateRiskFeedback"
    ;;
    riskAnalyticsDataProcessorGetRiskContext)
    operation="riskAnalyticsDataProcessorGetRiskContext"
    ;;
    riskAnalyticsDataProcessorGetRiskPredefinedQuestions)
    operation="riskAnalyticsDataProcessorGetRiskPredefinedQuestions"
    ;;
    riskAnalyticsEngineGetLeadGeneratorConfig)
    operation="riskAnalyticsEngineGetLeadGeneratorConfig"
    ;;
    riskAnalyticsEngineUpdateLeadGeneratorConfig)
    operation="riskAnalyticsEngineUpdateLeadGeneratorConfig"
    ;;
    riskAnalyticsMlClassificationResetModelToDefaults)
    operation="riskAnalyticsMlClassificationResetModelToDefaults"
    ;;
    schedulerServiceCreateScheduledJob)
    operation="schedulerServiceCreateScheduledJob"
    ;;
    schedulerServiceDeleteScheduledJob)
    operation="schedulerServiceDeleteScheduledJob"
    ;;
    schedulerServiceGetDependencies)
    operation="schedulerServiceGetDependencies"
    ;;
    schedulerServiceGetDistributionRules)
    operation="schedulerServiceGetDistributionRules"
    ;;
    schedulerServiceGetScheduledJobDetails)
    operation="schedulerServiceGetScheduledJobDetails"
    ;;
    schedulerServiceGetScheduledJobs)
    operation="schedulerServiceGetScheduledJobs"
    ;;
    schedulerServiceGetSchedulesByReport)
    operation="schedulerServiceGetSchedulesByReport"
    ;;
    schedulerServiceGetTags)
    operation="schedulerServiceGetTags"
    ;;
    schedulerServiceSearchScheduledJobs)
    operation="schedulerServiceSearchScheduledJobs"
    ;;
    schedulerServiceSearchScheduledTaskRuns)
    operation="schedulerServiceSearchScheduledTaskRuns"
    ;;
    schedulerServiceUpdateScheduledJob)
    operation="schedulerServiceUpdateScheduledJob"
    ;;
    snifAssistServiceTestRegex)
    operation="snifAssistServiceTestRegex"
    ;;
    streamsServiceCheckAWSCredentials)
    operation="streamsServiceCheckAWSCredentials"
    ;;
    streamsServiceCheckAzureEventHub)
    operation="streamsServiceCheckAzureEventHub"
    ;;
    streamsServiceCheckAzureStorageString)
    operation="streamsServiceCheckAzureStorageString"
    ;;
    streamsServiceGetAWSRegions)
    operation="streamsServiceGetAWSRegions"
    ;;
    streamsServiceListAWSStreams)
    operation="streamsServiceListAWSStreams"
    ;;
    templatesServiceCreateIntegration)
    operation="templatesServiceCreateIntegration"
    ;;
    templatesServiceCreateTemplate)
    operation="templatesServiceCreateTemplate"
    ;;
    templatesServiceDeleteIntegration)
    operation="templatesServiceDeleteIntegration"
    ;;
    templatesServiceDeleteTemplate)
    operation="templatesServiceDeleteTemplate"
    ;;
    templatesServiceGetOriginDefaultContent)
    operation="templatesServiceGetOriginDefaultContent"
    ;;
    templatesServiceGetOriginFields)
    operation="templatesServiceGetOriginFields"
    ;;
    templatesServiceGetTemplate)
    operation="templatesServiceGetTemplate"
    ;;
    templatesServiceGetTemplates)
    operation="templatesServiceGetTemplates"
    ;;
    templatesServiceTestTemplate)
    operation="templatesServiceTestTemplate"
    ;;
    templatesServiceTransformTemplate)
    operation="templatesServiceTransformTemplate"
    ;;
    templatesServiceTransformTemplateJSON)
    operation="templatesServiceTransformTemplateJSON"
    ;;
    templatesServiceUpdateTemplate)
    operation="templatesServiceUpdateTemplate"
    ;;
    tenantuserCreateAPIKey)
    operation="tenantuserCreateAPIKey"
    ;;
    tenantuserDeleteAPIKey)
    operation="tenantuserDeleteAPIKey"
    ;;
    tenantuserDeleteRole)
    operation="tenantuserDeleteRole"
    ;;
    tenantuserGetAPIKeys)
    operation="tenantuserGetAPIKeys"
    ;;
    tenantuserGetCurrentUser)
    operation="tenantuserGetCurrentUser"
    ;;
    tenantuserGetPrivilege)
    operation="tenantuserGetPrivilege"
    ;;
    tenantuserGetPrivileges)
    operation="tenantuserGetPrivileges"
    ;;
    tenantuserGetRole)
    operation="tenantuserGetRole"
    ;;
    tenantuserGetRoles)
    operation="tenantuserGetRoles"
    ;;
    tenantuserGetUser)
    operation="tenantuserGetUser"
    ;;
    tenantuserGetUserNames)
    operation="tenantuserGetUserNames"
    ;;
    tenantuserGetUserTenant)
    operation="tenantuserGetUserTenant"
    ;;
    tenantuserPostPrivilegesBulk)
    operation="tenantuserPostPrivilegesBulk"
    ;;
    tenantuserPostRole)
    operation="tenantuserPostRole"
    ;;
    tenantuserUpdatePrivilege)
    operation="tenantuserUpdatePrivilege"
    ;;
    tenantuserUpdatePrivilegesRoleBulk)
    operation="tenantuserUpdatePrivilegesRoleBulk"
    ;;
    tenantuserUpdateRole)
    operation="tenantuserUpdateRole"
    ;;
    tenantuserUpdateUserRoleBulk)
    operation="tenantuserUpdateUserRoleBulk"
    ;;
    getLinkedVendor)
    operation="getLinkedVendor"
    ;;
    getSingleLinkedVendor)
    operation="getSingleLinkedVendor"
    ;;
    listLinkedVendorDataStores)
    operation="listLinkedVendorDataStores"
    ;;
    listLinkedVendors)
    operation="listLinkedVendors"
    ;;
    listTrustedAssets)
    operation="listTrustedAssets"
    ;;
    universalConnectorManagerGetCertificate)
    operation="universalConnectorManagerGetCertificate"
    ;;
    universalConnectorManagerGetConnectors)
    operation="universalConnectorManagerGetConnectors"
    ;;
    universalConnectorManagerListConnectionsSummary)
    operation="universalConnectorManagerListConnectionsSummary"
    ;;
    universalConnectorManagerPluginsList)
    operation="universalConnectorManagerPluginsList"
    ;;
    universalConnectorManagerUploadPlugin)
    operation="universalConnectorManagerUploadPlugin"
    ;;
    workflowCreateCase)
    operation="workflowCreateCase"
    ;;
    workflowCreateTask)
    operation="workflowCreateTask"
    ;;
    workflowGetCases)
    operation="workflowGetCases"
    ;;
    workflowGetCasesCount)
    operation="workflowGetCasesCount"
    ;;
    workflowGetFilename)
    operation="workflowGetFilename"
    ;;
    workflowGetJobsCount)
    operation="workflowGetJobsCount"
    ;;
    workflowGetReportResult)
    operation="workflowGetReportResult"
    ;;
    workflowGetTasks)
    operation="workflowGetTasks"
    ;;
    workflowGetTasksCount)
    operation="workflowGetTasksCount"
    ;;
    workflowSearchCases)
    operation="workflowSearchCases"
    ;;
    workflowSearchReports)
    operation="workflowSearchReports"
    ;;
    workflowSearchTasks)
    operation="workflowSearchTasks"
    ;;
    workflowUpdateCases)
    operation="workflowUpdateCases"
    ;;
    workflowUpdateTasks)
    operation="workflowUpdateTasks"
    ;;
    *==*)
    # Parse body arguments and convert them into top level
    # JSON properties passed in the body content as strings
    if [[ "$operation" ]]; then
        IFS='==' read -r body_key sep body_value <<< "$key"
        body_parameters[${body_key}]="\"${body_value}\""
    fi
    ;;
    --body=*)
    # Parse value of body as argument and convert it into only
    # the raw body content
    if [[ "$operation" ]]; then
        IFS='--body=' read -r body_value <<< "$key"
        body_value=${body_value##--body=}
        body_parameters["RAW_BODY"]="${body_value}"
        RAW_BODY=1
    fi
    ;;
    *:=*)
    # Parse body arguments and convert them into top level
    # JSON properties passed in the body content without quotes
    if [[ "$operation" ]]; then
        # ignore error about 'sep' being unused
        # shellcheck disable=SC2034
        IFS=':=' read -r body_key sep body_value <<< "$key"
        body_parameters[${body_key}]=${body_value}
    fi
    ;;
    +([^=]):*)
    # Parse header arguments and convert them into curl
    # only after the operation argument
    if [[ "$operation" ]]; then
        IFS=':' read -r header_name header_value <<< "$key"
        #
        # If the header key is the same as the api_key expected by API in the
        # header, override the ${apikey_auth_credential} variable
        #
        if [[ $header_name == "authorization" ]]; then
            apikey_auth_credential=$header_value
        fi
        header_arguments[$header_name]=$header_value
    else
        curl_arguments+=" $key"
    fi
    ;;
    -)
    body_content_temp_file=$(mktemp)
    cat - > "$body_content_temp_file"
    ;;
    *=*)
    # Parse operation arguments and convert them into curl
    # only after the operation argument
    if [[ "$operation" ]]; then
        IFS='=' read -r parameter_name parameter_value <<< "$key"
        if [[ -z "${operation_parameters[$parameter_name]+foo}" ]]; then
            operation_parameters[$parameter_name]=$(url_escape "${parameter_value}")
        else
            operation_parameters[$parameter_name]+=":::"$(url_escape "${parameter_value}")
        fi
    else
        curl_arguments+=" $key"
    fi
    ;;
    *)
    # If we are before the operation, treat the arguments as cURL arguments
    if [[ "x$operation" == "x" ]]; then
        # Maintain quotes around cURL arguments if necessary
        space_regexp="[[:space:]]"
        if [[ $key =~ $space_regexp ]]; then
            curl_arguments+=" \"$key\""
        else
            curl_arguments+=" $key"
        fi
    fi
    ;;
esac
done


# Check if user provided host name
if [[ -z "$host" ]]; then
    ERROR_MSG="ERROR: No hostname provided!!! You have to  provide on command line option '--host ...'"
    exit 1
fi

# Check if user specified operation ID
if [[ -z "$operation" ]]; then
    ERROR_MSG="ERROR: No operation specified!!!"
    exit 1
fi


# Run cURL command based on the operation ID
case $operation in
    analyticsEventsServiceDeleteCacheKey)
    call_analyticsEventsServiceDeleteCacheKey
    ;;
    analyticsEventsServicePostQSAdvisorRisk)
    call_analyticsEventsServicePostQSAdvisorRisk
    ;;
    assetsServiceAssetIngestion)
    call_assetsServiceAssetIngestion
    ;;
    assetsServiceAssetIngestionManualTrigger)
    call_assetsServiceAssetIngestionManualTrigger
    ;;
    assetsServiceClonePolicy)
    call_assetsServiceClonePolicy
    ;;
    assetsServiceCreateUpdatePolicy)
    call_assetsServiceCreateUpdatePolicy
    ;;
    assetsServiceDeleteFilterTemplateForAssets)
    call_assetsServiceDeleteFilterTemplateForAssets
    ;;
    assetsServiceDeletePolicies)
    call_assetsServiceDeletePolicies
    ;;
    assetsServiceFetchAssetChangeLog)
    call_assetsServiceFetchAssetChangeLog
    ;;
    assetsServiceFetchAssetDashboard)
    call_assetsServiceFetchAssetDashboard
    ;;
    assetsServiceFetchAssetList)
    call_assetsServiceFetchAssetList
    ;;
    assetsServiceFetchAssetsForMergeSplit)
    call_assetsServiceFetchAssetsForMergeSplit
    ;;
    assetsServiceFindAssetName)
    call_assetsServiceFindAssetName
    ;;
    assetsServiceGetAssetOverview)
    call_assetsServiceGetAssetOverview
    ;;
    assetsServiceGetAssetTopology)
    call_assetsServiceGetAssetTopology
    ;;
    assetsServiceGetFilterTemplateForAssets)
    call_assetsServiceGetFilterTemplateForAssets
    ;;
    assetsServiceGetFiltersForAssets)
    call_assetsServiceGetFiltersForAssets
    ;;
    assetsServiceListPolicy)
    call_assetsServiceListPolicy
    ;;
    assetsServiceListRule)
    call_assetsServiceListRule
    ;;
    assetsServiceListTagDomains)
    call_assetsServiceListTagDomains
    ;;
    assetsServiceListTags)
    call_assetsServiceListTags
    ;;
    assetsServiceMergeOrSplitAssets)
    call_assetsServiceMergeOrSplitAssets
    ;;
    assetsServiceSaveAssignedTags)
    call_assetsServiceSaveAssignedTags
    ;;
    assetsServiceSaveTagConceptData)
    call_assetsServiceSaveTagConceptData
    ;;
    assetsServiceSaveTagDomainData)
    call_assetsServiceSaveTagDomainData
    ;;
    assetsServiceSaveUpdateFilterTemplateForAssets)
    call_assetsServiceSaveUpdateFilterTemplateForAssets
    ;;
    assetsServiceSetBannerState)
    call_assetsServiceSetBannerState
    ;;
    assetsServiceUpdateAssetName)
    call_assetsServiceUpdateAssetName
    ;;
    assetsServiceUpdatePolicy)
    call_assetsServiceUpdatePolicy
    ;;
    auditServiceGetActivityRecords)
    call_auditServiceGetActivityRecords
    ;;
    auditServicePutDownloadActivityRecord)
    call_auditServicePutDownloadActivityRecord
    ;;
    authServerServiceCreateOauthClient)
    call_authServerServiceCreateOauthClient
    ;;
    authServerServiceDeleteOauthClient)
    call_authServerServiceDeleteOauthClient
    ;;
    authServerServiceGetAccessToken)
    call_authServerServiceGetAccessToken
    ;;
    authServerServiceGetOauthClient)
    call_authServerServiceGetOauthClient
    ;;
    authServerServiceGetUser)
    call_authServerServiceGetUser
    ;;
    authServerServiceListOauthClient)
    call_authServerServiceListOauthClient
    ;;
    addAnalyzedRegion)
    call_addAnalyzedRegion
    ;;
    addCloudAccounts)
    call_addCloudAccounts
    ;;
    generateAtlassianConfluenceAuthUrl)
    call_generateAtlassianConfluenceAuthUrl
    ;;
    generateAtlassianJiraAuthUrl)
    call_generateAtlassianJiraAuthUrl
    ;;
    generateAzureAuthUrl)
    call_generateAzureAuthUrl
    ;;
    generateOffice365AuthUrl)
    call_generateOffice365AuthUrl
    ;;
    generateSlackAuthUrl)
    call_generateSlackAuthUrl
    ;;
    generateSnowflakeAuthUrl)
    call_generateSnowflakeAuthUrl
    ;;
    getAnalyzedRegionStatus)
    call_getAnalyzedRegionStatus
    ;;
    getAzureAdminConsentStatus)
    call_getAzureAdminConsentStatus
    ;;
    getCloudAccountInstallationStatus)
    call_getCloudAccountInstallationStatus
    ;;
    getRefreshTokenExpiry)
    call_getRefreshTokenExpiry
    ;;
    listLinkedAccounts)
    call_listLinkedAccounts
    ;;
    removeAccounts)
    call_removeAccounts
    ;;
    removeAccountsInstructions)
    call_removeAccountsInstructions
    ;;
    retrieveServiceAccountId)
    call_retrieveServiceAccountId
    ;;
    snowflakeIntegrationScript)
    call_snowflakeIntegrationScript
    ;;
    submitGoogleWorkspaceAdminEmail)
    call_submitGoogleWorkspaceAdminEmail
    ;;
    submitOffice365TenantInfo)
    call_submitOffice365TenantInfo
    ;;
    submitSlackAuthCode)
    call_submitSlackAuthCode
    ;;
    submitSnowflakeAuthCode)
    call_submitSnowflakeAuthCode
    ;;
    complianceAcceleratorCreateWorkspace)
    call_complianceAcceleratorCreateWorkspace
    ;;
    complianceAcceleratorDeleteComplianceWorkspaces)
    call_complianceAcceleratorDeleteComplianceWorkspaces
    ;;
    complianceAcceleratorGetComplianceInfo)
    call_complianceAcceleratorGetComplianceInfo
    ;;
    complianceAcceleratorHydrateWorkspace)
    call_complianceAcceleratorHydrateWorkspace
    ;;
    complianceAcceleratorStoreComplianceInfo)
    call_complianceAcceleratorStoreComplianceInfo
    ;;
    connectionsServiceCreateConnectionsAccounts)
    call_connectionsServiceCreateConnectionsAccounts
    ;;
    connectionsServiceCreateConnectionsConfigs)
    call_connectionsServiceCreateConnectionsConfigs
    ;;
    connectionsServiceCreatePlugin)
    call_connectionsServiceCreatePlugin
    ;;
    connectionsServiceCreateSettings)
    call_connectionsServiceCreateSettings
    ;;
    connectionsServiceDeleteConnectionsAccounts)
    call_connectionsServiceDeleteConnectionsAccounts
    ;;
    connectionsServiceDeleteConnectionsConfigs)
    call_connectionsServiceDeleteConnectionsConfigs
    ;;
    connectionsServiceDeleteConnector)
    call_connectionsServiceDeleteConnector
    ;;
    connectionsServiceDeletePlugin)
    call_connectionsServiceDeletePlugin
    ;;
    connectionsServiceGetBannerState)
    call_connectionsServiceGetBannerState
    ;;
    connectionsServiceGetConnectionsAccounts)
    call_connectionsServiceGetConnectionsAccounts
    ;;
    connectionsServiceGetConnectionsConfigs)
    call_connectionsServiceGetConnectionsConfigs
    ;;
    connectionsServiceGetConnectionsWithFilters)
    call_connectionsServiceGetConnectionsWithFilters
    ;;
    connectionsServiceGetConnectorsSummary)
    call_connectionsServiceGetConnectorsSummary
    ;;
    connectionsServiceGetDataSources)
    call_connectionsServiceGetDataSources
    ;;
    connectionsServiceGetGuardRecordFields)
    call_connectionsServiceGetGuardRecordFields
    ;;
    connectionsServiceGetHeaders)
    call_connectionsServiceGetHeaders
    ;;
    connectionsServiceGetPlugins)
    call_connectionsServiceGetPlugins
    ;;
    connectionsServiceGetSettings)
    call_connectionsServiceGetSettings
    ;;
    connectionsServicePartialUpdateConnectors)
    call_connectionsServicePartialUpdateConnectors
    ;;
    connectionsServicePostStapCommand)
    call_connectionsServicePostStapCommand
    ;;
    connectionsServiceUpdateBannerState)
    call_connectionsServiceUpdateBannerState
    ;;
    connectionsServiceUpdateConnectionsAccounts)
    call_connectionsServiceUpdateConnectionsAccounts
    ;;
    connectionsServiceUpdateConnectionsConfigs)
    call_connectionsServiceUpdateConnectionsConfigs
    ;;
    connectionsServiceUpdateConnectors)
    call_connectionsServiceUpdateConnectors
    ;;
    connectionsServiceUpdatePlugin)
    call_connectionsServiceUpdatePlugin
    ;;
    connectionsServiceUpdateSettings)
    call_connectionsServiceUpdateSettings
    ;;
    dashboardsServiceCreateDashboard)
    call_dashboardsServiceCreateDashboard
    ;;
    dashboardsServiceDeleteDashboard)
    call_dashboardsServiceDeleteDashboard
    ;;
    dashboardsServiceGetDashboards)
    call_dashboardsServiceGetDashboards
    ;;
    dashboardsServiceUpdateDashboard)
    call_dashboardsServiceUpdateDashboard
    ;;
    getActualFlow)
    call_getActualFlow
    ;;
    getActualFlowsSummary)
    call_getActualFlowsSummary
    ;;
    getPotentialFlow)
    call_getPotentialFlow
    ;;
    getPotentialFlowPath)
    call_getPotentialFlowPath
    ;;
    getPotentialFlowsSummary)
    call_getPotentialFlowsSummary
    ;;
    listActualFlowPaths)
    call_listActualFlowPaths
    ;;
    listActualFlows)
    call_listActualFlows
    ;;
    listPotentialFlows)
    call_listPotentialFlows
    ;;
    listPotentialFlowsPaths)
    call_listPotentialFlowsPaths
    ;;
    getDataResource)
    call_getDataResource
    ;;
    getDataResourcesSummary)
    call_getDataResourcesSummary
    ;;
    listDataResources)
    call_listDataResources
    ;;
    listDataResourcesNames)
    call_listDataResourcesNames
    ;;
    removeResource)
    call_removeResource
    ;;
    updateResourceReviewStatus)
    call_updateResourceReviewStatus
    ;;
    getSensitivitiesSummary)
    call_getSensitivitiesSummary
    ;;
    getSensitivity)
    call_getSensitivity
    ;;
    listSensitivities)
    call_listSensitivities
    ;;
    getDataStore)
    call_getDataStore
    ;;
    getDataStoresSummary)
    call_getDataStoresSummary
    ;;
    listAllDataStoresLabels)
    call_listAllDataStoresLabels
    ;;
    listDataStores)
    call_listDataStores
    ;;
    listDataStoresCloudTagsKeys)
    call_listDataStoresCloudTagsKeys
    ;;
    listDataStoresCloudTagsValues)
    call_listDataStoresCloudTagsValues
    ;;
    listDataStoresNames)
    call_listDataStoresNames
    ;;
    rescanDataStore)
    call_rescanDataStore
    ;;
    setDataStoreLabel)
    call_setDataStoreLabel
    ;;
    updateDatastoreCustodian)
    call_updateDatastoreCustodian
    ;;
    addVulnerabilityStatusComment)
    call_addVulnerabilityStatusComment
    ;;
    getVulnerabilitiesSummary)
    call_getVulnerabilitiesSummary
    ;;
    getVulnerability)
    call_getVulnerability
    ;;
    listVulnerabilities)
    call_listVulnerabilities
    ;;
    listVulnerabilitiesByDataStore)
    call_listVulnerabilitiesByDataStore
    ;;
    removeVulnerabilityStatusComment)
    call_removeVulnerabilityStatusComment
    ;;
    setVulnerabilityStatus)
    call_setVulnerabilityStatus
    ;;
    updateVulnerabilityStatusComment)
    call_updateVulnerabilityStatusComment
    ;;
    databootstrapperServiceLoadData)
    call_databootstrapperServiceLoadData
    ;;
    datamartProcessorServiceGetDatamartInfo)
    call_datamartProcessorServiceGetDatamartInfo
    ;;
    datamartProcessorServiceGetDatamarts)
    call_datamartProcessorServiceGetDatamarts
    ;;
    datamartProcessorServiceGetEarliestStartTime)
    call_datamartProcessorServiceGetEarliestStartTime
    ;;
    datamartProcessorServiceSendAllCompleteFilesToQueue)
    call_datamartProcessorServiceSendAllCompleteFilesToQueue
    ;;
    datamartProcessorServiceStoreExtractionLogs)
    call_datamartProcessorServiceStoreExtractionLogs
    ;;
    uploadDatamart)
    call_uploadDatamart
    ;;
    ecosystemServiceCreateDataset)
    call_ecosystemServiceCreateDataset
    ;;
    ecosystemServiceDataInsert)
    call_ecosystemServiceDataInsert
    ;;
    ecosystemServiceDeleteDatasets)
    call_ecosystemServiceDeleteDatasets
    ;;
    ecosystemServiceGetDatasetData)
    call_ecosystemServiceGetDatasetData
    ;;
    ecosystemServiceGetDatasetDetail)
    call_ecosystemServiceGetDatasetDetail
    ;;
    ecosystemServiceGetDatasets)
    call_ecosystemServiceGetDatasets
    ;;
    ecosystemServiceGetPurgableRows)
    call_ecosystemServiceGetPurgableRows
    ;;
    ecosystemServicePurgeData)
    call_ecosystemServicePurgeData
    ;;
    featureFlagsServiceDeleteFeatureFlagOverrides)
    call_featureFlagsServiceDeleteFeatureFlagOverrides
    ;;
    featureFlagsServiceGetFeatureFlagOverrides)
    call_featureFlagsServiceGetFeatureFlagOverrides
    ;;
    featureFlagsServiceGetFeatureFlags)
    call_featureFlagsServiceGetFeatureFlags
    ;;
    featureFlagsServiceUpdateFeatureFlagOverrides)
    call_featureFlagsServiceUpdateFeatureFlagOverrides
    ;;
    groupBuilderCancelImportGroup)
    call_groupBuilderCancelImportGroup
    ;;
    groupBuilderCreateGroup)
    call_groupBuilderCreateGroup
    ;;
    groupBuilderDeleteGroup)
    call_groupBuilderDeleteGroup
    ;;
    groupBuilderEditGroup)
    call_groupBuilderEditGroup
    ;;
    groupBuilderExportGroup)
    call_groupBuilderExportGroup
    ;;
    groupBuilderGetGroupDetails)
    call_groupBuilderGetGroupDetails
    ;;
    groupBuilderGetGroupMembers)
    call_groupBuilderGetGroupMembers
    ;;
    groupBuilderGetGroupSyncMapping)
    call_groupBuilderGetGroupSyncMapping
    ;;
    groupBuilderGetGroupTypeMapping)
    call_groupBuilderGetGroupTypeMapping
    ;;
    groupBuilderGetGroupTypes)
    call_groupBuilderGetGroupTypes
    ;;
    groupBuilderGetGroups)
    call_groupBuilderGetGroups
    ;;
    groupBuilderGetImportGroups)
    call_groupBuilderGetImportGroups
    ;;
    groupBuilderImportGroup)
    call_groupBuilderImportGroup
    ;;
    groupBuilderRefreshGroups)
    call_groupBuilderRefreshGroups
    ;;
    groupBuilderResetGroups)
    call_groupBuilderResetGroups
    ;;
    groupBuilderStoreGroupMembersGdp)
    call_groupBuilderStoreGroupMembersGdp
    ;;
    groupBuilderStoreGroupsGdp)
    call_groupBuilderStoreGroupsGdp
    ;;
    guardiumConnectorAddCM)
    call_guardiumConnectorAddCM
    ;;
    guardiumConnectorAddDatamarts)
    call_guardiumConnectorAddDatamarts
    ;;
    guardiumConnectorAddDmExclusion)
    call_guardiumConnectorAddDmExclusion
    ;;
    guardiumConnectorAddTask)
    call_guardiumConnectorAddTask
    ;;
    guardiumConnectorBlockUser)
    call_guardiumConnectorBlockUser
    ;;
    guardiumConnectorConfigureAggregatorExport)
    call_guardiumConnectorConfigureAggregatorExport
    ;;
    guardiumConnectorConfigureCollectorExport)
    call_guardiumConnectorConfigureCollectorExport
    ;;
    guardiumConnectorConfigureStreaming)
    call_guardiumConnectorConfigureStreaming
    ;;
    guardiumConnectorDatamartVersionCheck)
    call_guardiumConnectorDatamartVersionCheck
    ;;
    guardiumConnectorDeleteCM)
    call_guardiumConnectorDeleteCM
    ;;
    guardiumConnectorDeleteDmExclusion)
    call_guardiumConnectorDeleteDmExclusion
    ;;
    guardiumConnectorDeleteTask)
    call_guardiumConnectorDeleteTask
    ;;
    guardiumConnectorDeleteTasks)
    call_guardiumConnectorDeleteTasks
    ;;
    guardiumConnectorGetAggregatorsConfig)
    call_guardiumConnectorGetAggregatorsConfig
    ;;
    guardiumConnectorGetCMs)
    call_guardiumConnectorGetCMs
    ;;
    guardiumConnectorGetCMsConfig)
    call_guardiumConnectorGetCMsConfig
    ;;
    guardiumConnectorGetCollectorsConfig)
    call_guardiumConnectorGetCollectorsConfig
    ;;
    guardiumConnectorGetDatamarts)
    call_guardiumConnectorGetDatamarts
    ;;
    guardiumConnectorGetDmExclusion)
    call_guardiumConnectorGetDmExclusion
    ;;
    guardiumConnectorGetGdpPolicyInfo)
    call_guardiumConnectorGetGdpPolicyInfo
    ;;
    guardiumConnectorGetGdpPolicySummaries)
    call_guardiumConnectorGetGdpPolicySummaries
    ;;
    guardiumConnectorGetHealthInfo)
    call_guardiumConnectorGetHealthInfo
    ;;
    guardiumConnectorGetLatestDMExtractionProfile)
    call_guardiumConnectorGetLatestDMExtractionProfile
    ;;
    guardiumConnectorGetStreamingStatus)
    call_guardiumConnectorGetStreamingStatus
    ;;
    guardiumConnectorGetSyncDMs)
    call_guardiumConnectorGetSyncDMs
    ;;
    guardiumConnectorGetTaskTypes)
    call_guardiumConnectorGetTaskTypes
    ;;
    guardiumConnectorGetTasks)
    call_guardiumConnectorGetTasks
    ;;
    guardiumConnectorRunGDPReport)
    call_guardiumConnectorRunGDPReport
    ;;
    guardiumConnectorSetupCM)
    call_guardiumConnectorSetupCM
    ;;
    guardiumConnectorSetupDatamarts)
    call_guardiumConnectorSetupDatamarts
    ;;
    guardiumConnectorTaskError)
    call_guardiumConnectorTaskError
    ;;
    guardiumConnectorTestDatabaseConnection)
    call_guardiumConnectorTestDatabaseConnection
    ;;
    guardiumConnectorUpdateDmExclusion)
    call_guardiumConnectorUpdateDmExclusion
    ;;
    guardiumConnectorUpdateStreaming)
    call_guardiumConnectorUpdateStreaming
    ;;
    guardiumConnectorUpdateTask)
    call_guardiumConnectorUpdateTask
    ;;
    healthCollectorGetDataWarehouseUsage)
    call_healthCollectorGetDataWarehouseUsage
    ;;
    healthCollectorGetGDPHealthInfo)
    call_healthCollectorGetGDPHealthInfo
    ;;
    healthCollectorGetHistoricalHealthInfo)
    call_healthCollectorGetHistoricalHealthInfo
    ;;
    healthCollectorGetObjectStorageUsage)
    call_healthCollectorGetObjectStorageUsage
    ;;
    healthCollectorGetPVCUsage)
    call_healthCollectorGetPVCUsage
    ;;
    healthCollectorGetPodRestarts)
    call_healthCollectorGetPodRestarts
    ;;
    healthCollectorGetStreamsIngestion)
    call_healthCollectorGetStreamsIngestion
    ;;
    healthCollectorGetTopGDPCollectors)
    call_healthCollectorGetTopGDPCollectors
    ;;
    healthCollectorStoreHealthInfo)
    call_healthCollectorStoreHealthInfo
    ;;
    jumpboxServiceAuthorize)
    call_jumpboxServiceAuthorize
    ;;
    jumpboxServiceDeleteTenant)
    call_jumpboxServiceDeleteTenant
    ;;
    jumpboxServiceDeleteUser)
    call_jumpboxServiceDeleteUser
    ;;
    jumpboxServiceGetTenant)
    call_jumpboxServiceGetTenant
    ;;
    jumpboxServiceGetTenants)
    call_jumpboxServiceGetTenants
    ;;
    jumpboxServiceGetUsers)
    call_jumpboxServiceGetUsers
    ;;
    jumpboxServicePostTenants)
    call_jumpboxServicePostTenants
    ;;
    jumpboxServicePostUsers)
    call_jumpboxServicePostUsers
    ;;
    jumpboxServiceSearchUsers)
    call_jumpboxServiceSearchUsers
    ;;
    jumpboxServiceTestUser)
    call_jumpboxServiceTestUser
    ;;
    jumpboxServiceUpdateTenant)
    call_jumpboxServiceUpdateTenant
    ;;
    jumpboxServiceUpdateUsers)
    call_jumpboxServiceUpdateUsers
    ;;
    notificationsServiceCreateTicket)
    call_notificationsServiceCreateTicket
    ;;
    notificationsServiceGetFolders)
    call_notificationsServiceGetFolders
    ;;
    notificationsServiceGetNotificationFilename)
    call_notificationsServiceGetNotificationFilename
    ;;
    notificationsServiceGetNotificationRecord)
    call_notificationsServiceGetNotificationRecord
    ;;
    notificationsServiceGetNotificationRecords)
    call_notificationsServiceGetNotificationRecords
    ;;
    notificationsServiceGetTicketStatus)
    call_notificationsServiceGetTicketStatus
    ;;
    notificationsServiceTestIntegration)
    call_notificationsServiceTestIntegration
    ;;
    notificationsServiceUpdateNotificationRecord)
    call_notificationsServiceUpdateNotificationRecord
    ;;
    outliersEngineGetSourceStatistics)
    call_outliersEngineGetSourceStatistics
    ;;
    outliersEngineGetStatistics)
    call_outliersEngineGetStatistics
    ;;
    outliersEngineGetWorkingHoursPeriods)
    call_outliersEngineGetWorkingHoursPeriods
    ;;
    outliersEngineRunSimulator)
    call_outliersEngineRunSimulator
    ;;
    outliersEngineUpdateWorkingHoursPeriods)
    call_outliersEngineUpdateWorkingHoursPeriods
    ;;
    outliersEngineUploadAndAnalyzePeriod)
    call_outliersEngineUploadAndAnalyzePeriod
    ;;
    outliersEngineUserClustering)
    call_outliersEngineUserClustering
    ;;
    pipelineconfigServiceDeleteTenantResources)
    call_pipelineconfigServiceDeleteTenantResources
    ;;
    policyBuilderClonePolicy)
    call_policyBuilderClonePolicy
    ;;
    policyBuilderCreatePolicy)
    call_policyBuilderCreatePolicy
    ;;
    policyBuilderDeleteGdpSyncEntry)
    call_policyBuilderDeleteGdpSyncEntry
    ;;
    policyBuilderDeletePolicies)
    call_policyBuilderDeletePolicies
    ;;
    policyBuilderGetGdpPolicyMetaData)
    call_policyBuilderGetGdpPolicyMetaData
    ;;
    policyBuilderGetPolicies)
    call_policyBuilderGetPolicies
    ;;
    policyBuilderGetPolicyDetails)
    call_policyBuilderGetPolicyDetails
    ;;
    policyBuilderGetPolicyNamesFromRuleIDs)
    call_policyBuilderGetPolicyNamesFromRuleIDs
    ;;
    policyBuilderGetPolicySyncList)
    call_policyBuilderGetPolicySyncList
    ;;
    policyBuilderGetReceivers)
    call_policyBuilderGetReceivers
    ;;
    policyBuilderGetRuleMetadata)
    call_policyBuilderGetRuleMetadata
    ;;
    policyBuilderInsertGdpPolicy)
    call_policyBuilderInsertGdpPolicy
    ;;
    policyBuilderInsertGdpPolicyMetaData)
    call_policyBuilderInsertGdpPolicyMetaData
    ;;
    policyBuilderInstallPolicies)
    call_policyBuilderInstallPolicies
    ;;
    policyBuilderIntegrationCheck)
    call_policyBuilderIntegrationCheck
    ;;
    policyBuilderPoliciesGroups)
    call_policyBuilderPoliciesGroups
    ;;
    policyBuilderRuleValidation)
    call_policyBuilderRuleValidation
    ;;
    policyBuilderStorePoliciesGdp)
    call_policyBuilderStorePoliciesGdp
    ;;
    qSDataManagerGetMasterData)
    call_qSDataManagerGetMasterData
    ;;
    qSDataManagerRegisterScan)
    call_qSDataManagerRegisterScan
    ;;
    qSDataManagerRetrieveScan)
    call_qSDataManagerRetrieveScan
    ;;
    qSPluginManagerInvokeAppProv)
    call_qSPluginManagerInvokeAppProv
    ;;
    qSPluginManagerInvokeExplorerV1)
    call_qSPluginManagerInvokeExplorerV1
    ;;
    qSPluginManagerInvokeExplorerV2)
    call_qSPluginManagerInvokeExplorerV2
    ;;
    qSPluginManagerInvokePlugin)
    call_qSPluginManagerInvokePlugin
    ;;
    qSPluginManagerInvokePolicy)
    call_qSPluginManagerInvokePolicy
    ;;
    qSPolicyManagerBatchStatusUpdate)
    call_qSPolicyManagerBatchStatusUpdate
    ;;
    qSPolicyManagerCreateTicket)
    call_qSPolicyManagerCreateTicket
    ;;
    qSPolicyManagerFetchFilesfromBuckets)
    call_qSPolicyManagerFetchFilesfromBuckets
    ;;
    qSPolicyManagerProcessPolicyDimentionRecords)
    call_qSPolicyManagerProcessPolicyDimentionRecords
    ;;
    qSPolicyManagerUpdateTicketStatus)
    call_qSPolicyManagerUpdateTicketStatus
    ;;
    reportsRunnerGetActiveQueries)
    call_reportsRunnerGetActiveQueries
    ;;
    reportsRunnerGetAuditDataCount)
    call_reportsRunnerGetAuditDataCount
    ;;
    reportsRunnerGetChartData)
    call_reportsRunnerGetChartData
    ;;
    reportsRunnerGetChartDatav2)
    call_reportsRunnerGetChartDatav2
    ;;
    reportsRunnerGetReportColumnFacet)
    call_reportsRunnerGetReportColumnFacet
    ;;
    reportsRunnerGetReportDataCount)
    call_reportsRunnerGetReportDataCount
    ;;
    reportsRunnerRunAuditReport)
    call_reportsRunnerRunAuditReport
    ;;
    reportsRunnerRunReport)
    call_reportsRunnerRunReport
    ;;
    reportsRunnerStopQuery)
    call_reportsRunnerStopQuery
    ;;
    reportsServiceCreateCategory)
    call_reportsServiceCreateCategory
    ;;
    reportsServiceCreateChart)
    call_reportsServiceCreateChart
    ;;
    reportsServiceCreateChartTemplatev2)
    call_reportsServiceCreateChartTemplatev2
    ;;
    reportsServiceCreateChartv2)
    call_reportsServiceCreateChartv2
    ;;
    reportsServiceCreateFieldsByCategory)
    call_reportsServiceCreateFieldsByCategory
    ;;
    reportsServiceCreateJoin)
    call_reportsServiceCreateJoin
    ;;
    reportsServiceCreateReport)
    call_reportsServiceCreateReport
    ;;
    reportsServiceCreateVariant)
    call_reportsServiceCreateVariant
    ;;
    reportsServiceDeleteCategory)
    call_reportsServiceDeleteCategory
    ;;
    reportsServiceDeleteChart)
    call_reportsServiceDeleteChart
    ;;
    reportsServiceDeleteChartTemplatev2)
    call_reportsServiceDeleteChartTemplatev2
    ;;
    reportsServiceDeleteChartv2)
    call_reportsServiceDeleteChartv2
    ;;
    reportsServiceDeleteFieldsByCategory)
    call_reportsServiceDeleteFieldsByCategory
    ;;
    reportsServiceDeleteJoin)
    call_reportsServiceDeleteJoin
    ;;
    reportsServiceDeleteReport)
    call_reportsServiceDeleteReport
    ;;
    reportsServiceDeleteVariant)
    call_reportsServiceDeleteVariant
    ;;
    reportsServiceGetCategories)
    call_reportsServiceGetCategories
    ;;
    reportsServiceGetChartSettings)
    call_reportsServiceGetChartSettings
    ;;
    reportsServiceGetChartSettingsv2)
    call_reportsServiceGetChartSettingsv2
    ;;
    reportsServiceGetChartTemplatesv2)
    call_reportsServiceGetChartTemplatesv2
    ;;
    reportsServiceGetFieldsByCategories)
    call_reportsServiceGetFieldsByCategories
    ;;
    reportsServiceGetFieldsByCategory)
    call_reportsServiceGetFieldsByCategory
    ;;
    reportsServiceGetJoins)
    call_reportsServiceGetJoins
    ;;
    reportsServiceGetQueryByReportDefinition)
    call_reportsServiceGetQueryByReportDefinition
    ;;
    reportsServiceGetQueryByReportID)
    call_reportsServiceGetQueryByReportID
    ;;
    reportsServiceGetReportDefinition)
    call_reportsServiceGetReportDefinition
    ;;
    reportsServiceGetReportGroups)
    call_reportsServiceGetReportGroups
    ;;
    reportsServiceGetReportSynopsis)
    call_reportsServiceGetReportSynopsis
    ;;
    reportsServiceGetReportTimestampHeader)
    call_reportsServiceGetReportTimestampHeader
    ;;
    reportsServiceGetReports)
    call_reportsServiceGetReports
    ;;
    reportsServiceGetReportsForJoin)
    call_reportsServiceGetReportsForJoin
    ;;
    reportsServiceGetReportsTags)
    call_reportsServiceGetReportsTags
    ;;
    reportsServiceGetVariant)
    call_reportsServiceGetVariant
    ;;
    reportsServiceGetVariants)
    call_reportsServiceGetVariants
    ;;
    reportsServicePartialChartUpdate)
    call_reportsServicePartialChartUpdate
    ;;
    reportsServicePartialReportUpdate)
    call_reportsServicePartialReportUpdate
    ;;
    reportsServiceRunVariantOperation)
    call_reportsServiceRunVariantOperation
    ;;
    reportsServiceTranspose)
    call_reportsServiceTranspose
    ;;
    reportsServiceUpdateChart)
    call_reportsServiceUpdateChart
    ;;
    reportsServiceUpdateChartv2)
    call_reportsServiceUpdateChartv2
    ;;
    reportsServiceUpdateJoin)
    call_reportsServiceUpdateJoin
    ;;
    reportsServiceUpdateReport)
    call_reportsServiceUpdateReport
    ;;
    reportsServiceUpdateVariantOverride)
    call_reportsServiceUpdateVariantOverride
    ;;
    riskAnalyticsControllerEnableDisableRiskEventFeedback)
    call_riskAnalyticsControllerEnableDisableRiskEventFeedback
    ;;
    riskAnalyticsControllerEnableDisableRiskEventProcess)
    call_riskAnalyticsControllerEnableDisableRiskEventProcess
    ;;
    riskAnalyticsControllerGetAllClassificationsList)
    call_riskAnalyticsControllerGetAllClassificationsList
    ;;
    riskAnalyticsControllerGetRiskEventClassificationsList)
    call_riskAnalyticsControllerGetRiskEventClassificationsList
    ;;
    riskAnalyticsControllerGetRiskEventDataForSummarization)
    call_riskAnalyticsControllerGetRiskEventDataForSummarization
    ;;
    riskAnalyticsControllerGetRiskEventDetails)
    call_riskAnalyticsControllerGetRiskEventDetails
    ;;
    riskAnalyticsControllerGetRiskEventProcessStatus)
    call_riskAnalyticsControllerGetRiskEventProcessStatus
    ;;
    riskAnalyticsControllerGetRiskEventRow)
    call_riskAnalyticsControllerGetRiskEventRow
    ;;
    riskAnalyticsControllerGetRiskEventVulnerabilityAssessmentDetails)
    call_riskAnalyticsControllerGetRiskEventVulnerabilityAssessmentDetails
    ;;
    riskAnalyticsControllerGetRiskFeedback)
    call_riskAnalyticsControllerGetRiskFeedback
    ;;
    riskAnalyticsControllerGetRiskObservationDetails)
    call_riskAnalyticsControllerGetRiskObservationDetails
    ;;
    riskAnalyticsControllerGetUserUISettings)
    call_riskAnalyticsControllerGetUserUISettings
    ;;
    riskAnalyticsControllerRiskEventTuning)
    call_riskAnalyticsControllerRiskEventTuning
    ;;
    riskAnalyticsControllerSetRiskEventStatus)
    call_riskAnalyticsControllerSetRiskEventStatus
    ;;
    riskAnalyticsControllerSetUserUISettings)
    call_riskAnalyticsControllerSetUserUISettings
    ;;
    riskAnalyticsControllerUpdateRiskFeedback)
    call_riskAnalyticsControllerUpdateRiskFeedback
    ;;
    riskAnalyticsDataProcessorGetRiskContext)
    call_riskAnalyticsDataProcessorGetRiskContext
    ;;
    riskAnalyticsDataProcessorGetRiskPredefinedQuestions)
    call_riskAnalyticsDataProcessorGetRiskPredefinedQuestions
    ;;
    riskAnalyticsEngineGetLeadGeneratorConfig)
    call_riskAnalyticsEngineGetLeadGeneratorConfig
    ;;
    riskAnalyticsEngineUpdateLeadGeneratorConfig)
    call_riskAnalyticsEngineUpdateLeadGeneratorConfig
    ;;
    riskAnalyticsMlClassificationResetModelToDefaults)
    call_riskAnalyticsMlClassificationResetModelToDefaults
    ;;
    schedulerServiceCreateScheduledJob)
    call_schedulerServiceCreateScheduledJob
    ;;
    schedulerServiceDeleteScheduledJob)
    call_schedulerServiceDeleteScheduledJob
    ;;
    schedulerServiceGetDependencies)
    call_schedulerServiceGetDependencies
    ;;
    schedulerServiceGetDistributionRules)
    call_schedulerServiceGetDistributionRules
    ;;
    schedulerServiceGetScheduledJobDetails)
    call_schedulerServiceGetScheduledJobDetails
    ;;
    schedulerServiceGetScheduledJobs)
    call_schedulerServiceGetScheduledJobs
    ;;
    schedulerServiceGetSchedulesByReport)
    call_schedulerServiceGetSchedulesByReport
    ;;
    schedulerServiceGetTags)
    call_schedulerServiceGetTags
    ;;
    schedulerServiceSearchScheduledJobs)
    call_schedulerServiceSearchScheduledJobs
    ;;
    schedulerServiceSearchScheduledTaskRuns)
    call_schedulerServiceSearchScheduledTaskRuns
    ;;
    schedulerServiceUpdateScheduledJob)
    call_schedulerServiceUpdateScheduledJob
    ;;
    snifAssistServiceTestRegex)
    call_snifAssistServiceTestRegex
    ;;
    streamsServiceCheckAWSCredentials)
    call_streamsServiceCheckAWSCredentials
    ;;
    streamsServiceCheckAzureEventHub)
    call_streamsServiceCheckAzureEventHub
    ;;
    streamsServiceCheckAzureStorageString)
    call_streamsServiceCheckAzureStorageString
    ;;
    streamsServiceGetAWSRegions)
    call_streamsServiceGetAWSRegions
    ;;
    streamsServiceListAWSStreams)
    call_streamsServiceListAWSStreams
    ;;
    templatesServiceCreateIntegration)
    call_templatesServiceCreateIntegration
    ;;
    templatesServiceCreateTemplate)
    call_templatesServiceCreateTemplate
    ;;
    templatesServiceDeleteIntegration)
    call_templatesServiceDeleteIntegration
    ;;
    templatesServiceDeleteTemplate)
    call_templatesServiceDeleteTemplate
    ;;
    templatesServiceGetOriginDefaultContent)
    call_templatesServiceGetOriginDefaultContent
    ;;
    templatesServiceGetOriginFields)
    call_templatesServiceGetOriginFields
    ;;
    templatesServiceGetTemplate)
    call_templatesServiceGetTemplate
    ;;
    templatesServiceGetTemplates)
    call_templatesServiceGetTemplates
    ;;
    templatesServiceTestTemplate)
    call_templatesServiceTestTemplate
    ;;
    templatesServiceTransformTemplate)
    call_templatesServiceTransformTemplate
    ;;
    templatesServiceTransformTemplateJSON)
    call_templatesServiceTransformTemplateJSON
    ;;
    templatesServiceUpdateTemplate)
    call_templatesServiceUpdateTemplate
    ;;
    tenantuserCreateAPIKey)
    call_tenantuserCreateAPIKey
    ;;
    tenantuserDeleteAPIKey)
    call_tenantuserDeleteAPIKey
    ;;
    tenantuserDeleteRole)
    call_tenantuserDeleteRole
    ;;
    tenantuserGetAPIKeys)
    call_tenantuserGetAPIKeys
    ;;
    tenantuserGetCurrentUser)
    call_tenantuserGetCurrentUser
    ;;
    tenantuserGetPrivilege)
    call_tenantuserGetPrivilege
    ;;
    tenantuserGetPrivileges)
    call_tenantuserGetPrivileges
    ;;
    tenantuserGetRole)
    call_tenantuserGetRole
    ;;
    tenantuserGetRoles)
    call_tenantuserGetRoles
    ;;
    tenantuserGetUser)
    call_tenantuserGetUser
    ;;
    tenantuserGetUserNames)
    call_tenantuserGetUserNames
    ;;
    tenantuserGetUserTenant)
    call_tenantuserGetUserTenant
    ;;
    tenantuserPostPrivilegesBulk)
    call_tenantuserPostPrivilegesBulk
    ;;
    tenantuserPostRole)
    call_tenantuserPostRole
    ;;
    tenantuserUpdatePrivilege)
    call_tenantuserUpdatePrivilege
    ;;
    tenantuserUpdatePrivilegesRoleBulk)
    call_tenantuserUpdatePrivilegesRoleBulk
    ;;
    tenantuserUpdateRole)
    call_tenantuserUpdateRole
    ;;
    tenantuserUpdateUserRoleBulk)
    call_tenantuserUpdateUserRoleBulk
    ;;
    getLinkedVendor)
    call_getLinkedVendor
    ;;
    getSingleLinkedVendor)
    call_getSingleLinkedVendor
    ;;
    listLinkedVendorDataStores)
    call_listLinkedVendorDataStores
    ;;
    listLinkedVendors)
    call_listLinkedVendors
    ;;
    listTrustedAssets)
    call_listTrustedAssets
    ;;
    universalConnectorManagerGetCertificate)
    call_universalConnectorManagerGetCertificate
    ;;
    universalConnectorManagerGetConnectors)
    call_universalConnectorManagerGetConnectors
    ;;
    universalConnectorManagerListConnectionsSummary)
    call_universalConnectorManagerListConnectionsSummary
    ;;
    universalConnectorManagerPluginsList)
    call_universalConnectorManagerPluginsList
    ;;
    universalConnectorManagerUploadPlugin)
    call_universalConnectorManagerUploadPlugin
    ;;
    workflowCreateCase)
    call_workflowCreateCase
    ;;
    workflowCreateTask)
    call_workflowCreateTask
    ;;
    workflowGetCases)
    call_workflowGetCases
    ;;
    workflowGetCasesCount)
    call_workflowGetCasesCount
    ;;
    workflowGetFilename)
    call_workflowGetFilename
    ;;
    workflowGetJobsCount)
    call_workflowGetJobsCount
    ;;
    workflowGetReportResult)
    call_workflowGetReportResult
    ;;
    workflowGetTasks)
    call_workflowGetTasks
    ;;
    workflowGetTasksCount)
    call_workflowGetTasksCount
    ;;
    workflowSearchCases)
    call_workflowSearchCases
    ;;
    workflowSearchReports)
    call_workflowSearchReports
    ;;
    workflowSearchTasks)
    call_workflowSearchTasks
    ;;
    workflowUpdateCases)
    call_workflowUpdateCases
    ;;
    workflowUpdateTasks)
    call_workflowUpdateTasks
    ;;
    *)
    ERROR_MSG="ERROR: Unknown operation: $operation"
    exit 1
esac
