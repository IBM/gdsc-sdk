/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.security.guardium;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.security.guardium.Resourcecontrollerk8v3Container;
import com.ibm.security.guardium.Resourcecontrollerk8v3Cron;
import com.ibm.security.guardium.Resourcecontrollerk8v3File;
import com.ibm.security.guardium.Resourcecontrollerk8v3JobExecution;
import com.ibm.security.guardium.Resourcecontrollerk8v3Rule;
import com.ibm.security.guardium.Resourcecontrollerk8v3Secret;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.security.JSON;

/**
 * Job contains the information about a job.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T18:44:53.377644Z[UTC]", comments = "Generator version: 7.6.0")
public class Resourcecontrollerk8v3Job {
  public static final String SERIALIZED_NAME_CLUSTER_ROLE_RULES = "cluster_role_rules";
  @SerializedName(SERIALIZED_NAME_CLUSTER_ROLE_RULES)
  private List<Resourcecontrollerk8v3Rule> clusterRoleRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMMAND = "command";
  @SerializedName(SERIALIZED_NAME_COMMAND)
  private List<String> command = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTAINER = "container";
  @SerializedName(SERIALIZED_NAME_CONTAINER)
  private Resourcecontrollerk8v3Container container;

  public static final String SERIALIZED_NAME_CONTROLLER_ID = "controller_id";
  @SerializedName(SERIALIZED_NAME_CONTROLLER_ID)
  private String controllerId;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private String created;

  public static final String SERIALIZED_NAME_CRON = "cron";
  @SerializedName(SERIALIZED_NAME_CRON)
  private Resourcecontrollerk8v3Cron cron;

  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  private List<Resourcecontrollerk8v3File> files = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_LAST_EXECUTION = "last_execution";
  @SerializedName(SERIALIZED_NAME_LAST_EXECUTION)
  private Resourcecontrollerk8v3JobExecution lastExecution;

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private String modified;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ROLE_RULES = "role_rules";
  @SerializedName(SERIALIZED_NAME_ROLE_RULES)
  private List<Resourcecontrollerk8v3Rule> roleRules = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECRET_KEY = "secret_key";
  @SerializedName(SERIALIZED_NAME_SECRET_KEY)
  private String secretKey;

  public static final String SERIALIZED_NAME_SECRETS = "secrets";
  @SerializedName(SERIALIZED_NAME_SECRETS)
  private List<Resourcecontrollerk8v3Secret> secrets = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public Resourcecontrollerk8v3Job() {
  }

  public Resourcecontrollerk8v3Job clusterRoleRules(List<Resourcecontrollerk8v3Rule> clusterRoleRules) {
    this.clusterRoleRules = clusterRoleRules;
    return this;
  }

  public Resourcecontrollerk8v3Job addClusterRoleRulesItem(Resourcecontrollerk8v3Rule clusterRoleRulesItem) {
    if (this.clusterRoleRules == null) {
      this.clusterRoleRules = new ArrayList<>();
    }
    this.clusterRoleRules.add(clusterRoleRulesItem);
    return this;
  }

   /**
   * Get clusterRoleRules
   * @return clusterRoleRules
  **/
  @javax.annotation.Nullable
  public List<Resourcecontrollerk8v3Rule> getClusterRoleRules() {
    return clusterRoleRules;
  }

  public void setClusterRoleRules(List<Resourcecontrollerk8v3Rule> clusterRoleRules) {
    this.clusterRoleRules = clusterRoleRules;
  }


  public Resourcecontrollerk8v3Job command(List<String> command) {
    this.command = command;
    return this;
  }

  public Resourcecontrollerk8v3Job addCommandItem(String commandItem) {
    if (this.command == null) {
      this.command = new ArrayList<>();
    }
    this.command.add(commandItem);
    return this;
  }

   /**
   * Optional:  The optional command to execute as part of the job (if the container entrypoint is insufficient).
   * @return command
  **/
  @javax.annotation.Nullable
  public List<String> getCommand() {
    return command;
  }

  public void setCommand(List<String> command) {
    this.command = command;
  }


  public Resourcecontrollerk8v3Job container(Resourcecontrollerk8v3Container container) {
    this.container = container;
    return this;
  }

   /**
   * Get container
   * @return container
  **/
  @javax.annotation.Nullable
  public Resourcecontrollerk8v3Container getContainer() {
    return container;
  }

  public void setContainer(Resourcecontrollerk8v3Container container) {
    this.container = container;
  }


  public Resourcecontrollerk8v3Job controllerId(String controllerId) {
    this.controllerId = controllerId;
    return this;
  }

   /**
   * The ID of the controller to execute the job on.
   * @return controllerId
  **/
  @javax.annotation.Nullable
  public String getControllerId() {
    return controllerId;
  }

  public void setControllerId(String controllerId) {
    this.controllerId = controllerId;
  }


  public Resourcecontrollerk8v3Job created(String created) {
    this.created = created;
    return this;
  }

   /**
   * Optional:  The date this job was created (ms since epoch).
   * @return created
  **/
  @javax.annotation.Nullable
  public String getCreated() {
    return created;
  }

  public void setCreated(String created) {
    this.created = created;
  }


  public Resourcecontrollerk8v3Job cron(Resourcecontrollerk8v3Cron cron) {
    this.cron = cron;
    return this;
  }

   /**
   * Get cron
   * @return cron
  **/
  @javax.annotation.Nullable
  public Resourcecontrollerk8v3Cron getCron() {
    return cron;
  }

  public void setCron(Resourcecontrollerk8v3Cron cron) {
    this.cron = cron;
  }


  public Resourcecontrollerk8v3Job files(List<Resourcecontrollerk8v3File> files) {
    this.files = files;
    return this;
  }

  public Resourcecontrollerk8v3Job addFilesItem(Resourcecontrollerk8v3File filesItem) {
    if (this.files == null) {
      this.files = new ArrayList<>();
    }
    this.files.add(filesItem);
    return this;
  }

   /**
   * Optional:  The files for the job.
   * @return files
  **/
  @javax.annotation.Nullable
  public List<Resourcecontrollerk8v3File> getFiles() {
    return files;
  }

  public void setFiles(List<Resourcecontrollerk8v3File> files) {
    this.files = files;
  }


  public Resourcecontrollerk8v3Job id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The ID of the job.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Resourcecontrollerk8v3Job labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Resourcecontrollerk8v3Job putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

   /**
   * Optional:  The labels for the associated job, cron job, and pod.
   * @return labels
  **/
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public Resourcecontrollerk8v3Job lastExecution(Resourcecontrollerk8v3JobExecution lastExecution) {
    this.lastExecution = lastExecution;
    return this;
  }

   /**
   * Get lastExecution
   * @return lastExecution
  **/
  @javax.annotation.Nullable
  public Resourcecontrollerk8v3JobExecution getLastExecution() {
    return lastExecution;
  }

  public void setLastExecution(Resourcecontrollerk8v3JobExecution lastExecution) {
    this.lastExecution = lastExecution;
  }


  public Resourcecontrollerk8v3Job modified(String modified) {
    this.modified = modified;
    return this;
  }

   /**
   * Optional:  The date this job was modified (ms since epoch).
   * @return modified
  **/
  @javax.annotation.Nullable
  public String getModified() {
    return modified;
  }

  public void setModified(String modified) {
    this.modified = modified;
  }


  public Resourcecontrollerk8v3Job name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the job.
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Resourcecontrollerk8v3Job roleRules(List<Resourcecontrollerk8v3Rule> roleRules) {
    this.roleRules = roleRules;
    return this;
  }

  public Resourcecontrollerk8v3Job addRoleRulesItem(Resourcecontrollerk8v3Rule roleRulesItem) {
    if (this.roleRules == null) {
      this.roleRules = new ArrayList<>();
    }
    this.roleRules.add(roleRulesItem);
    return this;
  }

   /**
   * Get roleRules
   * @return roleRules
  **/
  @javax.annotation.Nullable
  public List<Resourcecontrollerk8v3Rule> getRoleRules() {
    return roleRules;
  }

  public void setRoleRules(List<Resourcecontrollerk8v3Rule> roleRules) {
    this.roleRules = roleRules;
  }


  public Resourcecontrollerk8v3Job secretKey(String secretKey) {
    this.secretKey = secretKey;
    return this;
  }

   /**
   * Get secretKey
   * @return secretKey
  **/
  @javax.annotation.Nullable
  public String getSecretKey() {
    return secretKey;
  }

  public void setSecretKey(String secretKey) {
    this.secretKey = secretKey;
  }


  public Resourcecontrollerk8v3Job secrets(List<Resourcecontrollerk8v3Secret> secrets) {
    this.secrets = secrets;
    return this;
  }

  public Resourcecontrollerk8v3Job addSecretsItem(Resourcecontrollerk8v3Secret secretsItem) {
    if (this.secrets == null) {
      this.secrets = new ArrayList<>();
    }
    this.secrets.add(secretsItem);
    return this;
  }

   /**
   * Optional:  The secrets for the job.
   * @return secrets
  **/
  @javax.annotation.Nullable
  public List<Resourcecontrollerk8v3Secret> getSecrets() {
    return secrets;
  }

  public void setSecrets(List<Resourcecontrollerk8v3Secret> secrets) {
    this.secrets = secrets;
  }


  public Resourcecontrollerk8v3Job status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Optional:  The current job status.
   * @return status
  **/
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Resourcecontrollerk8v3Job resourcecontrollerk8v3Job = (Resourcecontrollerk8v3Job) o;
    return Objects.equals(this.clusterRoleRules, resourcecontrollerk8v3Job.clusterRoleRules) &&
        Objects.equals(this.command, resourcecontrollerk8v3Job.command) &&
        Objects.equals(this.container, resourcecontrollerk8v3Job.container) &&
        Objects.equals(this.controllerId, resourcecontrollerk8v3Job.controllerId) &&
        Objects.equals(this.created, resourcecontrollerk8v3Job.created) &&
        Objects.equals(this.cron, resourcecontrollerk8v3Job.cron) &&
        Objects.equals(this.files, resourcecontrollerk8v3Job.files) &&
        Objects.equals(this.id, resourcecontrollerk8v3Job.id) &&
        Objects.equals(this.labels, resourcecontrollerk8v3Job.labels) &&
        Objects.equals(this.lastExecution, resourcecontrollerk8v3Job.lastExecution) &&
        Objects.equals(this.modified, resourcecontrollerk8v3Job.modified) &&
        Objects.equals(this.name, resourcecontrollerk8v3Job.name) &&
        Objects.equals(this.roleRules, resourcecontrollerk8v3Job.roleRules) &&
        Objects.equals(this.secretKey, resourcecontrollerk8v3Job.secretKey) &&
        Objects.equals(this.secrets, resourcecontrollerk8v3Job.secrets) &&
        Objects.equals(this.status, resourcecontrollerk8v3Job.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clusterRoleRules, command, container, controllerId, created, cron, files, id, labels, lastExecution, modified, name, roleRules, secretKey, secrets, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Resourcecontrollerk8v3Job {\n");
    sb.append("    clusterRoleRules: ").append(toIndentedString(clusterRoleRules)).append("\n");
    sb.append("    command: ").append(toIndentedString(command)).append("\n");
    sb.append("    container: ").append(toIndentedString(container)).append("\n");
    sb.append("    controllerId: ").append(toIndentedString(controllerId)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    cron: ").append(toIndentedString(cron)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    lastExecution: ").append(toIndentedString(lastExecution)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    roleRules: ").append(toIndentedString(roleRules)).append("\n");
    sb.append("    secretKey: ").append(toIndentedString(secretKey)).append("\n");
    sb.append("    secrets: ").append(toIndentedString(secrets)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cluster_role_rules");
    openapiFields.add("command");
    openapiFields.add("container");
    openapiFields.add("controller_id");
    openapiFields.add("created");
    openapiFields.add("cron");
    openapiFields.add("files");
    openapiFields.add("id");
    openapiFields.add("labels");
    openapiFields.add("last_execution");
    openapiFields.add("modified");
    openapiFields.add("name");
    openapiFields.add("role_rules");
    openapiFields.add("secret_key");
    openapiFields.add("secrets");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Resourcecontrollerk8v3Job
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Resourcecontrollerk8v3Job.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Resourcecontrollerk8v3Job is not found in the empty JSON string", Resourcecontrollerk8v3Job.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Resourcecontrollerk8v3Job.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Resourcecontrollerk8v3Job` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("cluster_role_rules") != null && !jsonObj.get("cluster_role_rules").isJsonNull()) {
        JsonArray jsonArrayclusterRoleRules = jsonObj.getAsJsonArray("cluster_role_rules");
        if (jsonArrayclusterRoleRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cluster_role_rules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cluster_role_rules` to be an array in the JSON string but got `%s`", jsonObj.get("cluster_role_rules").toString()));
          }

          // validate the optional field `cluster_role_rules` (array)
          for (int i = 0; i < jsonArrayclusterRoleRules.size(); i++) {
            Resourcecontrollerk8v3Rule.validateJsonElement(jsonArrayclusterRoleRules.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("command") != null && !jsonObj.get("command").isJsonNull() && !jsonObj.get("command").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `command` to be an array in the JSON string but got `%s`", jsonObj.get("command").toString()));
      }
      // validate the optional field `container`
      if (jsonObj.get("container") != null && !jsonObj.get("container").isJsonNull()) {
        Resourcecontrollerk8v3Container.validateJsonElement(jsonObj.get("container"));
      }
      if ((jsonObj.get("controller_id") != null && !jsonObj.get("controller_id").isJsonNull()) && !jsonObj.get("controller_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `controller_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("controller_id").toString()));
      }
      if ((jsonObj.get("created") != null && !jsonObj.get("created").isJsonNull()) && !jsonObj.get("created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created").toString()));
      }
      // validate the optional field `cron`
      if (jsonObj.get("cron") != null && !jsonObj.get("cron").isJsonNull()) {
        Resourcecontrollerk8v3Cron.validateJsonElement(jsonObj.get("cron"));
      }
      if (jsonObj.get("files") != null && !jsonObj.get("files").isJsonNull()) {
        JsonArray jsonArrayfiles = jsonObj.getAsJsonArray("files");
        if (jsonArrayfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("files").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `files` to be an array in the JSON string but got `%s`", jsonObj.get("files").toString()));
          }

          // validate the optional field `files` (array)
          for (int i = 0; i < jsonArrayfiles.size(); i++) {
            Resourcecontrollerk8v3File.validateJsonElement(jsonArrayfiles.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `last_execution`
      if (jsonObj.get("last_execution") != null && !jsonObj.get("last_execution").isJsonNull()) {
        Resourcecontrollerk8v3JobExecution.validateJsonElement(jsonObj.get("last_execution"));
      }
      if ((jsonObj.get("modified") != null && !jsonObj.get("modified").isJsonNull()) && !jsonObj.get("modified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modified").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("role_rules") != null && !jsonObj.get("role_rules").isJsonNull()) {
        JsonArray jsonArrayroleRules = jsonObj.getAsJsonArray("role_rules");
        if (jsonArrayroleRules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("role_rules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `role_rules` to be an array in the JSON string but got `%s`", jsonObj.get("role_rules").toString()));
          }

          // validate the optional field `role_rules` (array)
          for (int i = 0; i < jsonArrayroleRules.size(); i++) {
            Resourcecontrollerk8v3Rule.validateJsonElement(jsonArrayroleRules.get(i));
          };
        }
      }
      if ((jsonObj.get("secret_key") != null && !jsonObj.get("secret_key").isJsonNull()) && !jsonObj.get("secret_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secret_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secret_key").toString()));
      }
      if (jsonObj.get("secrets") != null && !jsonObj.get("secrets").isJsonNull()) {
        JsonArray jsonArraysecrets = jsonObj.getAsJsonArray("secrets");
        if (jsonArraysecrets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("secrets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `secrets` to be an array in the JSON string but got `%s`", jsonObj.get("secrets").toString()));
          }

          // validate the optional field `secrets` (array)
          for (int i = 0; i < jsonArraysecrets.size(); i++) {
            Resourcecontrollerk8v3Secret.validateJsonElement(jsonArraysecrets.get(i));
          };
        }
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Resourcecontrollerk8v3Job.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Resourcecontrollerk8v3Job' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Resourcecontrollerk8v3Job> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Resourcecontrollerk8v3Job.class));

       return (TypeAdapter<T>) new TypeAdapter<Resourcecontrollerk8v3Job>() {
           @Override
           public void write(JsonWriter out, Resourcecontrollerk8v3Job value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Resourcecontrollerk8v3Job read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Resourcecontrollerk8v3Job given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Resourcecontrollerk8v3Job
  * @throws IOException if the JSON string is invalid with respect to Resourcecontrollerk8v3Job
  */
  public static Resourcecontrollerk8v3Job fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Resourcecontrollerk8v3Job.class);
  }

 /**
  * Convert an instance of Resourcecontrollerk8v3Job to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

