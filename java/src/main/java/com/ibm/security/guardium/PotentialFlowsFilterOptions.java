/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.security.guardium;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.security.guardium.AccessType;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.security.JSON;

/**
 * PotentialFlowsFilterOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-27T16:17:29.841502Z[UTC]", comments = "Generator version: 7.6.0")
public class PotentialFlowsFilterOptions {
  public static final String SERIALIZED_NAME_IDS = "ids";
  @SerializedName(SERIALIZED_NAME_IDS)
  private List<String> ids = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPES = "types";
  @SerializedName(SERIALIZED_NAME_TYPES)
  private List<String> types = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE_TYPES = "sourceTypes";
  @SerializedName(SERIALIZED_NAME_SOURCE_TYPES)
  private List<String> sourceTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLOUD_ACCOUNTS = "cloudAccounts";
  @SerializedName(SERIALIZED_NAME_CLOUD_ACCOUNTS)
  private List<String> cloudAccounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLOUD_REGIONS = "cloudRegions";
  @SerializedName(SERIALIZED_NAME_CLOUD_REGIONS)
  private List<String> cloudRegions = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE_IDS = "sourceIds";
  @SerializedName(SERIALIZED_NAME_SOURCE_IDS)
  private List<String> sourceIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESTINATION_IDS = "destinationIds";
  @SerializedName(SERIALIZED_NAME_DESTINATION_IDS)
  private List<String> destinationIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_ACCESS_TYPES = "accessTypes";
  @SerializedName(SERIALIZED_NAME_ACCESS_TYPES)
  private List<AccessType> accessTypes = new ArrayList<>();

  public PotentialFlowsFilterOptions() {
  }

  public PotentialFlowsFilterOptions ids(List<String> ids) {
    this.ids = ids;
    return this;
  }

  public PotentialFlowsFilterOptions addIdsItem(String idsItem) {
    if (this.ids == null) {
      this.ids = new ArrayList<>();
    }
    this.ids.add(idsItem);
    return this;
  }

   /**
   * Get ids
   * @return ids
  **/
  @javax.annotation.Nullable
  public List<String> getIds() {
    return ids;
  }

  public void setIds(List<String> ids) {
    this.ids = ids;
  }


  public PotentialFlowsFilterOptions types(List<String> types) {
    this.types = types;
    return this;
  }

  public PotentialFlowsFilterOptions addTypesItem(String typesItem) {
    if (this.types == null) {
      this.types = new ArrayList<>();
    }
    this.types.add(typesItem);
    return this;
  }

   /**
   * Get types
   * @return types
  **/
  @javax.annotation.Nullable
  public List<String> getTypes() {
    return types;
  }

  public void setTypes(List<String> types) {
    this.types = types;
  }


  public PotentialFlowsFilterOptions sourceTypes(List<String> sourceTypes) {
    this.sourceTypes = sourceTypes;
    return this;
  }

  public PotentialFlowsFilterOptions addSourceTypesItem(String sourceTypesItem) {
    if (this.sourceTypes == null) {
      this.sourceTypes = new ArrayList<>();
    }
    this.sourceTypes.add(sourceTypesItem);
    return this;
  }

   /**
   * Get sourceTypes
   * @return sourceTypes
  **/
  @javax.annotation.Nullable
  public List<String> getSourceTypes() {
    return sourceTypes;
  }

  public void setSourceTypes(List<String> sourceTypes) {
    this.sourceTypes = sourceTypes;
  }


  public PotentialFlowsFilterOptions cloudAccounts(List<String> cloudAccounts) {
    this.cloudAccounts = cloudAccounts;
    return this;
  }

  public PotentialFlowsFilterOptions addCloudAccountsItem(String cloudAccountsItem) {
    if (this.cloudAccounts == null) {
      this.cloudAccounts = new ArrayList<>();
    }
    this.cloudAccounts.add(cloudAccountsItem);
    return this;
  }

   /**
   * Get cloudAccounts
   * @return cloudAccounts
  **/
  @javax.annotation.Nullable
  public List<String> getCloudAccounts() {
    return cloudAccounts;
  }

  public void setCloudAccounts(List<String> cloudAccounts) {
    this.cloudAccounts = cloudAccounts;
  }


  public PotentialFlowsFilterOptions cloudRegions(List<String> cloudRegions) {
    this.cloudRegions = cloudRegions;
    return this;
  }

  public PotentialFlowsFilterOptions addCloudRegionsItem(String cloudRegionsItem) {
    if (this.cloudRegions == null) {
      this.cloudRegions = new ArrayList<>();
    }
    this.cloudRegions.add(cloudRegionsItem);
    return this;
  }

   /**
   * Get cloudRegions
   * @return cloudRegions
  **/
  @javax.annotation.Nullable
  public List<String> getCloudRegions() {
    return cloudRegions;
  }

  public void setCloudRegions(List<String> cloudRegions) {
    this.cloudRegions = cloudRegions;
  }


  public PotentialFlowsFilterOptions sourceIds(List<String> sourceIds) {
    this.sourceIds = sourceIds;
    return this;
  }

  public PotentialFlowsFilterOptions addSourceIdsItem(String sourceIdsItem) {
    if (this.sourceIds == null) {
      this.sourceIds = new ArrayList<>();
    }
    this.sourceIds.add(sourceIdsItem);
    return this;
  }

   /**
   * Get sourceIds
   * @return sourceIds
  **/
  @javax.annotation.Nullable
  public List<String> getSourceIds() {
    return sourceIds;
  }

  public void setSourceIds(List<String> sourceIds) {
    this.sourceIds = sourceIds;
  }


  public PotentialFlowsFilterOptions destinationIds(List<String> destinationIds) {
    this.destinationIds = destinationIds;
    return this;
  }

  public PotentialFlowsFilterOptions addDestinationIdsItem(String destinationIdsItem) {
    if (this.destinationIds == null) {
      this.destinationIds = new ArrayList<>();
    }
    this.destinationIds.add(destinationIdsItem);
    return this;
  }

   /**
   * Get destinationIds
   * @return destinationIds
  **/
  @javax.annotation.Nullable
  public List<String> getDestinationIds() {
    return destinationIds;
  }

  public void setDestinationIds(List<String> destinationIds) {
    this.destinationIds = destinationIds;
  }


  public PotentialFlowsFilterOptions accessTypes(List<AccessType> accessTypes) {
    this.accessTypes = accessTypes;
    return this;
  }

  public PotentialFlowsFilterOptions addAccessTypesItem(AccessType accessTypesItem) {
    if (this.accessTypes == null) {
      this.accessTypes = new ArrayList<>();
    }
    this.accessTypes.add(accessTypesItem);
    return this;
  }

   /**
   * Get accessTypes
   * @return accessTypes
  **/
  @javax.annotation.Nullable
  public List<AccessType> getAccessTypes() {
    return accessTypes;
  }

  public void setAccessTypes(List<AccessType> accessTypes) {
    this.accessTypes = accessTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PotentialFlowsFilterOptions potentialFlowsFilterOptions = (PotentialFlowsFilterOptions) o;
    return Objects.equals(this.ids, potentialFlowsFilterOptions.ids) &&
        Objects.equals(this.types, potentialFlowsFilterOptions.types) &&
        Objects.equals(this.sourceTypes, potentialFlowsFilterOptions.sourceTypes) &&
        Objects.equals(this.cloudAccounts, potentialFlowsFilterOptions.cloudAccounts) &&
        Objects.equals(this.cloudRegions, potentialFlowsFilterOptions.cloudRegions) &&
        Objects.equals(this.sourceIds, potentialFlowsFilterOptions.sourceIds) &&
        Objects.equals(this.destinationIds, potentialFlowsFilterOptions.destinationIds) &&
        Objects.equals(this.accessTypes, potentialFlowsFilterOptions.accessTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ids, types, sourceTypes, cloudAccounts, cloudRegions, sourceIds, destinationIds, accessTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PotentialFlowsFilterOptions {\n");
    sb.append("    ids: ").append(toIndentedString(ids)).append("\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("    sourceTypes: ").append(toIndentedString(sourceTypes)).append("\n");
    sb.append("    cloudAccounts: ").append(toIndentedString(cloudAccounts)).append("\n");
    sb.append("    cloudRegions: ").append(toIndentedString(cloudRegions)).append("\n");
    sb.append("    sourceIds: ").append(toIndentedString(sourceIds)).append("\n");
    sb.append("    destinationIds: ").append(toIndentedString(destinationIds)).append("\n");
    sb.append("    accessTypes: ").append(toIndentedString(accessTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ids");
    openapiFields.add("types");
    openapiFields.add("sourceTypes");
    openapiFields.add("cloudAccounts");
    openapiFields.add("cloudRegions");
    openapiFields.add("sourceIds");
    openapiFields.add("destinationIds");
    openapiFields.add("accessTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PotentialFlowsFilterOptions
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PotentialFlowsFilterOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PotentialFlowsFilterOptions is not found in the empty JSON string", PotentialFlowsFilterOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PotentialFlowsFilterOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PotentialFlowsFilterOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("ids") != null && !jsonObj.get("ids").isJsonNull() && !jsonObj.get("ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ids` to be an array in the JSON string but got `%s`", jsonObj.get("ids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("types") != null && !jsonObj.get("types").isJsonNull() && !jsonObj.get("types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `types` to be an array in the JSON string but got `%s`", jsonObj.get("types").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sourceTypes") != null && !jsonObj.get("sourceTypes").isJsonNull() && !jsonObj.get("sourceTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceTypes` to be an array in the JSON string but got `%s`", jsonObj.get("sourceTypes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cloudAccounts") != null && !jsonObj.get("cloudAccounts").isJsonNull() && !jsonObj.get("cloudAccounts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloudAccounts` to be an array in the JSON string but got `%s`", jsonObj.get("cloudAccounts").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cloudRegions") != null && !jsonObj.get("cloudRegions").isJsonNull() && !jsonObj.get("cloudRegions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloudRegions` to be an array in the JSON string but got `%s`", jsonObj.get("cloudRegions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sourceIds") != null && !jsonObj.get("sourceIds").isJsonNull() && !jsonObj.get("sourceIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceIds` to be an array in the JSON string but got `%s`", jsonObj.get("sourceIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("destinationIds") != null && !jsonObj.get("destinationIds").isJsonNull() && !jsonObj.get("destinationIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationIds` to be an array in the JSON string but got `%s`", jsonObj.get("destinationIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("accessTypes") != null && !jsonObj.get("accessTypes").isJsonNull() && !jsonObj.get("accessTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessTypes` to be an array in the JSON string but got `%s`", jsonObj.get("accessTypes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PotentialFlowsFilterOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PotentialFlowsFilterOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PotentialFlowsFilterOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PotentialFlowsFilterOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<PotentialFlowsFilterOptions>() {
           @Override
           public void write(JsonWriter out, PotentialFlowsFilterOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PotentialFlowsFilterOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PotentialFlowsFilterOptions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PotentialFlowsFilterOptions
  * @throws IOException if the JSON string is invalid with respect to PotentialFlowsFilterOptions
  */
  public static PotentialFlowsFilterOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PotentialFlowsFilterOptions.class);
  }

 /**
  * Convert an instance of PotentialFlowsFilterOptions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

