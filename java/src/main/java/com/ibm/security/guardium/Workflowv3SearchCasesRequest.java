/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.security.guardium;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.security.guardium.Workflowv3Filter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.security.JSON;

/**
 * Request cases by filtering on specific values.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T18:44:53.377644Z[UTC]", comments = "Generator version: 7.6.0")
public class Workflowv3SearchCasesRequest {
  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private Workflowv3Filter filter;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Integer offset;

  public static final String SERIALIZED_NAME_WITH_LATEST = "with_latest";
  @SerializedName(SERIALIZED_NAME_WITH_LATEST)
  private Boolean withLatest;

  public Workflowv3SearchCasesRequest() {
  }

  public Workflowv3SearchCasesRequest filter(Workflowv3Filter filter) {
    this.filter = filter;
    return this;
  }

   /**
   * Get filter
   * @return filter
  **/
  @javax.annotation.Nullable
  public Workflowv3Filter getFilter() {
    return filter;
  }

  public void setFilter(Workflowv3Filter filter) {
    this.filter = filter;
  }


  public Workflowv3SearchCasesRequest limit(Integer limit) {
    this.limit = limit;
    return this;
  }

   /**
   * Optional: The max amount of cases to return for pagination.
   * @return limit
  **/
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public Workflowv3SearchCasesRequest offset(Integer offset) {
    this.offset = offset;
    return this;
  }

   /**
   * Optional: The amount to offset the cases for pagination.
   * @return offset
  **/
  @javax.annotation.Nullable
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }


  public Workflowv3SearchCasesRequest withLatest(Boolean withLatest) {
    this.withLatest = withLatest;
    return this;
  }

   /**
   * Optional: Cases that runs most latestly.
   * @return withLatest
  **/
  @javax.annotation.Nullable
  public Boolean getWithLatest() {
    return withLatest;
  }

  public void setWithLatest(Boolean withLatest) {
    this.withLatest = withLatest;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Workflowv3SearchCasesRequest workflowv3SearchCasesRequest = (Workflowv3SearchCasesRequest) o;
    return Objects.equals(this.filter, workflowv3SearchCasesRequest.filter) &&
        Objects.equals(this.limit, workflowv3SearchCasesRequest.limit) &&
        Objects.equals(this.offset, workflowv3SearchCasesRequest.offset) &&
        Objects.equals(this.withLatest, workflowv3SearchCasesRequest.withLatest);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filter, limit, offset, withLatest);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Workflowv3SearchCasesRequest {\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    withLatest: ").append(toIndentedString(withLatest)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("filter");
    openapiFields.add("limit");
    openapiFields.add("offset");
    openapiFields.add("with_latest");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Workflowv3SearchCasesRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Workflowv3SearchCasesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Workflowv3SearchCasesRequest is not found in the empty JSON string", Workflowv3SearchCasesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Workflowv3SearchCasesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Workflowv3SearchCasesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `filter`
      if (jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) {
        Workflowv3Filter.validateJsonElement(jsonObj.get("filter"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Workflowv3SearchCasesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Workflowv3SearchCasesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Workflowv3SearchCasesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Workflowv3SearchCasesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<Workflowv3SearchCasesRequest>() {
           @Override
           public void write(JsonWriter out, Workflowv3SearchCasesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Workflowv3SearchCasesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Workflowv3SearchCasesRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Workflowv3SearchCasesRequest
  * @throws IOException if the JSON string is invalid with respect to Workflowv3SearchCasesRequest
  */
  public static Workflowv3SearchCasesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Workflowv3SearchCasesRequest.class);
  }

 /**
  * Convert an instance of Workflowv3SearchCasesRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

