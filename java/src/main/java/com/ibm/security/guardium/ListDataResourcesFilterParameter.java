/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.security.guardium;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.security.guardium.SensitivityCategory;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.security.JSON;

/**
 * ListDataResourcesFilterParameter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T18:44:53.377644Z[UTC]", comments = "Generator version: 7.6.0")
public class ListDataResourcesFilterParameter {
  public static final String SERIALIZED_NAME_IS_REVIEWED = "isReviewed";
  @SerializedName(SERIALIZED_NAME_IS_REVIEWED)
  private Boolean isReviewed;

  public static final String SERIALIZED_NAME_RESOURCE_OWNERS = "resourceOwners";
  @SerializedName(SERIALIZED_NAME_RESOURCE_OWNERS)
  private List<String> resourceOwners = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESOURCE_NAMES = "resourceNames";
  @SerializedName(SERIALIZED_NAME_RESOURCE_NAMES)
  private List<String> resourceNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESOURCE_TYPES = "resourceTypes";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPES)
  private List<String> resourceTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SENSITIVITY_TAGS = "sensitivityTags";
  @SerializedName(SERIALIZED_NAME_SENSITIVITY_TAGS)
  private List<String> sensitivityTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_SENSITIVITY_CATEGORIES = "sensitivityCategories";
  @SerializedName(SERIALIZED_NAME_SENSITIVITY_CATEGORIES)
  private List<SensitivityCategory> sensitivityCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESOURCE_PARTIAL_NAME = "resourcePartialName";
  @SerializedName(SERIALIZED_NAME_RESOURCE_PARTIAL_NAME)
  private String resourcePartialName;

  public ListDataResourcesFilterParameter() {
  }

  public ListDataResourcesFilterParameter isReviewed(Boolean isReviewed) {
    this.isReviewed = isReviewed;
    return this;
  }

   /**
   * Get isReviewed
   * @return isReviewed
  **/
  @javax.annotation.Nullable
  public Boolean getIsReviewed() {
    return isReviewed;
  }

  public void setIsReviewed(Boolean isReviewed) {
    this.isReviewed = isReviewed;
  }


  public ListDataResourcesFilterParameter resourceOwners(List<String> resourceOwners) {
    this.resourceOwners = resourceOwners;
    return this;
  }

  public ListDataResourcesFilterParameter addResourceOwnersItem(String resourceOwnersItem) {
    if (this.resourceOwners == null) {
      this.resourceOwners = new ArrayList<>();
    }
    this.resourceOwners.add(resourceOwnersItem);
    return this;
  }

   /**
   * Get resourceOwners
   * @return resourceOwners
  **/
  @javax.annotation.Nullable
  public List<String> getResourceOwners() {
    return resourceOwners;
  }

  public void setResourceOwners(List<String> resourceOwners) {
    this.resourceOwners = resourceOwners;
  }


  public ListDataResourcesFilterParameter resourceNames(List<String> resourceNames) {
    this.resourceNames = resourceNames;
    return this;
  }

  public ListDataResourcesFilterParameter addResourceNamesItem(String resourceNamesItem) {
    if (this.resourceNames == null) {
      this.resourceNames = new ArrayList<>();
    }
    this.resourceNames.add(resourceNamesItem);
    return this;
  }

   /**
   * Get resourceNames
   * @return resourceNames
  **/
  @javax.annotation.Nullable
  public List<String> getResourceNames() {
    return resourceNames;
  }

  public void setResourceNames(List<String> resourceNames) {
    this.resourceNames = resourceNames;
  }


  public ListDataResourcesFilterParameter resourceTypes(List<String> resourceTypes) {
    this.resourceTypes = resourceTypes;
    return this;
  }

  public ListDataResourcesFilterParameter addResourceTypesItem(String resourceTypesItem) {
    if (this.resourceTypes == null) {
      this.resourceTypes = new ArrayList<>();
    }
    this.resourceTypes.add(resourceTypesItem);
    return this;
  }

   /**
   * Get resourceTypes
   * @return resourceTypes
  **/
  @javax.annotation.Nullable
  public List<String> getResourceTypes() {
    return resourceTypes;
  }

  public void setResourceTypes(List<String> resourceTypes) {
    this.resourceTypes = resourceTypes;
  }


  public ListDataResourcesFilterParameter sensitivityTags(List<String> sensitivityTags) {
    this.sensitivityTags = sensitivityTags;
    return this;
  }

  public ListDataResourcesFilterParameter addSensitivityTagsItem(String sensitivityTagsItem) {
    if (this.sensitivityTags == null) {
      this.sensitivityTags = new ArrayList<>();
    }
    this.sensitivityTags.add(sensitivityTagsItem);
    return this;
  }

   /**
   * Get sensitivityTags
   * @return sensitivityTags
  **/
  @javax.annotation.Nullable
  public List<String> getSensitivityTags() {
    return sensitivityTags;
  }

  public void setSensitivityTags(List<String> sensitivityTags) {
    this.sensitivityTags = sensitivityTags;
  }


  public ListDataResourcesFilterParameter sensitivityCategories(List<SensitivityCategory> sensitivityCategories) {
    this.sensitivityCategories = sensitivityCategories;
    return this;
  }

  public ListDataResourcesFilterParameter addSensitivityCategoriesItem(SensitivityCategory sensitivityCategoriesItem) {
    if (this.sensitivityCategories == null) {
      this.sensitivityCategories = new ArrayList<>();
    }
    this.sensitivityCategories.add(sensitivityCategoriesItem);
    return this;
  }

   /**
   * Get sensitivityCategories
   * @return sensitivityCategories
  **/
  @javax.annotation.Nullable
  public List<SensitivityCategory> getSensitivityCategories() {
    return sensitivityCategories;
  }

  public void setSensitivityCategories(List<SensitivityCategory> sensitivityCategories) {
    this.sensitivityCategories = sensitivityCategories;
  }


  public ListDataResourcesFilterParameter resourcePartialName(String resourcePartialName) {
    this.resourcePartialName = resourcePartialName;
    return this;
  }

   /**
   * Get resourcePartialName
   * @return resourcePartialName
  **/
  @javax.annotation.Nullable
  public String getResourcePartialName() {
    return resourcePartialName;
  }

  public void setResourcePartialName(String resourcePartialName) {
    this.resourcePartialName = resourcePartialName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListDataResourcesFilterParameter listDataResourcesFilterParameter = (ListDataResourcesFilterParameter) o;
    return Objects.equals(this.isReviewed, listDataResourcesFilterParameter.isReviewed) &&
        Objects.equals(this.resourceOwners, listDataResourcesFilterParameter.resourceOwners) &&
        Objects.equals(this.resourceNames, listDataResourcesFilterParameter.resourceNames) &&
        Objects.equals(this.resourceTypes, listDataResourcesFilterParameter.resourceTypes) &&
        Objects.equals(this.sensitivityTags, listDataResourcesFilterParameter.sensitivityTags) &&
        Objects.equals(this.sensitivityCategories, listDataResourcesFilterParameter.sensitivityCategories) &&
        Objects.equals(this.resourcePartialName, listDataResourcesFilterParameter.resourcePartialName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isReviewed, resourceOwners, resourceNames, resourceTypes, sensitivityTags, sensitivityCategories, resourcePartialName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListDataResourcesFilterParameter {\n");
    sb.append("    isReviewed: ").append(toIndentedString(isReviewed)).append("\n");
    sb.append("    resourceOwners: ").append(toIndentedString(resourceOwners)).append("\n");
    sb.append("    resourceNames: ").append(toIndentedString(resourceNames)).append("\n");
    sb.append("    resourceTypes: ").append(toIndentedString(resourceTypes)).append("\n");
    sb.append("    sensitivityTags: ").append(toIndentedString(sensitivityTags)).append("\n");
    sb.append("    sensitivityCategories: ").append(toIndentedString(sensitivityCategories)).append("\n");
    sb.append("    resourcePartialName: ").append(toIndentedString(resourcePartialName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isReviewed");
    openapiFields.add("resourceOwners");
    openapiFields.add("resourceNames");
    openapiFields.add("resourceTypes");
    openapiFields.add("sensitivityTags");
    openapiFields.add("sensitivityCategories");
    openapiFields.add("resourcePartialName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ListDataResourcesFilterParameter
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListDataResourcesFilterParameter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListDataResourcesFilterParameter is not found in the empty JSON string", ListDataResourcesFilterParameter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListDataResourcesFilterParameter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListDataResourcesFilterParameter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("resourceOwners") != null && !jsonObj.get("resourceOwners").isJsonNull() && !jsonObj.get("resourceOwners").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceOwners` to be an array in the JSON string but got `%s`", jsonObj.get("resourceOwners").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("resourceNames") != null && !jsonObj.get("resourceNames").isJsonNull() && !jsonObj.get("resourceNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceNames` to be an array in the JSON string but got `%s`", jsonObj.get("resourceNames").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("resourceTypes") != null && !jsonObj.get("resourceTypes").isJsonNull() && !jsonObj.get("resourceTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceTypes` to be an array in the JSON string but got `%s`", jsonObj.get("resourceTypes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sensitivityTags") != null && !jsonObj.get("sensitivityTags").isJsonNull() && !jsonObj.get("sensitivityTags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sensitivityTags` to be an array in the JSON string but got `%s`", jsonObj.get("sensitivityTags").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sensitivityCategories") != null && !jsonObj.get("sensitivityCategories").isJsonNull() && !jsonObj.get("sensitivityCategories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sensitivityCategories` to be an array in the JSON string but got `%s`", jsonObj.get("sensitivityCategories").toString()));
      }
      if ((jsonObj.get("resourcePartialName") != null && !jsonObj.get("resourcePartialName").isJsonNull()) && !jsonObj.get("resourcePartialName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourcePartialName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourcePartialName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListDataResourcesFilterParameter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListDataResourcesFilterParameter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListDataResourcesFilterParameter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListDataResourcesFilterParameter.class));

       return (TypeAdapter<T>) new TypeAdapter<ListDataResourcesFilterParameter>() {
           @Override
           public void write(JsonWriter out, ListDataResourcesFilterParameter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListDataResourcesFilterParameter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ListDataResourcesFilterParameter given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ListDataResourcesFilterParameter
  * @throws IOException if the JSON string is invalid with respect to ListDataResourcesFilterParameter
  */
  public static ListDataResourcesFilterParameter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListDataResourcesFilterParameter.class);
  }

 /**
  * Convert an instance of ListDataResourcesFilterParameter to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

