/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.security.guardium;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * CardType - available card types.
 */
@JsonAdapter(Dashboardsv3CardType.Adapter.class)
public enum Dashboardsv3CardType {
  
  UNDEFINED_CARD_TYPE("UNDEFINED_CARD_TYPE"),
  
  REPORT("REPORT"),
  
  DATASOURCES("DATASOURCES"),
  
  USER_RISK("USER_RISK"),
  
  SEQUENCE_ANOMALIES("SEQUENCE_ANOMALIES"),
  
  RECENT_ACTIONS("RECENT_ACTIONS"),
  
  CONNECTIONS("CONNECTIONS"),
  
  OUTLIERS("OUTLIERS"),
  
  FAVOURITE_REPORTS("FAVOURITE_REPORTS"),
  
  GDP_HEALTH("GDP_HEALTH"),
  
  RECENT_ANOMALY_TABLE("RECENT_ANOMALY_TABLE"),
  
  DM_INGEST("DM_INGEST"),
  
  DB_USER_RISK("DB_USER_RISK"),
  
  OS_USER_RISK("OS_USER_RISK"),
  
  GROUP("GROUP"),
  
  AUDITS("AUDITS"),
  
  COMPLIANCE_REPORTS("COMPLIANCE_REPORTS"),
  
  COMPLIANCE_WORKSPACE("COMPLIANCE_WORKSPACE"),
  
  TAGGED_REPORTS("TAGGED_REPORTS"),
  
  HEALTH_WAREHOUSE_STORAGE_USAGE("HEALTH_WAREHOUSE_STORAGE_USAGE"),
  
  HEALTH_WAREHOUSE_STORAGE_OVERTIME("HEALTH_WAREHOUSE_STORAGE_OVERTIME"),
  
  HEALTH_WAREHOUSE_STORAGE_BY_SIZE("HEALTH_WAREHOUSE_STORAGE_BY_SIZE"),
  
  HEALTH_DATAMART_LANDING_ZONE("HEALTH_DATAMART_LANDING_ZONE"),
  
  HEALTH_TOP_DB2_BY_ROW_COUNT("HEALTH_TOP_DB2_BY_ROW_COUNT"),
  
  NEWLY_DISCOVERED_ASSETS("NEWLY_DISCOVERED_ASSETS"),
  
  DORMANT_ASSETS("DORMANT_ASSETS"),
  
  UNMONITORED_ASSETS("UNMONITORED_ASSETS"),
  
  QUERY_MONITOR("QUERY_MONITOR"),
  
  HEALTH_DIRECT_STREAM_INGESTION_VOLUME("HEALTH_DIRECT_STREAM_INGESTION_VOLUME"),
  
  HEALTH_TOP_GDP_COLLECTORS("HEALTH_TOP_GDP_COLLECTORS"),
  
  HEALTH_OVERALL_PVC_STORAGE_USAGE("HEALTH_OVERALL_PVC_STORAGE_USAGE"),
  
  HEALTH_TOP_PODS_WITH_EXCESSIVE_RESTARTS("HEALTH_TOP_PODS_WITH_EXCESSIVE_RESTARTS"),
  
  HEALTH_DATAMART_INGESTION_TYPE("HEALTH_DATAMART_INGESTION_TYPE"),
  
  HEALTH_DATAMART_INGESTION_VOLUME("HEALTH_DATAMART_INGESTION_VOLUME"),
  
  HEALTH_CERTIFICATES_EXPIRATION_DATE("HEALTH_CERTIFICATES_EXPIRATION_DATE"),
  
  ASSETS_UNTAGGED("ASSETS_UNTAGGED"),
  
  ASSETS_VULNERABILITY_TREND("ASSETS_VULNERABILITY_TREND"),
  
  ASSETS_HIGHEST_TAG_COUNT("ASSETS_HIGHEST_TAG_COUNT"),
  
  ASSETS_CLASSIFICATION_SCAN_STATUS("ASSETS_CLASSIFICATION_SCAN_STATUS"),
  
  ASSETS_VULNERABILITY_SCANS_STATUS("ASSETS_VULNERABILITY_SCANS_STATUS"),
  
  ASSETS_OPEN_VULNERABILITIES("ASSETS_OPEN_VULNERABILITIES"),
  
  QSPM_CRYPTOGRAPHIC_LIBRARIES("QSPM_CRYPTOGRAPHIC_LIBRARIES"),
  
  QSPM_CIPHERSUITE_STRENGTH("QSPM_CIPHERSUITE_STRENGTH"),
  
  QSPM_TLS_VERSIONS("QSPM_TLS_VERSIONS"),
  
  QSPM_PROTOCOL_COUNT("QSPM_PROTOCOL_COUNT"),
  
  QSPM_ENDPOINTS("QSPM_ENDPOINTS"),
  
  QSPM_POLICY_COMPLIANCE("QSPM_POLICY_COMPLIANCE"),
  
  QSPM_CERT_SIGN_ALGORITHMS("QSPM_CERT_SIGN_ALGORITHMS"),
  
  MULTI_GROUP("MULTI_GROUP"),
  
  EDGE_GATEWAY_HEALTH("EDGE_GATEWAY_HEALTH");

  private String value;

  Dashboardsv3CardType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static Dashboardsv3CardType fromValue(String value) {
    for (Dashboardsv3CardType b : Dashboardsv3CardType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<Dashboardsv3CardType> {
    @Override
    public void write(final JsonWriter jsonWriter, final Dashboardsv3CardType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public Dashboardsv3CardType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return Dashboardsv3CardType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    Dashboardsv3CardType.fromValue(value);
  }
}

