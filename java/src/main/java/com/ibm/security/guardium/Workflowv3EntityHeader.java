/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.security.guardium;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.security.guardium.Workflowv3EntityHeaderType;
import com.ibm.security.guardium.Workflowv3EntityValueChoice;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.security.JSON;

/**
 * Workflowv3EntityHeader
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T18:44:53.377644Z[UTC]", comments = "Generator version: 7.6.0")
public class Workflowv3EntityHeader {
  public static final String SERIALIZED_NAME_CHOICES = "choices";
  @SerializedName(SERIALIZED_NAME_CHOICES)
  private List<Workflowv3EntityValueChoice> choices = new ArrayList<>();

  public static final String SERIALIZED_NAME_GROUP_TYPE_ID = "group_type_id";
  @SerializedName(SERIALIZED_NAME_GROUP_TYPE_ID)
  private Integer groupTypeId;

  public static final String SERIALIZED_NAME_HIDE_FROM_VIEW = "hide_from_view";
  @SerializedName(SERIALIZED_NAME_HIDE_FROM_VIEW)
  private Boolean hideFromView;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Workflowv3EntityHeaderType type = Workflowv3EntityHeaderType.STRING;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public Workflowv3EntityHeader() {
  }

  public Workflowv3EntityHeader choices(List<Workflowv3EntityValueChoice> choices) {
    this.choices = choices;
    return this;
  }

  public Workflowv3EntityHeader addChoicesItem(Workflowv3EntityValueChoice choicesItem) {
    if (this.choices == null) {
      this.choices = new ArrayList<>();
    }
    this.choices.add(choicesItem);
    return this;
  }

   /**
   * Get choices
   * @return choices
  **/
  @javax.annotation.Nullable
  public List<Workflowv3EntityValueChoice> getChoices() {
    return choices;
  }

  public void setChoices(List<Workflowv3EntityValueChoice> choices) {
    this.choices = choices;
  }


  public Workflowv3EntityHeader groupTypeId(Integer groupTypeId) {
    this.groupTypeId = groupTypeId;
    return this;
  }

   /**
   * Get groupTypeId
   * @return groupTypeId
  **/
  @javax.annotation.Nullable
  public Integer getGroupTypeId() {
    return groupTypeId;
  }

  public void setGroupTypeId(Integer groupTypeId) {
    this.groupTypeId = groupTypeId;
  }


  public Workflowv3EntityHeader hideFromView(Boolean hideFromView) {
    this.hideFromView = hideFromView;
    return this;
  }

   /**
   * Get hideFromView
   * @return hideFromView
  **/
  @javax.annotation.Nullable
  public Boolean getHideFromView() {
    return hideFromView;
  }

  public void setHideFromView(Boolean hideFromView) {
    this.hideFromView = hideFromView;
  }


  public Workflowv3EntityHeader key(String key) {
    this.key = key;
    return this;
  }

   /**
   * Get key
   * @return key
  **/
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public Workflowv3EntityHeader type(Workflowv3EntityHeaderType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  public Workflowv3EntityHeaderType getType() {
    return type;
  }

  public void setType(Workflowv3EntityHeaderType type) {
    this.type = type;
  }


  public Workflowv3EntityHeader value(String value) {
    this.value = value;
    return this;
  }

   /**
   * Get value
   * @return value
  **/
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Workflowv3EntityHeader workflowv3EntityHeader = (Workflowv3EntityHeader) o;
    return Objects.equals(this.choices, workflowv3EntityHeader.choices) &&
        Objects.equals(this.groupTypeId, workflowv3EntityHeader.groupTypeId) &&
        Objects.equals(this.hideFromView, workflowv3EntityHeader.hideFromView) &&
        Objects.equals(this.key, workflowv3EntityHeader.key) &&
        Objects.equals(this.type, workflowv3EntityHeader.type) &&
        Objects.equals(this.value, workflowv3EntityHeader.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(choices, groupTypeId, hideFromView, key, type, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Workflowv3EntityHeader {\n");
    sb.append("    choices: ").append(toIndentedString(choices)).append("\n");
    sb.append("    groupTypeId: ").append(toIndentedString(groupTypeId)).append("\n");
    sb.append("    hideFromView: ").append(toIndentedString(hideFromView)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("choices");
    openapiFields.add("group_type_id");
    openapiFields.add("hide_from_view");
    openapiFields.add("key");
    openapiFields.add("type");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Workflowv3EntityHeader
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Workflowv3EntityHeader.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Workflowv3EntityHeader is not found in the empty JSON string", Workflowv3EntityHeader.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Workflowv3EntityHeader.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Workflowv3EntityHeader` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("choices") != null && !jsonObj.get("choices").isJsonNull()) {
        JsonArray jsonArraychoices = jsonObj.getAsJsonArray("choices");
        if (jsonArraychoices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("choices").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `choices` to be an array in the JSON string but got `%s`", jsonObj.get("choices").toString()));
          }

          // validate the optional field `choices` (array)
          for (int i = 0; i < jsonArraychoices.size(); i++) {
            Workflowv3EntityValueChoice.validateJsonElement(jsonArraychoices.get(i));
          };
        }
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        Workflowv3EntityHeaderType.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Workflowv3EntityHeader.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Workflowv3EntityHeader' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Workflowv3EntityHeader> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Workflowv3EntityHeader.class));

       return (TypeAdapter<T>) new TypeAdapter<Workflowv3EntityHeader>() {
           @Override
           public void write(JsonWriter out, Workflowv3EntityHeader value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Workflowv3EntityHeader read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Workflowv3EntityHeader given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Workflowv3EntityHeader
  * @throws IOException if the JSON string is invalid with respect to Workflowv3EntityHeader
  */
  public static Workflowv3EntityHeader fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Workflowv3EntityHeader.class);
  }

 /**
  * Convert an instance of Workflowv3EntityHeader to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

