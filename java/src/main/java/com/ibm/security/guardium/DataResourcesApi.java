/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.security.guardium;

import com.ibm.security.ApiCallback;
import com.ibm.security.ApiClient;
import com.ibm.security.ApiException;
import com.ibm.security.ApiResponse;
import com.ibm.security.Configuration;
import com.ibm.security.Pair;
import com.ibm.security.ProgressRequestBody;
import com.ibm.security.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ibm.security.guardium.Authenticate400Response;
import java.math.BigDecimal;
import com.ibm.security.guardium.DataResource;
import com.ibm.security.guardium.DataResourcesSummary;
import com.ibm.security.guardium.ListDataResources200Response;
import com.ibm.security.guardium.ListDataResourcesFilterParameter;
import com.ibm.security.guardium.ListDataResourcesSortParameter;
import com.ibm.security.guardium.RemoveResource200Response;
import com.ibm.security.guardium.UpdateResourceReviewBody;
import com.ibm.security.guardium.UpdateResourceReviewStatus200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DataResourcesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DataResourcesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DataResourcesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getDataResource
     * @param dataResourceId Data resource ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getDataResourceCall(String dataResourceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/dspm/dataResources/{dataResourceId}"
            .replace("{" + "dataResourceId" + "}", localVarApiClient.escapeString(dataResourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDataResourceValidateBeforeCall(String dataResourceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataResourceId' is set
        if (dataResourceId == null) {
            throw new ApiException("Missing the required parameter 'dataResourceId' when calling getDataResource(Async)");
        }

        return getDataResourceCall(dataResourceId, _callback);

    }

    /**
     * Get a specific data resource by its ID
     * Get additional details on a specific data resource by providing its ID.
     * @param dataResourceId Data resource ID (required)
     * @return DataResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public DataResource getDataResource(String dataResourceId) throws ApiException {
        ApiResponse<DataResource> localVarResp = getDataResourceWithHttpInfo(dataResourceId);
        return localVarResp.getData();
    }

    /**
     * Get a specific data resource by its ID
     * Get additional details on a specific data resource by providing its ID.
     * @param dataResourceId Data resource ID (required)
     * @return ApiResponse&lt;DataResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<DataResource> getDataResourceWithHttpInfo(String dataResourceId) throws ApiException {
        okhttp3.Call localVarCall = getDataResourceValidateBeforeCall(dataResourceId, null);
        Type localVarReturnType = new TypeToken<DataResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific data resource by its ID (asynchronously)
     * Get additional details on a specific data resource by providing its ID.
     * @param dataResourceId Data resource ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getDataResourceAsync(String dataResourceId, final ApiCallback<DataResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDataResourceValidateBeforeCall(dataResourceId, _callback);
        Type localVarReturnType = new TypeToken<DataResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDataResourcesSummary
     * @param dataStoreId Data store id (optional)
     * @param filter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getDataResourcesSummaryCall(String dataStoreId, ListDataResourcesFilterParameter filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/dspm/dataResources/summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dataStoreId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dataStoreId", dataStoreId));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDataResourcesSummaryValidateBeforeCall(String dataStoreId, ListDataResourcesFilterParameter filter, final ApiCallback _callback) throws ApiException {
        return getDataResourcesSummaryCall(dataStoreId, filter, _callback);

    }

    /**
     * Data resources summary
     * Get a summary of all the data resource, that is, number of data resources, types of data resources, and other information.
     * @param dataStoreId Data store id (optional)
     * @param filter  (optional)
     * @return DataResourcesSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public DataResourcesSummary getDataResourcesSummary(String dataStoreId, ListDataResourcesFilterParameter filter) throws ApiException {
        ApiResponse<DataResourcesSummary> localVarResp = getDataResourcesSummaryWithHttpInfo(dataStoreId, filter);
        return localVarResp.getData();
    }

    /**
     * Data resources summary
     * Get a summary of all the data resource, that is, number of data resources, types of data resources, and other information.
     * @param dataStoreId Data store id (optional)
     * @param filter  (optional)
     * @return ApiResponse&lt;DataResourcesSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<DataResourcesSummary> getDataResourcesSummaryWithHttpInfo(String dataStoreId, ListDataResourcesFilterParameter filter) throws ApiException {
        okhttp3.Call localVarCall = getDataResourcesSummaryValidateBeforeCall(dataStoreId, filter, null);
        Type localVarReturnType = new TypeToken<DataResourcesSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Data resources summary (asynchronously)
     * Get a summary of all the data resource, that is, number of data resources, types of data resources, and other information.
     * @param dataStoreId Data store id (optional)
     * @param filter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getDataResourcesSummaryAsync(String dataStoreId, ListDataResourcesFilterParameter filter, final ApiCallback<DataResourcesSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDataResourcesSummaryValidateBeforeCall(dataStoreId, filter, _callback);
        Type localVarReturnType = new TypeToken<DataResourcesSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDataResources
     * @param dataStoreId  (optional)
     * @param filter  (optional)
     * @param sort  (optional)
     * @param pageSize  (optional)
     * @param nextToken  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call listDataResourcesCall(String dataStoreId, ListDataResourcesFilterParameter filter, ListDataResourcesSortParameter sort, BigDecimal pageSize, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/dspm/dataResources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dataStoreId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dataStoreId", dataStoreId));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDataResourcesValidateBeforeCall(String dataStoreId, ListDataResourcesFilterParameter filter, ListDataResourcesSortParameter sort, BigDecimal pageSize, String nextToken, final ApiCallback _callback) throws ApiException {
        return listDataResourcesCall(dataStoreId, filter, sort, pageSize, nextToken, _callback);

    }

    /**
     * List data resources that match a given filter
     * Get a list of data resources based on the filter applied. You can filter by data store ID, data resource ID, data resource name, and more.&lt;BR&gt;&lt;B&gt;Note:&lt;/B&gt; Filter needs to be HTML encoded.
     * @param dataStoreId  (optional)
     * @param filter  (optional)
     * @param sort  (optional)
     * @param pageSize  (optional)
     * @param nextToken  (optional)
     * @return ListDataResources200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public ListDataResources200Response listDataResources(String dataStoreId, ListDataResourcesFilterParameter filter, ListDataResourcesSortParameter sort, BigDecimal pageSize, String nextToken) throws ApiException {
        ApiResponse<ListDataResources200Response> localVarResp = listDataResourcesWithHttpInfo(dataStoreId, filter, sort, pageSize, nextToken);
        return localVarResp.getData();
    }

    /**
     * List data resources that match a given filter
     * Get a list of data resources based on the filter applied. You can filter by data store ID, data resource ID, data resource name, and more.&lt;BR&gt;&lt;B&gt;Note:&lt;/B&gt; Filter needs to be HTML encoded.
     * @param dataStoreId  (optional)
     * @param filter  (optional)
     * @param sort  (optional)
     * @param pageSize  (optional)
     * @param nextToken  (optional)
     * @return ApiResponse&lt;ListDataResources200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<ListDataResources200Response> listDataResourcesWithHttpInfo(String dataStoreId, ListDataResourcesFilterParameter filter, ListDataResourcesSortParameter sort, BigDecimal pageSize, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listDataResourcesValidateBeforeCall(dataStoreId, filter, sort, pageSize, nextToken, null);
        Type localVarReturnType = new TypeToken<ListDataResources200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List data resources that match a given filter (asynchronously)
     * Get a list of data resources based on the filter applied. You can filter by data store ID, data resource ID, data resource name, and more.&lt;BR&gt;&lt;B&gt;Note:&lt;/B&gt; Filter needs to be HTML encoded.
     * @param dataStoreId  (optional)
     * @param filter  (optional)
     * @param sort  (optional)
     * @param pageSize  (optional)
     * @param nextToken  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call listDataResourcesAsync(String dataStoreId, ListDataResourcesFilterParameter filter, ListDataResourcesSortParameter sort, BigDecimal pageSize, String nextToken, final ApiCallback<ListDataResources200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDataResourcesValidateBeforeCall(dataStoreId, filter, sort, pageSize, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListDataResources200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDataResourcesNames
     * @param prefix Prefix of data resource name (required)
     * @param dataStoreId  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call listDataResourcesNamesCall(String prefix, String dataStoreId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/dspm/dataResources/names";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (prefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefix", prefix));
        }

        if (dataStoreId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dataStoreId", dataStoreId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDataResourcesNamesValidateBeforeCall(String prefix, String dataStoreId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'prefix' is set
        if (prefix == null) {
            throw new ApiException("Missing the required parameter 'prefix' when calling listDataResourcesNames(Async)");
        }

        return listDataResourcesNamesCall(prefix, dataStoreId, _callback);

    }

    /**
     * List names of data resources
     * List and filter data resources by their names
     * @param prefix Prefix of data resource name (required)
     * @param dataStoreId  (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public List<String> listDataResourcesNames(String prefix, String dataStoreId) throws ApiException {
        ApiResponse<List<String>> localVarResp = listDataResourcesNamesWithHttpInfo(prefix, dataStoreId);
        return localVarResp.getData();
    }

    /**
     * List names of data resources
     * List and filter data resources by their names
     * @param prefix Prefix of data resource name (required)
     * @param dataStoreId  (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> listDataResourcesNamesWithHttpInfo(String prefix, String dataStoreId) throws ApiException {
        okhttp3.Call localVarCall = listDataResourcesNamesValidateBeforeCall(prefix, dataStoreId, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List names of data resources (asynchronously)
     * List and filter data resources by their names
     * @param prefix Prefix of data resource name (required)
     * @param dataStoreId  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call listDataResourcesNamesAsync(String prefix, String dataStoreId, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDataResourcesNamesValidateBeforeCall(prefix, dataStoreId, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeResource
     * @param dataResourceId Data resource ID (required)
     * @param dataStoreId Data store ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call removeResourceCall(String dataResourceId, String dataStoreId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/dspm/dataResources/{dataResourceId}/removeResource"
            .replace("{" + "dataResourceId" + "}", localVarApiClient.escapeString(dataResourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dataStoreId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dataStoreId", dataStoreId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeResourceValidateBeforeCall(String dataResourceId, String dataStoreId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataResourceId' is set
        if (dataResourceId == null) {
            throw new ApiException("Missing the required parameter 'dataResourceId' when calling removeResource(Async)");
        }

        // verify the required parameter 'dataStoreId' is set
        if (dataStoreId == null) {
            throw new ApiException("Missing the required parameter 'dataStoreId' when calling removeResource(Async)");
        }

        return removeResourceCall(dataResourceId, dataStoreId, _callback);

    }

    /**
     * Remove resource from DSPM
     * Removes a resource, with all its sensitivities, from Guardium DSPM dashboard. This action does not remove the resource from the resource&#39;s source environment.
     * @param dataResourceId Data resource ID (required)
     * @param dataStoreId Data store ID (required)
     * @return RemoveResource200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public RemoveResource200Response removeResource(String dataResourceId, String dataStoreId) throws ApiException {
        ApiResponse<RemoveResource200Response> localVarResp = removeResourceWithHttpInfo(dataResourceId, dataStoreId);
        return localVarResp.getData();
    }

    /**
     * Remove resource from DSPM
     * Removes a resource, with all its sensitivities, from Guardium DSPM dashboard. This action does not remove the resource from the resource&#39;s source environment.
     * @param dataResourceId Data resource ID (required)
     * @param dataStoreId Data store ID (required)
     * @return ApiResponse&lt;RemoveResource200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<RemoveResource200Response> removeResourceWithHttpInfo(String dataResourceId, String dataStoreId) throws ApiException {
        okhttp3.Call localVarCall = removeResourceValidateBeforeCall(dataResourceId, dataStoreId, null);
        Type localVarReturnType = new TypeToken<RemoveResource200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove resource from DSPM (asynchronously)
     * Removes a resource, with all its sensitivities, from Guardium DSPM dashboard. This action does not remove the resource from the resource&#39;s source environment.
     * @param dataResourceId Data resource ID (required)
     * @param dataStoreId Data store ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call removeResourceAsync(String dataResourceId, String dataStoreId, final ApiCallback<RemoveResource200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeResourceValidateBeforeCall(dataResourceId, dataStoreId, _callback);
        Type localVarReturnType = new TypeToken<RemoveResource200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateResourceReviewStatus
     * @param dataResourceId Data resource id (required)
     * @param updateResourceReviewBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateResourceReviewStatusCall(String dataResourceId, UpdateResourceReviewBody updateResourceReviewBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateResourceReviewBody;

        // create path and map variables
        String localVarPath = "/api/v1/dspm/dataResources/{dataResourceId}/reviewed"
            .replace("{" + "dataResourceId" + "}", localVarApiClient.escapeString(dataResourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateResourceReviewStatusValidateBeforeCall(String dataResourceId, UpdateResourceReviewBody updateResourceReviewBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataResourceId' is set
        if (dataResourceId == null) {
            throw new ApiException("Missing the required parameter 'dataResourceId' when calling updateResourceReviewStatus(Async)");
        }

        // verify the required parameter 'updateResourceReviewBody' is set
        if (updateResourceReviewBody == null) {
            throw new ApiException("Missing the required parameter 'updateResourceReviewBody' when calling updateResourceReviewStatus(Async)");
        }

        return updateResourceReviewStatusCall(dataResourceId, updateResourceReviewBody, _callback);

    }

    /**
     * Set review status of a data resource
     * Set the review status of a specific data resource in a specific data store.
     * @param dataResourceId Data resource id (required)
     * @param updateResourceReviewBody  (required)
     * @return UpdateResourceReviewStatus200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public UpdateResourceReviewStatus200Response updateResourceReviewStatus(String dataResourceId, UpdateResourceReviewBody updateResourceReviewBody) throws ApiException {
        ApiResponse<UpdateResourceReviewStatus200Response> localVarResp = updateResourceReviewStatusWithHttpInfo(dataResourceId, updateResourceReviewBody);
        return localVarResp.getData();
    }

    /**
     * Set review status of a data resource
     * Set the review status of a specific data resource in a specific data store.
     * @param dataResourceId Data resource id (required)
     * @param updateResourceReviewBody  (required)
     * @return ApiResponse&lt;UpdateResourceReviewStatus200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateResourceReviewStatus200Response> updateResourceReviewStatusWithHttpInfo(String dataResourceId, UpdateResourceReviewBody updateResourceReviewBody) throws ApiException {
        okhttp3.Call localVarCall = updateResourceReviewStatusValidateBeforeCall(dataResourceId, updateResourceReviewBody, null);
        Type localVarReturnType = new TypeToken<UpdateResourceReviewStatus200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set review status of a data resource (asynchronously)
     * Set the review status of a specific data resource in a specific data store.
     * @param dataResourceId Data resource id (required)
     * @param updateResourceReviewBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateResourceReviewStatusAsync(String dataResourceId, UpdateResourceReviewBody updateResourceReviewBody, final ApiCallback<UpdateResourceReviewStatus200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateResourceReviewStatusValidateBeforeCall(dataResourceId, updateResourceReviewBody, _callback);
        Type localVarReturnType = new TypeToken<UpdateResourceReviewStatus200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
