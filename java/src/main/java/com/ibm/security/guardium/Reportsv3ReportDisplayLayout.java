/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.security.guardium;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.security.guardium.Reportsv3DisplayHeader;
import com.ibm.security.guardium.Reportsv3InReportAdditionalParameter;
import com.ibm.security.guardium.Reportsv3ReportTag;
import com.ibm.security.guardium.Reportsv3RunTimeParameter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.security.JSON;

/**
 * ReportDisplayLayout has report matadata , rows and headers.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-27T16:17:29.841502Z[UTC]", comments = "Generator version: 7.6.0")
public class Reportsv3ReportDisplayLayout {
  public static final String SERIALIZED_NAME_DEFAULT_TIMESTAMP_HEADER_ID = "default_timestamp_header_id";
  @SerializedName(SERIALIZED_NAME_DEFAULT_TIMESTAMP_HEADER_ID)
  private String defaultTimestampHeaderId;

  public static final String SERIALIZED_NAME_FETCH_SIZE = "fetch_size";
  @SerializedName(SERIALIZED_NAME_FETCH_SIZE)
  private Integer fetchSize;

  public static final String SERIALIZED_NAME_IN_REPORT_ADDITIONAL_PARAMETER = "in_report_additional_parameter";
  @SerializedName(SERIALIZED_NAME_IN_REPORT_ADDITIONAL_PARAMETER)
  private List<Reportsv3InReportAdditionalParameter> inReportAdditionalParameter = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_AUDITABLE = "is_auditable";
  @SerializedName(SERIALIZED_NAME_IS_AUDITABLE)
  private Boolean isAuditable;

  public static final String SERIALIZED_NAME_IS_PREDEFINED = "is_predefined";
  @SerializedName(SERIALIZED_NAME_IS_PREDEFINED)
  private Boolean isPredefined;

  public static final String SERIALIZED_NAME_NUMBER_OF_EVENTS = "number_of_events";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_EVENTS)
  private String numberOfEvents;

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Integer offset;

  public static final String SERIALIZED_NAME_REFRESH_RATE = "refresh_rate";
  @SerializedName(SERIALIZED_NAME_REFRESH_RATE)
  private Integer refreshRate;

  public static final String SERIALIZED_NAME_REPORT_DESCRIPTION = "report_description";
  @SerializedName(SERIALIZED_NAME_REPORT_DESCRIPTION)
  private String reportDescription;

  public static final String SERIALIZED_NAME_REPORT_HEADERS = "report_headers";
  @SerializedName(SERIALIZED_NAME_REPORT_HEADERS)
  private List<Reportsv3DisplayHeader> reportHeaders = new ArrayList<>();

  public static final String SERIALIZED_NAME_REPORT_ID = "report_id";
  @SerializedName(SERIALIZED_NAME_REPORT_ID)
  private String reportId;

  public static final String SERIALIZED_NAME_REPORT_NAME = "report_name";
  @SerializedName(SERIALIZED_NAME_REPORT_NAME)
  private String reportName;

  public static final String SERIALIZED_NAME_REPORT_TAGS = "report_tags";
  @SerializedName(SERIALIZED_NAME_REPORT_TAGS)
  private List<Reportsv3ReportTag> reportTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_RUNTIME_PARAM_LIST = "runtime_param_list";
  @SerializedName(SERIALIZED_NAME_RUNTIME_PARAM_LIST)
  private List<Reportsv3RunTimeParameter> runtimeParamList = new ArrayList<>();

  public static final String SERIALIZED_NAME_SELECTED_TIMESTAMP_HEADER_ID = "selected_timestamp_header_id";
  @SerializedName(SERIALIZED_NAME_SELECTED_TIMESTAMP_HEADER_ID)
  private String selectedTimestampHeaderId;

  public Reportsv3ReportDisplayLayout() {
  }

  public Reportsv3ReportDisplayLayout defaultTimestampHeaderId(String defaultTimestampHeaderId) {
    this.defaultTimestampHeaderId = defaultTimestampHeaderId;
    return this;
  }

   /**
   * The default timestamp header id.
   * @return defaultTimestampHeaderId
  **/
  @javax.annotation.Nullable
  public String getDefaultTimestampHeaderId() {
    return defaultTimestampHeaderId;
  }

  public void setDefaultTimestampHeaderId(String defaultTimestampHeaderId) {
    this.defaultTimestampHeaderId = defaultTimestampHeaderId;
  }


  public Reportsv3ReportDisplayLayout fetchSize(Integer fetchSize) {
    this.fetchSize = fetchSize;
    return this;
  }

   /**
   * Report data fetch size.
   * @return fetchSize
  **/
  @javax.annotation.Nullable
  public Integer getFetchSize() {
    return fetchSize;
  }

  public void setFetchSize(Integer fetchSize) {
    this.fetchSize = fetchSize;
  }


  public Reportsv3ReportDisplayLayout inReportAdditionalParameter(List<Reportsv3InReportAdditionalParameter> inReportAdditionalParameter) {
    this.inReportAdditionalParameter = inReportAdditionalParameter;
    return this;
  }

  public Reportsv3ReportDisplayLayout addInReportAdditionalParameterItem(Reportsv3InReportAdditionalParameter inReportAdditionalParameterItem) {
    if (this.inReportAdditionalParameter == null) {
      this.inReportAdditionalParameter = new ArrayList<>();
    }
    this.inReportAdditionalParameter.add(inReportAdditionalParameterItem);
    return this;
  }

   /**
   * Additional Parameters for in report.
   * @return inReportAdditionalParameter
  **/
  @javax.annotation.Nullable
  public List<Reportsv3InReportAdditionalParameter> getInReportAdditionalParameter() {
    return inReportAdditionalParameter;
  }

  public void setInReportAdditionalParameter(List<Reportsv3InReportAdditionalParameter> inReportAdditionalParameter) {
    this.inReportAdditionalParameter = inReportAdditionalParameter;
  }


  public Reportsv3ReportDisplayLayout isAuditable(Boolean isAuditable) {
    this.isAuditable = isAuditable;
    return this;
  }

   /**
   * If a report is auditable.
   * @return isAuditable
  **/
  @javax.annotation.Nullable
  public Boolean getIsAuditable() {
    return isAuditable;
  }

  public void setIsAuditable(Boolean isAuditable) {
    this.isAuditable = isAuditable;
  }


  public Reportsv3ReportDisplayLayout isPredefined(Boolean isPredefined) {
    this.isPredefined = isPredefined;
    return this;
  }

   /**
   * Is predefined report.
   * @return isPredefined
  **/
  @javax.annotation.Nullable
  public Boolean getIsPredefined() {
    return isPredefined;
  }

  public void setIsPredefined(Boolean isPredefined) {
    this.isPredefined = isPredefined;
  }


  public Reportsv3ReportDisplayLayout numberOfEvents(String numberOfEvents) {
    this.numberOfEvents = numberOfEvents;
    return this;
  }

   /**
   * Total count of the report results.
   * @return numberOfEvents
  **/
  @javax.annotation.Nullable
  public String getNumberOfEvents() {
    return numberOfEvents;
  }

  public void setNumberOfEvents(String numberOfEvents) {
    this.numberOfEvents = numberOfEvents;
  }


  public Reportsv3ReportDisplayLayout offset(Integer offset) {
    this.offset = offset;
    return this;
  }

   /**
   * Report data offset.
   * @return offset
  **/
  @javax.annotation.Nullable
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }


  public Reportsv3ReportDisplayLayout refreshRate(Integer refreshRate) {
    this.refreshRate = refreshRate;
    return this;
  }

   /**
   * Report refresh rate.
   * @return refreshRate
  **/
  @javax.annotation.Nullable
  public Integer getRefreshRate() {
    return refreshRate;
  }

  public void setRefreshRate(Integer refreshRate) {
    this.refreshRate = refreshRate;
  }


  public Reportsv3ReportDisplayLayout reportDescription(String reportDescription) {
    this.reportDescription = reportDescription;
    return this;
  }

   /**
   * Report description.
   * @return reportDescription
  **/
  @javax.annotation.Nullable
  public String getReportDescription() {
    return reportDescription;
  }

  public void setReportDescription(String reportDescription) {
    this.reportDescription = reportDescription;
  }


  public Reportsv3ReportDisplayLayout reportHeaders(List<Reportsv3DisplayHeader> reportHeaders) {
    this.reportHeaders = reportHeaders;
    return this;
  }

  public Reportsv3ReportDisplayLayout addReportHeadersItem(Reportsv3DisplayHeader reportHeadersItem) {
    if (this.reportHeaders == null) {
      this.reportHeaders = new ArrayList<>();
    }
    this.reportHeaders.add(reportHeadersItem);
    return this;
  }

   /**
   * The report headers.
   * @return reportHeaders
  **/
  @javax.annotation.Nullable
  public List<Reportsv3DisplayHeader> getReportHeaders() {
    return reportHeaders;
  }

  public void setReportHeaders(List<Reportsv3DisplayHeader> reportHeaders) {
    this.reportHeaders = reportHeaders;
  }


  public Reportsv3ReportDisplayLayout reportId(String reportId) {
    this.reportId = reportId;
    return this;
  }

   /**
   * The report ID.
   * @return reportId
  **/
  @javax.annotation.Nullable
  public String getReportId() {
    return reportId;
  }

  public void setReportId(String reportId) {
    this.reportId = reportId;
  }


  public Reportsv3ReportDisplayLayout reportName(String reportName) {
    this.reportName = reportName;
    return this;
  }

   /**
   * Report name.
   * @return reportName
  **/
  @javax.annotation.Nullable
  public String getReportName() {
    return reportName;
  }

  public void setReportName(String reportName) {
    this.reportName = reportName;
  }


  public Reportsv3ReportDisplayLayout reportTags(List<Reportsv3ReportTag> reportTags) {
    this.reportTags = reportTags;
    return this;
  }

  public Reportsv3ReportDisplayLayout addReportTagsItem(Reportsv3ReportTag reportTagsItem) {
    if (this.reportTags == null) {
      this.reportTags = new ArrayList<>();
    }
    this.reportTags.add(reportTagsItem);
    return this;
  }

   /**
   * Report tags.
   * @return reportTags
  **/
  @javax.annotation.Nullable
  public List<Reportsv3ReportTag> getReportTags() {
    return reportTags;
  }

  public void setReportTags(List<Reportsv3ReportTag> reportTags) {
    this.reportTags = reportTags;
  }


  public Reportsv3ReportDisplayLayout runtimeParamList(List<Reportsv3RunTimeParameter> runtimeParamList) {
    this.runtimeParamList = runtimeParamList;
    return this;
  }

  public Reportsv3ReportDisplayLayout addRuntimeParamListItem(Reportsv3RunTimeParameter runtimeParamListItem) {
    if (this.runtimeParamList == null) {
      this.runtimeParamList = new ArrayList<>();
    }
    this.runtimeParamList.add(runtimeParamListItem);
    return this;
  }

   /**
   * Runtime Parameter list.
   * @return runtimeParamList
  **/
  @javax.annotation.Nullable
  public List<Reportsv3RunTimeParameter> getRuntimeParamList() {
    return runtimeParamList;
  }

  public void setRuntimeParamList(List<Reportsv3RunTimeParameter> runtimeParamList) {
    this.runtimeParamList = runtimeParamList;
  }


  public Reportsv3ReportDisplayLayout selectedTimestampHeaderId(String selectedTimestampHeaderId) {
    this.selectedTimestampHeaderId = selectedTimestampHeaderId;
    return this;
  }

   /**
   * The selected timestamp header id- in case the user override the default.
   * @return selectedTimestampHeaderId
  **/
  @javax.annotation.Nullable
  public String getSelectedTimestampHeaderId() {
    return selectedTimestampHeaderId;
  }

  public void setSelectedTimestampHeaderId(String selectedTimestampHeaderId) {
    this.selectedTimestampHeaderId = selectedTimestampHeaderId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Reportsv3ReportDisplayLayout reportsv3ReportDisplayLayout = (Reportsv3ReportDisplayLayout) o;
    return Objects.equals(this.defaultTimestampHeaderId, reportsv3ReportDisplayLayout.defaultTimestampHeaderId) &&
        Objects.equals(this.fetchSize, reportsv3ReportDisplayLayout.fetchSize) &&
        Objects.equals(this.inReportAdditionalParameter, reportsv3ReportDisplayLayout.inReportAdditionalParameter) &&
        Objects.equals(this.isAuditable, reportsv3ReportDisplayLayout.isAuditable) &&
        Objects.equals(this.isPredefined, reportsv3ReportDisplayLayout.isPredefined) &&
        Objects.equals(this.numberOfEvents, reportsv3ReportDisplayLayout.numberOfEvents) &&
        Objects.equals(this.offset, reportsv3ReportDisplayLayout.offset) &&
        Objects.equals(this.refreshRate, reportsv3ReportDisplayLayout.refreshRate) &&
        Objects.equals(this.reportDescription, reportsv3ReportDisplayLayout.reportDescription) &&
        Objects.equals(this.reportHeaders, reportsv3ReportDisplayLayout.reportHeaders) &&
        Objects.equals(this.reportId, reportsv3ReportDisplayLayout.reportId) &&
        Objects.equals(this.reportName, reportsv3ReportDisplayLayout.reportName) &&
        Objects.equals(this.reportTags, reportsv3ReportDisplayLayout.reportTags) &&
        Objects.equals(this.runtimeParamList, reportsv3ReportDisplayLayout.runtimeParamList) &&
        Objects.equals(this.selectedTimestampHeaderId, reportsv3ReportDisplayLayout.selectedTimestampHeaderId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultTimestampHeaderId, fetchSize, inReportAdditionalParameter, isAuditable, isPredefined, numberOfEvents, offset, refreshRate, reportDescription, reportHeaders, reportId, reportName, reportTags, runtimeParamList, selectedTimestampHeaderId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Reportsv3ReportDisplayLayout {\n");
    sb.append("    defaultTimestampHeaderId: ").append(toIndentedString(defaultTimestampHeaderId)).append("\n");
    sb.append("    fetchSize: ").append(toIndentedString(fetchSize)).append("\n");
    sb.append("    inReportAdditionalParameter: ").append(toIndentedString(inReportAdditionalParameter)).append("\n");
    sb.append("    isAuditable: ").append(toIndentedString(isAuditable)).append("\n");
    sb.append("    isPredefined: ").append(toIndentedString(isPredefined)).append("\n");
    sb.append("    numberOfEvents: ").append(toIndentedString(numberOfEvents)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    refreshRate: ").append(toIndentedString(refreshRate)).append("\n");
    sb.append("    reportDescription: ").append(toIndentedString(reportDescription)).append("\n");
    sb.append("    reportHeaders: ").append(toIndentedString(reportHeaders)).append("\n");
    sb.append("    reportId: ").append(toIndentedString(reportId)).append("\n");
    sb.append("    reportName: ").append(toIndentedString(reportName)).append("\n");
    sb.append("    reportTags: ").append(toIndentedString(reportTags)).append("\n");
    sb.append("    runtimeParamList: ").append(toIndentedString(runtimeParamList)).append("\n");
    sb.append("    selectedTimestampHeaderId: ").append(toIndentedString(selectedTimestampHeaderId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("default_timestamp_header_id");
    openapiFields.add("fetch_size");
    openapiFields.add("in_report_additional_parameter");
    openapiFields.add("is_auditable");
    openapiFields.add("is_predefined");
    openapiFields.add("number_of_events");
    openapiFields.add("offset");
    openapiFields.add("refresh_rate");
    openapiFields.add("report_description");
    openapiFields.add("report_headers");
    openapiFields.add("report_id");
    openapiFields.add("report_name");
    openapiFields.add("report_tags");
    openapiFields.add("runtime_param_list");
    openapiFields.add("selected_timestamp_header_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Reportsv3ReportDisplayLayout
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Reportsv3ReportDisplayLayout.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Reportsv3ReportDisplayLayout is not found in the empty JSON string", Reportsv3ReportDisplayLayout.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Reportsv3ReportDisplayLayout.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Reportsv3ReportDisplayLayout` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("default_timestamp_header_id") != null && !jsonObj.get("default_timestamp_header_id").isJsonNull()) && !jsonObj.get("default_timestamp_header_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_timestamp_header_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_timestamp_header_id").toString()));
      }
      if (jsonObj.get("in_report_additional_parameter") != null && !jsonObj.get("in_report_additional_parameter").isJsonNull()) {
        JsonArray jsonArrayinReportAdditionalParameter = jsonObj.getAsJsonArray("in_report_additional_parameter");
        if (jsonArrayinReportAdditionalParameter != null) {
          // ensure the json data is an array
          if (!jsonObj.get("in_report_additional_parameter").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `in_report_additional_parameter` to be an array in the JSON string but got `%s`", jsonObj.get("in_report_additional_parameter").toString()));
          }

          // validate the optional field `in_report_additional_parameter` (array)
          for (int i = 0; i < jsonArrayinReportAdditionalParameter.size(); i++) {
            Reportsv3InReportAdditionalParameter.validateJsonElement(jsonArrayinReportAdditionalParameter.get(i));
          };
        }
      }
      if ((jsonObj.get("number_of_events") != null && !jsonObj.get("number_of_events").isJsonNull()) && !jsonObj.get("number_of_events").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `number_of_events` to be a primitive type in the JSON string but got `%s`", jsonObj.get("number_of_events").toString()));
      }
      if ((jsonObj.get("report_description") != null && !jsonObj.get("report_description").isJsonNull()) && !jsonObj.get("report_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `report_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("report_description").toString()));
      }
      if (jsonObj.get("report_headers") != null && !jsonObj.get("report_headers").isJsonNull()) {
        JsonArray jsonArrayreportHeaders = jsonObj.getAsJsonArray("report_headers");
        if (jsonArrayreportHeaders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("report_headers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `report_headers` to be an array in the JSON string but got `%s`", jsonObj.get("report_headers").toString()));
          }

          // validate the optional field `report_headers` (array)
          for (int i = 0; i < jsonArrayreportHeaders.size(); i++) {
            Reportsv3DisplayHeader.validateJsonElement(jsonArrayreportHeaders.get(i));
          };
        }
      }
      if ((jsonObj.get("report_id") != null && !jsonObj.get("report_id").isJsonNull()) && !jsonObj.get("report_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `report_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("report_id").toString()));
      }
      if ((jsonObj.get("report_name") != null && !jsonObj.get("report_name").isJsonNull()) && !jsonObj.get("report_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `report_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("report_name").toString()));
      }
      if (jsonObj.get("report_tags") != null && !jsonObj.get("report_tags").isJsonNull()) {
        JsonArray jsonArrayreportTags = jsonObj.getAsJsonArray("report_tags");
        if (jsonArrayreportTags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("report_tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `report_tags` to be an array in the JSON string but got `%s`", jsonObj.get("report_tags").toString()));
          }

          // validate the optional field `report_tags` (array)
          for (int i = 0; i < jsonArrayreportTags.size(); i++) {
            Reportsv3ReportTag.validateJsonElement(jsonArrayreportTags.get(i));
          };
        }
      }
      if (jsonObj.get("runtime_param_list") != null && !jsonObj.get("runtime_param_list").isJsonNull()) {
        JsonArray jsonArrayruntimeParamList = jsonObj.getAsJsonArray("runtime_param_list");
        if (jsonArrayruntimeParamList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("runtime_param_list").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `runtime_param_list` to be an array in the JSON string but got `%s`", jsonObj.get("runtime_param_list").toString()));
          }

          // validate the optional field `runtime_param_list` (array)
          for (int i = 0; i < jsonArrayruntimeParamList.size(); i++) {
            Reportsv3RunTimeParameter.validateJsonElement(jsonArrayruntimeParamList.get(i));
          };
        }
      }
      if ((jsonObj.get("selected_timestamp_header_id") != null && !jsonObj.get("selected_timestamp_header_id").isJsonNull()) && !jsonObj.get("selected_timestamp_header_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selected_timestamp_header_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selected_timestamp_header_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Reportsv3ReportDisplayLayout.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Reportsv3ReportDisplayLayout' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Reportsv3ReportDisplayLayout> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Reportsv3ReportDisplayLayout.class));

       return (TypeAdapter<T>) new TypeAdapter<Reportsv3ReportDisplayLayout>() {
           @Override
           public void write(JsonWriter out, Reportsv3ReportDisplayLayout value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Reportsv3ReportDisplayLayout read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Reportsv3ReportDisplayLayout given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Reportsv3ReportDisplayLayout
  * @throws IOException if the JSON string is invalid with respect to Reportsv3ReportDisplayLayout
  */
  public static Reportsv3ReportDisplayLayout fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Reportsv3ReportDisplayLayout.class);
  }

 /**
  * Convert an instance of Reportsv3ReportDisplayLayout to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

