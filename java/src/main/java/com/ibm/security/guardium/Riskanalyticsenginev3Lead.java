/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.security.guardium;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.security.guardium.Riskanalyticsenginev3AdditionalInfo;
import com.ibm.security.guardium.Riskanalyticsenginev3LeadType;
import com.ibm.security.guardium.Riskanalyticsenginev3Pivot;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.security.JSON;

/**
 * A lead for each pivot which triggers the whole process - to find a risk for this pivot.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-27T16:17:29.841502Z[UTC]", comments = "Generator version: 7.6.0")
public class Riskanalyticsenginev3Lead {
  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creation_time";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_INFO = "info";
  @SerializedName(SERIALIZED_NAME_INFO)
  private List<Riskanalyticsenginev3AdditionalInfo> info = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_OBSERVATION = "is_observation";
  @SerializedName(SERIALIZED_NAME_IS_OBSERVATION)
  private Boolean isObservation;

  public static final String SERIALIZED_NAME_LEAD_KEY = "lead_key";
  @SerializedName(SERIALIZED_NAME_LEAD_KEY)
  private String leadKey;

  public static final String SERIALIZED_NAME_PIVOT = "pivot";
  @SerializedName(SERIALIZED_NAME_PIVOT)
  private Riskanalyticsenginev3Pivot pivot;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Float score;

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private Integer severity;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Riskanalyticsenginev3LeadType type = Riskanalyticsenginev3LeadType.UNDEFINED_LEAD_TYPE;

  public Riskanalyticsenginev3Lead() {
  }

  public Riskanalyticsenginev3Lead count(Integer count) {
    this.count = count;
    return this;
  }

   /**
   * Count of events.
   * @return count
  **/
  @javax.annotation.Nullable
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }


  public Riskanalyticsenginev3Lead creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

   /**
   * The lead creation time in format YYYY-MM-DDTHH:mm:ss.sssZ.
   * @return creationTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public Riskanalyticsenginev3Lead info(List<Riskanalyticsenginev3AdditionalInfo> info) {
    this.info = info;
    return this;
  }

  public Riskanalyticsenginev3Lead addInfoItem(Riskanalyticsenginev3AdditionalInfo infoItem) {
    if (this.info == null) {
      this.info = new ArrayList<>();
    }
    this.info.add(infoItem);
    return this;
  }

   /**
   * Additional info.
   * @return info
  **/
  @javax.annotation.Nullable
  public List<Riskanalyticsenginev3AdditionalInfo> getInfo() {
    return info;
  }

  public void setInfo(List<Riskanalyticsenginev3AdditionalInfo> info) {
    this.info = info;
  }


  public Riskanalyticsenginev3Lead isObservation(Boolean isObservation) {
    this.isObservation = isObservation;
    return this;
  }

   /**
   * Is observation flag for the lead to set true based on lead information.
   * @return isObservation
  **/
  @javax.annotation.Nullable
  public Boolean getIsObservation() {
    return isObservation;
  }

  public void setIsObservation(Boolean isObservation) {
    this.isObservation = isObservation;
  }


  public Riskanalyticsenginev3Lead leadKey(String leadKey) {
    this.leadKey = leadKey;
    return this;
  }

   /**
   * The Lead Key name.
   * @return leadKey
  **/
  @javax.annotation.Nullable
  public String getLeadKey() {
    return leadKey;
  }

  public void setLeadKey(String leadKey) {
    this.leadKey = leadKey;
  }


  public Riskanalyticsenginev3Lead pivot(Riskanalyticsenginev3Pivot pivot) {
    this.pivot = pivot;
    return this;
  }

   /**
   * Get pivot
   * @return pivot
  **/
  @javax.annotation.Nullable
  public Riskanalyticsenginev3Pivot getPivot() {
    return pivot;
  }

  public void setPivot(Riskanalyticsenginev3Pivot pivot) {
    this.pivot = pivot;
  }


  public Riskanalyticsenginev3Lead score(Float score) {
    this.score = score;
    return this;
  }

   /**
   * The lead score (normalized score between 0 and 1).
   * @return score
  **/
  @javax.annotation.Nullable
  public Float getScore() {
    return score;
  }

  public void setScore(Float score) {
    this.score = score;
  }


  public Riskanalyticsenginev3Lead severity(Integer severity) {
    this.severity = severity;
    return this;
  }

   /**
   * Lead severity.
   * @return severity
  **/
  @javax.annotation.Nullable
  public Integer getSeverity() {
    return severity;
  }

  public void setSeverity(Integer severity) {
    this.severity = severity;
  }


  public Riskanalyticsenginev3Lead type(Riskanalyticsenginev3LeadType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  public Riskanalyticsenginev3LeadType getType() {
    return type;
  }

  public void setType(Riskanalyticsenginev3LeadType type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Riskanalyticsenginev3Lead riskanalyticsenginev3Lead = (Riskanalyticsenginev3Lead) o;
    return Objects.equals(this.count, riskanalyticsenginev3Lead.count) &&
        Objects.equals(this.creationTime, riskanalyticsenginev3Lead.creationTime) &&
        Objects.equals(this.info, riskanalyticsenginev3Lead.info) &&
        Objects.equals(this.isObservation, riskanalyticsenginev3Lead.isObservation) &&
        Objects.equals(this.leadKey, riskanalyticsenginev3Lead.leadKey) &&
        Objects.equals(this.pivot, riskanalyticsenginev3Lead.pivot) &&
        Objects.equals(this.score, riskanalyticsenginev3Lead.score) &&
        Objects.equals(this.severity, riskanalyticsenginev3Lead.severity) &&
        Objects.equals(this.type, riskanalyticsenginev3Lead.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, creationTime, info, isObservation, leadKey, pivot, score, severity, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Riskanalyticsenginev3Lead {\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    info: ").append(toIndentedString(info)).append("\n");
    sb.append("    isObservation: ").append(toIndentedString(isObservation)).append("\n");
    sb.append("    leadKey: ").append(toIndentedString(leadKey)).append("\n");
    sb.append("    pivot: ").append(toIndentedString(pivot)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("count");
    openapiFields.add("creation_time");
    openapiFields.add("info");
    openapiFields.add("is_observation");
    openapiFields.add("lead_key");
    openapiFields.add("pivot");
    openapiFields.add("score");
    openapiFields.add("severity");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Riskanalyticsenginev3Lead
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Riskanalyticsenginev3Lead.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Riskanalyticsenginev3Lead is not found in the empty JSON string", Riskanalyticsenginev3Lead.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Riskanalyticsenginev3Lead.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Riskanalyticsenginev3Lead` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("info") != null && !jsonObj.get("info").isJsonNull()) {
        JsonArray jsonArrayinfo = jsonObj.getAsJsonArray("info");
        if (jsonArrayinfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("info").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `info` to be an array in the JSON string but got `%s`", jsonObj.get("info").toString()));
          }

          // validate the optional field `info` (array)
          for (int i = 0; i < jsonArrayinfo.size(); i++) {
            Riskanalyticsenginev3AdditionalInfo.validateJsonElement(jsonArrayinfo.get(i));
          };
        }
      }
      if ((jsonObj.get("lead_key") != null && !jsonObj.get("lead_key").isJsonNull()) && !jsonObj.get("lead_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lead_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lead_key").toString()));
      }
      // validate the optional field `pivot`
      if (jsonObj.get("pivot") != null && !jsonObj.get("pivot").isJsonNull()) {
        Riskanalyticsenginev3Pivot.validateJsonElement(jsonObj.get("pivot"));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        Riskanalyticsenginev3LeadType.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Riskanalyticsenginev3Lead.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Riskanalyticsenginev3Lead' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Riskanalyticsenginev3Lead> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Riskanalyticsenginev3Lead.class));

       return (TypeAdapter<T>) new TypeAdapter<Riskanalyticsenginev3Lead>() {
           @Override
           public void write(JsonWriter out, Riskanalyticsenginev3Lead value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Riskanalyticsenginev3Lead read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Riskanalyticsenginev3Lead given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Riskanalyticsenginev3Lead
  * @throws IOException if the JSON string is invalid with respect to Riskanalyticsenginev3Lead
  */
  public static Riskanalyticsenginev3Lead fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Riskanalyticsenginev3Lead.class);
  }

 /**
  * Convert an instance of Riskanalyticsenginev3Lead to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

