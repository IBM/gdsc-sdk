/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.security.guardium;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.security.guardium.Riskanalyticscontrollerv3CardSettings;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.security.JSON;

/**
 * UserUISettings an object contains settings per user to display in the UI.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T18:44:53.377644Z[UTC]", comments = "Generator version: 7.6.0")
public class Riskanalyticscontrollerv3UserUISettings {
  public static final String SERIALIZED_NAME_CARD_SETTINGS = "card_settings";
  @SerializedName(SERIALIZED_NAME_CARD_SETTINGS)
  private List<Riskanalyticscontrollerv3CardSettings> cardSettings = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHOW_BANNER = "show_banner";
  @SerializedName(SERIALIZED_NAME_SHOW_BANNER)
  private Boolean showBanner;

  public Riskanalyticscontrollerv3UserUISettings() {
  }

  public Riskanalyticscontrollerv3UserUISettings cardSettings(List<Riskanalyticscontrollerv3CardSettings> cardSettings) {
    this.cardSettings = cardSettings;
    return this;
  }

  public Riskanalyticscontrollerv3UserUISettings addCardSettingsItem(Riskanalyticscontrollerv3CardSettings cardSettingsItem) {
    if (this.cardSettings == null) {
      this.cardSettings = new ArrayList<>();
    }
    this.cardSettings.add(cardSettingsItem);
    return this;
  }

   /**
   * A list of card settings for each view(box) of risks.
   * @return cardSettings
  **/
  @javax.annotation.Nullable
  public List<Riskanalyticscontrollerv3CardSettings> getCardSettings() {
    return cardSettings;
  }

  public void setCardSettings(List<Riskanalyticscontrollerv3CardSettings> cardSettings) {
    this.cardSettings = cardSettings;
  }


  public Riskanalyticscontrollerv3UserUISettings showBanner(Boolean showBanner) {
    this.showBanner = showBanner;
    return this;
  }

   /**
   * Show_banner a flag to show additional info in the top of screen or to hide it.
   * @return showBanner
  **/
  @javax.annotation.Nullable
  public Boolean getShowBanner() {
    return showBanner;
  }

  public void setShowBanner(Boolean showBanner) {
    this.showBanner = showBanner;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Riskanalyticscontrollerv3UserUISettings riskanalyticscontrollerv3UserUISettings = (Riskanalyticscontrollerv3UserUISettings) o;
    return Objects.equals(this.cardSettings, riskanalyticscontrollerv3UserUISettings.cardSettings) &&
        Objects.equals(this.showBanner, riskanalyticscontrollerv3UserUISettings.showBanner);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cardSettings, showBanner);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Riskanalyticscontrollerv3UserUISettings {\n");
    sb.append("    cardSettings: ").append(toIndentedString(cardSettings)).append("\n");
    sb.append("    showBanner: ").append(toIndentedString(showBanner)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("card_settings");
    openapiFields.add("show_banner");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Riskanalyticscontrollerv3UserUISettings
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Riskanalyticscontrollerv3UserUISettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Riskanalyticscontrollerv3UserUISettings is not found in the empty JSON string", Riskanalyticscontrollerv3UserUISettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Riskanalyticscontrollerv3UserUISettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Riskanalyticscontrollerv3UserUISettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("card_settings") != null && !jsonObj.get("card_settings").isJsonNull()) {
        JsonArray jsonArraycardSettings = jsonObj.getAsJsonArray("card_settings");
        if (jsonArraycardSettings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("card_settings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `card_settings` to be an array in the JSON string but got `%s`", jsonObj.get("card_settings").toString()));
          }

          // validate the optional field `card_settings` (array)
          for (int i = 0; i < jsonArraycardSettings.size(); i++) {
            Riskanalyticscontrollerv3CardSettings.validateJsonElement(jsonArraycardSettings.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Riskanalyticscontrollerv3UserUISettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Riskanalyticscontrollerv3UserUISettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Riskanalyticscontrollerv3UserUISettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Riskanalyticscontrollerv3UserUISettings.class));

       return (TypeAdapter<T>) new TypeAdapter<Riskanalyticscontrollerv3UserUISettings>() {
           @Override
           public void write(JsonWriter out, Riskanalyticscontrollerv3UserUISettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Riskanalyticscontrollerv3UserUISettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Riskanalyticscontrollerv3UserUISettings given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Riskanalyticscontrollerv3UserUISettings
  * @throws IOException if the JSON string is invalid with respect to Riskanalyticscontrollerv3UserUISettings
  */
  public static Riskanalyticscontrollerv3UserUISettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Riskanalyticscontrollerv3UserUISettings.class);
  }

 /**
  * Convert an instance of Riskanalyticscontrollerv3UserUISettings to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

