/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.security.guardium;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.security.guardium.Reportsv3VariantRuleCondition;
import com.ibm.security.guardium.Reportsv3VariantRuleType;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.security.JSON;

/**
 * Reportsv3VariantRule
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-27T16:17:29.841502Z[UTC]", comments = "Generator version: 7.6.0")
public class Reportsv3VariantRule {
  public static final String SERIALIZED_NAME_ACTION_IF_TYPE = "action_if_type";
  @SerializedName(SERIALIZED_NAME_ACTION_IF_TYPE)
  private Reportsv3VariantRuleCondition actionIfType = Reportsv3VariantRuleCondition.UNDEFINED_VARIANT_ACTION_IF;

  public static final String SERIALIZED_NAME_DELIMITER = "delimiter";
  @SerializedName(SERIALIZED_NAME_DELIMITER)
  private String delimiter;

  public static final String SERIALIZED_NAME_EXTRACT_VALUE = "extract_value";
  @SerializedName(SERIALIZED_NAME_EXTRACT_VALUE)
  private String extractValue;

  public static final String SERIALIZED_NAME_MATCHER = "matcher";
  @SerializedName(SERIALIZED_NAME_MATCHER)
  private String matcher;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Reportsv3VariantRuleType type = Reportsv3VariantRuleType.UNDEFINED_VARIANT_RULE_TYPE;

  public Reportsv3VariantRule() {
  }

  public Reportsv3VariantRule actionIfType(Reportsv3VariantRuleCondition actionIfType) {
    this.actionIfType = actionIfType;
    return this;
  }

   /**
   * Get actionIfType
   * @return actionIfType
  **/
  @javax.annotation.Nullable
  public Reportsv3VariantRuleCondition getActionIfType() {
    return actionIfType;
  }

  public void setActionIfType(Reportsv3VariantRuleCondition actionIfType) {
    this.actionIfType = actionIfType;
  }


  public Reportsv3VariantRule delimiter(String delimiter) {
    this.delimiter = delimiter;
    return this;
  }

   /**
   * Get delimiter
   * @return delimiter
  **/
  @javax.annotation.Nullable
  public String getDelimiter() {
    return delimiter;
  }

  public void setDelimiter(String delimiter) {
    this.delimiter = delimiter;
  }


  public Reportsv3VariantRule extractValue(String extractValue) {
    this.extractValue = extractValue;
    return this;
  }

   /**
   * Get extractValue
   * @return extractValue
  **/
  @javax.annotation.Nullable
  public String getExtractValue() {
    return extractValue;
  }

  public void setExtractValue(String extractValue) {
    this.extractValue = extractValue;
  }


  public Reportsv3VariantRule matcher(String matcher) {
    this.matcher = matcher;
    return this;
  }

   /**
   * Get matcher
   * @return matcher
  **/
  @javax.annotation.Nullable
  public String getMatcher() {
    return matcher;
  }

  public void setMatcher(String matcher) {
    this.matcher = matcher;
  }


  public Reportsv3VariantRule type(Reportsv3VariantRuleType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  public Reportsv3VariantRuleType getType() {
    return type;
  }

  public void setType(Reportsv3VariantRuleType type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Reportsv3VariantRule reportsv3VariantRule = (Reportsv3VariantRule) o;
    return Objects.equals(this.actionIfType, reportsv3VariantRule.actionIfType) &&
        Objects.equals(this.delimiter, reportsv3VariantRule.delimiter) &&
        Objects.equals(this.extractValue, reportsv3VariantRule.extractValue) &&
        Objects.equals(this.matcher, reportsv3VariantRule.matcher) &&
        Objects.equals(this.type, reportsv3VariantRule.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionIfType, delimiter, extractValue, matcher, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Reportsv3VariantRule {\n");
    sb.append("    actionIfType: ").append(toIndentedString(actionIfType)).append("\n");
    sb.append("    delimiter: ").append(toIndentedString(delimiter)).append("\n");
    sb.append("    extractValue: ").append(toIndentedString(extractValue)).append("\n");
    sb.append("    matcher: ").append(toIndentedString(matcher)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action_if_type");
    openapiFields.add("delimiter");
    openapiFields.add("extract_value");
    openapiFields.add("matcher");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Reportsv3VariantRule
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Reportsv3VariantRule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Reportsv3VariantRule is not found in the empty JSON string", Reportsv3VariantRule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Reportsv3VariantRule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Reportsv3VariantRule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `action_if_type`
      if (jsonObj.get("action_if_type") != null && !jsonObj.get("action_if_type").isJsonNull()) {
        Reportsv3VariantRuleCondition.validateJsonElement(jsonObj.get("action_if_type"));
      }
      if ((jsonObj.get("delimiter") != null && !jsonObj.get("delimiter").isJsonNull()) && !jsonObj.get("delimiter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `delimiter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("delimiter").toString()));
      }
      if ((jsonObj.get("extract_value") != null && !jsonObj.get("extract_value").isJsonNull()) && !jsonObj.get("extract_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extract_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extract_value").toString()));
      }
      if ((jsonObj.get("matcher") != null && !jsonObj.get("matcher").isJsonNull()) && !jsonObj.get("matcher").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `matcher` to be a primitive type in the JSON string but got `%s`", jsonObj.get("matcher").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        Reportsv3VariantRuleType.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Reportsv3VariantRule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Reportsv3VariantRule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Reportsv3VariantRule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Reportsv3VariantRule.class));

       return (TypeAdapter<T>) new TypeAdapter<Reportsv3VariantRule>() {
           @Override
           public void write(JsonWriter out, Reportsv3VariantRule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Reportsv3VariantRule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Reportsv3VariantRule given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Reportsv3VariantRule
  * @throws IOException if the JSON string is invalid with respect to Reportsv3VariantRule
  */
  public static Reportsv3VariantRule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Reportsv3VariantRule.class);
  }

 /**
  * Convert an instance of Reportsv3VariantRule to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

