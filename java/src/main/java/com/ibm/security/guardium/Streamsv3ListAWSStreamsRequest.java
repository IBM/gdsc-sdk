/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.security.guardium;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.security.guardium.Streamsv3AuthType;
import com.ibm.security.guardium.Streamsv3StreamType;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.security.JSON;

/**
 * ListAWSStreamsRequest defines a request to list AWS Kinesis streams.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T18:44:53.377644Z[UTC]", comments = "Generator version: 7.6.0")
public class Streamsv3ListAWSStreamsRequest {
  public static final String SERIALIZED_NAME_ACCESS_KEY_ID = "access_key_id";
  @SerializedName(SERIALIZED_NAME_ACCESS_KEY_ID)
  private String accessKeyId;

  public static final String SERIALIZED_NAME_AUTH_TYPE = "auth_type";
  @SerializedName(SERIALIZED_NAME_AUTH_TYPE)
  private Streamsv3AuthType authType = Streamsv3AuthType.SECURITY_CREDENTIALS;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private List<String> region = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROLE_ARN = "role_arn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  private String roleArn;

  public static final String SERIALIZED_NAME_SECRET_KEY_ID = "secret_key_id";
  @SerializedName(SERIALIZED_NAME_SECRET_KEY_ID)
  private String secretKeyId;

  public static final String SERIALIZED_NAME_STREAM_TYPE = "stream_type";
  @SerializedName(SERIALIZED_NAME_STREAM_TYPE)
  private Streamsv3StreamType streamType = Streamsv3StreamType.AWS_KINESIS;

  public Streamsv3ListAWSStreamsRequest() {
  }

  public Streamsv3ListAWSStreamsRequest accessKeyId(String accessKeyId) {
    this.accessKeyId = accessKeyId;
    return this;
  }

   /**
   * AWS access key ID.
   * @return accessKeyId
  **/
  @javax.annotation.Nullable
  public String getAccessKeyId() {
    return accessKeyId;
  }

  public void setAccessKeyId(String accessKeyId) {
    this.accessKeyId = accessKeyId;
  }


  public Streamsv3ListAWSStreamsRequest authType(Streamsv3AuthType authType) {
    this.authType = authType;
    return this;
  }

   /**
   * Get authType
   * @return authType
  **/
  @javax.annotation.Nullable
  public Streamsv3AuthType getAuthType() {
    return authType;
  }

  public void setAuthType(Streamsv3AuthType authType) {
    this.authType = authType;
  }


  public Streamsv3ListAWSStreamsRequest id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Identifier.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Streamsv3ListAWSStreamsRequest region(List<String> region) {
    this.region = region;
    return this;
  }

  public Streamsv3ListAWSStreamsRequest addRegionItem(String regionItem) {
    if (this.region == null) {
      this.region = new ArrayList<>();
    }
    this.region.add(regionItem);
    return this;
  }

   /**
   * AWS region.
   * @return region
  **/
  @javax.annotation.Nullable
  public List<String> getRegion() {
    return region;
  }

  public void setRegion(List<String> region) {
    this.region = region;
  }


  public Streamsv3ListAWSStreamsRequest roleArn(String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

   /**
   * IAM role ARN.
   * @return roleArn
  **/
  @javax.annotation.Nullable
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(String roleArn) {
    this.roleArn = roleArn;
  }


  public Streamsv3ListAWSStreamsRequest secretKeyId(String secretKeyId) {
    this.secretKeyId = secretKeyId;
    return this;
  }

   /**
   * AWS secret key ID.
   * @return secretKeyId
  **/
  @javax.annotation.Nullable
  public String getSecretKeyId() {
    return secretKeyId;
  }

  public void setSecretKeyId(String secretKeyId) {
    this.secretKeyId = secretKeyId;
  }


  public Streamsv3ListAWSStreamsRequest streamType(Streamsv3StreamType streamType) {
    this.streamType = streamType;
    return this;
  }

   /**
   * Get streamType
   * @return streamType
  **/
  @javax.annotation.Nullable
  public Streamsv3StreamType getStreamType() {
    return streamType;
  }

  public void setStreamType(Streamsv3StreamType streamType) {
    this.streamType = streamType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Streamsv3ListAWSStreamsRequest streamsv3ListAWSStreamsRequest = (Streamsv3ListAWSStreamsRequest) o;
    return Objects.equals(this.accessKeyId, streamsv3ListAWSStreamsRequest.accessKeyId) &&
        Objects.equals(this.authType, streamsv3ListAWSStreamsRequest.authType) &&
        Objects.equals(this.id, streamsv3ListAWSStreamsRequest.id) &&
        Objects.equals(this.region, streamsv3ListAWSStreamsRequest.region) &&
        Objects.equals(this.roleArn, streamsv3ListAWSStreamsRequest.roleArn) &&
        Objects.equals(this.secretKeyId, streamsv3ListAWSStreamsRequest.secretKeyId) &&
        Objects.equals(this.streamType, streamsv3ListAWSStreamsRequest.streamType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessKeyId, authType, id, region, roleArn, secretKeyId, streamType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Streamsv3ListAWSStreamsRequest {\n");
    sb.append("    accessKeyId: ").append(toIndentedString(accessKeyId)).append("\n");
    sb.append("    authType: ").append(toIndentedString(authType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    secretKeyId: ").append(toIndentedString(secretKeyId)).append("\n");
    sb.append("    streamType: ").append(toIndentedString(streamType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("access_key_id");
    openapiFields.add("auth_type");
    openapiFields.add("id");
    openapiFields.add("region");
    openapiFields.add("role_arn");
    openapiFields.add("secret_key_id");
    openapiFields.add("stream_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Streamsv3ListAWSStreamsRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Streamsv3ListAWSStreamsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Streamsv3ListAWSStreamsRequest is not found in the empty JSON string", Streamsv3ListAWSStreamsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Streamsv3ListAWSStreamsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Streamsv3ListAWSStreamsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("access_key_id") != null && !jsonObj.get("access_key_id").isJsonNull()) && !jsonObj.get("access_key_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `access_key_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("access_key_id").toString()));
      }
      // validate the optional field `auth_type`
      if (jsonObj.get("auth_type") != null && !jsonObj.get("auth_type").isJsonNull()) {
        Streamsv3AuthType.validateJsonElement(jsonObj.get("auth_type"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull() && !jsonObj.get("region").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be an array in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if ((jsonObj.get("role_arn") != null && !jsonObj.get("role_arn").isJsonNull()) && !jsonObj.get("role_arn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role_arn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role_arn").toString()));
      }
      if ((jsonObj.get("secret_key_id") != null && !jsonObj.get("secret_key_id").isJsonNull()) && !jsonObj.get("secret_key_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secret_key_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secret_key_id").toString()));
      }
      // validate the optional field `stream_type`
      if (jsonObj.get("stream_type") != null && !jsonObj.get("stream_type").isJsonNull()) {
        Streamsv3StreamType.validateJsonElement(jsonObj.get("stream_type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Streamsv3ListAWSStreamsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Streamsv3ListAWSStreamsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Streamsv3ListAWSStreamsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Streamsv3ListAWSStreamsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<Streamsv3ListAWSStreamsRequest>() {
           @Override
           public void write(JsonWriter out, Streamsv3ListAWSStreamsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Streamsv3ListAWSStreamsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Streamsv3ListAWSStreamsRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Streamsv3ListAWSStreamsRequest
  * @throws IOException if the JSON string is invalid with respect to Streamsv3ListAWSStreamsRequest
  */
  public static Streamsv3ListAWSStreamsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Streamsv3ListAWSStreamsRequest.class);
  }

 /**
  * Convert an instance of Streamsv3ListAWSStreamsRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

