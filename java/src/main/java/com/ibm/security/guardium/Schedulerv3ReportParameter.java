/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.security.guardium;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.security.guardium.Reportsv3RunTimeParameter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.security.JSON;

/**
 * ReportParameter includes all the parameters needed to run a report.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-27T16:17:29.841502Z[UTC]", comments = "Generator version: 7.6.0")
public class Schedulerv3ReportParameter {
  public static final String SERIALIZED_NAME_EXTRA_DETAIL = "extra_detail";
  @SerializedName(SERIALIZED_NAME_EXTRA_DETAIL)
  private String extraDetail;

  public static final String SERIALIZED_NAME_REPORT_ID = "report_id";
  @SerializedName(SERIALIZED_NAME_REPORT_ID)
  private String reportId;

  public static final String SERIALIZED_NAME_REPORT_NAME = "report_name";
  @SerializedName(SERIALIZED_NAME_REPORT_NAME)
  private String reportName;

  public static final String SERIALIZED_NAME_RUNTIME_PARAMETERS = "runtime_parameters";
  @SerializedName(SERIALIZED_NAME_RUNTIME_PARAMETERS)
  private List<Reportsv3RunTimeParameter> runtimeParameters = new ArrayList<>();

  public static final String SERIALIZED_NAME_SYNC_EXECUTION_DATE = "sync_execution_date";
  @SerializedName(SERIALIZED_NAME_SYNC_EXECUTION_DATE)
  private Boolean syncExecutionDate;

  public static final String SERIALIZED_NAME_THRESHOLD = "threshold";
  @SerializedName(SERIALIZED_NAME_THRESHOLD)
  private Long threshold;

  public Schedulerv3ReportParameter() {
  }

  public Schedulerv3ReportParameter extraDetail(String extraDetail) {
    this.extraDetail = extraDetail;
    return this;
  }

   /**
   * Get extraDetail
   * @return extraDetail
  **/
  @javax.annotation.Nullable
  public String getExtraDetail() {
    return extraDetail;
  }

  public void setExtraDetail(String extraDetail) {
    this.extraDetail = extraDetail;
  }


  public Schedulerv3ReportParameter reportId(String reportId) {
    this.reportId = reportId;
    return this;
  }

   /**
   * Report ID for the scheduled report.
   * @return reportId
  **/
  @javax.annotation.Nullable
  public String getReportId() {
    return reportId;
  }

  public void setReportId(String reportId) {
    this.reportId = reportId;
  }


  public Schedulerv3ReportParameter reportName(String reportName) {
    this.reportName = reportName;
    return this;
  }

   /**
   * Optional: Report Name for the scheduled report.
   * @return reportName
  **/
  @javax.annotation.Nullable
  public String getReportName() {
    return reportName;
  }

  public void setReportName(String reportName) {
    this.reportName = reportName;
  }


  public Schedulerv3ReportParameter runtimeParameters(List<Reportsv3RunTimeParameter> runtimeParameters) {
    this.runtimeParameters = runtimeParameters;
    return this;
  }

  public Schedulerv3ReportParameter addRuntimeParametersItem(Reportsv3RunTimeParameter runtimeParametersItem) {
    if (this.runtimeParameters == null) {
      this.runtimeParameters = new ArrayList<>();
    }
    this.runtimeParameters.add(runtimeParametersItem);
    return this;
  }

   /**
   * Optional: Runtime parameters for this report.
   * @return runtimeParameters
  **/
  @javax.annotation.Nullable
  public List<Reportsv3RunTimeParameter> getRuntimeParameters() {
    return runtimeParameters;
  }

  public void setRuntimeParameters(List<Reportsv3RunTimeParameter> runtimeParameters) {
    this.runtimeParameters = runtimeParameters;
  }


  public Schedulerv3ReportParameter syncExecutionDate(Boolean syncExecutionDate) {
    this.syncExecutionDate = syncExecutionDate;
    return this;
  }

   /**
   * Optional: Flag if sync query_from_date when running this report.
   * @return syncExecutionDate
  **/
  @javax.annotation.Nullable
  public Boolean getSyncExecutionDate() {
    return syncExecutionDate;
  }

  public void setSyncExecutionDate(Boolean syncExecutionDate) {
    this.syncExecutionDate = syncExecutionDate;
  }


  public Schedulerv3ReportParameter threshold(Long threshold) {
    this.threshold = threshold;
    return this;
  }

   /**
   * Optional: threshold count for creating tickets or other integration messages. Default is 1. If there is one row of data from a report, send message.
   * @return threshold
  **/
  @javax.annotation.Nullable
  public Long getThreshold() {
    return threshold;
  }

  public void setThreshold(Long threshold) {
    this.threshold = threshold;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Schedulerv3ReportParameter schedulerv3ReportParameter = (Schedulerv3ReportParameter) o;
    return Objects.equals(this.extraDetail, schedulerv3ReportParameter.extraDetail) &&
        Objects.equals(this.reportId, schedulerv3ReportParameter.reportId) &&
        Objects.equals(this.reportName, schedulerv3ReportParameter.reportName) &&
        Objects.equals(this.runtimeParameters, schedulerv3ReportParameter.runtimeParameters) &&
        Objects.equals(this.syncExecutionDate, schedulerv3ReportParameter.syncExecutionDate) &&
        Objects.equals(this.threshold, schedulerv3ReportParameter.threshold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(extraDetail, reportId, reportName, runtimeParameters, syncExecutionDate, threshold);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Schedulerv3ReportParameter {\n");
    sb.append("    extraDetail: ").append(toIndentedString(extraDetail)).append("\n");
    sb.append("    reportId: ").append(toIndentedString(reportId)).append("\n");
    sb.append("    reportName: ").append(toIndentedString(reportName)).append("\n");
    sb.append("    runtimeParameters: ").append(toIndentedString(runtimeParameters)).append("\n");
    sb.append("    syncExecutionDate: ").append(toIndentedString(syncExecutionDate)).append("\n");
    sb.append("    threshold: ").append(toIndentedString(threshold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("extra_detail");
    openapiFields.add("report_id");
    openapiFields.add("report_name");
    openapiFields.add("runtime_parameters");
    openapiFields.add("sync_execution_date");
    openapiFields.add("threshold");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Schedulerv3ReportParameter
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Schedulerv3ReportParameter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Schedulerv3ReportParameter is not found in the empty JSON string", Schedulerv3ReportParameter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Schedulerv3ReportParameter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Schedulerv3ReportParameter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("extra_detail") != null && !jsonObj.get("extra_detail").isJsonNull()) && !jsonObj.get("extra_detail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extra_detail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extra_detail").toString()));
      }
      if ((jsonObj.get("report_id") != null && !jsonObj.get("report_id").isJsonNull()) && !jsonObj.get("report_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `report_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("report_id").toString()));
      }
      if ((jsonObj.get("report_name") != null && !jsonObj.get("report_name").isJsonNull()) && !jsonObj.get("report_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `report_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("report_name").toString()));
      }
      if (jsonObj.get("runtime_parameters") != null && !jsonObj.get("runtime_parameters").isJsonNull()) {
        JsonArray jsonArrayruntimeParameters = jsonObj.getAsJsonArray("runtime_parameters");
        if (jsonArrayruntimeParameters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("runtime_parameters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `runtime_parameters` to be an array in the JSON string but got `%s`", jsonObj.get("runtime_parameters").toString()));
          }

          // validate the optional field `runtime_parameters` (array)
          for (int i = 0; i < jsonArrayruntimeParameters.size(); i++) {
            Reportsv3RunTimeParameter.validateJsonElement(jsonArrayruntimeParameters.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Schedulerv3ReportParameter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Schedulerv3ReportParameter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Schedulerv3ReportParameter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Schedulerv3ReportParameter.class));

       return (TypeAdapter<T>) new TypeAdapter<Schedulerv3ReportParameter>() {
           @Override
           public void write(JsonWriter out, Schedulerv3ReportParameter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Schedulerv3ReportParameter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Schedulerv3ReportParameter given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Schedulerv3ReportParameter
  * @throws IOException if the JSON string is invalid with respect to Schedulerv3ReportParameter
  */
  public static Schedulerv3ReportParameter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Schedulerv3ReportParameter.class);
  }

 /**
  * Convert an instance of Schedulerv3ReportParameter to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

