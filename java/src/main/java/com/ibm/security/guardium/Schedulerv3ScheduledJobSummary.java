/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.security.guardium;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.security.guardium.Schedulerv3Frequency;
import com.ibm.security.guardium.Schedulerv3Recipient;
import com.ibm.security.guardium.Schedulerv3ScheduledTaskSummary;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.security.JSON;

/**
 * ScheduledJobSummary returns enough details for list view.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T18:44:53.377644Z[UTC]", comments = "Generator version: 7.6.0")
public class Schedulerv3ScheduledJobSummary {
  public static final String SERIALIZED_NAME_CREATION_TIME = "creation_time";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_EXPIRED = "expired";
  @SerializedName(SERIALIZED_NAME_EXPIRED)
  private Boolean expired;

  public static final String SERIALIZED_NAME_FREQUENCY = "frequency";
  @SerializedName(SERIALIZED_NAME_FREQUENCY)
  private Schedulerv3Frequency frequency = Schedulerv3Frequency.UNDEFINED_FREQUENCY;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIME = "last_modified_time";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIME)
  private OffsetDateTime lastModifiedTime;

  public static final String SERIALIZED_NAME_LAST_RUN_DURATION = "last_run_duration";
  @SerializedName(SERIALIZED_NAME_LAST_RUN_DURATION)
  private Long lastRunDuration;

  public static final String SERIALIZED_NAME_LAST_RUN_START = "last_run_start";
  @SerializedName(SERIALIZED_NAME_LAST_RUN_START)
  private OffsetDateTime lastRunStart;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NEXT_RUN = "next_run";
  @SerializedName(SERIALIZED_NAME_NEXT_RUN)
  private OffsetDateTime nextRun;

  public static final String SERIALIZED_NAME_RECIPIENT = "recipient";
  @SerializedName(SERIALIZED_NAME_RECIPIENT)
  private Schedulerv3Recipient recipient;

  public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  private List<Schedulerv3Recipient> recipients = new ArrayList<>();

  public static final String SERIALIZED_NAME_REPORT_NAMES = "report_names";
  @SerializedName(SERIALIZED_NAME_REPORT_NAMES)
  private List<String> reportNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCHEDULE_ID = "schedule_id";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_ID)
  private String scheduleId;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TASKS = "tasks";
  @SerializedName(SERIALIZED_NAME_TASKS)
  private List<Schedulerv3ScheduledTaskSummary> tasks = new ArrayList<>();

  public Schedulerv3ScheduledJobSummary() {
  }

  public Schedulerv3ScheduledJobSummary creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

   /**
   * Optional: Timestamp when the scheduled job was created.
   * @return creationTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public Schedulerv3ScheduledJobSummary description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Optional: Description for the scheduledJob.
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Schedulerv3ScheduledJobSummary enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Enabled or disable the schedule.
   * @return enabled
  **/
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public Schedulerv3ScheduledJobSummary expired(Boolean expired) {
    this.expired = expired;
    return this;
  }

   /**
   * Optional: If this schedule is expired or continues forever.
   * @return expired
  **/
  @javax.annotation.Nullable
  public Boolean getExpired() {
    return expired;
  }

  public void setExpired(Boolean expired) {
    this.expired = expired;
  }


  public Schedulerv3ScheduledJobSummary frequency(Schedulerv3Frequency frequency) {
    this.frequency = frequency;
    return this;
  }

   /**
   * Get frequency
   * @return frequency
  **/
  @javax.annotation.Nullable
  public Schedulerv3Frequency getFrequency() {
    return frequency;
  }

  public void setFrequency(Schedulerv3Frequency frequency) {
    this.frequency = frequency;
  }


  public Schedulerv3ScheduledJobSummary lastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
    return this;
  }

   /**
   * Optional: Timestamp for the last time the scheduled job was modified.
   * @return lastModifiedTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedTime() {
    return lastModifiedTime;
  }

  public void setLastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
  }


  public Schedulerv3ScheduledJobSummary lastRunDuration(Long lastRunDuration) {
    this.lastRunDuration = lastRunDuration;
    return this;
  }

   /**
   * Optional: Duration of the previous run.
   * @return lastRunDuration
  **/
  @javax.annotation.Nullable
  public Long getLastRunDuration() {
    return lastRunDuration;
  }

  public void setLastRunDuration(Long lastRunDuration) {
    this.lastRunDuration = lastRunDuration;
  }


  public Schedulerv3ScheduledJobSummary lastRunStart(OffsetDateTime lastRunStart) {
    this.lastRunStart = lastRunStart;
    return this;
  }

   /**
   * Optional: Timestamp for the previous run.
   * @return lastRunStart
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getLastRunStart() {
    return lastRunStart;
  }

  public void setLastRunStart(OffsetDateTime lastRunStart) {
    this.lastRunStart = lastRunStart;
  }


  public Schedulerv3ScheduledJobSummary name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Schedule name.
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Schedulerv3ScheduledJobSummary nextRun(OffsetDateTime nextRun) {
    this.nextRun = nextRun;
    return this;
  }

   /**
   * Optional: Timestamp for the next jobrun.
   * @return nextRun
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getNextRun() {
    return nextRun;
  }

  public void setNextRun(OffsetDateTime nextRun) {
    this.nextRun = nextRun;
  }


  public Schedulerv3ScheduledJobSummary recipient(Schedulerv3Recipient recipient) {
    this.recipient = recipient;
    return this;
  }

   /**
   * Get recipient
   * @return recipient
  **/
  @javax.annotation.Nullable
  public Schedulerv3Recipient getRecipient() {
    return recipient;
  }

  public void setRecipient(Schedulerv3Recipient recipient) {
    this.recipient = recipient;
  }


  public Schedulerv3ScheduledJobSummary recipients(List<Schedulerv3Recipient> recipients) {
    this.recipients = recipients;
    return this;
  }

  public Schedulerv3ScheduledJobSummary addRecipientsItem(Schedulerv3Recipient recipientsItem) {
    if (this.recipients == null) {
      this.recipients = new ArrayList<>();
    }
    this.recipients.add(recipientsItem);
    return this;
  }

   /**
   * Get recipients
   * @return recipients
  **/
  @javax.annotation.Nullable
  public List<Schedulerv3Recipient> getRecipients() {
    return recipients;
  }

  public void setRecipients(List<Schedulerv3Recipient> recipients) {
    this.recipients = recipients;
  }


  public Schedulerv3ScheduledJobSummary reportNames(List<String> reportNames) {
    this.reportNames = reportNames;
    return this;
  }

  public Schedulerv3ScheduledJobSummary addReportNamesItem(String reportNamesItem) {
    if (this.reportNames == null) {
      this.reportNames = new ArrayList<>();
    }
    this.reportNames.add(reportNamesItem);
    return this;
  }

   /**
   * Optional: Reports run by this scheduled job.
   * @return reportNames
  **/
  @javax.annotation.Nullable
  public List<String> getReportNames() {
    return reportNames;
  }

  public void setReportNames(List<String> reportNames) {
    this.reportNames = reportNames;
  }


  public Schedulerv3ScheduledJobSummary scheduleId(String scheduleId) {
    this.scheduleId = scheduleId;
    return this;
  }

   /**
   * ID for this record. It is automatically created by the database.
   * @return scheduleId
  **/
  @javax.annotation.Nullable
  public String getScheduleId() {
    return scheduleId;
  }

  public void setScheduleId(String scheduleId) {
    this.scheduleId = scheduleId;
  }


  public Schedulerv3ScheduledJobSummary tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public Schedulerv3ScheduledJobSummary addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Optional: Tags to use.
   * @return tags
  **/
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public Schedulerv3ScheduledJobSummary tasks(List<Schedulerv3ScheduledTaskSummary> tasks) {
    this.tasks = tasks;
    return this;
  }

  public Schedulerv3ScheduledJobSummary addTasksItem(Schedulerv3ScheduledTaskSummary tasksItem) {
    if (this.tasks == null) {
      this.tasks = new ArrayList<>();
    }
    this.tasks.add(tasksItem);
    return this;
  }

   /**
   * Get tasks
   * @return tasks
  **/
  @javax.annotation.Nullable
  public List<Schedulerv3ScheduledTaskSummary> getTasks() {
    return tasks;
  }

  public void setTasks(List<Schedulerv3ScheduledTaskSummary> tasks) {
    this.tasks = tasks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Schedulerv3ScheduledJobSummary schedulerv3ScheduledJobSummary = (Schedulerv3ScheduledJobSummary) o;
    return Objects.equals(this.creationTime, schedulerv3ScheduledJobSummary.creationTime) &&
        Objects.equals(this.description, schedulerv3ScheduledJobSummary.description) &&
        Objects.equals(this.enabled, schedulerv3ScheduledJobSummary.enabled) &&
        Objects.equals(this.expired, schedulerv3ScheduledJobSummary.expired) &&
        Objects.equals(this.frequency, schedulerv3ScheduledJobSummary.frequency) &&
        Objects.equals(this.lastModifiedTime, schedulerv3ScheduledJobSummary.lastModifiedTime) &&
        Objects.equals(this.lastRunDuration, schedulerv3ScheduledJobSummary.lastRunDuration) &&
        Objects.equals(this.lastRunStart, schedulerv3ScheduledJobSummary.lastRunStart) &&
        Objects.equals(this.name, schedulerv3ScheduledJobSummary.name) &&
        Objects.equals(this.nextRun, schedulerv3ScheduledJobSummary.nextRun) &&
        Objects.equals(this.recipient, schedulerv3ScheduledJobSummary.recipient) &&
        Objects.equals(this.recipients, schedulerv3ScheduledJobSummary.recipients) &&
        Objects.equals(this.reportNames, schedulerv3ScheduledJobSummary.reportNames) &&
        Objects.equals(this.scheduleId, schedulerv3ScheduledJobSummary.scheduleId) &&
        Objects.equals(this.tags, schedulerv3ScheduledJobSummary.tags) &&
        Objects.equals(this.tasks, schedulerv3ScheduledJobSummary.tasks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationTime, description, enabled, expired, frequency, lastModifiedTime, lastRunDuration, lastRunStart, name, nextRun, recipient, recipients, reportNames, scheduleId, tags, tasks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Schedulerv3ScheduledJobSummary {\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    expired: ").append(toIndentedString(expired)).append("\n");
    sb.append("    frequency: ").append(toIndentedString(frequency)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("    lastRunDuration: ").append(toIndentedString(lastRunDuration)).append("\n");
    sb.append("    lastRunStart: ").append(toIndentedString(lastRunStart)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nextRun: ").append(toIndentedString(nextRun)).append("\n");
    sb.append("    recipient: ").append(toIndentedString(recipient)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    reportNames: ").append(toIndentedString(reportNames)).append("\n");
    sb.append("    scheduleId: ").append(toIndentedString(scheduleId)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    tasks: ").append(toIndentedString(tasks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creation_time");
    openapiFields.add("description");
    openapiFields.add("enabled");
    openapiFields.add("expired");
    openapiFields.add("frequency");
    openapiFields.add("last_modified_time");
    openapiFields.add("last_run_duration");
    openapiFields.add("last_run_start");
    openapiFields.add("name");
    openapiFields.add("next_run");
    openapiFields.add("recipient");
    openapiFields.add("recipients");
    openapiFields.add("report_names");
    openapiFields.add("schedule_id");
    openapiFields.add("tags");
    openapiFields.add("tasks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Schedulerv3ScheduledJobSummary
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Schedulerv3ScheduledJobSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Schedulerv3ScheduledJobSummary is not found in the empty JSON string", Schedulerv3ScheduledJobSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Schedulerv3ScheduledJobSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Schedulerv3ScheduledJobSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `frequency`
      if (jsonObj.get("frequency") != null && !jsonObj.get("frequency").isJsonNull()) {
        Schedulerv3Frequency.validateJsonElement(jsonObj.get("frequency"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `recipient`
      if (jsonObj.get("recipient") != null && !jsonObj.get("recipient").isJsonNull()) {
        Schedulerv3Recipient.validateJsonElement(jsonObj.get("recipient"));
      }
      if (jsonObj.get("recipients") != null && !jsonObj.get("recipients").isJsonNull()) {
        JsonArray jsonArrayrecipients = jsonObj.getAsJsonArray("recipients");
        if (jsonArrayrecipients != null) {
          // ensure the json data is an array
          if (!jsonObj.get("recipients").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `recipients` to be an array in the JSON string but got `%s`", jsonObj.get("recipients").toString()));
          }

          // validate the optional field `recipients` (array)
          for (int i = 0; i < jsonArrayrecipients.size(); i++) {
            Schedulerv3Recipient.validateJsonElement(jsonArrayrecipients.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("report_names") != null && !jsonObj.get("report_names").isJsonNull() && !jsonObj.get("report_names").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `report_names` to be an array in the JSON string but got `%s`", jsonObj.get("report_names").toString()));
      }
      if ((jsonObj.get("schedule_id") != null && !jsonObj.get("schedule_id").isJsonNull()) && !jsonObj.get("schedule_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schedule_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schedule_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if (jsonObj.get("tasks") != null && !jsonObj.get("tasks").isJsonNull()) {
        JsonArray jsonArraytasks = jsonObj.getAsJsonArray("tasks");
        if (jsonArraytasks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tasks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tasks` to be an array in the JSON string but got `%s`", jsonObj.get("tasks").toString()));
          }

          // validate the optional field `tasks` (array)
          for (int i = 0; i < jsonArraytasks.size(); i++) {
            Schedulerv3ScheduledTaskSummary.validateJsonElement(jsonArraytasks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Schedulerv3ScheduledJobSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Schedulerv3ScheduledJobSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Schedulerv3ScheduledJobSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Schedulerv3ScheduledJobSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<Schedulerv3ScheduledJobSummary>() {
           @Override
           public void write(JsonWriter out, Schedulerv3ScheduledJobSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Schedulerv3ScheduledJobSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Schedulerv3ScheduledJobSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Schedulerv3ScheduledJobSummary
  * @throws IOException if the JSON string is invalid with respect to Schedulerv3ScheduledJobSummary
  */
  public static Schedulerv3ScheduledJobSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Schedulerv3ScheduledJobSummary.class);
  }

 /**
  * Convert an instance of Schedulerv3ScheduledJobSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

