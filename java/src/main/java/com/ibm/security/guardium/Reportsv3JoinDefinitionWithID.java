/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.security.guardium;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.security.guardium.Reportsv3HeaderPair;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.security.JSON;

/**
 * Includes join definition properties and join id.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T18:44:53.377644Z[UTC]", comments = "Generator version: 7.6.0")
public class Reportsv3JoinDefinitionWithID {
  public static final String SERIALIZED_NAME_CATEGORY_ID = "category_id";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private String categoryId;

  public static final String SERIALIZED_NAME_HEADER_PAIR_LIST = "header_pair_list";
  @SerializedName(SERIALIZED_NAME_HEADER_PAIR_LIST)
  private List<Reportsv3HeaderPair> headerPairList = new ArrayList<>();

  public static final String SERIALIZED_NAME_JOIN_ID = "join_id";
  @SerializedName(SERIALIZED_NAME_JOIN_ID)
  private String joinId;

  public static final String SERIALIZED_NAME_SOURCE_TABLE_NAME = "source_table_name";
  @SerializedName(SERIALIZED_NAME_SOURCE_TABLE_NAME)
  private String sourceTableName;

  public static final String SERIALIZED_NAME_TARGET_HEADERS_SELECTED_IDS = "target_headers_selected_ids";
  @SerializedName(SERIALIZED_NAME_TARGET_HEADERS_SELECTED_IDS)
  private List<String> targetHeadersSelectedIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_TARGET_TABLE_NAME = "target_table_name";
  @SerializedName(SERIALIZED_NAME_TARGET_TABLE_NAME)
  private String targetTableName;

  public Reportsv3JoinDefinitionWithID() {
  }

  public Reportsv3JoinDefinitionWithID categoryId(String categoryId) {
    this.categoryId = categoryId;
    return this;
  }

   /**
   * Get categoryId
   * @return categoryId
  **/
  @javax.annotation.Nullable
  public String getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(String categoryId) {
    this.categoryId = categoryId;
  }


  public Reportsv3JoinDefinitionWithID headerPairList(List<Reportsv3HeaderPair> headerPairList) {
    this.headerPairList = headerPairList;
    return this;
  }

  public Reportsv3JoinDefinitionWithID addHeaderPairListItem(Reportsv3HeaderPair headerPairListItem) {
    if (this.headerPairList == null) {
      this.headerPairList = new ArrayList<>();
    }
    this.headerPairList.add(headerPairListItem);
    return this;
  }

   /**
   * Get headerPairList
   * @return headerPairList
  **/
  @javax.annotation.Nullable
  public List<Reportsv3HeaderPair> getHeaderPairList() {
    return headerPairList;
  }

  public void setHeaderPairList(List<Reportsv3HeaderPair> headerPairList) {
    this.headerPairList = headerPairList;
  }


  public Reportsv3JoinDefinitionWithID joinId(String joinId) {
    this.joinId = joinId;
    return this;
  }

   /**
   * Unique join ID.
   * @return joinId
  **/
  @javax.annotation.Nullable
  public String getJoinId() {
    return joinId;
  }

  public void setJoinId(String joinId) {
    this.joinId = joinId;
  }


  public Reportsv3JoinDefinitionWithID sourceTableName(String sourceTableName) {
    this.sourceTableName = sourceTableName;
    return this;
  }

   /**
   * Get sourceTableName
   * @return sourceTableName
  **/
  @javax.annotation.Nullable
  public String getSourceTableName() {
    return sourceTableName;
  }

  public void setSourceTableName(String sourceTableName) {
    this.sourceTableName = sourceTableName;
  }


  public Reportsv3JoinDefinitionWithID targetHeadersSelectedIds(List<String> targetHeadersSelectedIds) {
    this.targetHeadersSelectedIds = targetHeadersSelectedIds;
    return this;
  }

  public Reportsv3JoinDefinitionWithID addTargetHeadersSelectedIdsItem(String targetHeadersSelectedIdsItem) {
    if (this.targetHeadersSelectedIds == null) {
      this.targetHeadersSelectedIds = new ArrayList<>();
    }
    this.targetHeadersSelectedIds.add(targetHeadersSelectedIdsItem);
    return this;
  }

   /**
   * Get targetHeadersSelectedIds
   * @return targetHeadersSelectedIds
  **/
  @javax.annotation.Nullable
  public List<String> getTargetHeadersSelectedIds() {
    return targetHeadersSelectedIds;
  }

  public void setTargetHeadersSelectedIds(List<String> targetHeadersSelectedIds) {
    this.targetHeadersSelectedIds = targetHeadersSelectedIds;
  }


  public Reportsv3JoinDefinitionWithID targetTableName(String targetTableName) {
    this.targetTableName = targetTableName;
    return this;
  }

   /**
   * Get targetTableName
   * @return targetTableName
  **/
  @javax.annotation.Nullable
  public String getTargetTableName() {
    return targetTableName;
  }

  public void setTargetTableName(String targetTableName) {
    this.targetTableName = targetTableName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Reportsv3JoinDefinitionWithID reportsv3JoinDefinitionWithID = (Reportsv3JoinDefinitionWithID) o;
    return Objects.equals(this.categoryId, reportsv3JoinDefinitionWithID.categoryId) &&
        Objects.equals(this.headerPairList, reportsv3JoinDefinitionWithID.headerPairList) &&
        Objects.equals(this.joinId, reportsv3JoinDefinitionWithID.joinId) &&
        Objects.equals(this.sourceTableName, reportsv3JoinDefinitionWithID.sourceTableName) &&
        Objects.equals(this.targetHeadersSelectedIds, reportsv3JoinDefinitionWithID.targetHeadersSelectedIds) &&
        Objects.equals(this.targetTableName, reportsv3JoinDefinitionWithID.targetTableName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryId, headerPairList, joinId, sourceTableName, targetHeadersSelectedIds, targetTableName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Reportsv3JoinDefinitionWithID {\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    headerPairList: ").append(toIndentedString(headerPairList)).append("\n");
    sb.append("    joinId: ").append(toIndentedString(joinId)).append("\n");
    sb.append("    sourceTableName: ").append(toIndentedString(sourceTableName)).append("\n");
    sb.append("    targetHeadersSelectedIds: ").append(toIndentedString(targetHeadersSelectedIds)).append("\n");
    sb.append("    targetTableName: ").append(toIndentedString(targetTableName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category_id");
    openapiFields.add("header_pair_list");
    openapiFields.add("join_id");
    openapiFields.add("source_table_name");
    openapiFields.add("target_headers_selected_ids");
    openapiFields.add("target_table_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Reportsv3JoinDefinitionWithID
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Reportsv3JoinDefinitionWithID.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Reportsv3JoinDefinitionWithID is not found in the empty JSON string", Reportsv3JoinDefinitionWithID.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Reportsv3JoinDefinitionWithID.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Reportsv3JoinDefinitionWithID` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("category_id") != null && !jsonObj.get("category_id").isJsonNull()) && !jsonObj.get("category_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category_id").toString()));
      }
      if (jsonObj.get("header_pair_list") != null && !jsonObj.get("header_pair_list").isJsonNull()) {
        JsonArray jsonArrayheaderPairList = jsonObj.getAsJsonArray("header_pair_list");
        if (jsonArrayheaderPairList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("header_pair_list").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `header_pair_list` to be an array in the JSON string but got `%s`", jsonObj.get("header_pair_list").toString()));
          }

          // validate the optional field `header_pair_list` (array)
          for (int i = 0; i < jsonArrayheaderPairList.size(); i++) {
            Reportsv3HeaderPair.validateJsonElement(jsonArrayheaderPairList.get(i));
          };
        }
      }
      if ((jsonObj.get("join_id") != null && !jsonObj.get("join_id").isJsonNull()) && !jsonObj.get("join_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `join_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("join_id").toString()));
      }
      if ((jsonObj.get("source_table_name") != null && !jsonObj.get("source_table_name").isJsonNull()) && !jsonObj.get("source_table_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_table_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_table_name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("target_headers_selected_ids") != null && !jsonObj.get("target_headers_selected_ids").isJsonNull() && !jsonObj.get("target_headers_selected_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_headers_selected_ids` to be an array in the JSON string but got `%s`", jsonObj.get("target_headers_selected_ids").toString()));
      }
      if ((jsonObj.get("target_table_name") != null && !jsonObj.get("target_table_name").isJsonNull()) && !jsonObj.get("target_table_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target_table_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target_table_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Reportsv3JoinDefinitionWithID.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Reportsv3JoinDefinitionWithID' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Reportsv3JoinDefinitionWithID> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Reportsv3JoinDefinitionWithID.class));

       return (TypeAdapter<T>) new TypeAdapter<Reportsv3JoinDefinitionWithID>() {
           @Override
           public void write(JsonWriter out, Reportsv3JoinDefinitionWithID value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Reportsv3JoinDefinitionWithID read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Reportsv3JoinDefinitionWithID given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Reportsv3JoinDefinitionWithID
  * @throws IOException if the JSON string is invalid with respect to Reportsv3JoinDefinitionWithID
  */
  public static Reportsv3JoinDefinitionWithID fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Reportsv3JoinDefinitionWithID.class);
  }

 /**
  * Convert an instance of Reportsv3JoinDefinitionWithID to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

