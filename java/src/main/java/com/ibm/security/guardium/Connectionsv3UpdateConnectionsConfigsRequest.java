/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.security.guardium;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.security.guardium.Connectionsv3ConnectorType;
import com.ibm.security.guardium.Connectionsv3StreamConnectionConfig;
import com.ibm.security.guardium.Connectionsv3UCConnectionConfig;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.security.JSON;

/**
 * Request parameters for update connection.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-27T16:17:29.841502Z[UTC]", comments = "Generator version: 7.6.0")
public class Connectionsv3UpdateConnectionsConfigsRequest {
  public static final String SERIALIZED_NAME_STREAM_CONNECTION_CONFIGS = "stream_connection_configs";
  @SerializedName(SERIALIZED_NAME_STREAM_CONNECTION_CONFIGS)
  private List<Connectionsv3StreamConnectionConfig> streamConnectionConfigs = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Connectionsv3ConnectorType type = Connectionsv3ConnectorType.UNDEFINED_TYPE;

  public static final String SERIALIZED_NAME_UC_CONNECTION_CONFIGS = "uc_connection_configs";
  @SerializedName(SERIALIZED_NAME_UC_CONNECTION_CONFIGS)
  private List<Connectionsv3UCConnectionConfig> ucConnectionConfigs = new ArrayList<>();

  public Connectionsv3UpdateConnectionsConfigsRequest() {
  }

  public Connectionsv3UpdateConnectionsConfigsRequest streamConnectionConfigs(List<Connectionsv3StreamConnectionConfig> streamConnectionConfigs) {
    this.streamConnectionConfigs = streamConnectionConfigs;
    return this;
  }

  public Connectionsv3UpdateConnectionsConfigsRequest addStreamConnectionConfigsItem(Connectionsv3StreamConnectionConfig streamConnectionConfigsItem) {
    if (this.streamConnectionConfigs == null) {
      this.streamConnectionConfigs = new ArrayList<>();
    }
    this.streamConnectionConfigs.add(streamConnectionConfigsItem);
    return this;
  }

   /**
   * Optional: list of streaming connections.
   * @return streamConnectionConfigs
  **/
  @javax.annotation.Nullable
  public List<Connectionsv3StreamConnectionConfig> getStreamConnectionConfigs() {
    return streamConnectionConfigs;
  }

  public void setStreamConnectionConfigs(List<Connectionsv3StreamConnectionConfig> streamConnectionConfigs) {
    this.streamConnectionConfigs = streamConnectionConfigs;
  }


  public Connectionsv3UpdateConnectionsConfigsRequest type(Connectionsv3ConnectorType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  public Connectionsv3ConnectorType getType() {
    return type;
  }

  public void setType(Connectionsv3ConnectorType type) {
    this.type = type;
  }


  public Connectionsv3UpdateConnectionsConfigsRequest ucConnectionConfigs(List<Connectionsv3UCConnectionConfig> ucConnectionConfigs) {
    this.ucConnectionConfigs = ucConnectionConfigs;
    return this;
  }

  public Connectionsv3UpdateConnectionsConfigsRequest addUcConnectionConfigsItem(Connectionsv3UCConnectionConfig ucConnectionConfigsItem) {
    if (this.ucConnectionConfigs == null) {
      this.ucConnectionConfigs = new ArrayList<>();
    }
    this.ucConnectionConfigs.add(ucConnectionConfigsItem);
    return this;
  }

   /**
   * Optional: list of UC connections.
   * @return ucConnectionConfigs
  **/
  @javax.annotation.Nullable
  public List<Connectionsv3UCConnectionConfig> getUcConnectionConfigs() {
    return ucConnectionConfigs;
  }

  public void setUcConnectionConfigs(List<Connectionsv3UCConnectionConfig> ucConnectionConfigs) {
    this.ucConnectionConfigs = ucConnectionConfigs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Connectionsv3UpdateConnectionsConfigsRequest connectionsv3UpdateConnectionsConfigsRequest = (Connectionsv3UpdateConnectionsConfigsRequest) o;
    return Objects.equals(this.streamConnectionConfigs, connectionsv3UpdateConnectionsConfigsRequest.streamConnectionConfigs) &&
        Objects.equals(this.type, connectionsv3UpdateConnectionsConfigsRequest.type) &&
        Objects.equals(this.ucConnectionConfigs, connectionsv3UpdateConnectionsConfigsRequest.ucConnectionConfigs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(streamConnectionConfigs, type, ucConnectionConfigs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Connectionsv3UpdateConnectionsConfigsRequest {\n");
    sb.append("    streamConnectionConfigs: ").append(toIndentedString(streamConnectionConfigs)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    ucConnectionConfigs: ").append(toIndentedString(ucConnectionConfigs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("stream_connection_configs");
    openapiFields.add("type");
    openapiFields.add("uc_connection_configs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Connectionsv3UpdateConnectionsConfigsRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Connectionsv3UpdateConnectionsConfigsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Connectionsv3UpdateConnectionsConfigsRequest is not found in the empty JSON string", Connectionsv3UpdateConnectionsConfigsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Connectionsv3UpdateConnectionsConfigsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Connectionsv3UpdateConnectionsConfigsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("stream_connection_configs") != null && !jsonObj.get("stream_connection_configs").isJsonNull()) {
        JsonArray jsonArraystreamConnectionConfigs = jsonObj.getAsJsonArray("stream_connection_configs");
        if (jsonArraystreamConnectionConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("stream_connection_configs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `stream_connection_configs` to be an array in the JSON string but got `%s`", jsonObj.get("stream_connection_configs").toString()));
          }

          // validate the optional field `stream_connection_configs` (array)
          for (int i = 0; i < jsonArraystreamConnectionConfigs.size(); i++) {
            Connectionsv3StreamConnectionConfig.validateJsonElement(jsonArraystreamConnectionConfigs.get(i));
          };
        }
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        Connectionsv3ConnectorType.validateJsonElement(jsonObj.get("type"));
      }
      if (jsonObj.get("uc_connection_configs") != null && !jsonObj.get("uc_connection_configs").isJsonNull()) {
        JsonArray jsonArrayucConnectionConfigs = jsonObj.getAsJsonArray("uc_connection_configs");
        if (jsonArrayucConnectionConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("uc_connection_configs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `uc_connection_configs` to be an array in the JSON string but got `%s`", jsonObj.get("uc_connection_configs").toString()));
          }

          // validate the optional field `uc_connection_configs` (array)
          for (int i = 0; i < jsonArrayucConnectionConfigs.size(); i++) {
            Connectionsv3UCConnectionConfig.validateJsonElement(jsonArrayucConnectionConfigs.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Connectionsv3UpdateConnectionsConfigsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Connectionsv3UpdateConnectionsConfigsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Connectionsv3UpdateConnectionsConfigsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Connectionsv3UpdateConnectionsConfigsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<Connectionsv3UpdateConnectionsConfigsRequest>() {
           @Override
           public void write(JsonWriter out, Connectionsv3UpdateConnectionsConfigsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Connectionsv3UpdateConnectionsConfigsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Connectionsv3UpdateConnectionsConfigsRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Connectionsv3UpdateConnectionsConfigsRequest
  * @throws IOException if the JSON string is invalid with respect to Connectionsv3UpdateConnectionsConfigsRequest
  */
  public static Connectionsv3UpdateConnectionsConfigsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Connectionsv3UpdateConnectionsConfigsRequest.class);
  }

 /**
  * Convert an instance of Connectionsv3UpdateConnectionsConfigsRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

