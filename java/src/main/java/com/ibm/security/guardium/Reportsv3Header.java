/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.security.guardium;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.security.guardium.Reportsv3FieldName;
import com.ibm.security.guardium.Reportsv3HeaderDescription;
import com.ibm.security.guardium.Reportsv3HeaderType;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.security.JSON;

/**
 * Reportsv3Header
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T18:44:53.377644Z[UTC]", comments = "Generator version: 7.6.0")
public class Reportsv3Header {
  public static final String SERIALIZED_NAME_CAN_BE_USED_IN_CHART = "can_be_used_in_chart";
  @SerializedName(SERIALIZED_NAME_CAN_BE_USED_IN_CHART)
  private Boolean canBeUsedInChart;

  public static final String SERIALIZED_NAME_FIELD_NAME = "field_name";
  @SerializedName(SERIALIZED_NAME_FIELD_NAME)
  private Reportsv3FieldName fieldName;

  public static final String SERIALIZED_NAME_GROUP_TYPE_ID = "group_type_id";
  @SerializedName(SERIALIZED_NAME_GROUP_TYPE_ID)
  private Integer groupTypeId;

  public static final String SERIALIZED_NAME_HEADER_CATEGORY = "header_category";
  @SerializedName(SERIALIZED_NAME_HEADER_CATEGORY)
  private String headerCategory;

  public static final String SERIALIZED_NAME_HEADER_DESCRIPTION = "header_description";
  @SerializedName(SERIALIZED_NAME_HEADER_DESCRIPTION)
  private Reportsv3HeaderDescription headerDescription;

  public static final String SERIALIZED_NAME_HEADER_ID = "header_id";
  @SerializedName(SERIALIZED_NAME_HEADER_ID)
  private String headerId;

  public static final String SERIALIZED_NAME_HEADER_NAME = "header_name";
  @SerializedName(SERIALIZED_NAME_HEADER_NAME)
  private String headerName;

  public static final String SERIALIZED_NAME_IS_RECOMMENDED = "is_recommended";
  @SerializedName(SERIALIZED_NAME_IS_RECOMMENDED)
  private Boolean isRecommended;

  public static final String SERIALIZED_NAME_TABLE_NAME = "table_name";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  private String tableName;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Reportsv3HeaderType type = Reportsv3HeaderType.UNDEFINED_TYPE;

  public static final String SERIALIZED_NAME_TYPE_LENGTH = "type_length";
  @SerializedName(SERIALIZED_NAME_TYPE_LENGTH)
  private Integer typeLength;

  public Reportsv3Header() {
  }

  public Reportsv3Header canBeUsedInChart(Boolean canBeUsedInChart) {
    this.canBeUsedInChart = canBeUsedInChart;
    return this;
  }

   /**
   * If the header can be used in charts.
   * @return canBeUsedInChart
  **/
  @javax.annotation.Nullable
  public Boolean getCanBeUsedInChart() {
    return canBeUsedInChart;
  }

  public void setCanBeUsedInChart(Boolean canBeUsedInChart) {
    this.canBeUsedInChart = canBeUsedInChart;
  }


  public Reportsv3Header fieldName(Reportsv3FieldName fieldName) {
    this.fieldName = fieldName;
    return this;
  }

   /**
   * Get fieldName
   * @return fieldName
  **/
  @javax.annotation.Nullable
  public Reportsv3FieldName getFieldName() {
    return fieldName;
  }

  public void setFieldName(Reportsv3FieldName fieldName) {
    this.fieldName = fieldName;
  }


  public Reportsv3Header groupTypeId(Integer groupTypeId) {
    this.groupTypeId = groupTypeId;
    return this;
  }

   /**
   * Group type id for the filter.
   * @return groupTypeId
  **/
  @javax.annotation.Nullable
  public Integer getGroupTypeId() {
    return groupTypeId;
  }

  public void setGroupTypeId(Integer groupTypeId) {
    this.groupTypeId = groupTypeId;
  }


  public Reportsv3Header headerCategory(String headerCategory) {
    this.headerCategory = headerCategory;
    return this;
  }

   /**
   * The category of the header.
   * @return headerCategory
  **/
  @javax.annotation.Nullable
  public String getHeaderCategory() {
    return headerCategory;
  }

  public void setHeaderCategory(String headerCategory) {
    this.headerCategory = headerCategory;
  }


  public Reportsv3Header headerDescription(Reportsv3HeaderDescription headerDescription) {
    this.headerDescription = headerDescription;
    return this;
  }

   /**
   * Get headerDescription
   * @return headerDescription
  **/
  @javax.annotation.Nullable
  public Reportsv3HeaderDescription getHeaderDescription() {
    return headerDescription;
  }

  public void setHeaderDescription(Reportsv3HeaderDescription headerDescription) {
    this.headerDescription = headerDescription;
  }


  public Reportsv3Header headerId(String headerId) {
    this.headerId = headerId;
    return this;
  }

   /**
   * The header id.
   * @return headerId
  **/
  @javax.annotation.Nullable
  public String getHeaderId() {
    return headerId;
  }

  public void setHeaderId(String headerId) {
    this.headerId = headerId;
  }


  public Reportsv3Header headerName(String headerName) {
    this.headerName = headerName;
    return this;
  }

   /**
   * The header name.
   * @return headerName
  **/
  @javax.annotation.Nullable
  public String getHeaderName() {
    return headerName;
  }

  public void setHeaderName(String headerName) {
    this.headerName = headerName;
  }


  public Reportsv3Header isRecommended(Boolean isRecommended) {
    this.isRecommended = isRecommended;
    return this;
  }

   /**
   * If the header is recommended.
   * @return isRecommended
  **/
  @javax.annotation.Nullable
  public Boolean getIsRecommended() {
    return isRecommended;
  }

  public void setIsRecommended(Boolean isRecommended) {
    this.isRecommended = isRecommended;
  }


  public Reportsv3Header tableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

   /**
   * Table name.
   * @return tableName
  **/
  @javax.annotation.Nullable
  public String getTableName() {
    return tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }


  public Reportsv3Header type(Reportsv3HeaderType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  public Reportsv3HeaderType getType() {
    return type;
  }

  public void setType(Reportsv3HeaderType type) {
    this.type = type;
  }


  public Reportsv3Header typeLength(Integer typeLength) {
    this.typeLength = typeLength;
    return this;
  }

   /**
   * Header type length.
   * @return typeLength
  **/
  @javax.annotation.Nullable
  public Integer getTypeLength() {
    return typeLength;
  }

  public void setTypeLength(Integer typeLength) {
    this.typeLength = typeLength;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Reportsv3Header reportsv3Header = (Reportsv3Header) o;
    return Objects.equals(this.canBeUsedInChart, reportsv3Header.canBeUsedInChart) &&
        Objects.equals(this.fieldName, reportsv3Header.fieldName) &&
        Objects.equals(this.groupTypeId, reportsv3Header.groupTypeId) &&
        Objects.equals(this.headerCategory, reportsv3Header.headerCategory) &&
        Objects.equals(this.headerDescription, reportsv3Header.headerDescription) &&
        Objects.equals(this.headerId, reportsv3Header.headerId) &&
        Objects.equals(this.headerName, reportsv3Header.headerName) &&
        Objects.equals(this.isRecommended, reportsv3Header.isRecommended) &&
        Objects.equals(this.tableName, reportsv3Header.tableName) &&
        Objects.equals(this.type, reportsv3Header.type) &&
        Objects.equals(this.typeLength, reportsv3Header.typeLength);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canBeUsedInChart, fieldName, groupTypeId, headerCategory, headerDescription, headerId, headerName, isRecommended, tableName, type, typeLength);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Reportsv3Header {\n");
    sb.append("    canBeUsedInChart: ").append(toIndentedString(canBeUsedInChart)).append("\n");
    sb.append("    fieldName: ").append(toIndentedString(fieldName)).append("\n");
    sb.append("    groupTypeId: ").append(toIndentedString(groupTypeId)).append("\n");
    sb.append("    headerCategory: ").append(toIndentedString(headerCategory)).append("\n");
    sb.append("    headerDescription: ").append(toIndentedString(headerDescription)).append("\n");
    sb.append("    headerId: ").append(toIndentedString(headerId)).append("\n");
    sb.append("    headerName: ").append(toIndentedString(headerName)).append("\n");
    sb.append("    isRecommended: ").append(toIndentedString(isRecommended)).append("\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    typeLength: ").append(toIndentedString(typeLength)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("can_be_used_in_chart");
    openapiFields.add("field_name");
    openapiFields.add("group_type_id");
    openapiFields.add("header_category");
    openapiFields.add("header_description");
    openapiFields.add("header_id");
    openapiFields.add("header_name");
    openapiFields.add("is_recommended");
    openapiFields.add("table_name");
    openapiFields.add("type");
    openapiFields.add("type_length");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Reportsv3Header
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Reportsv3Header.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Reportsv3Header is not found in the empty JSON string", Reportsv3Header.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Reportsv3Header.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Reportsv3Header` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `field_name`
      if (jsonObj.get("field_name") != null && !jsonObj.get("field_name").isJsonNull()) {
        Reportsv3FieldName.validateJsonElement(jsonObj.get("field_name"));
      }
      if ((jsonObj.get("header_category") != null && !jsonObj.get("header_category").isJsonNull()) && !jsonObj.get("header_category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `header_category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("header_category").toString()));
      }
      // validate the optional field `header_description`
      if (jsonObj.get("header_description") != null && !jsonObj.get("header_description").isJsonNull()) {
        Reportsv3HeaderDescription.validateJsonElement(jsonObj.get("header_description"));
      }
      if ((jsonObj.get("header_id") != null && !jsonObj.get("header_id").isJsonNull()) && !jsonObj.get("header_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `header_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("header_id").toString()));
      }
      if ((jsonObj.get("header_name") != null && !jsonObj.get("header_name").isJsonNull()) && !jsonObj.get("header_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `header_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("header_name").toString()));
      }
      if ((jsonObj.get("table_name") != null && !jsonObj.get("table_name").isJsonNull()) && !jsonObj.get("table_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `table_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("table_name").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        Reportsv3HeaderType.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Reportsv3Header.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Reportsv3Header' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Reportsv3Header> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Reportsv3Header.class));

       return (TypeAdapter<T>) new TypeAdapter<Reportsv3Header>() {
           @Override
           public void write(JsonWriter out, Reportsv3Header value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Reportsv3Header read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Reportsv3Header given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Reportsv3Header
  * @throws IOException if the JSON string is invalid with respect to Reportsv3Header
  */
  public static Reportsv3Header fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Reportsv3Header.class);
  }

 /**
  * Convert an instance of Reportsv3Header to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

