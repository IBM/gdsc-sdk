/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.security.guardium;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.security.guardium.Reportsv3HeaderDataType;
import com.ibm.security.guardium.Reportsv3HeaderType;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.security.JSON;

/**
 * Reportsv3CategoryField
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-27T16:17:29.841502Z[UTC]", comments = "Generator version: 7.6.0")
public class Reportsv3CategoryField {
  public static final String SERIALIZED_NAME_CAN_BE_USED_IN_CHART = "can_be_used_in_chart";
  @SerializedName(SERIALIZED_NAME_CAN_BE_USED_IN_CHART)
  private Boolean canBeUsedInChart;

  public static final String SERIALIZED_NAME_FIELD_NAME = "field_name";
  @SerializedName(SERIALIZED_NAME_FIELD_NAME)
  private String fieldName;

  public static final String SERIALIZED_NAME_GROUP_TYPE_ID = "group_type_id";
  @SerializedName(SERIALIZED_NAME_GROUP_TYPE_ID)
  private Integer groupTypeId;

  public static final String SERIALIZED_NAME_HEADER_CATEGORY = "header_category";
  @SerializedName(SERIALIZED_NAME_HEADER_CATEGORY)
  private String headerCategory;

  public static final String SERIALIZED_NAME_HEADER_DATA_TYPE = "header_data_type";
  @SerializedName(SERIALIZED_NAME_HEADER_DATA_TYPE)
  private Reportsv3HeaderDataType headerDataType = Reportsv3HeaderDataType.UNDEFINED_REPORT_HEADER_TYPE;

  public static final String SERIALIZED_NAME_HEADER_DESCRIPTION = "header_description";
  @SerializedName(SERIALIZED_NAME_HEADER_DESCRIPTION)
  private String headerDescription;

  public static final String SERIALIZED_NAME_HEADER_NAME = "header_name";
  @SerializedName(SERIALIZED_NAME_HEADER_NAME)
  private String headerName;

  public static final String SERIALIZED_NAME_IS_RECOMMENDED = "is_recommended";
  @SerializedName(SERIALIZED_NAME_IS_RECOMMENDED)
  private Boolean isRecommended;

  public static final String SERIALIZED_NAME_IS_VISIBLE = "is_visible";
  @SerializedName(SERIALIZED_NAME_IS_VISIBLE)
  private Boolean isVisible;

  public static final String SERIALIZED_NAME_TABLE_NAME = "table_name";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  private String tableName;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Reportsv3HeaderType type = Reportsv3HeaderType.UNDEFINED_TYPE;

  public static final String SERIALIZED_NAME_TYPE_LENGTH = "type_length";
  @SerializedName(SERIALIZED_NAME_TYPE_LENGTH)
  private Integer typeLength;

  public Reportsv3CategoryField() {
  }

  public Reportsv3CategoryField canBeUsedInChart(Boolean canBeUsedInChart) {
    this.canBeUsedInChart = canBeUsedInChart;
    return this;
  }

   /**
   * If the header can be used in charts.
   * @return canBeUsedInChart
  **/
  @javax.annotation.Nullable
  public Boolean getCanBeUsedInChart() {
    return canBeUsedInChart;
  }

  public void setCanBeUsedInChart(Boolean canBeUsedInChart) {
    this.canBeUsedInChart = canBeUsedInChart;
  }


  public Reportsv3CategoryField fieldName(String fieldName) {
    this.fieldName = fieldName;
    return this;
  }

   /**
   * Field name&#39;s NLS translation key and translated value.
   * @return fieldName
  **/
  @javax.annotation.Nullable
  public String getFieldName() {
    return fieldName;
  }

  public void setFieldName(String fieldName) {
    this.fieldName = fieldName;
  }


  public Reportsv3CategoryField groupTypeId(Integer groupTypeId) {
    this.groupTypeId = groupTypeId;
    return this;
  }

   /**
   * Group type id for the filter.
   * @return groupTypeId
  **/
  @javax.annotation.Nullable
  public Integer getGroupTypeId() {
    return groupTypeId;
  }

  public void setGroupTypeId(Integer groupTypeId) {
    this.groupTypeId = groupTypeId;
  }


  public Reportsv3CategoryField headerCategory(String headerCategory) {
    this.headerCategory = headerCategory;
    return this;
  }

   /**
   * The category of the header.
   * @return headerCategory
  **/
  @javax.annotation.Nullable
  public String getHeaderCategory() {
    return headerCategory;
  }

  public void setHeaderCategory(String headerCategory) {
    this.headerCategory = headerCategory;
  }


  public Reportsv3CategoryField headerDataType(Reportsv3HeaderDataType headerDataType) {
    this.headerDataType = headerDataType;
    return this;
  }

   /**
   * Get headerDataType
   * @return headerDataType
  **/
  @javax.annotation.Nullable
  public Reportsv3HeaderDataType getHeaderDataType() {
    return headerDataType;
  }

  public void setHeaderDataType(Reportsv3HeaderDataType headerDataType) {
    this.headerDataType = headerDataType;
  }


  public Reportsv3CategoryField headerDescription(String headerDescription) {
    this.headerDescription = headerDescription;
    return this;
  }

   /**
   * Header description&#39;s NLS translation key and translated value.
   * @return headerDescription
  **/
  @javax.annotation.Nullable
  public String getHeaderDescription() {
    return headerDescription;
  }

  public void setHeaderDescription(String headerDescription) {
    this.headerDescription = headerDescription;
  }


  public Reportsv3CategoryField headerName(String headerName) {
    this.headerName = headerName;
    return this;
  }

   /**
   * The header name.
   * @return headerName
  **/
  @javax.annotation.Nullable
  public String getHeaderName() {
    return headerName;
  }

  public void setHeaderName(String headerName) {
    this.headerName = headerName;
  }


  public Reportsv3CategoryField isRecommended(Boolean isRecommended) {
    this.isRecommended = isRecommended;
    return this;
  }

   /**
   * If the header is recommended.
   * @return isRecommended
  **/
  @javax.annotation.Nullable
  public Boolean getIsRecommended() {
    return isRecommended;
  }

  public void setIsRecommended(Boolean isRecommended) {
    this.isRecommended = isRecommended;
  }


  public Reportsv3CategoryField isVisible(Boolean isVisible) {
    this.isVisible = isVisible;
    return this;
  }

   /**
   * Get isVisible
   * @return isVisible
  **/
  @javax.annotation.Nullable
  public Boolean getIsVisible() {
    return isVisible;
  }

  public void setIsVisible(Boolean isVisible) {
    this.isVisible = isVisible;
  }


  public Reportsv3CategoryField tableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

   /**
   * Table name.
   * @return tableName
  **/
  @javax.annotation.Nullable
  public String getTableName() {
    return tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }


  public Reportsv3CategoryField type(Reportsv3HeaderType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  public Reportsv3HeaderType getType() {
    return type;
  }

  public void setType(Reportsv3HeaderType type) {
    this.type = type;
  }


  public Reportsv3CategoryField typeLength(Integer typeLength) {
    this.typeLength = typeLength;
    return this;
  }

   /**
   * Header type length.
   * @return typeLength
  **/
  @javax.annotation.Nullable
  public Integer getTypeLength() {
    return typeLength;
  }

  public void setTypeLength(Integer typeLength) {
    this.typeLength = typeLength;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Reportsv3CategoryField reportsv3CategoryField = (Reportsv3CategoryField) o;
    return Objects.equals(this.canBeUsedInChart, reportsv3CategoryField.canBeUsedInChart) &&
        Objects.equals(this.fieldName, reportsv3CategoryField.fieldName) &&
        Objects.equals(this.groupTypeId, reportsv3CategoryField.groupTypeId) &&
        Objects.equals(this.headerCategory, reportsv3CategoryField.headerCategory) &&
        Objects.equals(this.headerDataType, reportsv3CategoryField.headerDataType) &&
        Objects.equals(this.headerDescription, reportsv3CategoryField.headerDescription) &&
        Objects.equals(this.headerName, reportsv3CategoryField.headerName) &&
        Objects.equals(this.isRecommended, reportsv3CategoryField.isRecommended) &&
        Objects.equals(this.isVisible, reportsv3CategoryField.isVisible) &&
        Objects.equals(this.tableName, reportsv3CategoryField.tableName) &&
        Objects.equals(this.type, reportsv3CategoryField.type) &&
        Objects.equals(this.typeLength, reportsv3CategoryField.typeLength);
  }

  @Override
  public int hashCode() {
    return Objects.hash(canBeUsedInChart, fieldName, groupTypeId, headerCategory, headerDataType, headerDescription, headerName, isRecommended, isVisible, tableName, type, typeLength);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Reportsv3CategoryField {\n");
    sb.append("    canBeUsedInChart: ").append(toIndentedString(canBeUsedInChart)).append("\n");
    sb.append("    fieldName: ").append(toIndentedString(fieldName)).append("\n");
    sb.append("    groupTypeId: ").append(toIndentedString(groupTypeId)).append("\n");
    sb.append("    headerCategory: ").append(toIndentedString(headerCategory)).append("\n");
    sb.append("    headerDataType: ").append(toIndentedString(headerDataType)).append("\n");
    sb.append("    headerDescription: ").append(toIndentedString(headerDescription)).append("\n");
    sb.append("    headerName: ").append(toIndentedString(headerName)).append("\n");
    sb.append("    isRecommended: ").append(toIndentedString(isRecommended)).append("\n");
    sb.append("    isVisible: ").append(toIndentedString(isVisible)).append("\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    typeLength: ").append(toIndentedString(typeLength)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("can_be_used_in_chart");
    openapiFields.add("field_name");
    openapiFields.add("group_type_id");
    openapiFields.add("header_category");
    openapiFields.add("header_data_type");
    openapiFields.add("header_description");
    openapiFields.add("header_name");
    openapiFields.add("is_recommended");
    openapiFields.add("is_visible");
    openapiFields.add("table_name");
    openapiFields.add("type");
    openapiFields.add("type_length");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Reportsv3CategoryField
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Reportsv3CategoryField.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Reportsv3CategoryField is not found in the empty JSON string", Reportsv3CategoryField.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Reportsv3CategoryField.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Reportsv3CategoryField` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("field_name") != null && !jsonObj.get("field_name").isJsonNull()) && !jsonObj.get("field_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `field_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("field_name").toString()));
      }
      if ((jsonObj.get("header_category") != null && !jsonObj.get("header_category").isJsonNull()) && !jsonObj.get("header_category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `header_category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("header_category").toString()));
      }
      // validate the optional field `header_data_type`
      if (jsonObj.get("header_data_type") != null && !jsonObj.get("header_data_type").isJsonNull()) {
        Reportsv3HeaderDataType.validateJsonElement(jsonObj.get("header_data_type"));
      }
      if ((jsonObj.get("header_description") != null && !jsonObj.get("header_description").isJsonNull()) && !jsonObj.get("header_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `header_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("header_description").toString()));
      }
      if ((jsonObj.get("header_name") != null && !jsonObj.get("header_name").isJsonNull()) && !jsonObj.get("header_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `header_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("header_name").toString()));
      }
      if ((jsonObj.get("table_name") != null && !jsonObj.get("table_name").isJsonNull()) && !jsonObj.get("table_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `table_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("table_name").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        Reportsv3HeaderType.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Reportsv3CategoryField.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Reportsv3CategoryField' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Reportsv3CategoryField> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Reportsv3CategoryField.class));

       return (TypeAdapter<T>) new TypeAdapter<Reportsv3CategoryField>() {
           @Override
           public void write(JsonWriter out, Reportsv3CategoryField value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Reportsv3CategoryField read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Reportsv3CategoryField given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Reportsv3CategoryField
  * @throws IOException if the JSON string is invalid with respect to Reportsv3CategoryField
  */
  public static Reportsv3CategoryField fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Reportsv3CategoryField.class);
  }

 /**
  * Convert an instance of Reportsv3CategoryField to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

