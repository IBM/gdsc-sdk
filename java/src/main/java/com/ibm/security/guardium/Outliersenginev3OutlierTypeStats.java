/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.security.guardium;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.security.JSON;

/**
 * Describes an outlier type: What characterizes it, and how many were found during a period of time.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-27T16:17:29.841502Z[UTC]", comments = "Generator version: 7.6.0")
public class Outliersenginev3OutlierTypeStats {
  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_TYPE_DIFF_MESSAGES = "type_diff_messages";
  @SerializedName(SERIALIZED_NAME_TYPE_DIFF_MESSAGES)
  private Boolean typeDiffMessages;

  public static final String SERIALIZED_NAME_TYPE_FAILS = "type_fails";
  @SerializedName(SERIALIZED_NAME_TYPE_FAILS)
  private Boolean typeFails;

  public static final String SERIALIZED_NAME_TYPE_NEW_MESSAGES = "type_new_messages";
  @SerializedName(SERIALIZED_NAME_TYPE_NEW_MESSAGES)
  private Boolean typeNewMessages;

  public static final String SERIALIZED_NAME_TYPE_ONGOING = "type_ongoing";
  @SerializedName(SERIALIZED_NAME_TYPE_ONGOING)
  private Boolean typeOngoing;

  public static final String SERIALIZED_NAME_TYPE_VOLUME = "type_volume";
  @SerializedName(SERIALIZED_NAME_TYPE_VOLUME)
  private Boolean typeVolume;

  public static final String SERIALIZED_NAME_TYPE_VULNERABLE_OBJECTS = "type_vulnerable_objects";
  @SerializedName(SERIALIZED_NAME_TYPE_VULNERABLE_OBJECTS)
  private Boolean typeVulnerableObjects;

  public Outliersenginev3OutlierTypeStats() {
  }

  public Outliersenginev3OutlierTypeStats count(Integer count) {
    this.count = count;
    return this;
  }

   /**
   * The number outliers found with the same characterization.
   * @return count
  **/
  @javax.annotation.Nullable
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }


  public Outliersenginev3OutlierTypeStats typeDiffMessages(Boolean typeDiffMessages) {
    this.typeDiffMessages = typeDiffMessages;
    return this;
  }

   /**
   * Get typeDiffMessages
   * @return typeDiffMessages
  **/
  @javax.annotation.Nullable
  public Boolean getTypeDiffMessages() {
    return typeDiffMessages;
  }

  public void setTypeDiffMessages(Boolean typeDiffMessages) {
    this.typeDiffMessages = typeDiffMessages;
  }


  public Outliersenginev3OutlierTypeStats typeFails(Boolean typeFails) {
    this.typeFails = typeFails;
    return this;
  }

   /**
   * Outlier is characterized by a high rate of exceptions, or error types.
   * @return typeFails
  **/
  @javax.annotation.Nullable
  public Boolean getTypeFails() {
    return typeFails;
  }

  public void setTypeFails(Boolean typeFails) {
    this.typeFails = typeFails;
  }


  public Outliersenginev3OutlierTypeStats typeNewMessages(Boolean typeNewMessages) {
    this.typeNewMessages = typeNewMessages;
    return this;
  }

   /**
   * Outlier is characterized by high volume of new activity.
   * @return typeNewMessages
  **/
  @javax.annotation.Nullable
  public Boolean getTypeNewMessages() {
    return typeNewMessages;
  }

  public void setTypeNewMessages(Boolean typeNewMessages) {
    this.typeNewMessages = typeNewMessages;
  }


  public Outliersenginev3OutlierTypeStats typeOngoing(Boolean typeOngoing) {
    this.typeOngoing = typeOngoing;
    return this;
  }

   /**
   * Outlier is characterized by an ongoing activity below the thresholds, in recent hours.
   * @return typeOngoing
  **/
  @javax.annotation.Nullable
  public Boolean getTypeOngoing() {
    return typeOngoing;
  }

  public void setTypeOngoing(Boolean typeOngoing) {
    this.typeOngoing = typeOngoing;
  }


  public Outliersenginev3OutlierTypeStats typeVolume(Boolean typeVolume) {
    this.typeVolume = typeVolume;
    return this;
  }

   /**
   * Outlier is characterized by high volume of activity, in general.
   * @return typeVolume
  **/
  @javax.annotation.Nullable
  public Boolean getTypeVolume() {
    return typeVolume;
  }

  public void setTypeVolume(Boolean typeVolume) {
    this.typeVolume = typeVolume;
  }


  public Outliersenginev3OutlierTypeStats typeVulnerableObjects(Boolean typeVulnerableObjects) {
    this.typeVulnerableObjects = typeVulnerableObjects;
    return this;
  }

   /**
   * Outlier is characterized by a high activity rate on vulnerable object groups.
   * @return typeVulnerableObjects
  **/
  @javax.annotation.Nullable
  public Boolean getTypeVulnerableObjects() {
    return typeVulnerableObjects;
  }

  public void setTypeVulnerableObjects(Boolean typeVulnerableObjects) {
    this.typeVulnerableObjects = typeVulnerableObjects;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Outliersenginev3OutlierTypeStats outliersenginev3OutlierTypeStats = (Outliersenginev3OutlierTypeStats) o;
    return Objects.equals(this.count, outliersenginev3OutlierTypeStats.count) &&
        Objects.equals(this.typeDiffMessages, outliersenginev3OutlierTypeStats.typeDiffMessages) &&
        Objects.equals(this.typeFails, outliersenginev3OutlierTypeStats.typeFails) &&
        Objects.equals(this.typeNewMessages, outliersenginev3OutlierTypeStats.typeNewMessages) &&
        Objects.equals(this.typeOngoing, outliersenginev3OutlierTypeStats.typeOngoing) &&
        Objects.equals(this.typeVolume, outliersenginev3OutlierTypeStats.typeVolume) &&
        Objects.equals(this.typeVulnerableObjects, outliersenginev3OutlierTypeStats.typeVulnerableObjects);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, typeDiffMessages, typeFails, typeNewMessages, typeOngoing, typeVolume, typeVulnerableObjects);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Outliersenginev3OutlierTypeStats {\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    typeDiffMessages: ").append(toIndentedString(typeDiffMessages)).append("\n");
    sb.append("    typeFails: ").append(toIndentedString(typeFails)).append("\n");
    sb.append("    typeNewMessages: ").append(toIndentedString(typeNewMessages)).append("\n");
    sb.append("    typeOngoing: ").append(toIndentedString(typeOngoing)).append("\n");
    sb.append("    typeVolume: ").append(toIndentedString(typeVolume)).append("\n");
    sb.append("    typeVulnerableObjects: ").append(toIndentedString(typeVulnerableObjects)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("count");
    openapiFields.add("type_diff_messages");
    openapiFields.add("type_fails");
    openapiFields.add("type_new_messages");
    openapiFields.add("type_ongoing");
    openapiFields.add("type_volume");
    openapiFields.add("type_vulnerable_objects");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Outliersenginev3OutlierTypeStats
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Outliersenginev3OutlierTypeStats.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Outliersenginev3OutlierTypeStats is not found in the empty JSON string", Outliersenginev3OutlierTypeStats.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Outliersenginev3OutlierTypeStats.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Outliersenginev3OutlierTypeStats` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Outliersenginev3OutlierTypeStats.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Outliersenginev3OutlierTypeStats' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Outliersenginev3OutlierTypeStats> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Outliersenginev3OutlierTypeStats.class));

       return (TypeAdapter<T>) new TypeAdapter<Outliersenginev3OutlierTypeStats>() {
           @Override
           public void write(JsonWriter out, Outliersenginev3OutlierTypeStats value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Outliersenginev3OutlierTypeStats read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Outliersenginev3OutlierTypeStats given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Outliersenginev3OutlierTypeStats
  * @throws IOException if the JSON string is invalid with respect to Outliersenginev3OutlierTypeStats
  */
  public static Outliersenginev3OutlierTypeStats fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Outliersenginev3OutlierTypeStats.class);
  }

 /**
  * Convert an instance of Outliersenginev3OutlierTypeStats to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

