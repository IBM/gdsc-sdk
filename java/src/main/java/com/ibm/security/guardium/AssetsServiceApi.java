/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.security.guardium;

import com.ibm.security.ApiCallback;
import com.ibm.security.ApiClient;
import com.ibm.security.ApiException;
import com.ibm.security.ApiResponse;
import com.ibm.security.Configuration;
import com.ibm.security.Pair;
import com.ibm.security.ProgressRequestBody;
import com.ibm.security.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ibm.security.guardium.Assetsv3AssetFilterTemplateRequest;
import com.ibm.security.guardium.Assetsv3AssetIngestionRequest;
import com.ibm.security.guardium.Assetsv3AssetIngestionResponse;
import com.ibm.security.guardium.Assetsv3AssetOverviewResponse;
import com.ibm.security.guardium.Assetsv3ClonePolicyRequest;
import com.ibm.security.guardium.Assetsv3CreateUpdatePolicyRequest;
import com.ibm.security.guardium.Assetsv3CreateUpdatePolicyResponse;
import com.ibm.security.guardium.Assetsv3FetchAssetChangeLogRequest;
import com.ibm.security.guardium.Assetsv3FetchAssetChangeLogResponse;
import com.ibm.security.guardium.Assetsv3FetchAssetDashboardResponse;
import com.ibm.security.guardium.Assetsv3FetchAssetListRequest;
import com.ibm.security.guardium.Assetsv3FetchAssetListResponse;
import com.ibm.security.guardium.Assetsv3FetchAssetsForMergeSplitResponse;
import com.ibm.security.guardium.Assetsv3FindAssetNameResponse;
import com.ibm.security.guardium.Assetsv3GetAssetTopologyRequest;
import com.ibm.security.guardium.Assetsv3GetAssetTopologyResponse;
import com.ibm.security.guardium.Assetsv3GetFilterTemplateResponse;
import com.ibm.security.guardium.Assetsv3GetFiltersDataResponse;
import com.ibm.security.guardium.Assetsv3ListPolicyResponse;
import com.ibm.security.guardium.Assetsv3ListRuleResponse;
import com.ibm.security.guardium.Assetsv3ListTagDomainsResponse;
import com.ibm.security.guardium.Assetsv3ListTagsResponse;
import com.ibm.security.guardium.Assetsv3MergeOrSplitAssetsRequest;
import com.ibm.security.guardium.Assetsv3SaveAssignedTagsRequest;
import com.ibm.security.guardium.Assetsv3SaveTagConceptDataRequest;
import com.ibm.security.guardium.Assetsv3SaveTagDomainDataRequest;
import com.ibm.security.guardium.Assetsv3SaveUpdateFilterTemplateRequest;
import com.ibm.security.guardium.Assetsv3SaveUpdateFilterTemplateResponse;
import com.ibm.security.guardium.Assetsv3SetBannerStateRequest;
import com.ibm.security.guardium.Assetsv3UpdateAssetNameRequest;
import com.ibm.security.guardium.Assetsv3UpdatePolicyRequest;
import com.ibm.security.guardium.RuntimeError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AssetsServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AssetsServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AssetsServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for assetsServiceAssetIngestion
     * @param assetsv3AssetIngestionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceAssetIngestionCall(Assetsv3AssetIngestionRequest assetsv3AssetIngestionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assetsv3AssetIngestionRequest;

        // create path and map variables
        String localVarPath = "/api/v3/assets/ingestion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetsServiceAssetIngestionValidateBeforeCall(Assetsv3AssetIngestionRequest assetsv3AssetIngestionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetsv3AssetIngestionRequest' is set
        if (assetsv3AssetIngestionRequest == null) {
            throw new ApiException("Missing the required parameter 'assetsv3AssetIngestionRequest' when calling assetsServiceAssetIngestion(Async)");
        }

        return assetsServiceAssetIngestionCall(assetsv3AssetIngestionRequest, _callback);

    }

    /**
     * AssetIngestion - Asset Ingestion Api to ingest assets from different applications including asset extensibility assets.
     * 
     * @param assetsv3AssetIngestionRequest  (required)
     * @return Assetsv3AssetIngestionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Assetsv3AssetIngestionResponse assetsServiceAssetIngestion(Assetsv3AssetIngestionRequest assetsv3AssetIngestionRequest) throws ApiException {
        ApiResponse<Assetsv3AssetIngestionResponse> localVarResp = assetsServiceAssetIngestionWithHttpInfo(assetsv3AssetIngestionRequest);
        return localVarResp.getData();
    }

    /**
     * AssetIngestion - Asset Ingestion Api to ingest assets from different applications including asset extensibility assets.
     * 
     * @param assetsv3AssetIngestionRequest  (required)
     * @return ApiResponse&lt;Assetsv3AssetIngestionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Assetsv3AssetIngestionResponse> assetsServiceAssetIngestionWithHttpInfo(Assetsv3AssetIngestionRequest assetsv3AssetIngestionRequest) throws ApiException {
        okhttp3.Call localVarCall = assetsServiceAssetIngestionValidateBeforeCall(assetsv3AssetIngestionRequest, null);
        Type localVarReturnType = new TypeToken<Assetsv3AssetIngestionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * AssetIngestion - Asset Ingestion Api to ingest assets from different applications including asset extensibility assets. (asynchronously)
     * 
     * @param assetsv3AssetIngestionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceAssetIngestionAsync(Assetsv3AssetIngestionRequest assetsv3AssetIngestionRequest, final ApiCallback<Assetsv3AssetIngestionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetsServiceAssetIngestionValidateBeforeCall(assetsv3AssetIngestionRequest, _callback);
        Type localVarReturnType = new TypeToken<Assetsv3AssetIngestionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetsServiceAssetIngestionManualTrigger
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceAssetIngestionManualTriggerCall(Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v3/assets/ingestion/trigger";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetsServiceAssetIngestionManualTriggerValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling assetsServiceAssetIngestionManualTrigger(Async)");
        }

        return assetsServiceAssetIngestionManualTriggerCall(body, _callback);

    }

    /**
     * AssetIngestionManualTrigger - Manual trigger for Scheduled Asset Ingestion of databases.
     * 
     * @param body  (required)
     * @return Assetsv3AssetIngestionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Assetsv3AssetIngestionResponse assetsServiceAssetIngestionManualTrigger(Object body) throws ApiException {
        ApiResponse<Assetsv3AssetIngestionResponse> localVarResp = assetsServiceAssetIngestionManualTriggerWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * AssetIngestionManualTrigger - Manual trigger for Scheduled Asset Ingestion of databases.
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Assetsv3AssetIngestionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Assetsv3AssetIngestionResponse> assetsServiceAssetIngestionManualTriggerWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = assetsServiceAssetIngestionManualTriggerValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Assetsv3AssetIngestionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * AssetIngestionManualTrigger - Manual trigger for Scheduled Asset Ingestion of databases. (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceAssetIngestionManualTriggerAsync(Object body, final ApiCallback<Assetsv3AssetIngestionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetsServiceAssetIngestionManualTriggerValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Assetsv3AssetIngestionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetsServiceClonePolicy
     * @param policyId Policy id that needs to be cloned. (required)
     * @param assetsv3ClonePolicyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceClonePolicyCall(String policyId, Assetsv3ClonePolicyRequest assetsv3ClonePolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assetsv3ClonePolicyRequest;

        // create path and map variables
        String localVarPath = "/api/v3/assets/policies/{policy_id}/clone"
            .replace("{" + "policy_id" + "}", localVarApiClient.escapeString(policyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetsServiceClonePolicyValidateBeforeCall(String policyId, Assetsv3ClonePolicyRequest assetsv3ClonePolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling assetsServiceClonePolicy(Async)");
        }

        // verify the required parameter 'assetsv3ClonePolicyRequest' is set
        if (assetsv3ClonePolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'assetsv3ClonePolicyRequest' when calling assetsServiceClonePolicy(Async)");
        }

        return assetsServiceClonePolicyCall(policyId, assetsv3ClonePolicyRequest, _callback);

    }

    /**
     * ClonePolicy - Clone a policy.
     * 
     * @param policyId Policy id that needs to be cloned. (required)
     * @param assetsv3ClonePolicyRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Object assetsServiceClonePolicy(String policyId, Assetsv3ClonePolicyRequest assetsv3ClonePolicyRequest) throws ApiException {
        ApiResponse<Object> localVarResp = assetsServiceClonePolicyWithHttpInfo(policyId, assetsv3ClonePolicyRequest);
        return localVarResp.getData();
    }

    /**
     * ClonePolicy - Clone a policy.
     * 
     * @param policyId Policy id that needs to be cloned. (required)
     * @param assetsv3ClonePolicyRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> assetsServiceClonePolicyWithHttpInfo(String policyId, Assetsv3ClonePolicyRequest assetsv3ClonePolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = assetsServiceClonePolicyValidateBeforeCall(policyId, assetsv3ClonePolicyRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ClonePolicy - Clone a policy. (asynchronously)
     * 
     * @param policyId Policy id that needs to be cloned. (required)
     * @param assetsv3ClonePolicyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceClonePolicyAsync(String policyId, Assetsv3ClonePolicyRequest assetsv3ClonePolicyRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetsServiceClonePolicyValidateBeforeCall(policyId, assetsv3ClonePolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetsServiceCreateUpdatePolicy
     * @param assetsv3CreateUpdatePolicyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceCreateUpdatePolicyCall(Assetsv3CreateUpdatePolicyRequest assetsv3CreateUpdatePolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assetsv3CreateUpdatePolicyRequest;

        // create path and map variables
        String localVarPath = "/api/v3/assets/policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetsServiceCreateUpdatePolicyValidateBeforeCall(Assetsv3CreateUpdatePolicyRequest assetsv3CreateUpdatePolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetsv3CreateUpdatePolicyRequest' is set
        if (assetsv3CreateUpdatePolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'assetsv3CreateUpdatePolicyRequest' when calling assetsServiceCreateUpdatePolicy(Async)");
        }

        return assetsServiceCreateUpdatePolicyCall(assetsv3CreateUpdatePolicyRequest, _callback);

    }

    /**
     * CreateUpdatePolicy - Create/update new Policy.
     * 
     * @param assetsv3CreateUpdatePolicyRequest  (required)
     * @return Assetsv3CreateUpdatePolicyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Assetsv3CreateUpdatePolicyResponse assetsServiceCreateUpdatePolicy(Assetsv3CreateUpdatePolicyRequest assetsv3CreateUpdatePolicyRequest) throws ApiException {
        ApiResponse<Assetsv3CreateUpdatePolicyResponse> localVarResp = assetsServiceCreateUpdatePolicyWithHttpInfo(assetsv3CreateUpdatePolicyRequest);
        return localVarResp.getData();
    }

    /**
     * CreateUpdatePolicy - Create/update new Policy.
     * 
     * @param assetsv3CreateUpdatePolicyRequest  (required)
     * @return ApiResponse&lt;Assetsv3CreateUpdatePolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Assetsv3CreateUpdatePolicyResponse> assetsServiceCreateUpdatePolicyWithHttpInfo(Assetsv3CreateUpdatePolicyRequest assetsv3CreateUpdatePolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = assetsServiceCreateUpdatePolicyValidateBeforeCall(assetsv3CreateUpdatePolicyRequest, null);
        Type localVarReturnType = new TypeToken<Assetsv3CreateUpdatePolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * CreateUpdatePolicy - Create/update new Policy. (asynchronously)
     * 
     * @param assetsv3CreateUpdatePolicyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceCreateUpdatePolicyAsync(Assetsv3CreateUpdatePolicyRequest assetsv3CreateUpdatePolicyRequest, final ApiCallback<Assetsv3CreateUpdatePolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetsServiceCreateUpdatePolicyValidateBeforeCall(assetsv3CreateUpdatePolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<Assetsv3CreateUpdatePolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetsServiceDeleteFilterTemplateForAssets
     * @param templateId template id to be deleted (required)
     * @param assetsv3AssetFilterTemplateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceDeleteFilterTemplateForAssetsCall(String templateId, Assetsv3AssetFilterTemplateRequest assetsv3AssetFilterTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assetsv3AssetFilterTemplateRequest;

        // create path and map variables
        String localVarPath = "/api/v3/assets/filters/template/{template_id}"
            .replace("{" + "template_id" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetsServiceDeleteFilterTemplateForAssetsValidateBeforeCall(String templateId, Assetsv3AssetFilterTemplateRequest assetsv3AssetFilterTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling assetsServiceDeleteFilterTemplateForAssets(Async)");
        }

        // verify the required parameter 'assetsv3AssetFilterTemplateRequest' is set
        if (assetsv3AssetFilterTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'assetsv3AssetFilterTemplateRequest' when calling assetsServiceDeleteFilterTemplateForAssets(Async)");
        }

        return assetsServiceDeleteFilterTemplateForAssetsCall(templateId, assetsv3AssetFilterTemplateRequest, _callback);

    }

    /**
     * DeleteFilterTemplateForAssets - Deleting a template using TemplateID in manage assets.
     * 
     * @param templateId template id to be deleted (required)
     * @param assetsv3AssetFilterTemplateRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Object assetsServiceDeleteFilterTemplateForAssets(String templateId, Assetsv3AssetFilterTemplateRequest assetsv3AssetFilterTemplateRequest) throws ApiException {
        ApiResponse<Object> localVarResp = assetsServiceDeleteFilterTemplateForAssetsWithHttpInfo(templateId, assetsv3AssetFilterTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * DeleteFilterTemplateForAssets - Deleting a template using TemplateID in manage assets.
     * 
     * @param templateId template id to be deleted (required)
     * @param assetsv3AssetFilterTemplateRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> assetsServiceDeleteFilterTemplateForAssetsWithHttpInfo(String templateId, Assetsv3AssetFilterTemplateRequest assetsv3AssetFilterTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = assetsServiceDeleteFilterTemplateForAssetsValidateBeforeCall(templateId, assetsv3AssetFilterTemplateRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DeleteFilterTemplateForAssets - Deleting a template using TemplateID in manage assets. (asynchronously)
     * 
     * @param templateId template id to be deleted (required)
     * @param assetsv3AssetFilterTemplateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceDeleteFilterTemplateForAssetsAsync(String templateId, Assetsv3AssetFilterTemplateRequest assetsv3AssetFilterTemplateRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetsServiceDeleteFilterTemplateForAssetsValidateBeforeCall(templateId, assetsv3AssetFilterTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetsServiceDeletePolicies
     * @param policyIds Policy ids. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceDeletePoliciesCall(List<String> policyIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/assets/policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (policyIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "policy_ids", policyIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetsServiceDeletePoliciesValidateBeforeCall(List<String> policyIds, final ApiCallback _callback) throws ApiException {
        return assetsServiceDeletePoliciesCall(policyIds, _callback);

    }

    /**
     * DeletePolicies - Delete Policy returns response code and message.
     * 
     * @param policyIds Policy ids. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Object assetsServiceDeletePolicies(List<String> policyIds) throws ApiException {
        ApiResponse<Object> localVarResp = assetsServiceDeletePoliciesWithHttpInfo(policyIds);
        return localVarResp.getData();
    }

    /**
     * DeletePolicies - Delete Policy returns response code and message.
     * 
     * @param policyIds Policy ids. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> assetsServiceDeletePoliciesWithHttpInfo(List<String> policyIds) throws ApiException {
        okhttp3.Call localVarCall = assetsServiceDeletePoliciesValidateBeforeCall(policyIds, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DeletePolicies - Delete Policy returns response code and message. (asynchronously)
     * 
     * @param policyIds Policy ids. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceDeletePoliciesAsync(List<String> policyIds, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetsServiceDeletePoliciesValidateBeforeCall(policyIds, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetsServiceFetchAssetChangeLog
     * @param assetsv3FetchAssetChangeLogRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceFetchAssetChangeLogCall(Assetsv3FetchAssetChangeLogRequest assetsv3FetchAssetChangeLogRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assetsv3FetchAssetChangeLogRequest;

        // create path and map variables
        String localVarPath = "/api/v3/assets/logs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetsServiceFetchAssetChangeLogValidateBeforeCall(Assetsv3FetchAssetChangeLogRequest assetsv3FetchAssetChangeLogRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetsv3FetchAssetChangeLogRequest' is set
        if (assetsv3FetchAssetChangeLogRequest == null) {
            throw new ApiException("Missing the required parameter 'assetsv3FetchAssetChangeLogRequest' when calling assetsServiceFetchAssetChangeLog(Async)");
        }

        return assetsServiceFetchAssetChangeLogCall(assetsv3FetchAssetChangeLogRequest, _callback);

    }

    /**
     * FetchAssetChangeLog - Fetch the logs for any actions performed on assets.
     * 
     * @param assetsv3FetchAssetChangeLogRequest  (required)
     * @return Assetsv3FetchAssetChangeLogResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Assetsv3FetchAssetChangeLogResponse assetsServiceFetchAssetChangeLog(Assetsv3FetchAssetChangeLogRequest assetsv3FetchAssetChangeLogRequest) throws ApiException {
        ApiResponse<Assetsv3FetchAssetChangeLogResponse> localVarResp = assetsServiceFetchAssetChangeLogWithHttpInfo(assetsv3FetchAssetChangeLogRequest);
        return localVarResp.getData();
    }

    /**
     * FetchAssetChangeLog - Fetch the logs for any actions performed on assets.
     * 
     * @param assetsv3FetchAssetChangeLogRequest  (required)
     * @return ApiResponse&lt;Assetsv3FetchAssetChangeLogResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Assetsv3FetchAssetChangeLogResponse> assetsServiceFetchAssetChangeLogWithHttpInfo(Assetsv3FetchAssetChangeLogRequest assetsv3FetchAssetChangeLogRequest) throws ApiException {
        okhttp3.Call localVarCall = assetsServiceFetchAssetChangeLogValidateBeforeCall(assetsv3FetchAssetChangeLogRequest, null);
        Type localVarReturnType = new TypeToken<Assetsv3FetchAssetChangeLogResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * FetchAssetChangeLog - Fetch the logs for any actions performed on assets. (asynchronously)
     * 
     * @param assetsv3FetchAssetChangeLogRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceFetchAssetChangeLogAsync(Assetsv3FetchAssetChangeLogRequest assetsv3FetchAssetChangeLogRequest, final ApiCallback<Assetsv3FetchAssetChangeLogResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetsServiceFetchAssetChangeLogValidateBeforeCall(assetsv3FetchAssetChangeLogRequest, _callback);
        Type localVarReturnType = new TypeToken<Assetsv3FetchAssetChangeLogResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetsServiceFetchAssetDashboard
     * @param widgetType ID of the Dashboard Widget (required)
     * @param dateRangeStart start of date range for ui widget. (optional)
     * @param dateRangeEnd end of date range for ui widget. (optional)
     * @param dateRangeType type of date range for ui widget. (optional)
     * @param dateRangeKey key for ui widget. (optional)
     * @param dateRangeError error for ui widget. (optional)
     * @param dateRangeStartNumber start_number for ui widget. (optional)
     * @param dateRangeStartUnit start of date range for ui widget. (optional)
     * @param dateRangeEndNumber start of date range for ui widget. (optional)
     * @param dateRangeEndUnit start of date range for ui widget. (optional)
     * @param timelineValueSelected Name of the timeline value selected from drop down. (optional)
     * @param tagId Tag ID. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceFetchAssetDashboardCall(String widgetType, String dateRangeStart, String dateRangeEnd, String dateRangeType, String dateRangeKey, String dateRangeError, Integer dateRangeStartNumber, String dateRangeStartUnit, Integer dateRangeEndNumber, String dateRangeEndUnit, String timelineValueSelected, String tagId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/assets/dashboard/{widget_type}"
            .replace("{" + "widget_type" + "}", localVarApiClient.escapeString(widgetType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dateRangeStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_range.start", dateRangeStart));
        }

        if (dateRangeEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_range.end", dateRangeEnd));
        }

        if (dateRangeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_range.type", dateRangeType));
        }

        if (dateRangeKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_range.key", dateRangeKey));
        }

        if (dateRangeError != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_range.error", dateRangeError));
        }

        if (dateRangeStartNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_range.start_number", dateRangeStartNumber));
        }

        if (dateRangeStartUnit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_range.start_unit", dateRangeStartUnit));
        }

        if (dateRangeEndNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_range.end_number", dateRangeEndNumber));
        }

        if (dateRangeEndUnit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_range.end_unit", dateRangeEndUnit));
        }

        if (timelineValueSelected != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeline_value_selected", timelineValueSelected));
        }

        if (tagId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag_id", tagId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetsServiceFetchAssetDashboardValidateBeforeCall(String widgetType, String dateRangeStart, String dateRangeEnd, String dateRangeType, String dateRangeKey, String dateRangeError, Integer dateRangeStartNumber, String dateRangeStartUnit, Integer dateRangeEndNumber, String dateRangeEndUnit, String timelineValueSelected, String tagId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'widgetType' is set
        if (widgetType == null) {
            throw new ApiException("Missing the required parameter 'widgetType' when calling assetsServiceFetchAssetDashboard(Async)");
        }

        return assetsServiceFetchAssetDashboardCall(widgetType, dateRangeStart, dateRangeEnd, dateRangeType, dateRangeKey, dateRangeError, dateRangeStartNumber, dateRangeStartUnit, dateRangeEndNumber, dateRangeEndUnit, timelineValueSelected, tagId, _callback);

    }

    /**
     * FetchAssetDashboard - Gets Filter Templates for Dshboard Widgets.
     * 
     * @param widgetType ID of the Dashboard Widget (required)
     * @param dateRangeStart start of date range for ui widget. (optional)
     * @param dateRangeEnd end of date range for ui widget. (optional)
     * @param dateRangeType type of date range for ui widget. (optional)
     * @param dateRangeKey key for ui widget. (optional)
     * @param dateRangeError error for ui widget. (optional)
     * @param dateRangeStartNumber start_number for ui widget. (optional)
     * @param dateRangeStartUnit start of date range for ui widget. (optional)
     * @param dateRangeEndNumber start of date range for ui widget. (optional)
     * @param dateRangeEndUnit start of date range for ui widget. (optional)
     * @param timelineValueSelected Name of the timeline value selected from drop down. (optional)
     * @param tagId Tag ID. (optional)
     * @return Assetsv3FetchAssetDashboardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Assetsv3FetchAssetDashboardResponse assetsServiceFetchAssetDashboard(String widgetType, String dateRangeStart, String dateRangeEnd, String dateRangeType, String dateRangeKey, String dateRangeError, Integer dateRangeStartNumber, String dateRangeStartUnit, Integer dateRangeEndNumber, String dateRangeEndUnit, String timelineValueSelected, String tagId) throws ApiException {
        ApiResponse<Assetsv3FetchAssetDashboardResponse> localVarResp = assetsServiceFetchAssetDashboardWithHttpInfo(widgetType, dateRangeStart, dateRangeEnd, dateRangeType, dateRangeKey, dateRangeError, dateRangeStartNumber, dateRangeStartUnit, dateRangeEndNumber, dateRangeEndUnit, timelineValueSelected, tagId);
        return localVarResp.getData();
    }

    /**
     * FetchAssetDashboard - Gets Filter Templates for Dshboard Widgets.
     * 
     * @param widgetType ID of the Dashboard Widget (required)
     * @param dateRangeStart start of date range for ui widget. (optional)
     * @param dateRangeEnd end of date range for ui widget. (optional)
     * @param dateRangeType type of date range for ui widget. (optional)
     * @param dateRangeKey key for ui widget. (optional)
     * @param dateRangeError error for ui widget. (optional)
     * @param dateRangeStartNumber start_number for ui widget. (optional)
     * @param dateRangeStartUnit start of date range for ui widget. (optional)
     * @param dateRangeEndNumber start of date range for ui widget. (optional)
     * @param dateRangeEndUnit start of date range for ui widget. (optional)
     * @param timelineValueSelected Name of the timeline value selected from drop down. (optional)
     * @param tagId Tag ID. (optional)
     * @return ApiResponse&lt;Assetsv3FetchAssetDashboardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Assetsv3FetchAssetDashboardResponse> assetsServiceFetchAssetDashboardWithHttpInfo(String widgetType, String dateRangeStart, String dateRangeEnd, String dateRangeType, String dateRangeKey, String dateRangeError, Integer dateRangeStartNumber, String dateRangeStartUnit, Integer dateRangeEndNumber, String dateRangeEndUnit, String timelineValueSelected, String tagId) throws ApiException {
        okhttp3.Call localVarCall = assetsServiceFetchAssetDashboardValidateBeforeCall(widgetType, dateRangeStart, dateRangeEnd, dateRangeType, dateRangeKey, dateRangeError, dateRangeStartNumber, dateRangeStartUnit, dateRangeEndNumber, dateRangeEndUnit, timelineValueSelected, tagId, null);
        Type localVarReturnType = new TypeToken<Assetsv3FetchAssetDashboardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * FetchAssetDashboard - Gets Filter Templates for Dshboard Widgets. (asynchronously)
     * 
     * @param widgetType ID of the Dashboard Widget (required)
     * @param dateRangeStart start of date range for ui widget. (optional)
     * @param dateRangeEnd end of date range for ui widget. (optional)
     * @param dateRangeType type of date range for ui widget. (optional)
     * @param dateRangeKey key for ui widget. (optional)
     * @param dateRangeError error for ui widget. (optional)
     * @param dateRangeStartNumber start_number for ui widget. (optional)
     * @param dateRangeStartUnit start of date range for ui widget. (optional)
     * @param dateRangeEndNumber start of date range for ui widget. (optional)
     * @param dateRangeEndUnit start of date range for ui widget. (optional)
     * @param timelineValueSelected Name of the timeline value selected from drop down. (optional)
     * @param tagId Tag ID. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceFetchAssetDashboardAsync(String widgetType, String dateRangeStart, String dateRangeEnd, String dateRangeType, String dateRangeKey, String dateRangeError, Integer dateRangeStartNumber, String dateRangeStartUnit, Integer dateRangeEndNumber, String dateRangeEndUnit, String timelineValueSelected, String tagId, final ApiCallback<Assetsv3FetchAssetDashboardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetsServiceFetchAssetDashboardValidateBeforeCall(widgetType, dateRangeStart, dateRangeEnd, dateRangeType, dateRangeKey, dateRangeError, dateRangeStartNumber, dateRangeStartUnit, dateRangeEndNumber, dateRangeEndUnit, timelineValueSelected, tagId, _callback);
        Type localVarReturnType = new TypeToken<Assetsv3FetchAssetDashboardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetsServiceFetchAssetList
     * @param assetsv3FetchAssetListRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceFetchAssetListCall(Assetsv3FetchAssetListRequest assetsv3FetchAssetListRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assetsv3FetchAssetListRequest;

        // create path and map variables
        String localVarPath = "/api/v3/assets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetsServiceFetchAssetListValidateBeforeCall(Assetsv3FetchAssetListRequest assetsv3FetchAssetListRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetsv3FetchAssetListRequest' is set
        if (assetsv3FetchAssetListRequest == null) {
            throw new ApiException("Missing the required parameter 'assetsv3FetchAssetListRequest' when calling assetsServiceFetchAssetList(Async)");
        }

        return assetsServiceFetchAssetListCall(assetsv3FetchAssetListRequest, _callback);

    }

    /**
     * FetchAssetList - Asset Fetch Api .
     * 
     * @param assetsv3FetchAssetListRequest  (required)
     * @return Assetsv3FetchAssetListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Assetsv3FetchAssetListResponse assetsServiceFetchAssetList(Assetsv3FetchAssetListRequest assetsv3FetchAssetListRequest) throws ApiException {
        ApiResponse<Assetsv3FetchAssetListResponse> localVarResp = assetsServiceFetchAssetListWithHttpInfo(assetsv3FetchAssetListRequest);
        return localVarResp.getData();
    }

    /**
     * FetchAssetList - Asset Fetch Api .
     * 
     * @param assetsv3FetchAssetListRequest  (required)
     * @return ApiResponse&lt;Assetsv3FetchAssetListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Assetsv3FetchAssetListResponse> assetsServiceFetchAssetListWithHttpInfo(Assetsv3FetchAssetListRequest assetsv3FetchAssetListRequest) throws ApiException {
        okhttp3.Call localVarCall = assetsServiceFetchAssetListValidateBeforeCall(assetsv3FetchAssetListRequest, null);
        Type localVarReturnType = new TypeToken<Assetsv3FetchAssetListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * FetchAssetList - Asset Fetch Api . (asynchronously)
     * 
     * @param assetsv3FetchAssetListRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceFetchAssetListAsync(Assetsv3FetchAssetListRequest assetsv3FetchAssetListRequest, final ApiCallback<Assetsv3FetchAssetListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetsServiceFetchAssetListValidateBeforeCall(assetsv3FetchAssetListRequest, _callback);
        Type localVarReturnType = new TypeToken<Assetsv3FetchAssetListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetsServiceFetchAssetsForMergeSplit
     * @param assetId Asset grouper Id. (optional)
     * @param pageNumber Page number. (optional)
     * @param pageSize Page size. (optional)
     * @param action Action : merge or split. (optional)
     * @param searchKey Search from the list based on asset name, database name, ip or host. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceFetchAssetsForMergeSplitCall(String assetId, Integer pageNumber, Integer pageSize, String action, String searchKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/assets/configuration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (assetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_id", assetId));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_number", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (action != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action", action));
        }

        if (searchKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_key", searchKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetsServiceFetchAssetsForMergeSplitValidateBeforeCall(String assetId, Integer pageNumber, Integer pageSize, String action, String searchKey, final ApiCallback _callback) throws ApiException {
        return assetsServiceFetchAssetsForMergeSplitCall(assetId, pageNumber, pageSize, action, searchKey, _callback);

    }

    /**
     * FetchAssetsForMergeSplit : Fetch assets for Merge and Split.
     * 
     * @param assetId Asset grouper Id. (optional)
     * @param pageNumber Page number. (optional)
     * @param pageSize Page size. (optional)
     * @param action Action : merge or split. (optional)
     * @param searchKey Search from the list based on asset name, database name, ip or host. (optional)
     * @return Assetsv3FetchAssetsForMergeSplitResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Assetsv3FetchAssetsForMergeSplitResponse assetsServiceFetchAssetsForMergeSplit(String assetId, Integer pageNumber, Integer pageSize, String action, String searchKey) throws ApiException {
        ApiResponse<Assetsv3FetchAssetsForMergeSplitResponse> localVarResp = assetsServiceFetchAssetsForMergeSplitWithHttpInfo(assetId, pageNumber, pageSize, action, searchKey);
        return localVarResp.getData();
    }

    /**
     * FetchAssetsForMergeSplit : Fetch assets for Merge and Split.
     * 
     * @param assetId Asset grouper Id. (optional)
     * @param pageNumber Page number. (optional)
     * @param pageSize Page size. (optional)
     * @param action Action : merge or split. (optional)
     * @param searchKey Search from the list based on asset name, database name, ip or host. (optional)
     * @return ApiResponse&lt;Assetsv3FetchAssetsForMergeSplitResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Assetsv3FetchAssetsForMergeSplitResponse> assetsServiceFetchAssetsForMergeSplitWithHttpInfo(String assetId, Integer pageNumber, Integer pageSize, String action, String searchKey) throws ApiException {
        okhttp3.Call localVarCall = assetsServiceFetchAssetsForMergeSplitValidateBeforeCall(assetId, pageNumber, pageSize, action, searchKey, null);
        Type localVarReturnType = new TypeToken<Assetsv3FetchAssetsForMergeSplitResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * FetchAssetsForMergeSplit : Fetch assets for Merge and Split. (asynchronously)
     * 
     * @param assetId Asset grouper Id. (optional)
     * @param pageNumber Page number. (optional)
     * @param pageSize Page size. (optional)
     * @param action Action : merge or split. (optional)
     * @param searchKey Search from the list based on asset name, database name, ip or host. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceFetchAssetsForMergeSplitAsync(String assetId, Integer pageNumber, Integer pageSize, String action, String searchKey, final ApiCallback<Assetsv3FetchAssetsForMergeSplitResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetsServiceFetchAssetsForMergeSplitValidateBeforeCall(assetId, pageNumber, pageSize, action, searchKey, _callback);
        Type localVarReturnType = new TypeToken<Assetsv3FetchAssetsForMergeSplitResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetsServiceFindAssetName
     * @param assetName Name of asset. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceFindAssetNameCall(String assetName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/assets/name";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (assetName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_name", assetName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetsServiceFindAssetNameValidateBeforeCall(String assetName, final ApiCallback _callback) throws ApiException {
        return assetsServiceFindAssetNameCall(assetName, _callback);

    }

    /**
     * FindAssetName - Checks if the given Asset Name has already been assigned to an asset.
     * 
     * @param assetName Name of asset. (optional)
     * @return Assetsv3FindAssetNameResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Assetsv3FindAssetNameResponse assetsServiceFindAssetName(String assetName) throws ApiException {
        ApiResponse<Assetsv3FindAssetNameResponse> localVarResp = assetsServiceFindAssetNameWithHttpInfo(assetName);
        return localVarResp.getData();
    }

    /**
     * FindAssetName - Checks if the given Asset Name has already been assigned to an asset.
     * 
     * @param assetName Name of asset. (optional)
     * @return ApiResponse&lt;Assetsv3FindAssetNameResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Assetsv3FindAssetNameResponse> assetsServiceFindAssetNameWithHttpInfo(String assetName) throws ApiException {
        okhttp3.Call localVarCall = assetsServiceFindAssetNameValidateBeforeCall(assetName, null);
        Type localVarReturnType = new TypeToken<Assetsv3FindAssetNameResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * FindAssetName - Checks if the given Asset Name has already been assigned to an asset. (asynchronously)
     * 
     * @param assetName Name of asset. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceFindAssetNameAsync(String assetName, final ApiCallback<Assetsv3FindAssetNameResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetsServiceFindAssetNameValidateBeforeCall(assetName, _callback);
        Type localVarReturnType = new TypeToken<Assetsv3FindAssetNameResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetsServiceGetAssetOverview
     * @param assetId Asset grouper Id. (optional)
     * @param pageNumber Page number. (optional)
     * @param size Page size. (optional)
     * @param widget Widget type.   - ALL: All Asset Overview Widgets.  - CLASSIFICATION: Classification Asset Overview Widgets.  - TAG: Tag Asset Overview Widgets.  - RESOURCE: Resource Asset Overview Widgets. (optional, default to ALL)
     * @param ip Asset IP. (optional)
     * @param host Asset Host. (optional)
     * @param database Database Name. (optional)
     * @param assetEntityType asset ntity type. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceGetAssetOverviewCall(String assetId, Integer pageNumber, Integer size, String widget, String ip, String host, String database, String assetEntityType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/assets/overview";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (assetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_id", assetId));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_number", pageNumber));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (widget != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("widget", widget));
        }

        if (ip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ip", ip));
        }

        if (host != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("host", host));
        }

        if (database != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("database", database));
        }

        if (assetEntityType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_entity_type", assetEntityType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetsServiceGetAssetOverviewValidateBeforeCall(String assetId, Integer pageNumber, Integer size, String widget, String ip, String host, String database, String assetEntityType, final ApiCallback _callback) throws ApiException {
        return assetsServiceGetAssetOverviewCall(assetId, pageNumber, size, widget, ip, host, database, assetEntityType, _callback);

    }

    /**
     * GetAssetOverview - Get asset overview widgets data for a particular asset.
     * 
     * @param assetId Asset grouper Id. (optional)
     * @param pageNumber Page number. (optional)
     * @param size Page size. (optional)
     * @param widget Widget type.   - ALL: All Asset Overview Widgets.  - CLASSIFICATION: Classification Asset Overview Widgets.  - TAG: Tag Asset Overview Widgets.  - RESOURCE: Resource Asset Overview Widgets. (optional, default to ALL)
     * @param ip Asset IP. (optional)
     * @param host Asset Host. (optional)
     * @param database Database Name. (optional)
     * @param assetEntityType asset ntity type. (optional)
     * @return Assetsv3AssetOverviewResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Assetsv3AssetOverviewResponse assetsServiceGetAssetOverview(String assetId, Integer pageNumber, Integer size, String widget, String ip, String host, String database, String assetEntityType) throws ApiException {
        ApiResponse<Assetsv3AssetOverviewResponse> localVarResp = assetsServiceGetAssetOverviewWithHttpInfo(assetId, pageNumber, size, widget, ip, host, database, assetEntityType);
        return localVarResp.getData();
    }

    /**
     * GetAssetOverview - Get asset overview widgets data for a particular asset.
     * 
     * @param assetId Asset grouper Id. (optional)
     * @param pageNumber Page number. (optional)
     * @param size Page size. (optional)
     * @param widget Widget type.   - ALL: All Asset Overview Widgets.  - CLASSIFICATION: Classification Asset Overview Widgets.  - TAG: Tag Asset Overview Widgets.  - RESOURCE: Resource Asset Overview Widgets. (optional, default to ALL)
     * @param ip Asset IP. (optional)
     * @param host Asset Host. (optional)
     * @param database Database Name. (optional)
     * @param assetEntityType asset ntity type. (optional)
     * @return ApiResponse&lt;Assetsv3AssetOverviewResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Assetsv3AssetOverviewResponse> assetsServiceGetAssetOverviewWithHttpInfo(String assetId, Integer pageNumber, Integer size, String widget, String ip, String host, String database, String assetEntityType) throws ApiException {
        okhttp3.Call localVarCall = assetsServiceGetAssetOverviewValidateBeforeCall(assetId, pageNumber, size, widget, ip, host, database, assetEntityType, null);
        Type localVarReturnType = new TypeToken<Assetsv3AssetOverviewResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetAssetOverview - Get asset overview widgets data for a particular asset. (asynchronously)
     * 
     * @param assetId Asset grouper Id. (optional)
     * @param pageNumber Page number. (optional)
     * @param size Page size. (optional)
     * @param widget Widget type.   - ALL: All Asset Overview Widgets.  - CLASSIFICATION: Classification Asset Overview Widgets.  - TAG: Tag Asset Overview Widgets.  - RESOURCE: Resource Asset Overview Widgets. (optional, default to ALL)
     * @param ip Asset IP. (optional)
     * @param host Asset Host. (optional)
     * @param database Database Name. (optional)
     * @param assetEntityType asset ntity type. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceGetAssetOverviewAsync(String assetId, Integer pageNumber, Integer size, String widget, String ip, String host, String database, String assetEntityType, final ApiCallback<Assetsv3AssetOverviewResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetsServiceGetAssetOverviewValidateBeforeCall(assetId, pageNumber, size, widget, ip, host, database, assetEntityType, _callback);
        Type localVarReturnType = new TypeToken<Assetsv3AssetOverviewResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetsServiceGetAssetTopology
     * @param assetsv3GetAssetTopologyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceGetAssetTopologyCall(Assetsv3GetAssetTopologyRequest assetsv3GetAssetTopologyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assetsv3GetAssetTopologyRequest;

        // create path and map variables
        String localVarPath = "/api/v3/assets/topology";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetsServiceGetAssetTopologyValidateBeforeCall(Assetsv3GetAssetTopologyRequest assetsv3GetAssetTopologyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetsv3GetAssetTopologyRequest' is set
        if (assetsv3GetAssetTopologyRequest == null) {
            throw new ApiException("Missing the required parameter 'assetsv3GetAssetTopologyRequest' when calling assetsServiceGetAssetTopology(Async)");
        }

        return assetsServiceGetAssetTopologyCall(assetsv3GetAssetTopologyRequest, _callback);

    }

    /**
     * GetAssetTopology- Get list of topology for a parent asset.
     * 
     * @param assetsv3GetAssetTopologyRequest  (required)
     * @return Assetsv3GetAssetTopologyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Assetsv3GetAssetTopologyResponse assetsServiceGetAssetTopology(Assetsv3GetAssetTopologyRequest assetsv3GetAssetTopologyRequest) throws ApiException {
        ApiResponse<Assetsv3GetAssetTopologyResponse> localVarResp = assetsServiceGetAssetTopologyWithHttpInfo(assetsv3GetAssetTopologyRequest);
        return localVarResp.getData();
    }

    /**
     * GetAssetTopology- Get list of topology for a parent asset.
     * 
     * @param assetsv3GetAssetTopologyRequest  (required)
     * @return ApiResponse&lt;Assetsv3GetAssetTopologyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Assetsv3GetAssetTopologyResponse> assetsServiceGetAssetTopologyWithHttpInfo(Assetsv3GetAssetTopologyRequest assetsv3GetAssetTopologyRequest) throws ApiException {
        okhttp3.Call localVarCall = assetsServiceGetAssetTopologyValidateBeforeCall(assetsv3GetAssetTopologyRequest, null);
        Type localVarReturnType = new TypeToken<Assetsv3GetAssetTopologyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetAssetTopology- Get list of topology for a parent asset. (asynchronously)
     * 
     * @param assetsv3GetAssetTopologyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceGetAssetTopologyAsync(Assetsv3GetAssetTopologyRequest assetsv3GetAssetTopologyRequest, final ApiCallback<Assetsv3GetAssetTopologyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetsServiceGetAssetTopologyValidateBeforeCall(assetsv3GetAssetTopologyRequest, _callback);
        Type localVarReturnType = new TypeToken<Assetsv3GetAssetTopologyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetsServiceGetFilterTemplateForAssets
     * @param templateId template id to be deleted. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceGetFilterTemplateForAssetsCall(String templateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/assets/filters/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (templateId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("template_id", templateId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetsServiceGetFilterTemplateForAssetsValidateBeforeCall(String templateId, final ApiCallback _callback) throws ApiException {
        return assetsServiceGetFilterTemplateForAssetsCall(templateId, _callback);

    }

    /**
     * GetFilterTemplateForAssets - Get list of filters query templates for manage assets.
     * 
     * @param templateId template id to be deleted. (optional)
     * @return Assetsv3GetFilterTemplateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Assetsv3GetFilterTemplateResponse assetsServiceGetFilterTemplateForAssets(String templateId) throws ApiException {
        ApiResponse<Assetsv3GetFilterTemplateResponse> localVarResp = assetsServiceGetFilterTemplateForAssetsWithHttpInfo(templateId);
        return localVarResp.getData();
    }

    /**
     * GetFilterTemplateForAssets - Get list of filters query templates for manage assets.
     * 
     * @param templateId template id to be deleted. (optional)
     * @return ApiResponse&lt;Assetsv3GetFilterTemplateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Assetsv3GetFilterTemplateResponse> assetsServiceGetFilterTemplateForAssetsWithHttpInfo(String templateId) throws ApiException {
        okhttp3.Call localVarCall = assetsServiceGetFilterTemplateForAssetsValidateBeforeCall(templateId, null);
        Type localVarReturnType = new TypeToken<Assetsv3GetFilterTemplateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetFilterTemplateForAssets - Get list of filters query templates for manage assets. (asynchronously)
     * 
     * @param templateId template id to be deleted. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceGetFilterTemplateForAssetsAsync(String templateId, final ApiCallback<Assetsv3GetFilterTemplateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetsServiceGetFilterTemplateForAssetsValidateBeforeCall(templateId, _callback);
        Type localVarReturnType = new TypeToken<Assetsv3GetFilterTemplateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetsServiceGetFiltersForAssets
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceGetFiltersForAssetsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/assets/filters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetsServiceGetFiltersForAssetsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return assetsServiceGetFiltersForAssetsCall(_callback);

    }

    /**
     * GetFiltersForAssets - Get a list of filters category and sub category with all data.
     * 
     * @return Assetsv3GetFiltersDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Assetsv3GetFiltersDataResponse assetsServiceGetFiltersForAssets() throws ApiException {
        ApiResponse<Assetsv3GetFiltersDataResponse> localVarResp = assetsServiceGetFiltersForAssetsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * GetFiltersForAssets - Get a list of filters category and sub category with all data.
     * 
     * @return ApiResponse&lt;Assetsv3GetFiltersDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Assetsv3GetFiltersDataResponse> assetsServiceGetFiltersForAssetsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = assetsServiceGetFiltersForAssetsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Assetsv3GetFiltersDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetFiltersForAssets - Get a list of filters category and sub category with all data. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceGetFiltersForAssetsAsync(final ApiCallback<Assetsv3GetFiltersDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetsServiceGetFiltersForAssetsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Assetsv3GetFiltersDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetsServiceListPolicy
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceListPolicyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/assets/policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetsServiceListPolicyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return assetsServiceListPolicyCall(_callback);

    }

    /**
     * ListPolicy - List all policies.
     * 
     * @return Assetsv3ListPolicyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Assetsv3ListPolicyResponse assetsServiceListPolicy() throws ApiException {
        ApiResponse<Assetsv3ListPolicyResponse> localVarResp = assetsServiceListPolicyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * ListPolicy - List all policies.
     * 
     * @return ApiResponse&lt;Assetsv3ListPolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Assetsv3ListPolicyResponse> assetsServiceListPolicyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = assetsServiceListPolicyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Assetsv3ListPolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ListPolicy - List all policies. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceListPolicyAsync(final ApiCallback<Assetsv3ListPolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetsServiceListPolicyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Assetsv3ListPolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetsServiceListRule
     * @param policyId Policy ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceListRuleCall(String policyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/assets/policies/{policy_id}/rules"
            .replace("{" + "policy_id" + "}", localVarApiClient.escapeString(policyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetsServiceListRuleValidateBeforeCall(String policyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling assetsServiceListRule(Async)");
        }

        return assetsServiceListRuleCall(policyId, _callback);

    }

    /**
     * ListRule - List all rules for a policy.
     * 
     * @param policyId Policy ID (required)
     * @return Assetsv3ListRuleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Assetsv3ListRuleResponse assetsServiceListRule(String policyId) throws ApiException {
        ApiResponse<Assetsv3ListRuleResponse> localVarResp = assetsServiceListRuleWithHttpInfo(policyId);
        return localVarResp.getData();
    }

    /**
     * ListRule - List all rules for a policy.
     * 
     * @param policyId Policy ID (required)
     * @return ApiResponse&lt;Assetsv3ListRuleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Assetsv3ListRuleResponse> assetsServiceListRuleWithHttpInfo(String policyId) throws ApiException {
        okhttp3.Call localVarCall = assetsServiceListRuleValidateBeforeCall(policyId, null);
        Type localVarReturnType = new TypeToken<Assetsv3ListRuleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ListRule - List all rules for a policy. (asynchronously)
     * 
     * @param policyId Policy ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceListRuleAsync(String policyId, final ApiCallback<Assetsv3ListRuleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetsServiceListRuleValidateBeforeCall(policyId, _callback);
        Type localVarReturnType = new TypeToken<Assetsv3ListRuleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetsServiceListTagDomains
     * @param domGrouper Optional: dom_grouper required if we want to fetch domains based on the group. (optional)
     * @param purpose Optional: purpose required if we want to fetch domains based on the purpose. (optional)
     * @param needTag Optional: If we need Tag  based on the Domains. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceListTagDomainsCall(String domGrouper, String purpose, Boolean needTag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/assets/tags/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (domGrouper != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dom_grouper", domGrouper));
        }

        if (purpose != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("purpose", purpose));
        }

        if (needTag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("need_tag", needTag));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetsServiceListTagDomainsValidateBeforeCall(String domGrouper, String purpose, Boolean needTag, final ApiCallback _callback) throws ApiException {
        return assetsServiceListTagDomainsCall(domGrouper, purpose, needTag, _callback);

    }

    /**
     * ListTagDomains - Get Tag categories by request parameters .
     * 
     * @param domGrouper Optional: dom_grouper required if we want to fetch domains based on the group. (optional)
     * @param purpose Optional: purpose required if we want to fetch domains based on the purpose. (optional)
     * @param needTag Optional: If we need Tag  based on the Domains. (optional)
     * @return Assetsv3ListTagDomainsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Assetsv3ListTagDomainsResponse assetsServiceListTagDomains(String domGrouper, String purpose, Boolean needTag) throws ApiException {
        ApiResponse<Assetsv3ListTagDomainsResponse> localVarResp = assetsServiceListTagDomainsWithHttpInfo(domGrouper, purpose, needTag);
        return localVarResp.getData();
    }

    /**
     * ListTagDomains - Get Tag categories by request parameters .
     * 
     * @param domGrouper Optional: dom_grouper required if we want to fetch domains based on the group. (optional)
     * @param purpose Optional: purpose required if we want to fetch domains based on the purpose. (optional)
     * @param needTag Optional: If we need Tag  based on the Domains. (optional)
     * @return ApiResponse&lt;Assetsv3ListTagDomainsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Assetsv3ListTagDomainsResponse> assetsServiceListTagDomainsWithHttpInfo(String domGrouper, String purpose, Boolean needTag) throws ApiException {
        okhttp3.Call localVarCall = assetsServiceListTagDomainsValidateBeforeCall(domGrouper, purpose, needTag, null);
        Type localVarReturnType = new TypeToken<Assetsv3ListTagDomainsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ListTagDomains - Get Tag categories by request parameters . (asynchronously)
     * 
     * @param domGrouper Optional: dom_grouper required if we want to fetch domains based on the group. (optional)
     * @param purpose Optional: purpose required if we want to fetch domains based on the purpose. (optional)
     * @param needTag Optional: If we need Tag  based on the Domains. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceListTagDomainsAsync(String domGrouper, String purpose, Boolean needTag, final ApiCallback<Assetsv3ListTagDomainsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetsServiceListTagDomainsValidateBeforeCall(domGrouper, purpose, needTag, _callback);
        Type localVarReturnType = new TypeToken<Assetsv3ListTagDomainsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetsServiceListTags
     * @param assetId asset id - Asset ID. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceListTagsCall(List<String> assetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/assets/tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (assetId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asset_id", assetId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetsServiceListTagsValidateBeforeCall(List<String> assetId, final ApiCallback _callback) throws ApiException {
        return assetsServiceListTagsCall(assetId, _callback);

    }

    /**
     * ListTags - Get Tags for Manage Tags listing screen .
     * 
     * @param assetId asset id - Asset ID. (optional)
     * @return Assetsv3ListTagsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Assetsv3ListTagsResponse assetsServiceListTags(List<String> assetId) throws ApiException {
        ApiResponse<Assetsv3ListTagsResponse> localVarResp = assetsServiceListTagsWithHttpInfo(assetId);
        return localVarResp.getData();
    }

    /**
     * ListTags - Get Tags for Manage Tags listing screen .
     * 
     * @param assetId asset id - Asset ID. (optional)
     * @return ApiResponse&lt;Assetsv3ListTagsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Assetsv3ListTagsResponse> assetsServiceListTagsWithHttpInfo(List<String> assetId) throws ApiException {
        okhttp3.Call localVarCall = assetsServiceListTagsValidateBeforeCall(assetId, null);
        Type localVarReturnType = new TypeToken<Assetsv3ListTagsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ListTags - Get Tags for Manage Tags listing screen . (asynchronously)
     * 
     * @param assetId asset id - Asset ID. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceListTagsAsync(List<String> assetId, final ApiCallback<Assetsv3ListTagsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetsServiceListTagsValidateBeforeCall(assetId, _callback);
        Type localVarReturnType = new TypeToken<Assetsv3ListTagsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetsServiceMergeOrSplitAssets
     * @param assetsv3MergeOrSplitAssetsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceMergeOrSplitAssetsCall(Assetsv3MergeOrSplitAssetsRequest assetsv3MergeOrSplitAssetsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assetsv3MergeOrSplitAssetsRequest;

        // create path and map variables
        String localVarPath = "/api/v3/assets/configuration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetsServiceMergeOrSplitAssetsValidateBeforeCall(Assetsv3MergeOrSplitAssetsRequest assetsv3MergeOrSplitAssetsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetsv3MergeOrSplitAssetsRequest' is set
        if (assetsv3MergeOrSplitAssetsRequest == null) {
            throw new ApiException("Missing the required parameter 'assetsv3MergeOrSplitAssetsRequest' when calling assetsServiceMergeOrSplitAssets(Async)");
        }

        return assetsServiceMergeOrSplitAssetsCall(assetsv3MergeOrSplitAssetsRequest, _callback);

    }

    /**
     * MergeOrSplitAssets - Merge or split the selected assets.
     * 
     * @param assetsv3MergeOrSplitAssetsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Object assetsServiceMergeOrSplitAssets(Assetsv3MergeOrSplitAssetsRequest assetsv3MergeOrSplitAssetsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = assetsServiceMergeOrSplitAssetsWithHttpInfo(assetsv3MergeOrSplitAssetsRequest);
        return localVarResp.getData();
    }

    /**
     * MergeOrSplitAssets - Merge or split the selected assets.
     * 
     * @param assetsv3MergeOrSplitAssetsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> assetsServiceMergeOrSplitAssetsWithHttpInfo(Assetsv3MergeOrSplitAssetsRequest assetsv3MergeOrSplitAssetsRequest) throws ApiException {
        okhttp3.Call localVarCall = assetsServiceMergeOrSplitAssetsValidateBeforeCall(assetsv3MergeOrSplitAssetsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * MergeOrSplitAssets - Merge or split the selected assets. (asynchronously)
     * 
     * @param assetsv3MergeOrSplitAssetsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceMergeOrSplitAssetsAsync(Assetsv3MergeOrSplitAssetsRequest assetsv3MergeOrSplitAssetsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetsServiceMergeOrSplitAssetsValidateBeforeCall(assetsv3MergeOrSplitAssetsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetsServiceSaveAssignedTags
     * @param assetsv3SaveAssignedTagsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceSaveAssignedTagsCall(Assetsv3SaveAssignedTagsRequest assetsv3SaveAssignedTagsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assetsv3SaveAssignedTagsRequest;

        // create path and map variables
        String localVarPath = "/api/v3/assets/tags/assign";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetsServiceSaveAssignedTagsValidateBeforeCall(Assetsv3SaveAssignedTagsRequest assetsv3SaveAssignedTagsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetsv3SaveAssignedTagsRequest' is set
        if (assetsv3SaveAssignedTagsRequest == null) {
            throw new ApiException("Missing the required parameter 'assetsv3SaveAssignedTagsRequest' when calling assetsServiceSaveAssignedTags(Async)");
        }

        return assetsServiceSaveAssignedTagsCall(assetsv3SaveAssignedTagsRequest, _callback);

    }

    /**
     * SaveAssignedTags - Save Assigned Tags to TAG_DSDEF_MAP table.
     * 
     * @param assetsv3SaveAssignedTagsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Object assetsServiceSaveAssignedTags(Assetsv3SaveAssignedTagsRequest assetsv3SaveAssignedTagsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = assetsServiceSaveAssignedTagsWithHttpInfo(assetsv3SaveAssignedTagsRequest);
        return localVarResp.getData();
    }

    /**
     * SaveAssignedTags - Save Assigned Tags to TAG_DSDEF_MAP table.
     * 
     * @param assetsv3SaveAssignedTagsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> assetsServiceSaveAssignedTagsWithHttpInfo(Assetsv3SaveAssignedTagsRequest assetsv3SaveAssignedTagsRequest) throws ApiException {
        okhttp3.Call localVarCall = assetsServiceSaveAssignedTagsValidateBeforeCall(assetsv3SaveAssignedTagsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * SaveAssignedTags - Save Assigned Tags to TAG_DSDEF_MAP table. (asynchronously)
     * 
     * @param assetsv3SaveAssignedTagsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceSaveAssignedTagsAsync(Assetsv3SaveAssignedTagsRequest assetsv3SaveAssignedTagsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetsServiceSaveAssignedTagsValidateBeforeCall(assetsv3SaveAssignedTagsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetsServiceSaveTagConceptData
     * @param assetsv3SaveTagConceptDataRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceSaveTagConceptDataCall(Assetsv3SaveTagConceptDataRequest assetsv3SaveTagConceptDataRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assetsv3SaveTagConceptDataRequest;

        // create path and map variables
        String localVarPath = "/api/v3/assets/tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetsServiceSaveTagConceptDataValidateBeforeCall(Assetsv3SaveTagConceptDataRequest assetsv3SaveTagConceptDataRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetsv3SaveTagConceptDataRequest' is set
        if (assetsv3SaveTagConceptDataRequest == null) {
            throw new ApiException("Missing the required parameter 'assetsv3SaveTagConceptDataRequest' when calling assetsServiceSaveTagConceptData(Async)");
        }

        return assetsServiceSaveTagConceptDataCall(assetsv3SaveTagConceptDataRequest, _callback);

    }

    /**
     * SaveTagConceptData - creates a custom tag
     * 
     * @param assetsv3SaveTagConceptDataRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Object assetsServiceSaveTagConceptData(Assetsv3SaveTagConceptDataRequest assetsv3SaveTagConceptDataRequest) throws ApiException {
        ApiResponse<Object> localVarResp = assetsServiceSaveTagConceptDataWithHttpInfo(assetsv3SaveTagConceptDataRequest);
        return localVarResp.getData();
    }

    /**
     * SaveTagConceptData - creates a custom tag
     * 
     * @param assetsv3SaveTagConceptDataRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> assetsServiceSaveTagConceptDataWithHttpInfo(Assetsv3SaveTagConceptDataRequest assetsv3SaveTagConceptDataRequest) throws ApiException {
        okhttp3.Call localVarCall = assetsServiceSaveTagConceptDataValidateBeforeCall(assetsv3SaveTagConceptDataRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * SaveTagConceptData - creates a custom tag (asynchronously)
     * 
     * @param assetsv3SaveTagConceptDataRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceSaveTagConceptDataAsync(Assetsv3SaveTagConceptDataRequest assetsv3SaveTagConceptDataRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetsServiceSaveTagConceptDataValidateBeforeCall(assetsv3SaveTagConceptDataRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetsServiceSaveTagDomainData
     * @param assetsv3SaveTagDomainDataRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceSaveTagDomainDataCall(Assetsv3SaveTagDomainDataRequest assetsv3SaveTagDomainDataRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assetsv3SaveTagDomainDataRequest;

        // create path and map variables
        String localVarPath = "/api/v3/assets/tags/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetsServiceSaveTagDomainDataValidateBeforeCall(Assetsv3SaveTagDomainDataRequest assetsv3SaveTagDomainDataRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetsv3SaveTagDomainDataRequest' is set
        if (assetsv3SaveTagDomainDataRequest == null) {
            throw new ApiException("Missing the required parameter 'assetsv3SaveTagDomainDataRequest' when calling assetsServiceSaveTagDomainData(Async)");
        }

        return assetsServiceSaveTagDomainDataCall(assetsv3SaveTagDomainDataRequest, _callback);

    }

    /**
     * SaveTagDomainData - creates a custom category to be assigned to a tag
     * 
     * @param assetsv3SaveTagDomainDataRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Object assetsServiceSaveTagDomainData(Assetsv3SaveTagDomainDataRequest assetsv3SaveTagDomainDataRequest) throws ApiException {
        ApiResponse<Object> localVarResp = assetsServiceSaveTagDomainDataWithHttpInfo(assetsv3SaveTagDomainDataRequest);
        return localVarResp.getData();
    }

    /**
     * SaveTagDomainData - creates a custom category to be assigned to a tag
     * 
     * @param assetsv3SaveTagDomainDataRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> assetsServiceSaveTagDomainDataWithHttpInfo(Assetsv3SaveTagDomainDataRequest assetsv3SaveTagDomainDataRequest) throws ApiException {
        okhttp3.Call localVarCall = assetsServiceSaveTagDomainDataValidateBeforeCall(assetsv3SaveTagDomainDataRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * SaveTagDomainData - creates a custom category to be assigned to a tag (asynchronously)
     * 
     * @param assetsv3SaveTagDomainDataRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceSaveTagDomainDataAsync(Assetsv3SaveTagDomainDataRequest assetsv3SaveTagDomainDataRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetsServiceSaveTagDomainDataValidateBeforeCall(assetsv3SaveTagDomainDataRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetsServiceSaveUpdateFilterTemplateForAssets
     * @param assetsv3SaveUpdateFilterTemplateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceSaveUpdateFilterTemplateForAssetsCall(Assetsv3SaveUpdateFilterTemplateRequest assetsv3SaveUpdateFilterTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assetsv3SaveUpdateFilterTemplateRequest;

        // create path and map variables
        String localVarPath = "/api/v3/assets/filters/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetsServiceSaveUpdateFilterTemplateForAssetsValidateBeforeCall(Assetsv3SaveUpdateFilterTemplateRequest assetsv3SaveUpdateFilterTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetsv3SaveUpdateFilterTemplateRequest' is set
        if (assetsv3SaveUpdateFilterTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'assetsv3SaveUpdateFilterTemplateRequest' when calling assetsServiceSaveUpdateFilterTemplateForAssets(Async)");
        }

        return assetsServiceSaveUpdateFilterTemplateForAssetsCall(assetsv3SaveUpdateFilterTemplateRequest, _callback);

    }

    /**
     * SaveUpdateFilterTemplateForAssets - Save/Update a filters query to use as template in manage assets along with reordering of template list.
     * 
     * @param assetsv3SaveUpdateFilterTemplateRequest  (required)
     * @return Assetsv3SaveUpdateFilterTemplateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Assetsv3SaveUpdateFilterTemplateResponse assetsServiceSaveUpdateFilterTemplateForAssets(Assetsv3SaveUpdateFilterTemplateRequest assetsv3SaveUpdateFilterTemplateRequest) throws ApiException {
        ApiResponse<Assetsv3SaveUpdateFilterTemplateResponse> localVarResp = assetsServiceSaveUpdateFilterTemplateForAssetsWithHttpInfo(assetsv3SaveUpdateFilterTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * SaveUpdateFilterTemplateForAssets - Save/Update a filters query to use as template in manage assets along with reordering of template list.
     * 
     * @param assetsv3SaveUpdateFilterTemplateRequest  (required)
     * @return ApiResponse&lt;Assetsv3SaveUpdateFilterTemplateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Assetsv3SaveUpdateFilterTemplateResponse> assetsServiceSaveUpdateFilterTemplateForAssetsWithHttpInfo(Assetsv3SaveUpdateFilterTemplateRequest assetsv3SaveUpdateFilterTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = assetsServiceSaveUpdateFilterTemplateForAssetsValidateBeforeCall(assetsv3SaveUpdateFilterTemplateRequest, null);
        Type localVarReturnType = new TypeToken<Assetsv3SaveUpdateFilterTemplateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * SaveUpdateFilterTemplateForAssets - Save/Update a filters query to use as template in manage assets along with reordering of template list. (asynchronously)
     * 
     * @param assetsv3SaveUpdateFilterTemplateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceSaveUpdateFilterTemplateForAssetsAsync(Assetsv3SaveUpdateFilterTemplateRequest assetsv3SaveUpdateFilterTemplateRequest, final ApiCallback<Assetsv3SaveUpdateFilterTemplateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetsServiceSaveUpdateFilterTemplateForAssetsValidateBeforeCall(assetsv3SaveUpdateFilterTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<Assetsv3SaveUpdateFilterTemplateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetsServiceSetBannerState
     * @param assetsv3SetBannerStateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceSetBannerStateCall(Assetsv3SetBannerStateRequest assetsv3SetBannerStateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assetsv3SetBannerStateRequest;

        // create path and map variables
        String localVarPath = "/api/v3/assets/banner";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetsServiceSetBannerStateValidateBeforeCall(Assetsv3SetBannerStateRequest assetsv3SetBannerStateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetsv3SetBannerStateRequest' is set
        if (assetsv3SetBannerStateRequest == null) {
            throw new ApiException("Missing the required parameter 'assetsv3SetBannerStateRequest' when calling assetsServiceSetBannerState(Async)");
        }

        return assetsServiceSetBannerStateCall(assetsv3SetBannerStateRequest, _callback);

    }

    /**
     * SetBannerState - Set banner state for asset inventory page.
     * 
     * @param assetsv3SetBannerStateRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Object assetsServiceSetBannerState(Assetsv3SetBannerStateRequest assetsv3SetBannerStateRequest) throws ApiException {
        ApiResponse<Object> localVarResp = assetsServiceSetBannerStateWithHttpInfo(assetsv3SetBannerStateRequest);
        return localVarResp.getData();
    }

    /**
     * SetBannerState - Set banner state for asset inventory page.
     * 
     * @param assetsv3SetBannerStateRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> assetsServiceSetBannerStateWithHttpInfo(Assetsv3SetBannerStateRequest assetsv3SetBannerStateRequest) throws ApiException {
        okhttp3.Call localVarCall = assetsServiceSetBannerStateValidateBeforeCall(assetsv3SetBannerStateRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * SetBannerState - Set banner state for asset inventory page. (asynchronously)
     * 
     * @param assetsv3SetBannerStateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceSetBannerStateAsync(Assetsv3SetBannerStateRequest assetsv3SetBannerStateRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetsServiceSetBannerStateValidateBeforeCall(assetsv3SetBannerStateRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetsServiceUpdateAssetName
     * @param assetsv3UpdateAssetNameRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceUpdateAssetNameCall(Assetsv3UpdateAssetNameRequest assetsv3UpdateAssetNameRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assetsv3UpdateAssetNameRequest;

        // create path and map variables
        String localVarPath = "/api/v3/assets/name";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetsServiceUpdateAssetNameValidateBeforeCall(Assetsv3UpdateAssetNameRequest assetsv3UpdateAssetNameRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetsv3UpdateAssetNameRequest' is set
        if (assetsv3UpdateAssetNameRequest == null) {
            throw new ApiException("Missing the required parameter 'assetsv3UpdateAssetNameRequest' when calling assetsServiceUpdateAssetName(Async)");
        }

        return assetsServiceUpdateAssetNameCall(assetsv3UpdateAssetNameRequest, _callback);

    }

    /**
     * UpdateAssetName - Udates the name of the asset as given by the user.
     * 
     * @param assetsv3UpdateAssetNameRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Object assetsServiceUpdateAssetName(Assetsv3UpdateAssetNameRequest assetsv3UpdateAssetNameRequest) throws ApiException {
        ApiResponse<Object> localVarResp = assetsServiceUpdateAssetNameWithHttpInfo(assetsv3UpdateAssetNameRequest);
        return localVarResp.getData();
    }

    /**
     * UpdateAssetName - Udates the name of the asset as given by the user.
     * 
     * @param assetsv3UpdateAssetNameRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> assetsServiceUpdateAssetNameWithHttpInfo(Assetsv3UpdateAssetNameRequest assetsv3UpdateAssetNameRequest) throws ApiException {
        okhttp3.Call localVarCall = assetsServiceUpdateAssetNameValidateBeforeCall(assetsv3UpdateAssetNameRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * UpdateAssetName - Udates the name of the asset as given by the user. (asynchronously)
     * 
     * @param assetsv3UpdateAssetNameRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceUpdateAssetNameAsync(Assetsv3UpdateAssetNameRequest assetsv3UpdateAssetNameRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetsServiceUpdateAssetNameValidateBeforeCall(assetsv3UpdateAssetNameRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assetsServiceUpdatePolicy
     * @param assetsv3UpdatePolicyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceUpdatePolicyCall(Assetsv3UpdatePolicyRequest assetsv3UpdatePolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = assetsv3UpdatePolicyRequest;

        // create path and map variables
        String localVarPath = "/api/v3/assets/policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assetsServiceUpdatePolicyValidateBeforeCall(Assetsv3UpdatePolicyRequest assetsv3UpdatePolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetsv3UpdatePolicyRequest' is set
        if (assetsv3UpdatePolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'assetsv3UpdatePolicyRequest' when calling assetsServiceUpdatePolicy(Async)");
        }

        return assetsServiceUpdatePolicyCall(assetsv3UpdatePolicyRequest, _callback);

    }

    /**
     * UpdatePolicy - Update existing Policy status.
     * 
     * @param assetsv3UpdatePolicyRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Object assetsServiceUpdatePolicy(Assetsv3UpdatePolicyRequest assetsv3UpdatePolicyRequest) throws ApiException {
        ApiResponse<Object> localVarResp = assetsServiceUpdatePolicyWithHttpInfo(assetsv3UpdatePolicyRequest);
        return localVarResp.getData();
    }

    /**
     * UpdatePolicy - Update existing Policy status.
     * 
     * @param assetsv3UpdatePolicyRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> assetsServiceUpdatePolicyWithHttpInfo(Assetsv3UpdatePolicyRequest assetsv3UpdatePolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = assetsServiceUpdatePolicyValidateBeforeCall(assetsv3UpdatePolicyRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * UpdatePolicy - Update existing Policy status. (asynchronously)
     * 
     * @param assetsv3UpdatePolicyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assetsServiceUpdatePolicyAsync(Assetsv3UpdatePolicyRequest assetsv3UpdatePolicyRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = assetsServiceUpdatePolicyValidateBeforeCall(assetsv3UpdatePolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
