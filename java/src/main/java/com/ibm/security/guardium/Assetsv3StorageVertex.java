/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.security.guardium;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.security.guardium.Assetsv3ConnectionEdge;
import com.ibm.security.guardium.Assetsv3CustomProperty;
import com.ibm.security.guardium.Assetsv3Level;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.security.JSON;

/**
 * Assetsv3StorageVertex
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T18:44:53.377644Z[UTC]", comments = "Generator version: 7.6.0")
public class Assetsv3StorageVertex {
  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_CRITICALITY = "criticality";
  @SerializedName(SERIALIZED_NAME_CRITICALITY)
  private Assetsv3Level criticality = Assetsv3Level.UNKNOWN;

  public static final String SERIALIZED_NAME_DATA_CENTER = "data_center";
  @SerializedName(SERIALIZED_NAME_DATA_CENTER)
  private String dataCenter;

  public static final String SERIALIZED_NAME_DNS = "dns";
  @SerializedName(SERIALIZED_NAME_DNS)
  private String dns;

  public static final String SERIALIZED_NAME_EXTENDED_PROPERTIES = "extended_properties";
  @SerializedName(SERIALIZED_NAME_EXTENDED_PROPERTIES)
  private List<Assetsv3CustomProperty> extendedProperties = new ArrayList<>();

  public static final String SERIALIZED_NAME_FOLDER_PATH = "folder_path";
  @SerializedName(SERIALIZED_NAME_FOLDER_PATH)
  private String folderPath;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private List<String> owner = new ArrayList<>();

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_RESOLUTION_KEY = "resolution_key";
  @SerializedName(SERIALIZED_NAME_RESOLUTION_KEY)
  private String resolutionKey;

  public static final String SERIALIZED_NAME_RISK_LEVEL = "risk_level";
  @SerializedName(SERIALIZED_NAME_RISK_LEVEL)
  private Assetsv3Level riskLevel = Assetsv3Level.UNKNOWN;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private String size;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_STORAGE_ACCOUNT = "storage_account";
  @SerializedName(SERIALIZED_NAME_STORAGE_ACCOUNT)
  private List<Assetsv3ConnectionEdge> storageAccount = new ArrayList<>();

  public static final String SERIALIZED_NAME_STORAGE_HOST = "storage_host";
  @SerializedName(SERIALIZED_NAME_STORAGE_HOST)
  private List<Assetsv3ConnectionEdge> storageHost = new ArrayList<>();

  public static final String SERIALIZED_NAME_STORAGE_ID = "storage_id";
  @SerializedName(SERIALIZED_NAME_STORAGE_ID)
  private String storageId;

  public static final String SERIALIZED_NAME_STORAGE_IP = "storage_ip";
  @SerializedName(SERIALIZED_NAME_STORAGE_IP)
  private List<Assetsv3ConnectionEdge> storageIp = new ArrayList<>();

  public static final String SERIALIZED_NAME_STORAGE_NAME = "storage_name";
  @SerializedName(SERIALIZED_NAME_STORAGE_NAME)
  private String storageName;

  public static final String SERIALIZED_NAME_STORAGE_RESOURCES = "storage_resources";
  @SerializedName(SERIALIZED_NAME_STORAGE_RESOURCES)
  private List<Assetsv3ConnectionEdge> storageResources = new ArrayList<>();

  public static final String SERIALIZED_NAME_STORAGE_SUB_TYPE = "storage_sub_type";
  @SerializedName(SERIALIZED_NAME_STORAGE_SUB_TYPE)
  private String storageSubType;

  public static final String SERIALIZED_NAME_STORAGE_SUBSCRIPTION = "storage_subscription";
  @SerializedName(SERIALIZED_NAME_STORAGE_SUBSCRIPTION)
  private List<Assetsv3ConnectionEdge> storageSubscription = new ArrayList<>();

  public static final String SERIALIZED_NAME_STORAGE_TYPE = "storage_type";
  @SerializedName(SERIALIZED_NAME_STORAGE_TYPE)
  private String storageType;

  public Assetsv3StorageVertex() {
  }

  public Assetsv3StorageVertex city(String city) {
    this.city = city;
    return this;
  }

   /**
   * Get city
   * @return city
  **/
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public Assetsv3StorageVertex country(String country) {
    this.country = country;
    return this;
  }

   /**
   * Get country
   * @return country
  **/
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public Assetsv3StorageVertex criticality(Assetsv3Level criticality) {
    this.criticality = criticality;
    return this;
  }

   /**
   * Get criticality
   * @return criticality
  **/
  @javax.annotation.Nullable
  public Assetsv3Level getCriticality() {
    return criticality;
  }

  public void setCriticality(Assetsv3Level criticality) {
    this.criticality = criticality;
  }


  public Assetsv3StorageVertex dataCenter(String dataCenter) {
    this.dataCenter = dataCenter;
    return this;
  }

   /**
   * Get dataCenter
   * @return dataCenter
  **/
  @javax.annotation.Nullable
  public String getDataCenter() {
    return dataCenter;
  }

  public void setDataCenter(String dataCenter) {
    this.dataCenter = dataCenter;
  }


  public Assetsv3StorageVertex dns(String dns) {
    this.dns = dns;
    return this;
  }

   /**
   * Get dns
   * @return dns
  **/
  @javax.annotation.Nullable
  public String getDns() {
    return dns;
  }

  public void setDns(String dns) {
    this.dns = dns;
  }


  public Assetsv3StorageVertex extendedProperties(List<Assetsv3CustomProperty> extendedProperties) {
    this.extendedProperties = extendedProperties;
    return this;
  }

  public Assetsv3StorageVertex addExtendedPropertiesItem(Assetsv3CustomProperty extendedPropertiesItem) {
    if (this.extendedProperties == null) {
      this.extendedProperties = new ArrayList<>();
    }
    this.extendedProperties.add(extendedPropertiesItem);
    return this;
  }

   /**
   * Get extendedProperties
   * @return extendedProperties
  **/
  @javax.annotation.Nullable
  public List<Assetsv3CustomProperty> getExtendedProperties() {
    return extendedProperties;
  }

  public void setExtendedProperties(List<Assetsv3CustomProperty> extendedProperties) {
    this.extendedProperties = extendedProperties;
  }


  public Assetsv3StorageVertex folderPath(String folderPath) {
    this.folderPath = folderPath;
    return this;
  }

   /**
   * Get folderPath
   * @return folderPath
  **/
  @javax.annotation.Nullable
  public String getFolderPath() {
    return folderPath;
  }

  public void setFolderPath(String folderPath) {
    this.folderPath = folderPath;
  }


  public Assetsv3StorageVertex owner(List<String> owner) {
    this.owner = owner;
    return this;
  }

  public Assetsv3StorageVertex addOwnerItem(String ownerItem) {
    if (this.owner == null) {
      this.owner = new ArrayList<>();
    }
    this.owner.add(ownerItem);
    return this;
  }

   /**
   * Get owner
   * @return owner
  **/
  @javax.annotation.Nullable
  public List<String> getOwner() {
    return owner;
  }

  public void setOwner(List<String> owner) {
    this.owner = owner;
  }


  public Assetsv3StorageVertex region(String region) {
    this.region = region;
    return this;
  }

   /**
   * Get region
   * @return region
  **/
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public Assetsv3StorageVertex resolutionKey(String resolutionKey) {
    this.resolutionKey = resolutionKey;
    return this;
  }

   /**
   * Get resolutionKey
   * @return resolutionKey
  **/
  @javax.annotation.Nullable
  public String getResolutionKey() {
    return resolutionKey;
  }

  public void setResolutionKey(String resolutionKey) {
    this.resolutionKey = resolutionKey;
  }


  public Assetsv3StorageVertex riskLevel(Assetsv3Level riskLevel) {
    this.riskLevel = riskLevel;
    return this;
  }

   /**
   * Get riskLevel
   * @return riskLevel
  **/
  @javax.annotation.Nullable
  public Assetsv3Level getRiskLevel() {
    return riskLevel;
  }

  public void setRiskLevel(Assetsv3Level riskLevel) {
    this.riskLevel = riskLevel;
  }


  public Assetsv3StorageVertex size(String size) {
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/
  @javax.annotation.Nullable
  public String getSize() {
    return size;
  }

  public void setSize(String size) {
    this.size = size;
  }


  public Assetsv3StorageVertex state(String state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public Assetsv3StorageVertex storageAccount(List<Assetsv3ConnectionEdge> storageAccount) {
    this.storageAccount = storageAccount;
    return this;
  }

  public Assetsv3StorageVertex addStorageAccountItem(Assetsv3ConnectionEdge storageAccountItem) {
    if (this.storageAccount == null) {
      this.storageAccount = new ArrayList<>();
    }
    this.storageAccount.add(storageAccountItem);
    return this;
  }

   /**
   * Get storageAccount
   * @return storageAccount
  **/
  @javax.annotation.Nullable
  public List<Assetsv3ConnectionEdge> getStorageAccount() {
    return storageAccount;
  }

  public void setStorageAccount(List<Assetsv3ConnectionEdge> storageAccount) {
    this.storageAccount = storageAccount;
  }


  public Assetsv3StorageVertex storageHost(List<Assetsv3ConnectionEdge> storageHost) {
    this.storageHost = storageHost;
    return this;
  }

  public Assetsv3StorageVertex addStorageHostItem(Assetsv3ConnectionEdge storageHostItem) {
    if (this.storageHost == null) {
      this.storageHost = new ArrayList<>();
    }
    this.storageHost.add(storageHostItem);
    return this;
  }

   /**
   * Get storageHost
   * @return storageHost
  **/
  @javax.annotation.Nullable
  public List<Assetsv3ConnectionEdge> getStorageHost() {
    return storageHost;
  }

  public void setStorageHost(List<Assetsv3ConnectionEdge> storageHost) {
    this.storageHost = storageHost;
  }


  public Assetsv3StorageVertex storageId(String storageId) {
    this.storageId = storageId;
    return this;
  }

   /**
   * Get storageId
   * @return storageId
  **/
  @javax.annotation.Nullable
  public String getStorageId() {
    return storageId;
  }

  public void setStorageId(String storageId) {
    this.storageId = storageId;
  }


  public Assetsv3StorageVertex storageIp(List<Assetsv3ConnectionEdge> storageIp) {
    this.storageIp = storageIp;
    return this;
  }

  public Assetsv3StorageVertex addStorageIpItem(Assetsv3ConnectionEdge storageIpItem) {
    if (this.storageIp == null) {
      this.storageIp = new ArrayList<>();
    }
    this.storageIp.add(storageIpItem);
    return this;
  }

   /**
   * Get storageIp
   * @return storageIp
  **/
  @javax.annotation.Nullable
  public List<Assetsv3ConnectionEdge> getStorageIp() {
    return storageIp;
  }

  public void setStorageIp(List<Assetsv3ConnectionEdge> storageIp) {
    this.storageIp = storageIp;
  }


  public Assetsv3StorageVertex storageName(String storageName) {
    this.storageName = storageName;
    return this;
  }

   /**
   * Get storageName
   * @return storageName
  **/
  @javax.annotation.Nullable
  public String getStorageName() {
    return storageName;
  }

  public void setStorageName(String storageName) {
    this.storageName = storageName;
  }


  public Assetsv3StorageVertex storageResources(List<Assetsv3ConnectionEdge> storageResources) {
    this.storageResources = storageResources;
    return this;
  }

  public Assetsv3StorageVertex addStorageResourcesItem(Assetsv3ConnectionEdge storageResourcesItem) {
    if (this.storageResources == null) {
      this.storageResources = new ArrayList<>();
    }
    this.storageResources.add(storageResourcesItem);
    return this;
  }

   /**
   * Get storageResources
   * @return storageResources
  **/
  @javax.annotation.Nullable
  public List<Assetsv3ConnectionEdge> getStorageResources() {
    return storageResources;
  }

  public void setStorageResources(List<Assetsv3ConnectionEdge> storageResources) {
    this.storageResources = storageResources;
  }


  public Assetsv3StorageVertex storageSubType(String storageSubType) {
    this.storageSubType = storageSubType;
    return this;
  }

   /**
   * Get storageSubType
   * @return storageSubType
  **/
  @javax.annotation.Nullable
  public String getStorageSubType() {
    return storageSubType;
  }

  public void setStorageSubType(String storageSubType) {
    this.storageSubType = storageSubType;
  }


  public Assetsv3StorageVertex storageSubscription(List<Assetsv3ConnectionEdge> storageSubscription) {
    this.storageSubscription = storageSubscription;
    return this;
  }

  public Assetsv3StorageVertex addStorageSubscriptionItem(Assetsv3ConnectionEdge storageSubscriptionItem) {
    if (this.storageSubscription == null) {
      this.storageSubscription = new ArrayList<>();
    }
    this.storageSubscription.add(storageSubscriptionItem);
    return this;
  }

   /**
   * Get storageSubscription
   * @return storageSubscription
  **/
  @javax.annotation.Nullable
  public List<Assetsv3ConnectionEdge> getStorageSubscription() {
    return storageSubscription;
  }

  public void setStorageSubscription(List<Assetsv3ConnectionEdge> storageSubscription) {
    this.storageSubscription = storageSubscription;
  }


  public Assetsv3StorageVertex storageType(String storageType) {
    this.storageType = storageType;
    return this;
  }

   /**
   * Get storageType
   * @return storageType
  **/
  @javax.annotation.Nullable
  public String getStorageType() {
    return storageType;
  }

  public void setStorageType(String storageType) {
    this.storageType = storageType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Assetsv3StorageVertex assetsv3StorageVertex = (Assetsv3StorageVertex) o;
    return Objects.equals(this.city, assetsv3StorageVertex.city) &&
        Objects.equals(this.country, assetsv3StorageVertex.country) &&
        Objects.equals(this.criticality, assetsv3StorageVertex.criticality) &&
        Objects.equals(this.dataCenter, assetsv3StorageVertex.dataCenter) &&
        Objects.equals(this.dns, assetsv3StorageVertex.dns) &&
        Objects.equals(this.extendedProperties, assetsv3StorageVertex.extendedProperties) &&
        Objects.equals(this.folderPath, assetsv3StorageVertex.folderPath) &&
        Objects.equals(this.owner, assetsv3StorageVertex.owner) &&
        Objects.equals(this.region, assetsv3StorageVertex.region) &&
        Objects.equals(this.resolutionKey, assetsv3StorageVertex.resolutionKey) &&
        Objects.equals(this.riskLevel, assetsv3StorageVertex.riskLevel) &&
        Objects.equals(this.size, assetsv3StorageVertex.size) &&
        Objects.equals(this.state, assetsv3StorageVertex.state) &&
        Objects.equals(this.storageAccount, assetsv3StorageVertex.storageAccount) &&
        Objects.equals(this.storageHost, assetsv3StorageVertex.storageHost) &&
        Objects.equals(this.storageId, assetsv3StorageVertex.storageId) &&
        Objects.equals(this.storageIp, assetsv3StorageVertex.storageIp) &&
        Objects.equals(this.storageName, assetsv3StorageVertex.storageName) &&
        Objects.equals(this.storageResources, assetsv3StorageVertex.storageResources) &&
        Objects.equals(this.storageSubType, assetsv3StorageVertex.storageSubType) &&
        Objects.equals(this.storageSubscription, assetsv3StorageVertex.storageSubscription) &&
        Objects.equals(this.storageType, assetsv3StorageVertex.storageType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(city, country, criticality, dataCenter, dns, extendedProperties, folderPath, owner, region, resolutionKey, riskLevel, size, state, storageAccount, storageHost, storageId, storageIp, storageName, storageResources, storageSubType, storageSubscription, storageType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Assetsv3StorageVertex {\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    criticality: ").append(toIndentedString(criticality)).append("\n");
    sb.append("    dataCenter: ").append(toIndentedString(dataCenter)).append("\n");
    sb.append("    dns: ").append(toIndentedString(dns)).append("\n");
    sb.append("    extendedProperties: ").append(toIndentedString(extendedProperties)).append("\n");
    sb.append("    folderPath: ").append(toIndentedString(folderPath)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    resolutionKey: ").append(toIndentedString(resolutionKey)).append("\n");
    sb.append("    riskLevel: ").append(toIndentedString(riskLevel)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    storageAccount: ").append(toIndentedString(storageAccount)).append("\n");
    sb.append("    storageHost: ").append(toIndentedString(storageHost)).append("\n");
    sb.append("    storageId: ").append(toIndentedString(storageId)).append("\n");
    sb.append("    storageIp: ").append(toIndentedString(storageIp)).append("\n");
    sb.append("    storageName: ").append(toIndentedString(storageName)).append("\n");
    sb.append("    storageResources: ").append(toIndentedString(storageResources)).append("\n");
    sb.append("    storageSubType: ").append(toIndentedString(storageSubType)).append("\n");
    sb.append("    storageSubscription: ").append(toIndentedString(storageSubscription)).append("\n");
    sb.append("    storageType: ").append(toIndentedString(storageType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("city");
    openapiFields.add("country");
    openapiFields.add("criticality");
    openapiFields.add("data_center");
    openapiFields.add("dns");
    openapiFields.add("extended_properties");
    openapiFields.add("folder_path");
    openapiFields.add("owner");
    openapiFields.add("region");
    openapiFields.add("resolution_key");
    openapiFields.add("risk_level");
    openapiFields.add("size");
    openapiFields.add("state");
    openapiFields.add("storage_account");
    openapiFields.add("storage_host");
    openapiFields.add("storage_id");
    openapiFields.add("storage_ip");
    openapiFields.add("storage_name");
    openapiFields.add("storage_resources");
    openapiFields.add("storage_sub_type");
    openapiFields.add("storage_subscription");
    openapiFields.add("storage_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Assetsv3StorageVertex
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Assetsv3StorageVertex.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Assetsv3StorageVertex is not found in the empty JSON string", Assetsv3StorageVertex.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Assetsv3StorageVertex.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Assetsv3StorageVertex` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      // validate the optional field `criticality`
      if (jsonObj.get("criticality") != null && !jsonObj.get("criticality").isJsonNull()) {
        Assetsv3Level.validateJsonElement(jsonObj.get("criticality"));
      }
      if ((jsonObj.get("data_center") != null && !jsonObj.get("data_center").isJsonNull()) && !jsonObj.get("data_center").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data_center` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data_center").toString()));
      }
      if ((jsonObj.get("dns") != null && !jsonObj.get("dns").isJsonNull()) && !jsonObj.get("dns").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dns` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dns").toString()));
      }
      if (jsonObj.get("extended_properties") != null && !jsonObj.get("extended_properties").isJsonNull()) {
        JsonArray jsonArrayextendedProperties = jsonObj.getAsJsonArray("extended_properties");
        if (jsonArrayextendedProperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("extended_properties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `extended_properties` to be an array in the JSON string but got `%s`", jsonObj.get("extended_properties").toString()));
          }

          // validate the optional field `extended_properties` (array)
          for (int i = 0; i < jsonArrayextendedProperties.size(); i++) {
            Assetsv3CustomProperty.validateJsonElement(jsonArrayextendedProperties.get(i));
          };
        }
      }
      if ((jsonObj.get("folder_path") != null && !jsonObj.get("folder_path").isJsonNull()) && !jsonObj.get("folder_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `folder_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("folder_path").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull() && !jsonObj.get("owner").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner` to be an array in the JSON string but got `%s`", jsonObj.get("owner").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if ((jsonObj.get("resolution_key") != null && !jsonObj.get("resolution_key").isJsonNull()) && !jsonObj.get("resolution_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resolution_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resolution_key").toString()));
      }
      // validate the optional field `risk_level`
      if (jsonObj.get("risk_level") != null && !jsonObj.get("risk_level").isJsonNull()) {
        Assetsv3Level.validateJsonElement(jsonObj.get("risk_level"));
      }
      if ((jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) && !jsonObj.get("size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("size").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if (jsonObj.get("storage_account") != null && !jsonObj.get("storage_account").isJsonNull()) {
        JsonArray jsonArraystorageAccount = jsonObj.getAsJsonArray("storage_account");
        if (jsonArraystorageAccount != null) {
          // ensure the json data is an array
          if (!jsonObj.get("storage_account").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `storage_account` to be an array in the JSON string but got `%s`", jsonObj.get("storage_account").toString()));
          }

          // validate the optional field `storage_account` (array)
          for (int i = 0; i < jsonArraystorageAccount.size(); i++) {
            Assetsv3ConnectionEdge.validateJsonElement(jsonArraystorageAccount.get(i));
          };
        }
      }
      if (jsonObj.get("storage_host") != null && !jsonObj.get("storage_host").isJsonNull()) {
        JsonArray jsonArraystorageHost = jsonObj.getAsJsonArray("storage_host");
        if (jsonArraystorageHost != null) {
          // ensure the json data is an array
          if (!jsonObj.get("storage_host").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `storage_host` to be an array in the JSON string but got `%s`", jsonObj.get("storage_host").toString()));
          }

          // validate the optional field `storage_host` (array)
          for (int i = 0; i < jsonArraystorageHost.size(); i++) {
            Assetsv3ConnectionEdge.validateJsonElement(jsonArraystorageHost.get(i));
          };
        }
      }
      if ((jsonObj.get("storage_id") != null && !jsonObj.get("storage_id").isJsonNull()) && !jsonObj.get("storage_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storage_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storage_id").toString()));
      }
      if (jsonObj.get("storage_ip") != null && !jsonObj.get("storage_ip").isJsonNull()) {
        JsonArray jsonArraystorageIp = jsonObj.getAsJsonArray("storage_ip");
        if (jsonArraystorageIp != null) {
          // ensure the json data is an array
          if (!jsonObj.get("storage_ip").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `storage_ip` to be an array in the JSON string but got `%s`", jsonObj.get("storage_ip").toString()));
          }

          // validate the optional field `storage_ip` (array)
          for (int i = 0; i < jsonArraystorageIp.size(); i++) {
            Assetsv3ConnectionEdge.validateJsonElement(jsonArraystorageIp.get(i));
          };
        }
      }
      if ((jsonObj.get("storage_name") != null && !jsonObj.get("storage_name").isJsonNull()) && !jsonObj.get("storage_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storage_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storage_name").toString()));
      }
      if (jsonObj.get("storage_resources") != null && !jsonObj.get("storage_resources").isJsonNull()) {
        JsonArray jsonArraystorageResources = jsonObj.getAsJsonArray("storage_resources");
        if (jsonArraystorageResources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("storage_resources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `storage_resources` to be an array in the JSON string but got `%s`", jsonObj.get("storage_resources").toString()));
          }

          // validate the optional field `storage_resources` (array)
          for (int i = 0; i < jsonArraystorageResources.size(); i++) {
            Assetsv3ConnectionEdge.validateJsonElement(jsonArraystorageResources.get(i));
          };
        }
      }
      if ((jsonObj.get("storage_sub_type") != null && !jsonObj.get("storage_sub_type").isJsonNull()) && !jsonObj.get("storage_sub_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storage_sub_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storage_sub_type").toString()));
      }
      if (jsonObj.get("storage_subscription") != null && !jsonObj.get("storage_subscription").isJsonNull()) {
        JsonArray jsonArraystorageSubscription = jsonObj.getAsJsonArray("storage_subscription");
        if (jsonArraystorageSubscription != null) {
          // ensure the json data is an array
          if (!jsonObj.get("storage_subscription").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `storage_subscription` to be an array in the JSON string but got `%s`", jsonObj.get("storage_subscription").toString()));
          }

          // validate the optional field `storage_subscription` (array)
          for (int i = 0; i < jsonArraystorageSubscription.size(); i++) {
            Assetsv3ConnectionEdge.validateJsonElement(jsonArraystorageSubscription.get(i));
          };
        }
      }
      if ((jsonObj.get("storage_type") != null && !jsonObj.get("storage_type").isJsonNull()) && !jsonObj.get("storage_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storage_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storage_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Assetsv3StorageVertex.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Assetsv3StorageVertex' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Assetsv3StorageVertex> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Assetsv3StorageVertex.class));

       return (TypeAdapter<T>) new TypeAdapter<Assetsv3StorageVertex>() {
           @Override
           public void write(JsonWriter out, Assetsv3StorageVertex value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Assetsv3StorageVertex read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Assetsv3StorageVertex given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Assetsv3StorageVertex
  * @throws IOException if the JSON string is invalid with respect to Assetsv3StorageVertex
  */
  public static Assetsv3StorageVertex fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Assetsv3StorageVertex.class);
  }

 /**
  * Convert an instance of Assetsv3StorageVertex to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

