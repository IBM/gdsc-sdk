/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.security.guardium;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.security.guardium.Policybuilderv3ControlFlow;
import com.ibm.security.guardium.Policybuilderv3ImportIssue;
import com.ibm.security.guardium.Policybuilderv3ImportState;
import com.ibm.security.guardium.Policybuilderv3Policy;
import com.ibm.security.guardium.Policybuilderv3Rule;
import com.ibm.security.guardium.Policybuilderv3StatusResponseBase;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.security.JSON;

/**
 * Policy details response message.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-27T16:17:29.841502Z[UTC]", comments = "Generator version: 7.6.0")
public class Policybuilderv3GetPolicyDetailsResponse {
  public static final String SERIALIZED_NAME_ACTIVATION_STATUS = "activation_status";
  @SerializedName(SERIALIZED_NAME_ACTIVATION_STATUS)
  private Integer activationStatus;

  public static final String SERIALIZED_NAME_CONTROL_FLOW = "control_flow";
  @SerializedName(SERIALIZED_NAME_CONTROL_FLOW)
  private Policybuilderv3ControlFlow controlFlow = Policybuilderv3ControlFlow.STANDARD;

  public static final String SERIALIZED_NAME_INSTALLED_FLAG = "installed_flag";
  @SerializedName(SERIALIZED_NAME_INSTALLED_FLAG)
  private Boolean installedFlag;

  public static final String SERIALIZED_NAME_POLICY_IMPORT_ISSUE = "policy_import_issue";
  @SerializedName(SERIALIZED_NAME_POLICY_IMPORT_ISSUE)
  private Policybuilderv3ImportIssue policyImportIssue = Policybuilderv3ImportIssue.NO_IMPORT_ISSUE;

  public static final String SERIALIZED_NAME_POLICY_IMPORT_STATE = "policy_import_state";
  @SerializedName(SERIALIZED_NAME_POLICY_IMPORT_STATE)
  private Policybuilderv3ImportState policyImportState = Policybuilderv3ImportState.NO_IMPORT_STATUS;

  public static final String SERIALIZED_NAME_POLICY_INFO = "policy_info";
  @SerializedName(SERIALIZED_NAME_POLICY_INFO)
  private Policybuilderv3Policy policyInfo;

  public static final String SERIALIZED_NAME_POLICY_NAME = "policy_name";
  @SerializedName(SERIALIZED_NAME_POLICY_NAME)
  private String policyName;

  public static final String SERIALIZED_NAME_RULES = "rules";
  @SerializedName(SERIALIZED_NAME_RULES)
  private List<Policybuilderv3Rule> rules = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Policybuilderv3StatusResponseBase status;

  public Policybuilderv3GetPolicyDetailsResponse() {
  }

  public Policybuilderv3GetPolicyDetailsResponse activationStatus(Integer activationStatus) {
    this.activationStatus = activationStatus;
    return this;
  }

   /**
   * activation_status identifier: 1001 -&gt; install with no issues, 1002-&gt; installed with issues, 1003 -&gt; not installed.
   * @return activationStatus
  **/
  @javax.annotation.Nullable
  public Integer getActivationStatus() {
    return activationStatus;
  }

  public void setActivationStatus(Integer activationStatus) {
    this.activationStatus = activationStatus;
  }


  public Policybuilderv3GetPolicyDetailsResponse controlFlow(Policybuilderv3ControlFlow controlFlow) {
    this.controlFlow = controlFlow;
    return this;
  }

   /**
   * Get controlFlow
   * @return controlFlow
  **/
  @javax.annotation.Nullable
  public Policybuilderv3ControlFlow getControlFlow() {
    return controlFlow;
  }

  public void setControlFlow(Policybuilderv3ControlFlow controlFlow) {
    this.controlFlow = controlFlow;
  }


  public Policybuilderv3GetPolicyDetailsResponse installedFlag(Boolean installedFlag) {
    this.installedFlag = installedFlag;
    return this;
  }

   /**
   * Flag to indicate whether policy is installed or not.
   * @return installedFlag
  **/
  @javax.annotation.Nullable
  public Boolean getInstalledFlag() {
    return installedFlag;
  }

  public void setInstalledFlag(Boolean installedFlag) {
    this.installedFlag = installedFlag;
  }


  public Policybuilderv3GetPolicyDetailsResponse policyImportIssue(Policybuilderv3ImportIssue policyImportIssue) {
    this.policyImportIssue = policyImportIssue;
    return this;
  }

   /**
   * Get policyImportIssue
   * @return policyImportIssue
  **/
  @javax.annotation.Nullable
  public Policybuilderv3ImportIssue getPolicyImportIssue() {
    return policyImportIssue;
  }

  public void setPolicyImportIssue(Policybuilderv3ImportIssue policyImportIssue) {
    this.policyImportIssue = policyImportIssue;
  }


  public Policybuilderv3GetPolicyDetailsResponse policyImportState(Policybuilderv3ImportState policyImportState) {
    this.policyImportState = policyImportState;
    return this;
  }

   /**
   * Get policyImportState
   * @return policyImportState
  **/
  @javax.annotation.Nullable
  public Policybuilderv3ImportState getPolicyImportState() {
    return policyImportState;
  }

  public void setPolicyImportState(Policybuilderv3ImportState policyImportState) {
    this.policyImportState = policyImportState;
  }


  public Policybuilderv3GetPolicyDetailsResponse policyInfo(Policybuilderv3Policy policyInfo) {
    this.policyInfo = policyInfo;
    return this;
  }

   /**
   * Get policyInfo
   * @return policyInfo
  **/
  @javax.annotation.Nullable
  public Policybuilderv3Policy getPolicyInfo() {
    return policyInfo;
  }

  public void setPolicyInfo(Policybuilderv3Policy policyInfo) {
    this.policyInfo = policyInfo;
  }


  public Policybuilderv3GetPolicyDetailsResponse policyName(String policyName) {
    this.policyName = policyName;
    return this;
  }

   /**
   * Get policyName
   * @return policyName
  **/
  @javax.annotation.Nullable
  public String getPolicyName() {
    return policyName;
  }

  public void setPolicyName(String policyName) {
    this.policyName = policyName;
  }


  public Policybuilderv3GetPolicyDetailsResponse rules(List<Policybuilderv3Rule> rules) {
    this.rules = rules;
    return this;
  }

  public Policybuilderv3GetPolicyDetailsResponse addRulesItem(Policybuilderv3Rule rulesItem) {
    if (this.rules == null) {
      this.rules = new ArrayList<>();
    }
    this.rules.add(rulesItem);
    return this;
  }

   /**
   * Rules contained by the policy.
   * @return rules
  **/
  @javax.annotation.Nullable
  public List<Policybuilderv3Rule> getRules() {
    return rules;
  }

  public void setRules(List<Policybuilderv3Rule> rules) {
    this.rules = rules;
  }


  public Policybuilderv3GetPolicyDetailsResponse status(Policybuilderv3StatusResponseBase status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  public Policybuilderv3StatusResponseBase getStatus() {
    return status;
  }

  public void setStatus(Policybuilderv3StatusResponseBase status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Policybuilderv3GetPolicyDetailsResponse policybuilderv3GetPolicyDetailsResponse = (Policybuilderv3GetPolicyDetailsResponse) o;
    return Objects.equals(this.activationStatus, policybuilderv3GetPolicyDetailsResponse.activationStatus) &&
        Objects.equals(this.controlFlow, policybuilderv3GetPolicyDetailsResponse.controlFlow) &&
        Objects.equals(this.installedFlag, policybuilderv3GetPolicyDetailsResponse.installedFlag) &&
        Objects.equals(this.policyImportIssue, policybuilderv3GetPolicyDetailsResponse.policyImportIssue) &&
        Objects.equals(this.policyImportState, policybuilderv3GetPolicyDetailsResponse.policyImportState) &&
        Objects.equals(this.policyInfo, policybuilderv3GetPolicyDetailsResponse.policyInfo) &&
        Objects.equals(this.policyName, policybuilderv3GetPolicyDetailsResponse.policyName) &&
        Objects.equals(this.rules, policybuilderv3GetPolicyDetailsResponse.rules) &&
        Objects.equals(this.status, policybuilderv3GetPolicyDetailsResponse.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activationStatus, controlFlow, installedFlag, policyImportIssue, policyImportState, policyInfo, policyName, rules, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Policybuilderv3GetPolicyDetailsResponse {\n");
    sb.append("    activationStatus: ").append(toIndentedString(activationStatus)).append("\n");
    sb.append("    controlFlow: ").append(toIndentedString(controlFlow)).append("\n");
    sb.append("    installedFlag: ").append(toIndentedString(installedFlag)).append("\n");
    sb.append("    policyImportIssue: ").append(toIndentedString(policyImportIssue)).append("\n");
    sb.append("    policyImportState: ").append(toIndentedString(policyImportState)).append("\n");
    sb.append("    policyInfo: ").append(toIndentedString(policyInfo)).append("\n");
    sb.append("    policyName: ").append(toIndentedString(policyName)).append("\n");
    sb.append("    rules: ").append(toIndentedString(rules)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activation_status");
    openapiFields.add("control_flow");
    openapiFields.add("installed_flag");
    openapiFields.add("policy_import_issue");
    openapiFields.add("policy_import_state");
    openapiFields.add("policy_info");
    openapiFields.add("policy_name");
    openapiFields.add("rules");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Policybuilderv3GetPolicyDetailsResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Policybuilderv3GetPolicyDetailsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Policybuilderv3GetPolicyDetailsResponse is not found in the empty JSON string", Policybuilderv3GetPolicyDetailsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Policybuilderv3GetPolicyDetailsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Policybuilderv3GetPolicyDetailsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `control_flow`
      if (jsonObj.get("control_flow") != null && !jsonObj.get("control_flow").isJsonNull()) {
        Policybuilderv3ControlFlow.validateJsonElement(jsonObj.get("control_flow"));
      }
      // validate the optional field `policy_import_issue`
      if (jsonObj.get("policy_import_issue") != null && !jsonObj.get("policy_import_issue").isJsonNull()) {
        Policybuilderv3ImportIssue.validateJsonElement(jsonObj.get("policy_import_issue"));
      }
      // validate the optional field `policy_import_state`
      if (jsonObj.get("policy_import_state") != null && !jsonObj.get("policy_import_state").isJsonNull()) {
        Policybuilderv3ImportState.validateJsonElement(jsonObj.get("policy_import_state"));
      }
      // validate the optional field `policy_info`
      if (jsonObj.get("policy_info") != null && !jsonObj.get("policy_info").isJsonNull()) {
        Policybuilderv3Policy.validateJsonElement(jsonObj.get("policy_info"));
      }
      if ((jsonObj.get("policy_name") != null && !jsonObj.get("policy_name").isJsonNull()) && !jsonObj.get("policy_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policy_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policy_name").toString()));
      }
      if (jsonObj.get("rules") != null && !jsonObj.get("rules").isJsonNull()) {
        JsonArray jsonArrayrules = jsonObj.getAsJsonArray("rules");
        if (jsonArrayrules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rules` to be an array in the JSON string but got `%s`", jsonObj.get("rules").toString()));
          }

          // validate the optional field `rules` (array)
          for (int i = 0; i < jsonArrayrules.size(); i++) {
            Policybuilderv3Rule.validateJsonElement(jsonArrayrules.get(i));
          };
        }
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        Policybuilderv3StatusResponseBase.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Policybuilderv3GetPolicyDetailsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Policybuilderv3GetPolicyDetailsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Policybuilderv3GetPolicyDetailsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Policybuilderv3GetPolicyDetailsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<Policybuilderv3GetPolicyDetailsResponse>() {
           @Override
           public void write(JsonWriter out, Policybuilderv3GetPolicyDetailsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Policybuilderv3GetPolicyDetailsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Policybuilderv3GetPolicyDetailsResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Policybuilderv3GetPolicyDetailsResponse
  * @throws IOException if the JSON string is invalid with respect to Policybuilderv3GetPolicyDetailsResponse
  */
  public static Policybuilderv3GetPolicyDetailsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Policybuilderv3GetPolicyDetailsResponse.class);
  }

 /**
  * Convert an instance of Policybuilderv3GetPolicyDetailsResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

