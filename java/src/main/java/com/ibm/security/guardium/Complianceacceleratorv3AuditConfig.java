/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.security.guardium;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.security.guardium.Complianceacceleratorv3AuditScheduler;
import com.ibm.security.guardium.Schedulerv3Recipient;
import com.ibm.security.guardium.Schedulerv3ScheduledTask;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.security.JSON;

/**
 * Audit scheduling configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-27T16:17:29.841502Z[UTC]", comments = "Generator version: 7.6.0")
public class Complianceacceleratorv3AuditConfig {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INSTRUCTIONS = "instructions";
  @SerializedName(SERIALIZED_NAME_INSTRUCTIONS)
  private String instructions;

  public static final String SERIALIZED_NAME_IS_DELETION = "is_deletion";
  @SerializedName(SERIALIZED_NAME_IS_DELETION)
  private Boolean isDeletion;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private Schedulerv3Recipient owner;

  public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  private List<Schedulerv3Recipient> recipients = new ArrayList<>();

  public static final String SERIALIZED_NAME_REPORT_KEY = "report_key";
  @SerializedName(SERIALIZED_NAME_REPORT_KEY)
  private String reportKey;

  public static final String SERIALIZED_NAME_RUN_ONCE_NOW = "run_once_now";
  @SerializedName(SERIALIZED_NAME_RUN_ONCE_NOW)
  private Boolean runOnceNow;

  public static final String SERIALIZED_NAME_SCHEDULER = "scheduler";
  @SerializedName(SERIALIZED_NAME_SCHEDULER)
  private Complianceacceleratorv3AuditScheduler scheduler;

  public static final String SERIALIZED_NAME_TASKS = "tasks";
  @SerializedName(SERIALIZED_NAME_TASKS)
  private List<Schedulerv3ScheduledTask> tasks = new ArrayList<>();

  public Complianceacceleratorv3AuditConfig() {
  }

  public Complianceacceleratorv3AuditConfig description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Audit description.
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Complianceacceleratorv3AuditConfig enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * If audit is enabled to run.
   * @return enabled
  **/
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public Complianceacceleratorv3AuditConfig id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Audit id.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Complianceacceleratorv3AuditConfig instructions(String instructions) {
    this.instructions = instructions;
    return this;
  }

   /**
   * Audit instructions.
   * @return instructions
  **/
  @javax.annotation.Nullable
  public String getInstructions() {
    return instructions;
  }

  public void setInstructions(String instructions) {
    this.instructions = instructions;
  }


  public Complianceacceleratorv3AuditConfig isDeletion(Boolean isDeletion) {
    this.isDeletion = isDeletion;
    return this;
  }

   /**
   * Delete flag.
   * @return isDeletion
  **/
  @javax.annotation.Nullable
  public Boolean getIsDeletion() {
    return isDeletion;
  }

  public void setIsDeletion(Boolean isDeletion) {
    this.isDeletion = isDeletion;
  }


  public Complianceacceleratorv3AuditConfig name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Audit name.
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Complianceacceleratorv3AuditConfig owner(Schedulerv3Recipient owner) {
    this.owner = owner;
    return this;
  }

   /**
   * Get owner
   * @return owner
  **/
  @javax.annotation.Nullable
  public Schedulerv3Recipient getOwner() {
    return owner;
  }

  public void setOwner(Schedulerv3Recipient owner) {
    this.owner = owner;
  }


  public Complianceacceleratorv3AuditConfig recipients(List<Schedulerv3Recipient> recipients) {
    this.recipients = recipients;
    return this;
  }

  public Complianceacceleratorv3AuditConfig addRecipientsItem(Schedulerv3Recipient recipientsItem) {
    if (this.recipients == null) {
      this.recipients = new ArrayList<>();
    }
    this.recipients.add(recipientsItem);
    return this;
  }

   /**
   * Recepients.
   * @return recipients
  **/
  @javax.annotation.Nullable
  public List<Schedulerv3Recipient> getRecipients() {
    return recipients;
  }

  public void setRecipients(List<Schedulerv3Recipient> recipients) {
    this.recipients = recipients;
  }


  public Complianceacceleratorv3AuditConfig reportKey(String reportKey) {
    this.reportKey = reportKey;
    return this;
  }

   /**
   * Which reports set will be used.
   * @return reportKey
  **/
  @javax.annotation.Nullable
  public String getReportKey() {
    return reportKey;
  }

  public void setReportKey(String reportKey) {
    this.reportKey = reportKey;
  }


  public Complianceacceleratorv3AuditConfig runOnceNow(Boolean runOnceNow) {
    this.runOnceNow = runOnceNow;
    return this;
  }

   /**
   * Flag if run once right away.
   * @return runOnceNow
  **/
  @javax.annotation.Nullable
  public Boolean getRunOnceNow() {
    return runOnceNow;
  }

  public void setRunOnceNow(Boolean runOnceNow) {
    this.runOnceNow = runOnceNow;
  }


  public Complianceacceleratorv3AuditConfig scheduler(Complianceacceleratorv3AuditScheduler scheduler) {
    this.scheduler = scheduler;
    return this;
  }

   /**
   * Get scheduler
   * @return scheduler
  **/
  @javax.annotation.Nullable
  public Complianceacceleratorv3AuditScheduler getScheduler() {
    return scheduler;
  }

  public void setScheduler(Complianceacceleratorv3AuditScheduler scheduler) {
    this.scheduler = scheduler;
  }


  public Complianceacceleratorv3AuditConfig tasks(List<Schedulerv3ScheduledTask> tasks) {
    this.tasks = tasks;
    return this;
  }

  public Complianceacceleratorv3AuditConfig addTasksItem(Schedulerv3ScheduledTask tasksItem) {
    if (this.tasks == null) {
      this.tasks = new ArrayList<>();
    }
    this.tasks.add(tasksItem);
    return this;
  }

   /**
   * Array of tasks.
   * @return tasks
  **/
  @javax.annotation.Nullable
  public List<Schedulerv3ScheduledTask> getTasks() {
    return tasks;
  }

  public void setTasks(List<Schedulerv3ScheduledTask> tasks) {
    this.tasks = tasks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Complianceacceleratorv3AuditConfig complianceacceleratorv3AuditConfig = (Complianceacceleratorv3AuditConfig) o;
    return Objects.equals(this.description, complianceacceleratorv3AuditConfig.description) &&
        Objects.equals(this.enabled, complianceacceleratorv3AuditConfig.enabled) &&
        Objects.equals(this.id, complianceacceleratorv3AuditConfig.id) &&
        Objects.equals(this.instructions, complianceacceleratorv3AuditConfig.instructions) &&
        Objects.equals(this.isDeletion, complianceacceleratorv3AuditConfig.isDeletion) &&
        Objects.equals(this.name, complianceacceleratorv3AuditConfig.name) &&
        Objects.equals(this.owner, complianceacceleratorv3AuditConfig.owner) &&
        Objects.equals(this.recipients, complianceacceleratorv3AuditConfig.recipients) &&
        Objects.equals(this.reportKey, complianceacceleratorv3AuditConfig.reportKey) &&
        Objects.equals(this.runOnceNow, complianceacceleratorv3AuditConfig.runOnceNow) &&
        Objects.equals(this.scheduler, complianceacceleratorv3AuditConfig.scheduler) &&
        Objects.equals(this.tasks, complianceacceleratorv3AuditConfig.tasks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, enabled, id, instructions, isDeletion, name, owner, recipients, reportKey, runOnceNow, scheduler, tasks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Complianceacceleratorv3AuditConfig {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    instructions: ").append(toIndentedString(instructions)).append("\n");
    sb.append("    isDeletion: ").append(toIndentedString(isDeletion)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    reportKey: ").append(toIndentedString(reportKey)).append("\n");
    sb.append("    runOnceNow: ").append(toIndentedString(runOnceNow)).append("\n");
    sb.append("    scheduler: ").append(toIndentedString(scheduler)).append("\n");
    sb.append("    tasks: ").append(toIndentedString(tasks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("enabled");
    openapiFields.add("id");
    openapiFields.add("instructions");
    openapiFields.add("is_deletion");
    openapiFields.add("name");
    openapiFields.add("owner");
    openapiFields.add("recipients");
    openapiFields.add("report_key");
    openapiFields.add("run_once_now");
    openapiFields.add("scheduler");
    openapiFields.add("tasks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Complianceacceleratorv3AuditConfig
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Complianceacceleratorv3AuditConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Complianceacceleratorv3AuditConfig is not found in the empty JSON string", Complianceacceleratorv3AuditConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Complianceacceleratorv3AuditConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Complianceacceleratorv3AuditConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("instructions") != null && !jsonObj.get("instructions").isJsonNull()) && !jsonObj.get("instructions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instructions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instructions").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `owner`
      if (jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) {
        Schedulerv3Recipient.validateJsonElement(jsonObj.get("owner"));
      }
      if (jsonObj.get("recipients") != null && !jsonObj.get("recipients").isJsonNull()) {
        JsonArray jsonArrayrecipients = jsonObj.getAsJsonArray("recipients");
        if (jsonArrayrecipients != null) {
          // ensure the json data is an array
          if (!jsonObj.get("recipients").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `recipients` to be an array in the JSON string but got `%s`", jsonObj.get("recipients").toString()));
          }

          // validate the optional field `recipients` (array)
          for (int i = 0; i < jsonArrayrecipients.size(); i++) {
            Schedulerv3Recipient.validateJsonElement(jsonArrayrecipients.get(i));
          };
        }
      }
      if ((jsonObj.get("report_key") != null && !jsonObj.get("report_key").isJsonNull()) && !jsonObj.get("report_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `report_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("report_key").toString()));
      }
      // validate the optional field `scheduler`
      if (jsonObj.get("scheduler") != null && !jsonObj.get("scheduler").isJsonNull()) {
        Complianceacceleratorv3AuditScheduler.validateJsonElement(jsonObj.get("scheduler"));
      }
      if (jsonObj.get("tasks") != null && !jsonObj.get("tasks").isJsonNull()) {
        JsonArray jsonArraytasks = jsonObj.getAsJsonArray("tasks");
        if (jsonArraytasks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tasks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tasks` to be an array in the JSON string but got `%s`", jsonObj.get("tasks").toString()));
          }

          // validate the optional field `tasks` (array)
          for (int i = 0; i < jsonArraytasks.size(); i++) {
            Schedulerv3ScheduledTask.validateJsonElement(jsonArraytasks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Complianceacceleratorv3AuditConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Complianceacceleratorv3AuditConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Complianceacceleratorv3AuditConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Complianceacceleratorv3AuditConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<Complianceacceleratorv3AuditConfig>() {
           @Override
           public void write(JsonWriter out, Complianceacceleratorv3AuditConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Complianceacceleratorv3AuditConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Complianceacceleratorv3AuditConfig given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Complianceacceleratorv3AuditConfig
  * @throws IOException if the JSON string is invalid with respect to Complianceacceleratorv3AuditConfig
  */
  public static Complianceacceleratorv3AuditConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Complianceacceleratorv3AuditConfig.class);
  }

 /**
  * Convert an instance of Complianceacceleratorv3AuditConfig to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

