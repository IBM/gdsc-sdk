/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.security.guardium;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.security.guardium.Reportsv3DateRange;
import com.ibm.security.guardium.Reportsv3JobType;
import com.ibm.security.guardium.Reportsv3ModelType;
import com.ibm.security.guardium.Reportsv3ReportHeader;
import com.ibm.security.guardium.Reportsv3SqlType;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.security.JSON;

/**
 * GetQueryByReportIDRequest is the argument of the GetQueryByReportID() api.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-24T18:44:53.377644Z[UTC]", comments = "Generator version: 7.6.0")
public class Reportsv3GetQueryByReportIDRequest {
  public static final String SERIALIZED_NAME_ADD_GROUP_LITERAL = "add_group_literal";
  @SerializedName(SERIALIZED_NAME_ADD_GROUP_LITERAL)
  private String addGroupLiteral;

  public static final String SERIALIZED_NAME_ADD_JOB_ID_LITERAL = "add_job_id_literal";
  @SerializedName(SERIALIZED_NAME_ADD_JOB_ID_LITERAL)
  private String addJobIdLiteral;

  public static final String SERIALIZED_NAME_DATE_RANGE = "date_range";
  @SerializedName(SERIALIZED_NAME_DATE_RANGE)
  private Reportsv3DateRange dateRange;

  public static final String SERIALIZED_NAME_DEFAULT_CHART_EXPANDED = "default_chart_expanded";
  @SerializedName(SERIALIZED_NAME_DEFAULT_CHART_EXPANDED)
  private Boolean defaultChartExpanded;

  public static final String SERIALIZED_NAME_EXCLUDE_GROUP_ID = "exclude_group_id";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_GROUP_ID)
  private String excludeGroupId;

  public static final String SERIALIZED_NAME_FACET_SELECTED_HEADER = "facet_selected_header";
  @SerializedName(SERIALIZED_NAME_FACET_SELECTED_HEADER)
  private Reportsv3ReportHeader facetSelectedHeader;

  public static final String SERIALIZED_NAME_FILTER_FOR_JOB_ID = "filter_for_job_id";
  @SerializedName(SERIALIZED_NAME_FILTER_FOR_JOB_ID)
  private String filterForJobId;

  public static final String SERIALIZED_NAME_JOB_TYPE = "job_type";
  @SerializedName(SERIALIZED_NAME_JOB_TYPE)
  private Reportsv3JobType jobType = Reportsv3JobType.UNDEFINED_JOB_TYPE;

  public static final String SERIALIZED_NAME_MODEL_TYPES = "model_types";
  @SerializedName(SERIALIZED_NAME_MODEL_TYPES)
  private List<Reportsv3ModelType> modelTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_REPORT_ID = "report_id";
  @SerializedName(SERIALIZED_NAME_REPORT_ID)
  private String reportId;

  public static final String SERIALIZED_NAME_SQL_TYPE = "sql_type";
  @SerializedName(SERIALIZED_NAME_SQL_TYPE)
  private Reportsv3SqlType sqlType = Reportsv3SqlType.UNDEFINED_SQL_TYPE;

  public static final String SERIALIZED_NAME_TABLE_JOIN_OPTIMIZATION = "table_join_optimization";
  @SerializedName(SERIALIZED_NAME_TABLE_JOIN_OPTIMIZATION)
  private Boolean tableJoinOptimization;

  public Reportsv3GetQueryByReportIDRequest() {
  }

  public Reportsv3GetQueryByReportIDRequest addGroupLiteral(String addGroupLiteral) {
    this.addGroupLiteral = addGroupLiteral;
    return this;
  }

   /**
   * Get addGroupLiteral
   * @return addGroupLiteral
  **/
  @javax.annotation.Nullable
  public String getAddGroupLiteral() {
    return addGroupLiteral;
  }

  public void setAddGroupLiteral(String addGroupLiteral) {
    this.addGroupLiteral = addGroupLiteral;
  }


  public Reportsv3GetQueryByReportIDRequest addJobIdLiteral(String addJobIdLiteral) {
    this.addJobIdLiteral = addJobIdLiteral;
    return this;
  }

   /**
   * Get addJobIdLiteral
   * @return addJobIdLiteral
  **/
  @javax.annotation.Nullable
  public String getAddJobIdLiteral() {
    return addJobIdLiteral;
  }

  public void setAddJobIdLiteral(String addJobIdLiteral) {
    this.addJobIdLiteral = addJobIdLiteral;
  }


  public Reportsv3GetQueryByReportIDRequest dateRange(Reportsv3DateRange dateRange) {
    this.dateRange = dateRange;
    return this;
  }

   /**
   * Get dateRange
   * @return dateRange
  **/
  @javax.annotation.Nullable
  public Reportsv3DateRange getDateRange() {
    return dateRange;
  }

  public void setDateRange(Reportsv3DateRange dateRange) {
    this.dateRange = dateRange;
  }


  public Reportsv3GetQueryByReportIDRequest defaultChartExpanded(Boolean defaultChartExpanded) {
    this.defaultChartExpanded = defaultChartExpanded;
    return this;
  }

   /**
   * Optional: if report has chart -send  default_chart_expanded be saved in user settings collection per report and user.
   * @return defaultChartExpanded
  **/
  @javax.annotation.Nullable
  public Boolean getDefaultChartExpanded() {
    return defaultChartExpanded;
  }

  public void setDefaultChartExpanded(Boolean defaultChartExpanded) {
    this.defaultChartExpanded = defaultChartExpanded;
  }


  public Reportsv3GetQueryByReportIDRequest excludeGroupId(String excludeGroupId) {
    this.excludeGroupId = excludeGroupId;
    return this;
  }

   /**
   * Get excludeGroupId
   * @return excludeGroupId
  **/
  @javax.annotation.Nullable
  public String getExcludeGroupId() {
    return excludeGroupId;
  }

  public void setExcludeGroupId(String excludeGroupId) {
    this.excludeGroupId = excludeGroupId;
  }


  public Reportsv3GetQueryByReportIDRequest facetSelectedHeader(Reportsv3ReportHeader facetSelectedHeader) {
    this.facetSelectedHeader = facetSelectedHeader;
    return this;
  }

   /**
   * Get facetSelectedHeader
   * @return facetSelectedHeader
  **/
  @javax.annotation.Nullable
  public Reportsv3ReportHeader getFacetSelectedHeader() {
    return facetSelectedHeader;
  }

  public void setFacetSelectedHeader(Reportsv3ReportHeader facetSelectedHeader) {
    this.facetSelectedHeader = facetSelectedHeader;
  }


  public Reportsv3GetQueryByReportIDRequest filterForJobId(String filterForJobId) {
    this.filterForJobId = filterForJobId;
    return this;
  }

   /**
   * Get filterForJobId
   * @return filterForJobId
  **/
  @javax.annotation.Nullable
  public String getFilterForJobId() {
    return filterForJobId;
  }

  public void setFilterForJobId(String filterForJobId) {
    this.filterForJobId = filterForJobId;
  }


  public Reportsv3GetQueryByReportIDRequest jobType(Reportsv3JobType jobType) {
    this.jobType = jobType;
    return this;
  }

   /**
   * Get jobType
   * @return jobType
  **/
  @javax.annotation.Nullable
  public Reportsv3JobType getJobType() {
    return jobType;
  }

  public void setJobType(Reportsv3JobType jobType) {
    this.jobType = jobType;
  }


  public Reportsv3GetQueryByReportIDRequest modelTypes(List<Reportsv3ModelType> modelTypes) {
    this.modelTypes = modelTypes;
    return this;
  }

  public Reportsv3GetQueryByReportIDRequest addModelTypesItem(Reportsv3ModelType modelTypesItem) {
    if (this.modelTypes == null) {
      this.modelTypes = new ArrayList<>();
    }
    this.modelTypes.add(modelTypesItem);
    return this;
  }

   /**
   * Get modelTypes
   * @return modelTypes
  **/
  @javax.annotation.Nullable
  public List<Reportsv3ModelType> getModelTypes() {
    return modelTypes;
  }

  public void setModelTypes(List<Reportsv3ModelType> modelTypes) {
    this.modelTypes = modelTypes;
  }


  public Reportsv3GetQueryByReportIDRequest reportId(String reportId) {
    this.reportId = reportId;
    return this;
  }

   /**
   * The id of the Report we wish to run.
   * @return reportId
  **/
  @javax.annotation.Nullable
  public String getReportId() {
    return reportId;
  }

  public void setReportId(String reportId) {
    this.reportId = reportId;
  }


  public Reportsv3GetQueryByReportIDRequest sqlType(Reportsv3SqlType sqlType) {
    this.sqlType = sqlType;
    return this;
  }

   /**
   * Get sqlType
   * @return sqlType
  **/
  @javax.annotation.Nullable
  public Reportsv3SqlType getSqlType() {
    return sqlType;
  }

  public void setSqlType(Reportsv3SqlType sqlType) {
    this.sqlType = sqlType;
  }


  public Reportsv3GetQueryByReportIDRequest tableJoinOptimization(Boolean tableJoinOptimization) {
    this.tableJoinOptimization = tableJoinOptimization;
    return this;
  }

   /**
   * Optional: disable or enable the table join optimization.
   * @return tableJoinOptimization
  **/
  @javax.annotation.Nullable
  public Boolean getTableJoinOptimization() {
    return tableJoinOptimization;
  }

  public void setTableJoinOptimization(Boolean tableJoinOptimization) {
    this.tableJoinOptimization = tableJoinOptimization;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Reportsv3GetQueryByReportIDRequest reportsv3GetQueryByReportIDRequest = (Reportsv3GetQueryByReportIDRequest) o;
    return Objects.equals(this.addGroupLiteral, reportsv3GetQueryByReportIDRequest.addGroupLiteral) &&
        Objects.equals(this.addJobIdLiteral, reportsv3GetQueryByReportIDRequest.addJobIdLiteral) &&
        Objects.equals(this.dateRange, reportsv3GetQueryByReportIDRequest.dateRange) &&
        Objects.equals(this.defaultChartExpanded, reportsv3GetQueryByReportIDRequest.defaultChartExpanded) &&
        Objects.equals(this.excludeGroupId, reportsv3GetQueryByReportIDRequest.excludeGroupId) &&
        Objects.equals(this.facetSelectedHeader, reportsv3GetQueryByReportIDRequest.facetSelectedHeader) &&
        Objects.equals(this.filterForJobId, reportsv3GetQueryByReportIDRequest.filterForJobId) &&
        Objects.equals(this.jobType, reportsv3GetQueryByReportIDRequest.jobType) &&
        Objects.equals(this.modelTypes, reportsv3GetQueryByReportIDRequest.modelTypes) &&
        Objects.equals(this.reportId, reportsv3GetQueryByReportIDRequest.reportId) &&
        Objects.equals(this.sqlType, reportsv3GetQueryByReportIDRequest.sqlType) &&
        Objects.equals(this.tableJoinOptimization, reportsv3GetQueryByReportIDRequest.tableJoinOptimization);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addGroupLiteral, addJobIdLiteral, dateRange, defaultChartExpanded, excludeGroupId, facetSelectedHeader, filterForJobId, jobType, modelTypes, reportId, sqlType, tableJoinOptimization);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Reportsv3GetQueryByReportIDRequest {\n");
    sb.append("    addGroupLiteral: ").append(toIndentedString(addGroupLiteral)).append("\n");
    sb.append("    addJobIdLiteral: ").append(toIndentedString(addJobIdLiteral)).append("\n");
    sb.append("    dateRange: ").append(toIndentedString(dateRange)).append("\n");
    sb.append("    defaultChartExpanded: ").append(toIndentedString(defaultChartExpanded)).append("\n");
    sb.append("    excludeGroupId: ").append(toIndentedString(excludeGroupId)).append("\n");
    sb.append("    facetSelectedHeader: ").append(toIndentedString(facetSelectedHeader)).append("\n");
    sb.append("    filterForJobId: ").append(toIndentedString(filterForJobId)).append("\n");
    sb.append("    jobType: ").append(toIndentedString(jobType)).append("\n");
    sb.append("    modelTypes: ").append(toIndentedString(modelTypes)).append("\n");
    sb.append("    reportId: ").append(toIndentedString(reportId)).append("\n");
    sb.append("    sqlType: ").append(toIndentedString(sqlType)).append("\n");
    sb.append("    tableJoinOptimization: ").append(toIndentedString(tableJoinOptimization)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("add_group_literal");
    openapiFields.add("add_job_id_literal");
    openapiFields.add("date_range");
    openapiFields.add("default_chart_expanded");
    openapiFields.add("exclude_group_id");
    openapiFields.add("facet_selected_header");
    openapiFields.add("filter_for_job_id");
    openapiFields.add("job_type");
    openapiFields.add("model_types");
    openapiFields.add("report_id");
    openapiFields.add("sql_type");
    openapiFields.add("table_join_optimization");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Reportsv3GetQueryByReportIDRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Reportsv3GetQueryByReportIDRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Reportsv3GetQueryByReportIDRequest is not found in the empty JSON string", Reportsv3GetQueryByReportIDRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Reportsv3GetQueryByReportIDRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Reportsv3GetQueryByReportIDRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("add_group_literal") != null && !jsonObj.get("add_group_literal").isJsonNull()) && !jsonObj.get("add_group_literal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `add_group_literal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("add_group_literal").toString()));
      }
      if ((jsonObj.get("add_job_id_literal") != null && !jsonObj.get("add_job_id_literal").isJsonNull()) && !jsonObj.get("add_job_id_literal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `add_job_id_literal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("add_job_id_literal").toString()));
      }
      // validate the optional field `date_range`
      if (jsonObj.get("date_range") != null && !jsonObj.get("date_range").isJsonNull()) {
        Reportsv3DateRange.validateJsonElement(jsonObj.get("date_range"));
      }
      if ((jsonObj.get("exclude_group_id") != null && !jsonObj.get("exclude_group_id").isJsonNull()) && !jsonObj.get("exclude_group_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exclude_group_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exclude_group_id").toString()));
      }
      // validate the optional field `facet_selected_header`
      if (jsonObj.get("facet_selected_header") != null && !jsonObj.get("facet_selected_header").isJsonNull()) {
        Reportsv3ReportHeader.validateJsonElement(jsonObj.get("facet_selected_header"));
      }
      if ((jsonObj.get("filter_for_job_id") != null && !jsonObj.get("filter_for_job_id").isJsonNull()) && !jsonObj.get("filter_for_job_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter_for_job_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter_for_job_id").toString()));
      }
      // validate the optional field `job_type`
      if (jsonObj.get("job_type") != null && !jsonObj.get("job_type").isJsonNull()) {
        Reportsv3JobType.validateJsonElement(jsonObj.get("job_type"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("model_types") != null && !jsonObj.get("model_types").isJsonNull() && !jsonObj.get("model_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `model_types` to be an array in the JSON string but got `%s`", jsonObj.get("model_types").toString()));
      }
      if ((jsonObj.get("report_id") != null && !jsonObj.get("report_id").isJsonNull()) && !jsonObj.get("report_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `report_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("report_id").toString()));
      }
      // validate the optional field `sql_type`
      if (jsonObj.get("sql_type") != null && !jsonObj.get("sql_type").isJsonNull()) {
        Reportsv3SqlType.validateJsonElement(jsonObj.get("sql_type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Reportsv3GetQueryByReportIDRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Reportsv3GetQueryByReportIDRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Reportsv3GetQueryByReportIDRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Reportsv3GetQueryByReportIDRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<Reportsv3GetQueryByReportIDRequest>() {
           @Override
           public void write(JsonWriter out, Reportsv3GetQueryByReportIDRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Reportsv3GetQueryByReportIDRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Reportsv3GetQueryByReportIDRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Reportsv3GetQueryByReportIDRequest
  * @throws IOException if the JSON string is invalid with respect to Reportsv3GetQueryByReportIDRequest
  */
  public static Reportsv3GetQueryByReportIDRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Reportsv3GetQueryByReportIDRequest.class);
  }

 /**
  * Convert an instance of Reportsv3GetQueryByReportIDRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

