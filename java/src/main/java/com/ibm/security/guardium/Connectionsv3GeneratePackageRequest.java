/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.security.guardium;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.security.guardium.Connectionsv3PluginRecord;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.security.JSON;

/**
 * Connectionsv3GeneratePackageRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-27T16:17:29.841502Z[UTC]", comments = "Generator version: 7.6.0")
public class Connectionsv3GeneratePackageRequest {
  public static final String SERIALIZED_NAME_DATASOURCE_TYPE = "datasource_type";
  @SerializedName(SERIALIZED_NAME_DATASOURCE_TYPE)
  private String datasourceType;

  public static final String SERIALIZED_NAME_DEVELOPER_NAME = "developer_name";
  @SerializedName(SERIALIZED_NAME_DEVELOPER_NAME)
  private String developerName;

  public static final String SERIALIZED_NAME_DOCUMENT_LINK = "document_link";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_LINK)
  private String documentLink;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOGFILE = "logfile";
  @SerializedName(SERIALIZED_NAME_LOGFILE)
  private String logfile;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_README = "readme";
  @SerializedName(SERIALIZED_NAME_README)
  private String readme;

  public static final String SERIALIZED_NAME_RECORDS = "records";
  @SerializedName(SERIALIZED_NAME_RECORDS)
  private List<Connectionsv3PluginRecord> records = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_SUPPORTED_INPUTS = "supported_inputs";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_INPUTS)
  private List<String> supportedInputs = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public static final String SERIALIZED_NAME_VERSION_TESTED = "version_tested";
  @SerializedName(SERIALIZED_NAME_VERSION_TESTED)
  private String versionTested;

  public Connectionsv3GeneratePackageRequest() {
  }

  public Connectionsv3GeneratePackageRequest datasourceType(String datasourceType) {
    this.datasourceType = datasourceType;
    return this;
  }

   /**
   * Get datasourceType
   * @return datasourceType
  **/
  @javax.annotation.Nullable
  public String getDatasourceType() {
    return datasourceType;
  }

  public void setDatasourceType(String datasourceType) {
    this.datasourceType = datasourceType;
  }


  public Connectionsv3GeneratePackageRequest developerName(String developerName) {
    this.developerName = developerName;
    return this;
  }

   /**
   * Get developerName
   * @return developerName
  **/
  @javax.annotation.Nullable
  public String getDeveloperName() {
    return developerName;
  }

  public void setDeveloperName(String developerName) {
    this.developerName = developerName;
  }


  public Connectionsv3GeneratePackageRequest documentLink(String documentLink) {
    this.documentLink = documentLink;
    return this;
  }

   /**
   * Get documentLink
   * @return documentLink
  **/
  @javax.annotation.Nullable
  public String getDocumentLink() {
    return documentLink;
  }

  public void setDocumentLink(String documentLink) {
    this.documentLink = documentLink;
  }


  public Connectionsv3GeneratePackageRequest id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Connectionsv3GeneratePackageRequest logfile(String logfile) {
    this.logfile = logfile;
    return this;
  }

   /**
   * Get logfile
   * @return logfile
  **/
  @javax.annotation.Nullable
  public String getLogfile() {
    return logfile;
  }

  public void setLogfile(String logfile) {
    this.logfile = logfile;
  }


  public Connectionsv3GeneratePackageRequest name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Connectionsv3GeneratePackageRequest readme(String readme) {
    this.readme = readme;
    return this;
  }

   /**
   * Get readme
   * @return readme
  **/
  @javax.annotation.Nullable
  public String getReadme() {
    return readme;
  }

  public void setReadme(String readme) {
    this.readme = readme;
  }


  public Connectionsv3GeneratePackageRequest records(List<Connectionsv3PluginRecord> records) {
    this.records = records;
    return this;
  }

  public Connectionsv3GeneratePackageRequest addRecordsItem(Connectionsv3PluginRecord recordsItem) {
    if (this.records == null) {
      this.records = new ArrayList<>();
    }
    this.records.add(recordsItem);
    return this;
  }

   /**
   * Get records
   * @return records
  **/
  @javax.annotation.Nullable
  public List<Connectionsv3PluginRecord> getRecords() {
    return records;
  }

  public void setRecords(List<Connectionsv3PluginRecord> records) {
    this.records = records;
  }


  public Connectionsv3GeneratePackageRequest state(String state) {
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public Connectionsv3GeneratePackageRequest supportedInputs(List<String> supportedInputs) {
    this.supportedInputs = supportedInputs;
    return this;
  }

  public Connectionsv3GeneratePackageRequest addSupportedInputsItem(String supportedInputsItem) {
    if (this.supportedInputs == null) {
      this.supportedInputs = new ArrayList<>();
    }
    this.supportedInputs.add(supportedInputsItem);
    return this;
  }

   /**
   * Get supportedInputs
   * @return supportedInputs
  **/
  @javax.annotation.Nullable
  public List<String> getSupportedInputs() {
    return supportedInputs;
  }

  public void setSupportedInputs(List<String> supportedInputs) {
    this.supportedInputs = supportedInputs;
  }


  public Connectionsv3GeneratePackageRequest version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }


  public Connectionsv3GeneratePackageRequest versionTested(String versionTested) {
    this.versionTested = versionTested;
    return this;
  }

   /**
   * Get versionTested
   * @return versionTested
  **/
  @javax.annotation.Nullable
  public String getVersionTested() {
    return versionTested;
  }

  public void setVersionTested(String versionTested) {
    this.versionTested = versionTested;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Connectionsv3GeneratePackageRequest connectionsv3GeneratePackageRequest = (Connectionsv3GeneratePackageRequest) o;
    return Objects.equals(this.datasourceType, connectionsv3GeneratePackageRequest.datasourceType) &&
        Objects.equals(this.developerName, connectionsv3GeneratePackageRequest.developerName) &&
        Objects.equals(this.documentLink, connectionsv3GeneratePackageRequest.documentLink) &&
        Objects.equals(this.id, connectionsv3GeneratePackageRequest.id) &&
        Objects.equals(this.logfile, connectionsv3GeneratePackageRequest.logfile) &&
        Objects.equals(this.name, connectionsv3GeneratePackageRequest.name) &&
        Objects.equals(this.readme, connectionsv3GeneratePackageRequest.readme) &&
        Objects.equals(this.records, connectionsv3GeneratePackageRequest.records) &&
        Objects.equals(this.state, connectionsv3GeneratePackageRequest.state) &&
        Objects.equals(this.supportedInputs, connectionsv3GeneratePackageRequest.supportedInputs) &&
        Objects.equals(this.version, connectionsv3GeneratePackageRequest.version) &&
        Objects.equals(this.versionTested, connectionsv3GeneratePackageRequest.versionTested);
  }

  @Override
  public int hashCode() {
    return Objects.hash(datasourceType, developerName, documentLink, id, logfile, name, readme, records, state, supportedInputs, version, versionTested);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Connectionsv3GeneratePackageRequest {\n");
    sb.append("    datasourceType: ").append(toIndentedString(datasourceType)).append("\n");
    sb.append("    developerName: ").append(toIndentedString(developerName)).append("\n");
    sb.append("    documentLink: ").append(toIndentedString(documentLink)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    logfile: ").append(toIndentedString(logfile)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    readme: ").append(toIndentedString(readme)).append("\n");
    sb.append("    records: ").append(toIndentedString(records)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    supportedInputs: ").append(toIndentedString(supportedInputs)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    versionTested: ").append(toIndentedString(versionTested)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("datasource_type");
    openapiFields.add("developer_name");
    openapiFields.add("document_link");
    openapiFields.add("id");
    openapiFields.add("logfile");
    openapiFields.add("name");
    openapiFields.add("readme");
    openapiFields.add("records");
    openapiFields.add("state");
    openapiFields.add("supported_inputs");
    openapiFields.add("version");
    openapiFields.add("version_tested");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Connectionsv3GeneratePackageRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Connectionsv3GeneratePackageRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Connectionsv3GeneratePackageRequest is not found in the empty JSON string", Connectionsv3GeneratePackageRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Connectionsv3GeneratePackageRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Connectionsv3GeneratePackageRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("datasource_type") != null && !jsonObj.get("datasource_type").isJsonNull()) && !jsonObj.get("datasource_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datasource_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datasource_type").toString()));
      }
      if ((jsonObj.get("developer_name") != null && !jsonObj.get("developer_name").isJsonNull()) && !jsonObj.get("developer_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `developer_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("developer_name").toString()));
      }
      if ((jsonObj.get("document_link") != null && !jsonObj.get("document_link").isJsonNull()) && !jsonObj.get("document_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document_link").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("logfile") != null && !jsonObj.get("logfile").isJsonNull()) && !jsonObj.get("logfile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logfile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logfile").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("readme") != null && !jsonObj.get("readme").isJsonNull()) && !jsonObj.get("readme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `readme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("readme").toString()));
      }
      if (jsonObj.get("records") != null && !jsonObj.get("records").isJsonNull()) {
        JsonArray jsonArrayrecords = jsonObj.getAsJsonArray("records");
        if (jsonArrayrecords != null) {
          // ensure the json data is an array
          if (!jsonObj.get("records").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `records` to be an array in the JSON string but got `%s`", jsonObj.get("records").toString()));
          }

          // validate the optional field `records` (array)
          for (int i = 0; i < jsonArrayrecords.size(); i++) {
            Connectionsv3PluginRecord.validateJsonElement(jsonArrayrecords.get(i));
          };
        }
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("supported_inputs") != null && !jsonObj.get("supported_inputs").isJsonNull() && !jsonObj.get("supported_inputs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supported_inputs` to be an array in the JSON string but got `%s`", jsonObj.get("supported_inputs").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      if ((jsonObj.get("version_tested") != null && !jsonObj.get("version_tested").isJsonNull()) && !jsonObj.get("version_tested").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version_tested` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version_tested").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Connectionsv3GeneratePackageRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Connectionsv3GeneratePackageRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Connectionsv3GeneratePackageRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Connectionsv3GeneratePackageRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<Connectionsv3GeneratePackageRequest>() {
           @Override
           public void write(JsonWriter out, Connectionsv3GeneratePackageRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Connectionsv3GeneratePackageRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Connectionsv3GeneratePackageRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Connectionsv3GeneratePackageRequest
  * @throws IOException if the JSON string is invalid with respect to Connectionsv3GeneratePackageRequest
  */
  public static Connectionsv3GeneratePackageRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Connectionsv3GeneratePackageRequest.class);
  }

 /**
  * Convert an instance of Connectionsv3GeneratePackageRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

