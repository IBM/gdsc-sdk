/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.security.guardium;

import com.ibm.security.ApiCallback;
import com.ibm.security.ApiClient;
import com.ibm.security.ApiException;
import com.ibm.security.ApiResponse;
import com.ibm.security.Configuration;
import com.ibm.security.Pair;
import com.ibm.security.ProgressRequestBody;
import com.ibm.security.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import com.ibm.security.guardium.Riskanalyticscontrollerv3EnableDisableRiskEventFeedbackRequest;
import com.ibm.security.guardium.Riskanalyticscontrollerv3EnableDisableRiskEventFeedbackResponse;
import com.ibm.security.guardium.Riskanalyticscontrollerv3EnableDisableRiskEventProcessRequest;
import com.ibm.security.guardium.Riskanalyticscontrollerv3EnableDisableRiskEventProcessResponse;
import com.ibm.security.guardium.Riskanalyticscontrollerv3GetAllClassificationsListResponse;
import com.ibm.security.guardium.Riskanalyticscontrollerv3GetRiskEventClassificationsListResponse;
import com.ibm.security.guardium.Riskanalyticscontrollerv3GetRiskEventDetailsResponse;
import com.ibm.security.guardium.Riskanalyticscontrollerv3GetRiskEventProcessStatusResponse;
import com.ibm.security.guardium.Riskanalyticscontrollerv3GetRiskEventRowResponse;
import com.ibm.security.guardium.Riskanalyticscontrollerv3GetRiskFeedbackResponse;
import com.ibm.security.guardium.Riskanalyticscontrollerv3GetRiskObservationDetailsResponse;
import com.ibm.security.guardium.Riskanalyticscontrollerv3GetUserUISettingsResponse;
import com.ibm.security.guardium.Riskanalyticscontrollerv3RiskEventSummarizationDataResponse;
import com.ibm.security.guardium.Riskanalyticscontrollerv3RiskEventTuningRequest;
import com.ibm.security.guardium.Riskanalyticscontrollerv3RiskEventTuningResponse;
import com.ibm.security.guardium.Riskanalyticscontrollerv3RiskEventVulnerabilityAssessmentDetailsResponse;
import com.ibm.security.guardium.Riskanalyticscontrollerv3SetRiskEventStatusRequest;
import com.ibm.security.guardium.Riskanalyticscontrollerv3SetRiskEventStatusResponse;
import com.ibm.security.guardium.Riskanalyticscontrollerv3SetUserUISettingsRequest;
import com.ibm.security.guardium.Riskanalyticscontrollerv3SetUserUISettingsResponse;
import com.ibm.security.guardium.Riskanalyticscontrollerv3UpdateRiskFeedbackRequest;
import com.ibm.security.guardium.Riskanalyticscontrollerv3UpdateRiskFeedbackResponse;
import com.ibm.security.guardium.RuntimeError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RiskAnalyticsControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RiskAnalyticsControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RiskAnalyticsControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for riskAnalyticsControllerEnableDisableRiskEventFeedback
     * @param riskanalyticscontrollerv3EnableDisableRiskEventFeedbackRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskAnalyticsControllerEnableDisableRiskEventFeedbackCall(Riskanalyticscontrollerv3EnableDisableRiskEventFeedbackRequest riskanalyticscontrollerv3EnableDisableRiskEventFeedbackRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = riskanalyticscontrollerv3EnableDisableRiskEventFeedbackRequest;

        // create path and map variables
        String localVarPath = "/api/v3/risk_feedback/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call riskAnalyticsControllerEnableDisableRiskEventFeedbackValidateBeforeCall(Riskanalyticscontrollerv3EnableDisableRiskEventFeedbackRequest riskanalyticscontrollerv3EnableDisableRiskEventFeedbackRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'riskanalyticscontrollerv3EnableDisableRiskEventFeedbackRequest' is set
        if (riskanalyticscontrollerv3EnableDisableRiskEventFeedbackRequest == null) {
            throw new ApiException("Missing the required parameter 'riskanalyticscontrollerv3EnableDisableRiskEventFeedbackRequest' when calling riskAnalyticsControllerEnableDisableRiskEventFeedback(Async)");
        }

        return riskAnalyticsControllerEnableDisableRiskEventFeedbackCall(riskanalyticscontrollerv3EnableDisableRiskEventFeedbackRequest, _callback);

    }

    /**
     * Summary: Enable disable risk rvent feedback Description: Enable or disable the collect feedback process.
     * 
     * @param riskanalyticscontrollerv3EnableDisableRiskEventFeedbackRequest  (required)
     * @return Riskanalyticscontrollerv3EnableDisableRiskEventFeedbackResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Riskanalyticscontrollerv3EnableDisableRiskEventFeedbackResponse riskAnalyticsControllerEnableDisableRiskEventFeedback(Riskanalyticscontrollerv3EnableDisableRiskEventFeedbackRequest riskanalyticscontrollerv3EnableDisableRiskEventFeedbackRequest) throws ApiException {
        ApiResponse<Riskanalyticscontrollerv3EnableDisableRiskEventFeedbackResponse> localVarResp = riskAnalyticsControllerEnableDisableRiskEventFeedbackWithHttpInfo(riskanalyticscontrollerv3EnableDisableRiskEventFeedbackRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Enable disable risk rvent feedback Description: Enable or disable the collect feedback process.
     * 
     * @param riskanalyticscontrollerv3EnableDisableRiskEventFeedbackRequest  (required)
     * @return ApiResponse&lt;Riskanalyticscontrollerv3EnableDisableRiskEventFeedbackResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Riskanalyticscontrollerv3EnableDisableRiskEventFeedbackResponse> riskAnalyticsControllerEnableDisableRiskEventFeedbackWithHttpInfo(Riskanalyticscontrollerv3EnableDisableRiskEventFeedbackRequest riskanalyticscontrollerv3EnableDisableRiskEventFeedbackRequest) throws ApiException {
        okhttp3.Call localVarCall = riskAnalyticsControllerEnableDisableRiskEventFeedbackValidateBeforeCall(riskanalyticscontrollerv3EnableDisableRiskEventFeedbackRequest, null);
        Type localVarReturnType = new TypeToken<Riskanalyticscontrollerv3EnableDisableRiskEventFeedbackResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Enable disable risk rvent feedback Description: Enable or disable the collect feedback process. (asynchronously)
     * 
     * @param riskanalyticscontrollerv3EnableDisableRiskEventFeedbackRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskAnalyticsControllerEnableDisableRiskEventFeedbackAsync(Riskanalyticscontrollerv3EnableDisableRiskEventFeedbackRequest riskanalyticscontrollerv3EnableDisableRiskEventFeedbackRequest, final ApiCallback<Riskanalyticscontrollerv3EnableDisableRiskEventFeedbackResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = riskAnalyticsControllerEnableDisableRiskEventFeedbackValidateBeforeCall(riskanalyticscontrollerv3EnableDisableRiskEventFeedbackRequest, _callback);
        Type localVarReturnType = new TypeToken<Riskanalyticscontrollerv3EnableDisableRiskEventFeedbackResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for riskAnalyticsControllerEnableDisableRiskEventProcess
     * @param riskanalyticscontrollerv3EnableDisableRiskEventProcessRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskAnalyticsControllerEnableDisableRiskEventProcessCall(Riskanalyticscontrollerv3EnableDisableRiskEventProcessRequest riskanalyticscontrollerv3EnableDisableRiskEventProcessRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = riskanalyticscontrollerv3EnableDisableRiskEventProcessRequest;

        // create path and map variables
        String localVarPath = "/api/v3/risk_process/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call riskAnalyticsControllerEnableDisableRiskEventProcessValidateBeforeCall(Riskanalyticscontrollerv3EnableDisableRiskEventProcessRequest riskanalyticscontrollerv3EnableDisableRiskEventProcessRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'riskanalyticscontrollerv3EnableDisableRiskEventProcessRequest' is set
        if (riskanalyticscontrollerv3EnableDisableRiskEventProcessRequest == null) {
            throw new ApiException("Missing the required parameter 'riskanalyticscontrollerv3EnableDisableRiskEventProcessRequest' when calling riskAnalyticsControllerEnableDisableRiskEventProcess(Async)");
        }

        return riskAnalyticsControllerEnableDisableRiskEventProcessCall(riskanalyticscontrollerv3EnableDisableRiskEventProcessRequest, _callback);

    }

    /**
     * Summary: Enable disable risk event process Description: Enable or disable the risk event process.
     * 
     * @param riskanalyticscontrollerv3EnableDisableRiskEventProcessRequest  (required)
     * @return Riskanalyticscontrollerv3EnableDisableRiskEventProcessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Riskanalyticscontrollerv3EnableDisableRiskEventProcessResponse riskAnalyticsControllerEnableDisableRiskEventProcess(Riskanalyticscontrollerv3EnableDisableRiskEventProcessRequest riskanalyticscontrollerv3EnableDisableRiskEventProcessRequest) throws ApiException {
        ApiResponse<Riskanalyticscontrollerv3EnableDisableRiskEventProcessResponse> localVarResp = riskAnalyticsControllerEnableDisableRiskEventProcessWithHttpInfo(riskanalyticscontrollerv3EnableDisableRiskEventProcessRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Enable disable risk event process Description: Enable or disable the risk event process.
     * 
     * @param riskanalyticscontrollerv3EnableDisableRiskEventProcessRequest  (required)
     * @return ApiResponse&lt;Riskanalyticscontrollerv3EnableDisableRiskEventProcessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Riskanalyticscontrollerv3EnableDisableRiskEventProcessResponse> riskAnalyticsControllerEnableDisableRiskEventProcessWithHttpInfo(Riskanalyticscontrollerv3EnableDisableRiskEventProcessRequest riskanalyticscontrollerv3EnableDisableRiskEventProcessRequest) throws ApiException {
        okhttp3.Call localVarCall = riskAnalyticsControllerEnableDisableRiskEventProcessValidateBeforeCall(riskanalyticscontrollerv3EnableDisableRiskEventProcessRequest, null);
        Type localVarReturnType = new TypeToken<Riskanalyticscontrollerv3EnableDisableRiskEventProcessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Enable disable risk event process Description: Enable or disable the risk event process. (asynchronously)
     * 
     * @param riskanalyticscontrollerv3EnableDisableRiskEventProcessRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskAnalyticsControllerEnableDisableRiskEventProcessAsync(Riskanalyticscontrollerv3EnableDisableRiskEventProcessRequest riskanalyticscontrollerv3EnableDisableRiskEventProcessRequest, final ApiCallback<Riskanalyticscontrollerv3EnableDisableRiskEventProcessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = riskAnalyticsControllerEnableDisableRiskEventProcessValidateBeforeCall(riskanalyticscontrollerv3EnableDisableRiskEventProcessRequest, _callback);
        Type localVarReturnType = new TypeToken<Riskanalyticscontrollerv3EnableDisableRiskEventProcessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for riskAnalyticsControllerGetAllClassificationsList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskAnalyticsControllerGetAllClassificationsListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/risk_events/classifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call riskAnalyticsControllerGetAllClassificationsListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return riskAnalyticsControllerGetAllClassificationsListCall(_callback);

    }

    /**
     * Summary: Get all classifications Description: Get all possible classifications for a risk event.
     * 
     * @return Riskanalyticscontrollerv3GetAllClassificationsListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Riskanalyticscontrollerv3GetAllClassificationsListResponse riskAnalyticsControllerGetAllClassificationsList() throws ApiException {
        ApiResponse<Riskanalyticscontrollerv3GetAllClassificationsListResponse> localVarResp = riskAnalyticsControllerGetAllClassificationsListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Summary: Get all classifications Description: Get all possible classifications for a risk event.
     * 
     * @return ApiResponse&lt;Riskanalyticscontrollerv3GetAllClassificationsListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Riskanalyticscontrollerv3GetAllClassificationsListResponse> riskAnalyticsControllerGetAllClassificationsListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = riskAnalyticsControllerGetAllClassificationsListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Riskanalyticscontrollerv3GetAllClassificationsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get all classifications Description: Get all possible classifications for a risk event. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskAnalyticsControllerGetAllClassificationsListAsync(final ApiCallback<Riskanalyticscontrollerv3GetAllClassificationsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = riskAnalyticsControllerGetAllClassificationsListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Riskanalyticscontrollerv3GetAllClassificationsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for riskAnalyticsControllerGetRiskEventClassificationsList
     * @param riskId Risk id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskAnalyticsControllerGetRiskEventClassificationsListCall(Integer riskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/risk_events/{risk_id}/feedback"
            .replace("{" + "risk_id" + "}", localVarApiClient.escapeString(riskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call riskAnalyticsControllerGetRiskEventClassificationsListValidateBeforeCall(Integer riskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'riskId' is set
        if (riskId == null) {
            throw new ApiException("Missing the required parameter 'riskId' when calling riskAnalyticsControllerGetRiskEventClassificationsList(Async)");
        }

        return riskAnalyticsControllerGetRiskEventClassificationsListCall(riskId, _callback);

    }

    /**
     * Summary: Get risk event classifications list Description: retrieves the ClassificationMatchDetails for a given risk id; classification that did not matched will be with class_value 0.
     * 
     * @param riskId Risk id (required)
     * @return Riskanalyticscontrollerv3GetRiskEventClassificationsListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Riskanalyticscontrollerv3GetRiskEventClassificationsListResponse riskAnalyticsControllerGetRiskEventClassificationsList(Integer riskId) throws ApiException {
        ApiResponse<Riskanalyticscontrollerv3GetRiskEventClassificationsListResponse> localVarResp = riskAnalyticsControllerGetRiskEventClassificationsListWithHttpInfo(riskId);
        return localVarResp.getData();
    }

    /**
     * Summary: Get risk event classifications list Description: retrieves the ClassificationMatchDetails for a given risk id; classification that did not matched will be with class_value 0.
     * 
     * @param riskId Risk id (required)
     * @return ApiResponse&lt;Riskanalyticscontrollerv3GetRiskEventClassificationsListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Riskanalyticscontrollerv3GetRiskEventClassificationsListResponse> riskAnalyticsControllerGetRiskEventClassificationsListWithHttpInfo(Integer riskId) throws ApiException {
        okhttp3.Call localVarCall = riskAnalyticsControllerGetRiskEventClassificationsListValidateBeforeCall(riskId, null);
        Type localVarReturnType = new TypeToken<Riskanalyticscontrollerv3GetRiskEventClassificationsListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get risk event classifications list Description: retrieves the ClassificationMatchDetails for a given risk id; classification that did not matched will be with class_value 0. (asynchronously)
     * 
     * @param riskId Risk id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskAnalyticsControllerGetRiskEventClassificationsListAsync(Integer riskId, final ApiCallback<Riskanalyticscontrollerv3GetRiskEventClassificationsListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = riskAnalyticsControllerGetRiskEventClassificationsListValidateBeforeCall(riskId, _callback);
        Type localVarReturnType = new TypeToken<Riskanalyticscontrollerv3GetRiskEventClassificationsListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for riskAnalyticsControllerGetRiskEventDataForSummarization
     * @param riskId Risk ID (required)
     * @param includeIndicators Indicates whether to include indicators in the response or not. (optional)
     * @param numFindingsLimit Max number of hours to get for the risk. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskAnalyticsControllerGetRiskEventDataForSummarizationCall(Integer riskId, Boolean includeIndicators, Integer numFindingsLimit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/risk_events/{risk_id}/summarization/data"
            .replace("{" + "risk_id" + "}", localVarApiClient.escapeString(riskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeIndicators != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_indicators", includeIndicators));
        }

        if (numFindingsLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("num_findings_limit", numFindingsLimit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call riskAnalyticsControllerGetRiskEventDataForSummarizationValidateBeforeCall(Integer riskId, Boolean includeIndicators, Integer numFindingsLimit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'riskId' is set
        if (riskId == null) {
            throw new ApiException("Missing the required parameter 'riskId' when calling riskAnalyticsControllerGetRiskEventDataForSummarization(Async)");
        }

        return riskAnalyticsControllerGetRiskEventDataForSummarizationCall(riskId, includeIndicators, numFindingsLimit, _callback);

    }

    /**
     * Summary: Get risk event data needed for summarization task Description: Retrieve the full information about this risk event including all findings data
     * 
     * @param riskId Risk ID (required)
     * @param includeIndicators Indicates whether to include indicators in the response or not. (optional)
     * @param numFindingsLimit Max number of hours to get for the risk. (optional)
     * @return Riskanalyticscontrollerv3RiskEventSummarizationDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Riskanalyticscontrollerv3RiskEventSummarizationDataResponse riskAnalyticsControllerGetRiskEventDataForSummarization(Integer riskId, Boolean includeIndicators, Integer numFindingsLimit) throws ApiException {
        ApiResponse<Riskanalyticscontrollerv3RiskEventSummarizationDataResponse> localVarResp = riskAnalyticsControllerGetRiskEventDataForSummarizationWithHttpInfo(riskId, includeIndicators, numFindingsLimit);
        return localVarResp.getData();
    }

    /**
     * Summary: Get risk event data needed for summarization task Description: Retrieve the full information about this risk event including all findings data
     * 
     * @param riskId Risk ID (required)
     * @param includeIndicators Indicates whether to include indicators in the response or not. (optional)
     * @param numFindingsLimit Max number of hours to get for the risk. (optional)
     * @return ApiResponse&lt;Riskanalyticscontrollerv3RiskEventSummarizationDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Riskanalyticscontrollerv3RiskEventSummarizationDataResponse> riskAnalyticsControllerGetRiskEventDataForSummarizationWithHttpInfo(Integer riskId, Boolean includeIndicators, Integer numFindingsLimit) throws ApiException {
        okhttp3.Call localVarCall = riskAnalyticsControllerGetRiskEventDataForSummarizationValidateBeforeCall(riskId, includeIndicators, numFindingsLimit, null);
        Type localVarReturnType = new TypeToken<Riskanalyticscontrollerv3RiskEventSummarizationDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get risk event data needed for summarization task Description: Retrieve the full information about this risk event including all findings data (asynchronously)
     * 
     * @param riskId Risk ID (required)
     * @param includeIndicators Indicates whether to include indicators in the response or not. (optional)
     * @param numFindingsLimit Max number of hours to get for the risk. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskAnalyticsControllerGetRiskEventDataForSummarizationAsync(Integer riskId, Boolean includeIndicators, Integer numFindingsLimit, final ApiCallback<Riskanalyticscontrollerv3RiskEventSummarizationDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = riskAnalyticsControllerGetRiskEventDataForSummarizationValidateBeforeCall(riskId, includeIndicators, numFindingsLimit, _callback);
        Type localVarReturnType = new TypeToken<Riskanalyticscontrollerv3RiskEventSummarizationDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for riskAnalyticsControllerGetRiskEventDetails
     * @param riskId Risk id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskAnalyticsControllerGetRiskEventDetailsCall(Integer riskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/risk_events/{risk_id}/details"
            .replace("{" + "risk_id" + "}", localVarApiClient.escapeString(riskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call riskAnalyticsControllerGetRiskEventDetailsValidateBeforeCall(Integer riskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'riskId' is set
        if (riskId == null) {
            throw new ApiException("Missing the required parameter 'riskId' when calling riskAnalyticsControllerGetRiskEventDetails(Async)");
        }

        return riskAnalyticsControllerGetRiskEventDetailsCall(riskId, _callback);

    }

    /**
     * Summary: Get risk event details Description: Return the details of a risk event, including risk general info and a list of observations.
     * 
     * @param riskId Risk id. (required)
     * @return Riskanalyticscontrollerv3GetRiskEventDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Riskanalyticscontrollerv3GetRiskEventDetailsResponse riskAnalyticsControllerGetRiskEventDetails(Integer riskId) throws ApiException {
        ApiResponse<Riskanalyticscontrollerv3GetRiskEventDetailsResponse> localVarResp = riskAnalyticsControllerGetRiskEventDetailsWithHttpInfo(riskId);
        return localVarResp.getData();
    }

    /**
     * Summary: Get risk event details Description: Return the details of a risk event, including risk general info and a list of observations.
     * 
     * @param riskId Risk id. (required)
     * @return ApiResponse&lt;Riskanalyticscontrollerv3GetRiskEventDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Riskanalyticscontrollerv3GetRiskEventDetailsResponse> riskAnalyticsControllerGetRiskEventDetailsWithHttpInfo(Integer riskId) throws ApiException {
        okhttp3.Call localVarCall = riskAnalyticsControllerGetRiskEventDetailsValidateBeforeCall(riskId, null);
        Type localVarReturnType = new TypeToken<Riskanalyticscontrollerv3GetRiskEventDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get risk event details Description: Return the details of a risk event, including risk general info and a list of observations. (asynchronously)
     * 
     * @param riskId Risk id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskAnalyticsControllerGetRiskEventDetailsAsync(Integer riskId, final ApiCallback<Riskanalyticscontrollerv3GetRiskEventDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = riskAnalyticsControllerGetRiskEventDetailsValidateBeforeCall(riskId, _callback);
        Type localVarReturnType = new TypeToken<Riskanalyticscontrollerv3GetRiskEventDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for riskAnalyticsControllerGetRiskEventProcessStatus
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskAnalyticsControllerGetRiskEventProcessStatusCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/risk_process/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call riskAnalyticsControllerGetRiskEventProcessStatusValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return riskAnalyticsControllerGetRiskEventProcessStatusCall(_callback);

    }

    /**
     * Summary: Get risk event process status Description: Get the risk event process status.
     * 
     * @return Riskanalyticscontrollerv3GetRiskEventProcessStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Riskanalyticscontrollerv3GetRiskEventProcessStatusResponse riskAnalyticsControllerGetRiskEventProcessStatus() throws ApiException {
        ApiResponse<Riskanalyticscontrollerv3GetRiskEventProcessStatusResponse> localVarResp = riskAnalyticsControllerGetRiskEventProcessStatusWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Summary: Get risk event process status Description: Get the risk event process status.
     * 
     * @return ApiResponse&lt;Riskanalyticscontrollerv3GetRiskEventProcessStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Riskanalyticscontrollerv3GetRiskEventProcessStatusResponse> riskAnalyticsControllerGetRiskEventProcessStatusWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = riskAnalyticsControllerGetRiskEventProcessStatusValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Riskanalyticscontrollerv3GetRiskEventProcessStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get risk event process status Description: Get the risk event process status. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskAnalyticsControllerGetRiskEventProcessStatusAsync(final ApiCallback<Riskanalyticscontrollerv3GetRiskEventProcessStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = riskAnalyticsControllerGetRiskEventProcessStatusValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Riskanalyticscontrollerv3GetRiskEventProcessStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for riskAnalyticsControllerGetRiskEventRow
     * @param status Status to retrieve only the status events, blank to retrieve all. (optional, default to UNDEFINED_STATUS)
     * @param dateFrom The API retrieves risk events that were open in a time range. date_from defines the start of this time range. format YYYY-MM-DDTHH:mm:ssZ. (optional)
     * @param dateTo The API retrieves risk events that were open in a time range. date_to defines the end of this time range. format YYYY-MM-DDTHH:mm:ssZ. (optional)
     * @param pivotType Pivot type - enum. (optional, default to UNDEFINED_PIVOT_TYPE)
     * @param pivotId Pivot id -  all pivot fields separated by semicolon. (optional)
     * @param pivotDbUser Optional db_user - if pivot is db user. (optional)
     * @param pivotDatabase Optional database - if pivot is db user / database. (optional)
     * @param pivotServerIp Optional server_ip - if pivot is db user / database. (optional)
     * @param pivotOsUser Optional os_user - if pivot is os user. (optional)
     * @param pivotDatabaseSourceField Optional database_source_field (values database name/service name depends on the server type) - if pivot is db user / database. (optional, default to UNDEFINED)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskAnalyticsControllerGetRiskEventRowCall(String status, OffsetDateTime dateFrom, OffsetDateTime dateTo, String pivotType, String pivotId, String pivotDbUser, String pivotDatabase, String pivotServerIp, String pivotOsUser, String pivotDatabaseSourceField, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/risk_events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_from", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_to", dateTo));
        }

        if (pivotType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pivot.type", pivotType));
        }

        if (pivotId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pivot.id", pivotId));
        }

        if (pivotDbUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pivot.db_user", pivotDbUser));
        }

        if (pivotDatabase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pivot.database", pivotDatabase));
        }

        if (pivotServerIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pivot.server_ip", pivotServerIp));
        }

        if (pivotOsUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pivot.os_user", pivotOsUser));
        }

        if (pivotDatabaseSourceField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pivot.database_source_field", pivotDatabaseSourceField));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call riskAnalyticsControllerGetRiskEventRowValidateBeforeCall(String status, OffsetDateTime dateFrom, OffsetDateTime dateTo, String pivotType, String pivotId, String pivotDbUser, String pivotDatabase, String pivotServerIp, String pivotOsUser, String pivotDatabaseSourceField, final ApiCallback _callback) throws ApiException {
        return riskAnalyticsControllerGetRiskEventRowCall(status, dateFrom, dateTo, pivotType, pivotId, pivotDbUser, pivotDatabase, pivotServerIp, pivotOsUser, pivotDatabaseSourceField, _callback);

    }

    /**
     * Summary: Get risk event row Description: Return a list of risk events.
     * 
     * @param status Status to retrieve only the status events, blank to retrieve all. (optional, default to UNDEFINED_STATUS)
     * @param dateFrom The API retrieves risk events that were open in a time range. date_from defines the start of this time range. format YYYY-MM-DDTHH:mm:ssZ. (optional)
     * @param dateTo The API retrieves risk events that were open in a time range. date_to defines the end of this time range. format YYYY-MM-DDTHH:mm:ssZ. (optional)
     * @param pivotType Pivot type - enum. (optional, default to UNDEFINED_PIVOT_TYPE)
     * @param pivotId Pivot id -  all pivot fields separated by semicolon. (optional)
     * @param pivotDbUser Optional db_user - if pivot is db user. (optional)
     * @param pivotDatabase Optional database - if pivot is db user / database. (optional)
     * @param pivotServerIp Optional server_ip - if pivot is db user / database. (optional)
     * @param pivotOsUser Optional os_user - if pivot is os user. (optional)
     * @param pivotDatabaseSourceField Optional database_source_field (values database name/service name depends on the server type) - if pivot is db user / database. (optional, default to UNDEFINED)
     * @return Riskanalyticscontrollerv3GetRiskEventRowResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Riskanalyticscontrollerv3GetRiskEventRowResponse riskAnalyticsControllerGetRiskEventRow(String status, OffsetDateTime dateFrom, OffsetDateTime dateTo, String pivotType, String pivotId, String pivotDbUser, String pivotDatabase, String pivotServerIp, String pivotOsUser, String pivotDatabaseSourceField) throws ApiException {
        ApiResponse<Riskanalyticscontrollerv3GetRiskEventRowResponse> localVarResp = riskAnalyticsControllerGetRiskEventRowWithHttpInfo(status, dateFrom, dateTo, pivotType, pivotId, pivotDbUser, pivotDatabase, pivotServerIp, pivotOsUser, pivotDatabaseSourceField);
        return localVarResp.getData();
    }

    /**
     * Summary: Get risk event row Description: Return a list of risk events.
     * 
     * @param status Status to retrieve only the status events, blank to retrieve all. (optional, default to UNDEFINED_STATUS)
     * @param dateFrom The API retrieves risk events that were open in a time range. date_from defines the start of this time range. format YYYY-MM-DDTHH:mm:ssZ. (optional)
     * @param dateTo The API retrieves risk events that were open in a time range. date_to defines the end of this time range. format YYYY-MM-DDTHH:mm:ssZ. (optional)
     * @param pivotType Pivot type - enum. (optional, default to UNDEFINED_PIVOT_TYPE)
     * @param pivotId Pivot id -  all pivot fields separated by semicolon. (optional)
     * @param pivotDbUser Optional db_user - if pivot is db user. (optional)
     * @param pivotDatabase Optional database - if pivot is db user / database. (optional)
     * @param pivotServerIp Optional server_ip - if pivot is db user / database. (optional)
     * @param pivotOsUser Optional os_user - if pivot is os user. (optional)
     * @param pivotDatabaseSourceField Optional database_source_field (values database name/service name depends on the server type) - if pivot is db user / database. (optional, default to UNDEFINED)
     * @return ApiResponse&lt;Riskanalyticscontrollerv3GetRiskEventRowResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Riskanalyticscontrollerv3GetRiskEventRowResponse> riskAnalyticsControllerGetRiskEventRowWithHttpInfo(String status, OffsetDateTime dateFrom, OffsetDateTime dateTo, String pivotType, String pivotId, String pivotDbUser, String pivotDatabase, String pivotServerIp, String pivotOsUser, String pivotDatabaseSourceField) throws ApiException {
        okhttp3.Call localVarCall = riskAnalyticsControllerGetRiskEventRowValidateBeforeCall(status, dateFrom, dateTo, pivotType, pivotId, pivotDbUser, pivotDatabase, pivotServerIp, pivotOsUser, pivotDatabaseSourceField, null);
        Type localVarReturnType = new TypeToken<Riskanalyticscontrollerv3GetRiskEventRowResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get risk event row Description: Return a list of risk events. (asynchronously)
     * 
     * @param status Status to retrieve only the status events, blank to retrieve all. (optional, default to UNDEFINED_STATUS)
     * @param dateFrom The API retrieves risk events that were open in a time range. date_from defines the start of this time range. format YYYY-MM-DDTHH:mm:ssZ. (optional)
     * @param dateTo The API retrieves risk events that were open in a time range. date_to defines the end of this time range. format YYYY-MM-DDTHH:mm:ssZ. (optional)
     * @param pivotType Pivot type - enum. (optional, default to UNDEFINED_PIVOT_TYPE)
     * @param pivotId Pivot id -  all pivot fields separated by semicolon. (optional)
     * @param pivotDbUser Optional db_user - if pivot is db user. (optional)
     * @param pivotDatabase Optional database - if pivot is db user / database. (optional)
     * @param pivotServerIp Optional server_ip - if pivot is db user / database. (optional)
     * @param pivotOsUser Optional os_user - if pivot is os user. (optional)
     * @param pivotDatabaseSourceField Optional database_source_field (values database name/service name depends on the server type) - if pivot is db user / database. (optional, default to UNDEFINED)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskAnalyticsControllerGetRiskEventRowAsync(String status, OffsetDateTime dateFrom, OffsetDateTime dateTo, String pivotType, String pivotId, String pivotDbUser, String pivotDatabase, String pivotServerIp, String pivotOsUser, String pivotDatabaseSourceField, final ApiCallback<Riskanalyticscontrollerv3GetRiskEventRowResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = riskAnalyticsControllerGetRiskEventRowValidateBeforeCall(status, dateFrom, dateTo, pivotType, pivotId, pivotDbUser, pivotDatabase, pivotServerIp, pivotOsUser, pivotDatabaseSourceField, _callback);
        Type localVarReturnType = new TypeToken<Riskanalyticscontrollerv3GetRiskEventRowResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for riskAnalyticsControllerGetRiskEventVulnerabilityAssessmentDetails
     * @param riskId Risk ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskAnalyticsControllerGetRiskEventVulnerabilityAssessmentDetailsCall(Integer riskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/risk_events/{risk_id}/va"
            .replace("{" + "risk_id" + "}", localVarApiClient.escapeString(riskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call riskAnalyticsControllerGetRiskEventVulnerabilityAssessmentDetailsValidateBeforeCall(Integer riskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'riskId' is set
        if (riskId == null) {
            throw new ApiException("Missing the required parameter 'riskId' when calling riskAnalyticsControllerGetRiskEventVulnerabilityAssessmentDetails(Async)");
        }

        return riskAnalyticsControllerGetRiskEventVulnerabilityAssessmentDetailsCall(riskId, _callback);

    }

    /**
     * Summary: Get vulnerability assessment details for a given risk event Description: Retrieve the information about failed VA tests for assets database and db user
     * 
     * @param riskId Risk ID (required)
     * @return Riskanalyticscontrollerv3RiskEventVulnerabilityAssessmentDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Riskanalyticscontrollerv3RiskEventVulnerabilityAssessmentDetailsResponse riskAnalyticsControllerGetRiskEventVulnerabilityAssessmentDetails(Integer riskId) throws ApiException {
        ApiResponse<Riskanalyticscontrollerv3RiskEventVulnerabilityAssessmentDetailsResponse> localVarResp = riskAnalyticsControllerGetRiskEventVulnerabilityAssessmentDetailsWithHttpInfo(riskId);
        return localVarResp.getData();
    }

    /**
     * Summary: Get vulnerability assessment details for a given risk event Description: Retrieve the information about failed VA tests for assets database and db user
     * 
     * @param riskId Risk ID (required)
     * @return ApiResponse&lt;Riskanalyticscontrollerv3RiskEventVulnerabilityAssessmentDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Riskanalyticscontrollerv3RiskEventVulnerabilityAssessmentDetailsResponse> riskAnalyticsControllerGetRiskEventVulnerabilityAssessmentDetailsWithHttpInfo(Integer riskId) throws ApiException {
        okhttp3.Call localVarCall = riskAnalyticsControllerGetRiskEventVulnerabilityAssessmentDetailsValidateBeforeCall(riskId, null);
        Type localVarReturnType = new TypeToken<Riskanalyticscontrollerv3RiskEventVulnerabilityAssessmentDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get vulnerability assessment details for a given risk event Description: Retrieve the information about failed VA tests for assets database and db user (asynchronously)
     * 
     * @param riskId Risk ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskAnalyticsControllerGetRiskEventVulnerabilityAssessmentDetailsAsync(Integer riskId, final ApiCallback<Riskanalyticscontrollerv3RiskEventVulnerabilityAssessmentDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = riskAnalyticsControllerGetRiskEventVulnerabilityAssessmentDetailsValidateBeforeCall(riskId, _callback);
        Type localVarReturnType = new TypeToken<Riskanalyticscontrollerv3RiskEventVulnerabilityAssessmentDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for riskAnalyticsControllerGetRiskFeedback
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call riskAnalyticsControllerGetRiskFeedbackCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/risk_events/feedback";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call riskAnalyticsControllerGetRiskFeedbackValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return riskAnalyticsControllerGetRiskFeedbackCall(_callback);

    }

    /**
     * Summary: Get risk feedback Description: Get all feedbacks that are in status NEW/WIP and change them to status WIP.
     * 
     * @return Riskanalyticscontrollerv3GetRiskFeedbackResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Riskanalyticscontrollerv3GetRiskFeedbackResponse riskAnalyticsControllerGetRiskFeedback() throws ApiException {
        ApiResponse<Riskanalyticscontrollerv3GetRiskFeedbackResponse> localVarResp = riskAnalyticsControllerGetRiskFeedbackWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Summary: Get risk feedback Description: Get all feedbacks that are in status NEW/WIP and change them to status WIP.
     * 
     * @return ApiResponse&lt;Riskanalyticscontrollerv3GetRiskFeedbackResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Riskanalyticscontrollerv3GetRiskFeedbackResponse> riskAnalyticsControllerGetRiskFeedbackWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = riskAnalyticsControllerGetRiskFeedbackValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Riskanalyticscontrollerv3GetRiskFeedbackResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get risk feedback Description: Get all feedbacks that are in status NEW/WIP and change them to status WIP. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call riskAnalyticsControllerGetRiskFeedbackAsync(final ApiCallback<Riskanalyticscontrollerv3GetRiskFeedbackResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = riskAnalyticsControllerGetRiskFeedbackValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Riskanalyticscontrollerv3GetRiskFeedbackResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for riskAnalyticsControllerGetRiskObservationDetails
     * @param leadFeatureId Lead feature id. (optional)
     * @param observationType Observation type. (optional, default to UNDEFINED_OBSERVATION_TYPE)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskAnalyticsControllerGetRiskObservationDetailsCall(Integer leadFeatureId, String observationType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/risk_events/observations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (leadFeatureId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lead_feature_id", leadFeatureId));
        }

        if (observationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("observation_type", observationType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call riskAnalyticsControllerGetRiskObservationDetailsValidateBeforeCall(Integer leadFeatureId, String observationType, final ApiCallback _callback) throws ApiException {
        return riskAnalyticsControllerGetRiskObservationDetailsCall(leadFeatureId, observationType, _callback);

    }

    /**
     * Summary: Get risk observation details Description: Return details of a single risk observation.
     * 
     * @param leadFeatureId Lead feature id. (optional)
     * @param observationType Observation type. (optional, default to UNDEFINED_OBSERVATION_TYPE)
     * @return Riskanalyticscontrollerv3GetRiskObservationDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Riskanalyticscontrollerv3GetRiskObservationDetailsResponse riskAnalyticsControllerGetRiskObservationDetails(Integer leadFeatureId, String observationType) throws ApiException {
        ApiResponse<Riskanalyticscontrollerv3GetRiskObservationDetailsResponse> localVarResp = riskAnalyticsControllerGetRiskObservationDetailsWithHttpInfo(leadFeatureId, observationType);
        return localVarResp.getData();
    }

    /**
     * Summary: Get risk observation details Description: Return details of a single risk observation.
     * 
     * @param leadFeatureId Lead feature id. (optional)
     * @param observationType Observation type. (optional, default to UNDEFINED_OBSERVATION_TYPE)
     * @return ApiResponse&lt;Riskanalyticscontrollerv3GetRiskObservationDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Riskanalyticscontrollerv3GetRiskObservationDetailsResponse> riskAnalyticsControllerGetRiskObservationDetailsWithHttpInfo(Integer leadFeatureId, String observationType) throws ApiException {
        okhttp3.Call localVarCall = riskAnalyticsControllerGetRiskObservationDetailsValidateBeforeCall(leadFeatureId, observationType, null);
        Type localVarReturnType = new TypeToken<Riskanalyticscontrollerv3GetRiskObservationDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get risk observation details Description: Return details of a single risk observation. (asynchronously)
     * 
     * @param leadFeatureId Lead feature id. (optional)
     * @param observationType Observation type. (optional, default to UNDEFINED_OBSERVATION_TYPE)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskAnalyticsControllerGetRiskObservationDetailsAsync(Integer leadFeatureId, String observationType, final ApiCallback<Riskanalyticscontrollerv3GetRiskObservationDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = riskAnalyticsControllerGetRiskObservationDetailsValidateBeforeCall(leadFeatureId, observationType, _callback);
        Type localVarReturnType = new TypeToken<Riskanalyticscontrollerv3GetRiskObservationDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for riskAnalyticsControllerGetUserUISettings
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskAnalyticsControllerGetUserUISettingsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/risk_events/user_ui_settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call riskAnalyticsControllerGetUserUISettingsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return riskAnalyticsControllerGetUserUISettingsCall(_callback);

    }

    /**
     * Summary: Get user UI settings Description: Get the user settings by user id to display the risk in the UI.
     * 
     * @return Riskanalyticscontrollerv3GetUserUISettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Riskanalyticscontrollerv3GetUserUISettingsResponse riskAnalyticsControllerGetUserUISettings() throws ApiException {
        ApiResponse<Riskanalyticscontrollerv3GetUserUISettingsResponse> localVarResp = riskAnalyticsControllerGetUserUISettingsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Summary: Get user UI settings Description: Get the user settings by user id to display the risk in the UI.
     * 
     * @return ApiResponse&lt;Riskanalyticscontrollerv3GetUserUISettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Riskanalyticscontrollerv3GetUserUISettingsResponse> riskAnalyticsControllerGetUserUISettingsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = riskAnalyticsControllerGetUserUISettingsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Riskanalyticscontrollerv3GetUserUISettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get user UI settings Description: Get the user settings by user id to display the risk in the UI. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskAnalyticsControllerGetUserUISettingsAsync(final ApiCallback<Riskanalyticscontrollerv3GetUserUISettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = riskAnalyticsControllerGetUserUISettingsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Riskanalyticscontrollerv3GetUserUISettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for riskAnalyticsControllerRiskEventTuning
     * @param riskanalyticscontrollerv3RiskEventTuningRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskAnalyticsControllerRiskEventTuningCall(Riskanalyticscontrollerv3RiskEventTuningRequest riskanalyticscontrollerv3RiskEventTuningRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = riskanalyticscontrollerv3RiskEventTuningRequest;

        // create path and map variables
        String localVarPath = "/api/v3/risk_events/tuning";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call riskAnalyticsControllerRiskEventTuningValidateBeforeCall(Riskanalyticscontrollerv3RiskEventTuningRequest riskanalyticscontrollerv3RiskEventTuningRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'riskanalyticscontrollerv3RiskEventTuningRequest' is set
        if (riskanalyticscontrollerv3RiskEventTuningRequest == null) {
            throw new ApiException("Missing the required parameter 'riskanalyticscontrollerv3RiskEventTuningRequest' when calling riskAnalyticsControllerRiskEventTuning(Async)");
        }

        return riskAnalyticsControllerRiskEventTuningCall(riskanalyticscontrollerv3RiskEventTuningRequest, _callback);

    }

    /**
     * Summary: Risk event tuning Description: Perform tuning risk event actions.
     * 
     * @param riskanalyticscontrollerv3RiskEventTuningRequest  (required)
     * @return Riskanalyticscontrollerv3RiskEventTuningResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Riskanalyticscontrollerv3RiskEventTuningResponse riskAnalyticsControllerRiskEventTuning(Riskanalyticscontrollerv3RiskEventTuningRequest riskanalyticscontrollerv3RiskEventTuningRequest) throws ApiException {
        ApiResponse<Riskanalyticscontrollerv3RiskEventTuningResponse> localVarResp = riskAnalyticsControllerRiskEventTuningWithHttpInfo(riskanalyticscontrollerv3RiskEventTuningRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Risk event tuning Description: Perform tuning risk event actions.
     * 
     * @param riskanalyticscontrollerv3RiskEventTuningRequest  (required)
     * @return ApiResponse&lt;Riskanalyticscontrollerv3RiskEventTuningResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Riskanalyticscontrollerv3RiskEventTuningResponse> riskAnalyticsControllerRiskEventTuningWithHttpInfo(Riskanalyticscontrollerv3RiskEventTuningRequest riskanalyticscontrollerv3RiskEventTuningRequest) throws ApiException {
        okhttp3.Call localVarCall = riskAnalyticsControllerRiskEventTuningValidateBeforeCall(riskanalyticscontrollerv3RiskEventTuningRequest, null);
        Type localVarReturnType = new TypeToken<Riskanalyticscontrollerv3RiskEventTuningResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Risk event tuning Description: Perform tuning risk event actions. (asynchronously)
     * 
     * @param riskanalyticscontrollerv3RiskEventTuningRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskAnalyticsControllerRiskEventTuningAsync(Riskanalyticscontrollerv3RiskEventTuningRequest riskanalyticscontrollerv3RiskEventTuningRequest, final ApiCallback<Riskanalyticscontrollerv3RiskEventTuningResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = riskAnalyticsControllerRiskEventTuningValidateBeforeCall(riskanalyticscontrollerv3RiskEventTuningRequest, _callback);
        Type localVarReturnType = new TypeToken<Riskanalyticscontrollerv3RiskEventTuningResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for riskAnalyticsControllerSetRiskEventStatus
     * @param riskanalyticscontrollerv3SetRiskEventStatusRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskAnalyticsControllerSetRiskEventStatusCall(Riskanalyticscontrollerv3SetRiskEventStatusRequest riskanalyticscontrollerv3SetRiskEventStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = riskanalyticscontrollerv3SetRiskEventStatusRequest;

        // create path and map variables
        String localVarPath = "/api/v3/risk_events/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call riskAnalyticsControllerSetRiskEventStatusValidateBeforeCall(Riskanalyticscontrollerv3SetRiskEventStatusRequest riskanalyticscontrollerv3SetRiskEventStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'riskanalyticscontrollerv3SetRiskEventStatusRequest' is set
        if (riskanalyticscontrollerv3SetRiskEventStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'riskanalyticscontrollerv3SetRiskEventStatusRequest' when calling riskAnalyticsControllerSetRiskEventStatus(Async)");
        }

        return riskAnalyticsControllerSetRiskEventStatusCall(riskanalyticscontrollerv3SetRiskEventStatusRequest, _callback);

    }

    /**
     * Summary: Set risk event status Description: Update the risk status and justification.
     * 
     * @param riskanalyticscontrollerv3SetRiskEventStatusRequest  (required)
     * @return Riskanalyticscontrollerv3SetRiskEventStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Riskanalyticscontrollerv3SetRiskEventStatusResponse riskAnalyticsControllerSetRiskEventStatus(Riskanalyticscontrollerv3SetRiskEventStatusRequest riskanalyticscontrollerv3SetRiskEventStatusRequest) throws ApiException {
        ApiResponse<Riskanalyticscontrollerv3SetRiskEventStatusResponse> localVarResp = riskAnalyticsControllerSetRiskEventStatusWithHttpInfo(riskanalyticscontrollerv3SetRiskEventStatusRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Set risk event status Description: Update the risk status and justification.
     * 
     * @param riskanalyticscontrollerv3SetRiskEventStatusRequest  (required)
     * @return ApiResponse&lt;Riskanalyticscontrollerv3SetRiskEventStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Riskanalyticscontrollerv3SetRiskEventStatusResponse> riskAnalyticsControllerSetRiskEventStatusWithHttpInfo(Riskanalyticscontrollerv3SetRiskEventStatusRequest riskanalyticscontrollerv3SetRiskEventStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = riskAnalyticsControllerSetRiskEventStatusValidateBeforeCall(riskanalyticscontrollerv3SetRiskEventStatusRequest, null);
        Type localVarReturnType = new TypeToken<Riskanalyticscontrollerv3SetRiskEventStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Set risk event status Description: Update the risk status and justification. (asynchronously)
     * 
     * @param riskanalyticscontrollerv3SetRiskEventStatusRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskAnalyticsControllerSetRiskEventStatusAsync(Riskanalyticscontrollerv3SetRiskEventStatusRequest riskanalyticscontrollerv3SetRiskEventStatusRequest, final ApiCallback<Riskanalyticscontrollerv3SetRiskEventStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = riskAnalyticsControllerSetRiskEventStatusValidateBeforeCall(riskanalyticscontrollerv3SetRiskEventStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<Riskanalyticscontrollerv3SetRiskEventStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for riskAnalyticsControllerSetUserUISettings
     * @param riskanalyticscontrollerv3SetUserUISettingsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskAnalyticsControllerSetUserUISettingsCall(Riskanalyticscontrollerv3SetUserUISettingsRequest riskanalyticscontrollerv3SetUserUISettingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = riskanalyticscontrollerv3SetUserUISettingsRequest;

        // create path and map variables
        String localVarPath = "/api/v3/risk_events/user_ui_settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call riskAnalyticsControllerSetUserUISettingsValidateBeforeCall(Riskanalyticscontrollerv3SetUserUISettingsRequest riskanalyticscontrollerv3SetUserUISettingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'riskanalyticscontrollerv3SetUserUISettingsRequest' is set
        if (riskanalyticscontrollerv3SetUserUISettingsRequest == null) {
            throw new ApiException("Missing the required parameter 'riskanalyticscontrollerv3SetUserUISettingsRequest' when calling riskAnalyticsControllerSetUserUISettings(Async)");
        }

        return riskAnalyticsControllerSetUserUISettingsCall(riskanalyticscontrollerv3SetUserUISettingsRequest, _callback);

    }

    /**
     * Summary: Set user UI settings Description: Set the user settings by user id in the mongo collection. WARNING: this API should not be used manually or by a system external to GDSC. Using this API to change a user settings may prevent the user from using the Risk Event function within GDSC.
     * 
     * @param riskanalyticscontrollerv3SetUserUISettingsRequest  (required)
     * @return Riskanalyticscontrollerv3SetUserUISettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Riskanalyticscontrollerv3SetUserUISettingsResponse riskAnalyticsControllerSetUserUISettings(Riskanalyticscontrollerv3SetUserUISettingsRequest riskanalyticscontrollerv3SetUserUISettingsRequest) throws ApiException {
        ApiResponse<Riskanalyticscontrollerv3SetUserUISettingsResponse> localVarResp = riskAnalyticsControllerSetUserUISettingsWithHttpInfo(riskanalyticscontrollerv3SetUserUISettingsRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Set user UI settings Description: Set the user settings by user id in the mongo collection. WARNING: this API should not be used manually or by a system external to GDSC. Using this API to change a user settings may prevent the user from using the Risk Event function within GDSC.
     * 
     * @param riskanalyticscontrollerv3SetUserUISettingsRequest  (required)
     * @return ApiResponse&lt;Riskanalyticscontrollerv3SetUserUISettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Riskanalyticscontrollerv3SetUserUISettingsResponse> riskAnalyticsControllerSetUserUISettingsWithHttpInfo(Riskanalyticscontrollerv3SetUserUISettingsRequest riskanalyticscontrollerv3SetUserUISettingsRequest) throws ApiException {
        okhttp3.Call localVarCall = riskAnalyticsControllerSetUserUISettingsValidateBeforeCall(riskanalyticscontrollerv3SetUserUISettingsRequest, null);
        Type localVarReturnType = new TypeToken<Riskanalyticscontrollerv3SetUserUISettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Set user UI settings Description: Set the user settings by user id in the mongo collection. WARNING: this API should not be used manually or by a system external to GDSC. Using this API to change a user settings may prevent the user from using the Risk Event function within GDSC. (asynchronously)
     * 
     * @param riskanalyticscontrollerv3SetUserUISettingsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskAnalyticsControllerSetUserUISettingsAsync(Riskanalyticscontrollerv3SetUserUISettingsRequest riskanalyticscontrollerv3SetUserUISettingsRequest, final ApiCallback<Riskanalyticscontrollerv3SetUserUISettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = riskAnalyticsControllerSetUserUISettingsValidateBeforeCall(riskanalyticscontrollerv3SetUserUISettingsRequest, _callback);
        Type localVarReturnType = new TypeToken<Riskanalyticscontrollerv3SetUserUISettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for riskAnalyticsControllerUpdateRiskFeedback
     * @param riskanalyticscontrollerv3UpdateRiskFeedbackRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskAnalyticsControllerUpdateRiskFeedbackCall(Riskanalyticscontrollerv3UpdateRiskFeedbackRequest riskanalyticscontrollerv3UpdateRiskFeedbackRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = riskanalyticscontrollerv3UpdateRiskFeedbackRequest;

        // create path and map variables
        String localVarPath = "/api/v3/risk_events/feedback";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call riskAnalyticsControllerUpdateRiskFeedbackValidateBeforeCall(Riskanalyticscontrollerv3UpdateRiskFeedbackRequest riskanalyticscontrollerv3UpdateRiskFeedbackRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'riskanalyticscontrollerv3UpdateRiskFeedbackRequest' is set
        if (riskanalyticscontrollerv3UpdateRiskFeedbackRequest == null) {
            throw new ApiException("Missing the required parameter 'riskanalyticscontrollerv3UpdateRiskFeedbackRequest' when calling riskAnalyticsControllerUpdateRiskFeedback(Async)");
        }

        return riskAnalyticsControllerUpdateRiskFeedbackCall(riskanalyticscontrollerv3UpdateRiskFeedbackRequest, _callback);

    }

    /**
     * Summary: Update risk feedback Description: Provide feedback for one or more risk events
     * 
     * @param riskanalyticscontrollerv3UpdateRiskFeedbackRequest  (required)
     * @return Riskanalyticscontrollerv3UpdateRiskFeedbackResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Riskanalyticscontrollerv3UpdateRiskFeedbackResponse riskAnalyticsControllerUpdateRiskFeedback(Riskanalyticscontrollerv3UpdateRiskFeedbackRequest riskanalyticscontrollerv3UpdateRiskFeedbackRequest) throws ApiException {
        ApiResponse<Riskanalyticscontrollerv3UpdateRiskFeedbackResponse> localVarResp = riskAnalyticsControllerUpdateRiskFeedbackWithHttpInfo(riskanalyticscontrollerv3UpdateRiskFeedbackRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Update risk feedback Description: Provide feedback for one or more risk events
     * 
     * @param riskanalyticscontrollerv3UpdateRiskFeedbackRequest  (required)
     * @return ApiResponse&lt;Riskanalyticscontrollerv3UpdateRiskFeedbackResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Riskanalyticscontrollerv3UpdateRiskFeedbackResponse> riskAnalyticsControllerUpdateRiskFeedbackWithHttpInfo(Riskanalyticscontrollerv3UpdateRiskFeedbackRequest riskanalyticscontrollerv3UpdateRiskFeedbackRequest) throws ApiException {
        okhttp3.Call localVarCall = riskAnalyticsControllerUpdateRiskFeedbackValidateBeforeCall(riskanalyticscontrollerv3UpdateRiskFeedbackRequest, null);
        Type localVarReturnType = new TypeToken<Riskanalyticscontrollerv3UpdateRiskFeedbackResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Update risk feedback Description: Provide feedback for one or more risk events (asynchronously)
     * 
     * @param riskanalyticscontrollerv3UpdateRiskFeedbackRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskAnalyticsControllerUpdateRiskFeedbackAsync(Riskanalyticscontrollerv3UpdateRiskFeedbackRequest riskanalyticscontrollerv3UpdateRiskFeedbackRequest, final ApiCallback<Riskanalyticscontrollerv3UpdateRiskFeedbackResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = riskAnalyticsControllerUpdateRiskFeedbackValidateBeforeCall(riskanalyticscontrollerv3UpdateRiskFeedbackRequest, _callback);
        Type localVarReturnType = new TypeToken<Riskanalyticscontrollerv3UpdateRiskFeedbackResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
