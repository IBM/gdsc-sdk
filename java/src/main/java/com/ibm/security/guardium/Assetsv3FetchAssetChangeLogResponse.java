/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.security.guardium;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.security.guardium.Assetsv3AssetChangeLog;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.security.JSON;

/**
 * Assetsv3FetchAssetChangeLogResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-27T16:17:29.841502Z[UTC]", comments = "Generator version: 7.6.0")
public class Assetsv3FetchAssetChangeLogResponse {
  public static final String SERIALIZED_NAME_ASSET_CHANGE_LOG = "asset_change_log";
  @SerializedName(SERIALIZED_NAME_ASSET_CHANGE_LOG)
  private List<Assetsv3AssetChangeLog> assetChangeLog = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_COUNT = "total_count";
  @SerializedName(SERIALIZED_NAME_TOTAL_COUNT)
  private String totalCount;

  public Assetsv3FetchAssetChangeLogResponse() {
  }

  public Assetsv3FetchAssetChangeLogResponse assetChangeLog(List<Assetsv3AssetChangeLog> assetChangeLog) {
    this.assetChangeLog = assetChangeLog;
    return this;
  }

  public Assetsv3FetchAssetChangeLogResponse addAssetChangeLogItem(Assetsv3AssetChangeLog assetChangeLogItem) {
    if (this.assetChangeLog == null) {
      this.assetChangeLog = new ArrayList<>();
    }
    this.assetChangeLog.add(assetChangeLogItem);
    return this;
  }

   /**
   * Get assetChangeLog
   * @return assetChangeLog
  **/
  @javax.annotation.Nullable
  public List<Assetsv3AssetChangeLog> getAssetChangeLog() {
    return assetChangeLog;
  }

  public void setAssetChangeLog(List<Assetsv3AssetChangeLog> assetChangeLog) {
    this.assetChangeLog = assetChangeLog;
  }


  public Assetsv3FetchAssetChangeLogResponse totalCount(String totalCount) {
    this.totalCount = totalCount;
    return this;
  }

   /**
   * Get totalCount
   * @return totalCount
  **/
  @javax.annotation.Nullable
  public String getTotalCount() {
    return totalCount;
  }

  public void setTotalCount(String totalCount) {
    this.totalCount = totalCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Assetsv3FetchAssetChangeLogResponse assetsv3FetchAssetChangeLogResponse = (Assetsv3FetchAssetChangeLogResponse) o;
    return Objects.equals(this.assetChangeLog, assetsv3FetchAssetChangeLogResponse.assetChangeLog) &&
        Objects.equals(this.totalCount, assetsv3FetchAssetChangeLogResponse.totalCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assetChangeLog, totalCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Assetsv3FetchAssetChangeLogResponse {\n");
    sb.append("    assetChangeLog: ").append(toIndentedString(assetChangeLog)).append("\n");
    sb.append("    totalCount: ").append(toIndentedString(totalCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("asset_change_log");
    openapiFields.add("total_count");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Assetsv3FetchAssetChangeLogResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Assetsv3FetchAssetChangeLogResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Assetsv3FetchAssetChangeLogResponse is not found in the empty JSON string", Assetsv3FetchAssetChangeLogResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Assetsv3FetchAssetChangeLogResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Assetsv3FetchAssetChangeLogResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("asset_change_log") != null && !jsonObj.get("asset_change_log").isJsonNull()) {
        JsonArray jsonArrayassetChangeLog = jsonObj.getAsJsonArray("asset_change_log");
        if (jsonArrayassetChangeLog != null) {
          // ensure the json data is an array
          if (!jsonObj.get("asset_change_log").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `asset_change_log` to be an array in the JSON string but got `%s`", jsonObj.get("asset_change_log").toString()));
          }

          // validate the optional field `asset_change_log` (array)
          for (int i = 0; i < jsonArrayassetChangeLog.size(); i++) {
            Assetsv3AssetChangeLog.validateJsonElement(jsonArrayassetChangeLog.get(i));
          };
        }
      }
      if ((jsonObj.get("total_count") != null && !jsonObj.get("total_count").isJsonNull()) && !jsonObj.get("total_count").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total_count` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total_count").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Assetsv3FetchAssetChangeLogResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Assetsv3FetchAssetChangeLogResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Assetsv3FetchAssetChangeLogResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Assetsv3FetchAssetChangeLogResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<Assetsv3FetchAssetChangeLogResponse>() {
           @Override
           public void write(JsonWriter out, Assetsv3FetchAssetChangeLogResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Assetsv3FetchAssetChangeLogResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Assetsv3FetchAssetChangeLogResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Assetsv3FetchAssetChangeLogResponse
  * @throws IOException if the JSON string is invalid with respect to Assetsv3FetchAssetChangeLogResponse
  */
  public static Assetsv3FetchAssetChangeLogResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Assetsv3FetchAssetChangeLogResponse.class);
  }

 /**
  * Convert an instance of Assetsv3FetchAssetChangeLogResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

