/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk.api;

import com.ibm.gdsc.sdk.ApiCallback;
import com.ibm.gdsc.sdk.ApiClient;
import com.ibm.gdsc.sdk.ApiException;
import com.ibm.gdsc.sdk.ApiResponse;
import com.ibm.gdsc.sdk.Configuration;
import com.ibm.gdsc.sdk.Pair;
import com.ibm.gdsc.sdk.ProgressRequestBody;
import com.ibm.gdsc.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ibm.gdsc.sdk.models.Auditv3GetActivityRecordsResponse;
import com.ibm.gdsc.sdk.models.Auditv3PutActivityRecordRequest;
import com.ibm.gdsc.sdk.models.Auditv3PutActivityRecordResponse;
import java.time.OffsetDateTime;
import com.ibm.gdsc.sdk.models.RuntimeError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuditServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AuditServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuditServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for auditServiceGetActivityRecords
     * @param startTime Return records starting at this time (&gt;&#x3D;). (optional)
     * @param endTime Return records ending before this time (&lt;). (optional)
     * @param uid Return records with this service/collection id. (optional)
     * @param actionTaken Return records matching this operation (CRUD or other action). (optional)
     * @param context Return records for this service/collection. (optional)
     * @param changesMade Return records created only for this reason. (optional)
     * @param performedBy Return records originating with the specified user id. (optional)
     * @param contextDescription Return records with this label. (optional)
     * @param query Return records based on the query. (optional)
     * @param offset The amount to offset the rows by for pagination. (optional)
     * @param limit The max amount of rows to return for pagination. (optional)
     * @param filter Return eligable filters if this is true. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call auditServiceGetActivityRecordsCall(OffsetDateTime startTime, OffsetDateTime endTime, String uid, String actionTaken, String context, String changesMade, String performedBy, String contextDescription, String query, Long offset, Long limit, Boolean filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/activity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_time", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_time", endTime));
        }

        if (uid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uid", uid));
        }

        if (actionTaken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("action_taken", actionTaken));
        }

        if (context != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context", context));
        }

        if (changesMade != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("changes_made", changesMade));
        }

        if (performedBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("performed_by", performedBy));
        }

        if (contextDescription != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("context_description", contextDescription));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call auditServiceGetActivityRecordsValidateBeforeCall(OffsetDateTime startTime, OffsetDateTime endTime, String uid, String actionTaken, String context, String changesMade, String performedBy, String contextDescription, String query, Long offset, Long limit, Boolean filter, final ApiCallback _callback) throws ApiException {
        return auditServiceGetActivityRecordsCall(startTime, endTime, uid, actionTaken, context, changesMade, performedBy, contextDescription, query, offset, limit, filter, _callback);

    }

    /**
     * Summary: Get activity records Description: Return activity records that match the arguments passed in the request.  Multiple values can be passed to the (UID, Context, ActionTaken, PerformedBy) fields by supplying a  comma-separated list to the corresponding fields in the request.  For instance to check for  multiple Contexts set the field to \&quot;op1, op2, op3\&quot;.
     * 
     * @param startTime Return records starting at this time (&gt;&#x3D;). (optional)
     * @param endTime Return records ending before this time (&lt;). (optional)
     * @param uid Return records with this service/collection id. (optional)
     * @param actionTaken Return records matching this operation (CRUD or other action). (optional)
     * @param context Return records for this service/collection. (optional)
     * @param changesMade Return records created only for this reason. (optional)
     * @param performedBy Return records originating with the specified user id. (optional)
     * @param contextDescription Return records with this label. (optional)
     * @param query Return records based on the query. (optional)
     * @param offset The amount to offset the rows by for pagination. (optional)
     * @param limit The max amount of rows to return for pagination. (optional)
     * @param filter Return eligable filters if this is true. (optional)
     * @return Auditv3GetActivityRecordsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Auditv3GetActivityRecordsResponse auditServiceGetActivityRecords(OffsetDateTime startTime, OffsetDateTime endTime, String uid, String actionTaken, String context, String changesMade, String performedBy, String contextDescription, String query, Long offset, Long limit, Boolean filter) throws ApiException {
        ApiResponse<Auditv3GetActivityRecordsResponse> localVarResp = auditServiceGetActivityRecordsWithHttpInfo(startTime, endTime, uid, actionTaken, context, changesMade, performedBy, contextDescription, query, offset, limit, filter);
        return localVarResp.getData();
    }

    /**
     * Summary: Get activity records Description: Return activity records that match the arguments passed in the request.  Multiple values can be passed to the (UID, Context, ActionTaken, PerformedBy) fields by supplying a  comma-separated list to the corresponding fields in the request.  For instance to check for  multiple Contexts set the field to \&quot;op1, op2, op3\&quot;.
     * 
     * @param startTime Return records starting at this time (&gt;&#x3D;). (optional)
     * @param endTime Return records ending before this time (&lt;). (optional)
     * @param uid Return records with this service/collection id. (optional)
     * @param actionTaken Return records matching this operation (CRUD or other action). (optional)
     * @param context Return records for this service/collection. (optional)
     * @param changesMade Return records created only for this reason. (optional)
     * @param performedBy Return records originating with the specified user id. (optional)
     * @param contextDescription Return records with this label. (optional)
     * @param query Return records based on the query. (optional)
     * @param offset The amount to offset the rows by for pagination. (optional)
     * @param limit The max amount of rows to return for pagination. (optional)
     * @param filter Return eligable filters if this is true. (optional)
     * @return ApiResponse&lt;Auditv3GetActivityRecordsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Auditv3GetActivityRecordsResponse> auditServiceGetActivityRecordsWithHttpInfo(OffsetDateTime startTime, OffsetDateTime endTime, String uid, String actionTaken, String context, String changesMade, String performedBy, String contextDescription, String query, Long offset, Long limit, Boolean filter) throws ApiException {
        okhttp3.Call localVarCall = auditServiceGetActivityRecordsValidateBeforeCall(startTime, endTime, uid, actionTaken, context, changesMade, performedBy, contextDescription, query, offset, limit, filter, null);
        Type localVarReturnType = new TypeToken<Auditv3GetActivityRecordsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get activity records Description: Return activity records that match the arguments passed in the request.  Multiple values can be passed to the (UID, Context, ActionTaken, PerformedBy) fields by supplying a  comma-separated list to the corresponding fields in the request.  For instance to check for  multiple Contexts set the field to \&quot;op1, op2, op3\&quot;. (asynchronously)
     * 
     * @param startTime Return records starting at this time (&gt;&#x3D;). (optional)
     * @param endTime Return records ending before this time (&lt;). (optional)
     * @param uid Return records with this service/collection id. (optional)
     * @param actionTaken Return records matching this operation (CRUD or other action). (optional)
     * @param context Return records for this service/collection. (optional)
     * @param changesMade Return records created only for this reason. (optional)
     * @param performedBy Return records originating with the specified user id. (optional)
     * @param contextDescription Return records with this label. (optional)
     * @param query Return records based on the query. (optional)
     * @param offset The amount to offset the rows by for pagination. (optional)
     * @param limit The max amount of rows to return for pagination. (optional)
     * @param filter Return eligable filters if this is true. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call auditServiceGetActivityRecordsAsync(OffsetDateTime startTime, OffsetDateTime endTime, String uid, String actionTaken, String context, String changesMade, String performedBy, String contextDescription, String query, Long offset, Long limit, Boolean filter, final ApiCallback<Auditv3GetActivityRecordsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = auditServiceGetActivityRecordsValidateBeforeCall(startTime, endTime, uid, actionTaken, context, changesMade, performedBy, contextDescription, query, offset, limit, filter, _callback);
        Type localVarReturnType = new TypeToken<Auditv3GetActivityRecordsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for auditServicePutDownloadActivityRecord
     * @param auditv3PutActivityRecordRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call auditServicePutDownloadActivityRecordCall(Auditv3PutActivityRecordRequest auditv3PutActivityRecordRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = auditv3PutActivityRecordRequest;

        // create path and map variables
        String localVarPath = "/api/v3/activity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call auditServicePutDownloadActivityRecordValidateBeforeCall(Auditv3PutActivityRecordRequest auditv3PutActivityRecordRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'auditv3PutActivityRecordRequest' is set
        if (auditv3PutActivityRecordRequest == null) {
            throw new ApiException("Missing the required parameter 'auditv3PutActivityRecordRequest' when calling auditServicePutDownloadActivityRecord(Async)");
        }

        return auditServicePutDownloadActivityRecordCall(auditv3PutActivityRecordRequest, _callback);

    }

    /**
     * Summary: Put download activity record Description: Create an activity log record with the arguments passed in the request.
     * 
     * @param auditv3PutActivityRecordRequest  (required)
     * @return Auditv3PutActivityRecordResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Auditv3PutActivityRecordResponse auditServicePutDownloadActivityRecord(Auditv3PutActivityRecordRequest auditv3PutActivityRecordRequest) throws ApiException {
        ApiResponse<Auditv3PutActivityRecordResponse> localVarResp = auditServicePutDownloadActivityRecordWithHttpInfo(auditv3PutActivityRecordRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Put download activity record Description: Create an activity log record with the arguments passed in the request.
     * 
     * @param auditv3PutActivityRecordRequest  (required)
     * @return ApiResponse&lt;Auditv3PutActivityRecordResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Auditv3PutActivityRecordResponse> auditServicePutDownloadActivityRecordWithHttpInfo(Auditv3PutActivityRecordRequest auditv3PutActivityRecordRequest) throws ApiException {
        okhttp3.Call localVarCall = auditServicePutDownloadActivityRecordValidateBeforeCall(auditv3PutActivityRecordRequest, null);
        Type localVarReturnType = new TypeToken<Auditv3PutActivityRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Put download activity record Description: Create an activity log record with the arguments passed in the request. (asynchronously)
     * 
     * @param auditv3PutActivityRecordRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call auditServicePutDownloadActivityRecordAsync(Auditv3PutActivityRecordRequest auditv3PutActivityRecordRequest, final ApiCallback<Auditv3PutActivityRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = auditServicePutDownloadActivityRecordValidateBeforeCall(auditv3PutActivityRecordRequest, _callback);
        Type localVarReturnType = new TypeToken<Auditv3PutActivityRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
