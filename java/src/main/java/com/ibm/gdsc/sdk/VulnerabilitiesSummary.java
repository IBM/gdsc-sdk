/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.gdsc.sdk.VulnerabilitiesCriticalityCountInner;
import com.ibm.gdsc.sdk.VulnerabilitiesSummaryAffectedDataStoreSummary;
import com.ibm.gdsc.sdk.VulnerabilitiesSummaryStatusSummary;
import com.ibm.gdsc.sdk.VulnerabilitiesSummaryStatusTypeCountInner;
import com.ibm.gdsc.sdk.VulnerabilitiesSummaryVulnerabilityTypeCountInner;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.JSON;

/**
 * VulnerabilitiesSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-18T20:02:04.461512Z[UTC]", comments = "Generator version: 7.6.0")
public class VulnerabilitiesSummary {
  public static final String SERIALIZED_NAME_CRITICALITY_COUNT = "criticalityCount";
  @SerializedName(SERIALIZED_NAME_CRITICALITY_COUNT)
  private List<VulnerabilitiesCriticalityCountInner> criticalityCount = new ArrayList<>();

  public static final String SERIALIZED_NAME_VULNERABILITY_TYPE_COUNT = "vulnerabilityTypeCount";
  @SerializedName(SERIALIZED_NAME_VULNERABILITY_TYPE_COUNT)
  private List<VulnerabilitiesSummaryVulnerabilityTypeCountInner> vulnerabilityTypeCount = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS_TYPE_COUNT = "statusTypeCount";
  @SerializedName(SERIALIZED_NAME_STATUS_TYPE_COUNT)
  private List<VulnerabilitiesSummaryStatusTypeCountInner> statusTypeCount = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS_SUMMARY = "statusSummary";
  @SerializedName(SERIALIZED_NAME_STATUS_SUMMARY)
  private VulnerabilitiesSummaryStatusSummary statusSummary;

  public static final String SERIALIZED_NAME_AFFECTED_DATA_STORE_SUMMARY = "affectedDataStoreSummary";
  @SerializedName(SERIALIZED_NAME_AFFECTED_DATA_STORE_SUMMARY)
  private VulnerabilitiesSummaryAffectedDataStoreSummary affectedDataStoreSummary;

  public VulnerabilitiesSummary() {
  }

  public VulnerabilitiesSummary criticalityCount(List<VulnerabilitiesCriticalityCountInner> criticalityCount) {
    this.criticalityCount = criticalityCount;
    return this;
  }

  public VulnerabilitiesSummary addCriticalityCountItem(VulnerabilitiesCriticalityCountInner criticalityCountItem) {
    if (this.criticalityCount == null) {
      this.criticalityCount = new ArrayList<>();
    }
    this.criticalityCount.add(criticalityCountItem);
    return this;
  }

   /**
   * Get criticalityCount
   * @return criticalityCount
  **/
  @javax.annotation.Nonnull
  public List<VulnerabilitiesCriticalityCountInner> getCriticalityCount() {
    return criticalityCount;
  }

  public void setCriticalityCount(List<VulnerabilitiesCriticalityCountInner> criticalityCount) {
    this.criticalityCount = criticalityCount;
  }


  public VulnerabilitiesSummary vulnerabilityTypeCount(List<VulnerabilitiesSummaryVulnerabilityTypeCountInner> vulnerabilityTypeCount) {
    this.vulnerabilityTypeCount = vulnerabilityTypeCount;
    return this;
  }

  public VulnerabilitiesSummary addVulnerabilityTypeCountItem(VulnerabilitiesSummaryVulnerabilityTypeCountInner vulnerabilityTypeCountItem) {
    if (this.vulnerabilityTypeCount == null) {
      this.vulnerabilityTypeCount = new ArrayList<>();
    }
    this.vulnerabilityTypeCount.add(vulnerabilityTypeCountItem);
    return this;
  }

   /**
   * Get vulnerabilityTypeCount
   * @return vulnerabilityTypeCount
  **/
  @javax.annotation.Nonnull
  public List<VulnerabilitiesSummaryVulnerabilityTypeCountInner> getVulnerabilityTypeCount() {
    return vulnerabilityTypeCount;
  }

  public void setVulnerabilityTypeCount(List<VulnerabilitiesSummaryVulnerabilityTypeCountInner> vulnerabilityTypeCount) {
    this.vulnerabilityTypeCount = vulnerabilityTypeCount;
  }


  public VulnerabilitiesSummary statusTypeCount(List<VulnerabilitiesSummaryStatusTypeCountInner> statusTypeCount) {
    this.statusTypeCount = statusTypeCount;
    return this;
  }

  public VulnerabilitiesSummary addStatusTypeCountItem(VulnerabilitiesSummaryStatusTypeCountInner statusTypeCountItem) {
    if (this.statusTypeCount == null) {
      this.statusTypeCount = new ArrayList<>();
    }
    this.statusTypeCount.add(statusTypeCountItem);
    return this;
  }

   /**
   * Get statusTypeCount
   * @return statusTypeCount
  **/
  @javax.annotation.Nonnull
  public List<VulnerabilitiesSummaryStatusTypeCountInner> getStatusTypeCount() {
    return statusTypeCount;
  }

  public void setStatusTypeCount(List<VulnerabilitiesSummaryStatusTypeCountInner> statusTypeCount) {
    this.statusTypeCount = statusTypeCount;
  }


  public VulnerabilitiesSummary statusSummary(VulnerabilitiesSummaryStatusSummary statusSummary) {
    this.statusSummary = statusSummary;
    return this;
  }

   /**
   * Get statusSummary
   * @return statusSummary
  **/
  @javax.annotation.Nonnull
  public VulnerabilitiesSummaryStatusSummary getStatusSummary() {
    return statusSummary;
  }

  public void setStatusSummary(VulnerabilitiesSummaryStatusSummary statusSummary) {
    this.statusSummary = statusSummary;
  }


  public VulnerabilitiesSummary affectedDataStoreSummary(VulnerabilitiesSummaryAffectedDataStoreSummary affectedDataStoreSummary) {
    this.affectedDataStoreSummary = affectedDataStoreSummary;
    return this;
  }

   /**
   * Get affectedDataStoreSummary
   * @return affectedDataStoreSummary
  **/
  @javax.annotation.Nonnull
  public VulnerabilitiesSummaryAffectedDataStoreSummary getAffectedDataStoreSummary() {
    return affectedDataStoreSummary;
  }

  public void setAffectedDataStoreSummary(VulnerabilitiesSummaryAffectedDataStoreSummary affectedDataStoreSummary) {
    this.affectedDataStoreSummary = affectedDataStoreSummary;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VulnerabilitiesSummary vulnerabilitiesSummary = (VulnerabilitiesSummary) o;
    return Objects.equals(this.criticalityCount, vulnerabilitiesSummary.criticalityCount) &&
        Objects.equals(this.vulnerabilityTypeCount, vulnerabilitiesSummary.vulnerabilityTypeCount) &&
        Objects.equals(this.statusTypeCount, vulnerabilitiesSummary.statusTypeCount) &&
        Objects.equals(this.statusSummary, vulnerabilitiesSummary.statusSummary) &&
        Objects.equals(this.affectedDataStoreSummary, vulnerabilitiesSummary.affectedDataStoreSummary);
  }

  @Override
  public int hashCode() {
    return Objects.hash(criticalityCount, vulnerabilityTypeCount, statusTypeCount, statusSummary, affectedDataStoreSummary);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VulnerabilitiesSummary {\n");
    sb.append("    criticalityCount: ").append(toIndentedString(criticalityCount)).append("\n");
    sb.append("    vulnerabilityTypeCount: ").append(toIndentedString(vulnerabilityTypeCount)).append("\n");
    sb.append("    statusTypeCount: ").append(toIndentedString(statusTypeCount)).append("\n");
    sb.append("    statusSummary: ").append(toIndentedString(statusSummary)).append("\n");
    sb.append("    affectedDataStoreSummary: ").append(toIndentedString(affectedDataStoreSummary)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("criticalityCount");
    openapiFields.add("vulnerabilityTypeCount");
    openapiFields.add("statusTypeCount");
    openapiFields.add("statusSummary");
    openapiFields.add("affectedDataStoreSummary");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("criticalityCount");
    openapiRequiredFields.add("vulnerabilityTypeCount");
    openapiRequiredFields.add("statusTypeCount");
    openapiRequiredFields.add("statusSummary");
    openapiRequiredFields.add("affectedDataStoreSummary");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to VulnerabilitiesSummary
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VulnerabilitiesSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VulnerabilitiesSummary is not found in the empty JSON string", VulnerabilitiesSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VulnerabilitiesSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VulnerabilitiesSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VulnerabilitiesSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("criticalityCount").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `criticalityCount` to be an array in the JSON string but got `%s`", jsonObj.get("criticalityCount").toString()));
      }

      JsonArray jsonArraycriticalityCount = jsonObj.getAsJsonArray("criticalityCount");
      // validate the required field `criticalityCount` (array)
      for (int i = 0; i < jsonArraycriticalityCount.size(); i++) {
        VulnerabilitiesCriticalityCountInner.validateJsonElement(jsonArraycriticalityCount.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("vulnerabilityTypeCount").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `vulnerabilityTypeCount` to be an array in the JSON string but got `%s`", jsonObj.get("vulnerabilityTypeCount").toString()));
      }

      JsonArray jsonArrayvulnerabilityTypeCount = jsonObj.getAsJsonArray("vulnerabilityTypeCount");
      // validate the required field `vulnerabilityTypeCount` (array)
      for (int i = 0; i < jsonArrayvulnerabilityTypeCount.size(); i++) {
        VulnerabilitiesSummaryVulnerabilityTypeCountInner.validateJsonElement(jsonArrayvulnerabilityTypeCount.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("statusTypeCount").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusTypeCount` to be an array in the JSON string but got `%s`", jsonObj.get("statusTypeCount").toString()));
      }

      JsonArray jsonArraystatusTypeCount = jsonObj.getAsJsonArray("statusTypeCount");
      // validate the required field `statusTypeCount` (array)
      for (int i = 0; i < jsonArraystatusTypeCount.size(); i++) {
        VulnerabilitiesSummaryStatusTypeCountInner.validateJsonElement(jsonArraystatusTypeCount.get(i));
      };
      // validate the required field `statusSummary`
      VulnerabilitiesSummaryStatusSummary.validateJsonElement(jsonObj.get("statusSummary"));
      // validate the required field `affectedDataStoreSummary`
      VulnerabilitiesSummaryAffectedDataStoreSummary.validateJsonElement(jsonObj.get("affectedDataStoreSummary"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VulnerabilitiesSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VulnerabilitiesSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VulnerabilitiesSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VulnerabilitiesSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<VulnerabilitiesSummary>() {
           @Override
           public void write(JsonWriter out, VulnerabilitiesSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VulnerabilitiesSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VulnerabilitiesSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VulnerabilitiesSummary
  * @throws IOException if the JSON string is invalid with respect to VulnerabilitiesSummary
  */
  public static VulnerabilitiesSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VulnerabilitiesSummary.class);
  }

 /**
  * Convert an instance of VulnerabilitiesSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

