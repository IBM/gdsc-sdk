/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.gdsc.sdk.Compliance;
import com.ibm.gdsc.sdk.VulnerabilityCriticality;
import com.ibm.gdsc.sdk.VulnerabilityFlowRef;
import com.ibm.gdsc.sdk.VulnerabilityRelatedAsset;
import com.ibm.gdsc.sdk.VulnerabilityRemediation;
import com.ibm.gdsc.sdk.VulnerabilityStatus;
import com.ibm.gdsc.sdk.VulnerabilityType;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.JSON;

/**
 * Vulnerability
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-18T18:23:51.166908Z[UTC]", comments = "Generator version: 7.6.0")
public class Vulnerability {
  public static final String SERIALIZED_NAME_VULNERABILITY_ID = "vulnerabilityId";
  @SerializedName(SERIALIZED_NAME_VULNERABILITY_ID)
  private String vulnerabilityId;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private VulnerabilityType type;

  public static final String SERIALIZED_NAME_SUB_TYPE = "subType";
  @SerializedName(SERIALIZED_NAME_SUB_TYPE)
  private String subType;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public static final String SERIALIZED_NAME_CONFIGURATION_REASON = "configurationReason";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_REASON)
  private String configurationReason;

  public static final String SERIALIZED_NAME_RECOMMENDATION = "recommendation";
  @SerializedName(SERIALIZED_NAME_RECOMMENDATION)
  private String recommendation;

  public static final String SERIALIZED_NAME_REMEDIATION = "remediation";
  @SerializedName(SERIALIZED_NAME_REMEDIATION)
  private VulnerabilityRemediation remediation;

  public static final String SERIALIZED_NAME_DETECTION_TIMESTAMP = "detectionTimestamp";
  @SerializedName(SERIALIZED_NAME_DETECTION_TIMESTAMP)
  private BigDecimal detectionTimestamp;

  public static final String SERIALIZED_NAME_CRITICALITY = "criticality";
  @SerializedName(SERIALIZED_NAME_CRITICALITY)
  private VulnerabilityCriticality criticality;

  /**
   * Gets or Sets threats
   */
  @JsonAdapter(ThreatsEnum.Adapter.class)
  public enum ThreatsEnum {
    DATA_LEAKAGE("Data Leakage"),
    
    RANSOMWARE("Ransomware"),
    
    COMPLIANCE_VIOLATION("Compliance Violation"),
    
    MALWARE("Malware"),
    
    EXTERNAL_SHARING("External Sharing");

    private String value;

    ThreatsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ThreatsEnum fromValue(String value) {
      for (ThreatsEnum b : ThreatsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ThreatsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ThreatsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ThreatsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ThreatsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ThreatsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_THREATS = "threats";
  @SerializedName(SERIALIZED_NAME_THREATS)
  private List<ThreatsEnum> threats = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMPLIANCE = "compliance";
  @SerializedName(SERIALIZED_NAME_COMPLIANCE)
  private List<Compliance> compliance = new ArrayList<>();

  public static final String SERIALIZED_NAME_AFFECTED_ASSET = "affectedAsset";
  @SerializedName(SERIALIZED_NAME_AFFECTED_ASSET)
  private VulnerabilityRelatedAsset affectedAsset;

  public static final String SERIALIZED_NAME_STATUS_HISTORY = "statusHistory";
  @SerializedName(SERIALIZED_NAME_STATUS_HISTORY)
  private List<VulnerabilityStatus> statusHistory = new ArrayList<>();

  public static final String SERIALIZED_NAME_FLOW_REF = "flowRef";
  @SerializedName(SERIALIZED_NAME_FLOW_REF)
  private VulnerabilityFlowRef flowRef;

  public static final String SERIALIZED_NAME_RELATED_ASSETS = "relatedAssets";
  @SerializedName(SERIALIZED_NAME_RELATED_ASSETS)
  private List<VulnerabilityRelatedAsset> relatedAssets = new ArrayList<>();

  public Vulnerability() {
  }

  public Vulnerability vulnerabilityId(String vulnerabilityId) {
    this.vulnerabilityId = vulnerabilityId;
    return this;
  }

   /**
   * Get vulnerabilityId
   * @return vulnerabilityId
  **/
  @javax.annotation.Nonnull
  public String getVulnerabilityId() {
    return vulnerabilityId;
  }

  public void setVulnerabilityId(String vulnerabilityId) {
    this.vulnerabilityId = vulnerabilityId;
  }


  public Vulnerability type(VulnerabilityType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  public VulnerabilityType getType() {
    return type;
  }

  public void setType(VulnerabilityType type) {
    this.type = type;
  }


  public Vulnerability subType(String subType) {
    this.subType = subType;
    return this;
  }

   /**
   * Get subType
   * @return subType
  **/
  @javax.annotation.Nullable
  public String getSubType() {
    return subType;
  }

  public void setSubType(String subType) {
    this.subType = subType;
  }


  public Vulnerability title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Vulnerability description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Vulnerability reason(String reason) {
    this.reason = reason;
    return this;
  }

   /**
   * Get reason
   * @return reason
  **/
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }


  public Vulnerability configurationReason(String configurationReason) {
    this.configurationReason = configurationReason;
    return this;
  }

   /**
   * Get configurationReason
   * @return configurationReason
  **/
  @javax.annotation.Nullable
  public String getConfigurationReason() {
    return configurationReason;
  }

  public void setConfigurationReason(String configurationReason) {
    this.configurationReason = configurationReason;
  }


  public Vulnerability recommendation(String recommendation) {
    this.recommendation = recommendation;
    return this;
  }

   /**
   * Get recommendation
   * @return recommendation
  **/
  @javax.annotation.Nullable
  public String getRecommendation() {
    return recommendation;
  }

  public void setRecommendation(String recommendation) {
    this.recommendation = recommendation;
  }


  public Vulnerability remediation(VulnerabilityRemediation remediation) {
    this.remediation = remediation;
    return this;
  }

   /**
   * Get remediation
   * @return remediation
  **/
  @javax.annotation.Nullable
  public VulnerabilityRemediation getRemediation() {
    return remediation;
  }

  public void setRemediation(VulnerabilityRemediation remediation) {
    this.remediation = remediation;
  }


  public Vulnerability detectionTimestamp(BigDecimal detectionTimestamp) {
    this.detectionTimestamp = detectionTimestamp;
    return this;
  }

   /**
   * Get detectionTimestamp
   * @return detectionTimestamp
  **/
  @javax.annotation.Nonnull
  public BigDecimal getDetectionTimestamp() {
    return detectionTimestamp;
  }

  public void setDetectionTimestamp(BigDecimal detectionTimestamp) {
    this.detectionTimestamp = detectionTimestamp;
  }


  public Vulnerability criticality(VulnerabilityCriticality criticality) {
    this.criticality = criticality;
    return this;
  }

   /**
   * Get criticality
   * @return criticality
  **/
  @javax.annotation.Nonnull
  public VulnerabilityCriticality getCriticality() {
    return criticality;
  }

  public void setCriticality(VulnerabilityCriticality criticality) {
    this.criticality = criticality;
  }


  public Vulnerability threats(List<ThreatsEnum> threats) {
    this.threats = threats;
    return this;
  }

  public Vulnerability addThreatsItem(ThreatsEnum threatsItem) {
    if (this.threats == null) {
      this.threats = new ArrayList<>();
    }
    this.threats.add(threatsItem);
    return this;
  }

   /**
   * Get threats
   * @return threats
  **/
  @javax.annotation.Nullable
  public List<ThreatsEnum> getThreats() {
    return threats;
  }

  public void setThreats(List<ThreatsEnum> threats) {
    this.threats = threats;
  }


  public Vulnerability compliance(List<Compliance> compliance) {
    this.compliance = compliance;
    return this;
  }

  public Vulnerability addComplianceItem(Compliance complianceItem) {
    if (this.compliance == null) {
      this.compliance = new ArrayList<>();
    }
    this.compliance.add(complianceItem);
    return this;
  }

   /**
   * Get compliance
   * @return compliance
  **/
  @javax.annotation.Nullable
  public List<Compliance> getCompliance() {
    return compliance;
  }

  public void setCompliance(List<Compliance> compliance) {
    this.compliance = compliance;
  }


  public Vulnerability affectedAsset(VulnerabilityRelatedAsset affectedAsset) {
    this.affectedAsset = affectedAsset;
    return this;
  }

   /**
   * Get affectedAsset
   * @return affectedAsset
  **/
  @javax.annotation.Nullable
  public VulnerabilityRelatedAsset getAffectedAsset() {
    return affectedAsset;
  }

  public void setAffectedAsset(VulnerabilityRelatedAsset affectedAsset) {
    this.affectedAsset = affectedAsset;
  }


  public Vulnerability statusHistory(List<VulnerabilityStatus> statusHistory) {
    this.statusHistory = statusHistory;
    return this;
  }

  public Vulnerability addStatusHistoryItem(VulnerabilityStatus statusHistoryItem) {
    if (this.statusHistory == null) {
      this.statusHistory = new ArrayList<>();
    }
    this.statusHistory.add(statusHistoryItem);
    return this;
  }

   /**
   * Get statusHistory
   * @return statusHistory
  **/
  @javax.annotation.Nullable
  public List<VulnerabilityStatus> getStatusHistory() {
    return statusHistory;
  }

  public void setStatusHistory(List<VulnerabilityStatus> statusHistory) {
    this.statusHistory = statusHistory;
  }


  public Vulnerability flowRef(VulnerabilityFlowRef flowRef) {
    this.flowRef = flowRef;
    return this;
  }

   /**
   * Get flowRef
   * @return flowRef
  **/
  @javax.annotation.Nullable
  public VulnerabilityFlowRef getFlowRef() {
    return flowRef;
  }

  public void setFlowRef(VulnerabilityFlowRef flowRef) {
    this.flowRef = flowRef;
  }


  public Vulnerability relatedAssets(List<VulnerabilityRelatedAsset> relatedAssets) {
    this.relatedAssets = relatedAssets;
    return this;
  }

  public Vulnerability addRelatedAssetsItem(VulnerabilityRelatedAsset relatedAssetsItem) {
    if (this.relatedAssets == null) {
      this.relatedAssets = new ArrayList<>();
    }
    this.relatedAssets.add(relatedAssetsItem);
    return this;
  }

   /**
   * Get relatedAssets
   * @return relatedAssets
  **/
  @javax.annotation.Nullable
  public List<VulnerabilityRelatedAsset> getRelatedAssets() {
    return relatedAssets;
  }

  public void setRelatedAssets(List<VulnerabilityRelatedAsset> relatedAssets) {
    this.relatedAssets = relatedAssets;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Vulnerability vulnerability = (Vulnerability) o;
    return Objects.equals(this.vulnerabilityId, vulnerability.vulnerabilityId) &&
        Objects.equals(this.type, vulnerability.type) &&
        Objects.equals(this.subType, vulnerability.subType) &&
        Objects.equals(this.title, vulnerability.title) &&
        Objects.equals(this.description, vulnerability.description) &&
        Objects.equals(this.reason, vulnerability.reason) &&
        Objects.equals(this.configurationReason, vulnerability.configurationReason) &&
        Objects.equals(this.recommendation, vulnerability.recommendation) &&
        Objects.equals(this.remediation, vulnerability.remediation) &&
        Objects.equals(this.detectionTimestamp, vulnerability.detectionTimestamp) &&
        Objects.equals(this.criticality, vulnerability.criticality) &&
        Objects.equals(this.threats, vulnerability.threats) &&
        Objects.equals(this.compliance, vulnerability.compliance) &&
        Objects.equals(this.affectedAsset, vulnerability.affectedAsset) &&
        Objects.equals(this.statusHistory, vulnerability.statusHistory) &&
        Objects.equals(this.flowRef, vulnerability.flowRef) &&
        Objects.equals(this.relatedAssets, vulnerability.relatedAssets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vulnerabilityId, type, subType, title, description, reason, configurationReason, recommendation, remediation, detectionTimestamp, criticality, threats, compliance, affectedAsset, statusHistory, flowRef, relatedAssets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Vulnerability {\n");
    sb.append("    vulnerabilityId: ").append(toIndentedString(vulnerabilityId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    subType: ").append(toIndentedString(subType)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    configurationReason: ").append(toIndentedString(configurationReason)).append("\n");
    sb.append("    recommendation: ").append(toIndentedString(recommendation)).append("\n");
    sb.append("    remediation: ").append(toIndentedString(remediation)).append("\n");
    sb.append("    detectionTimestamp: ").append(toIndentedString(detectionTimestamp)).append("\n");
    sb.append("    criticality: ").append(toIndentedString(criticality)).append("\n");
    sb.append("    threats: ").append(toIndentedString(threats)).append("\n");
    sb.append("    compliance: ").append(toIndentedString(compliance)).append("\n");
    sb.append("    affectedAsset: ").append(toIndentedString(affectedAsset)).append("\n");
    sb.append("    statusHistory: ").append(toIndentedString(statusHistory)).append("\n");
    sb.append("    flowRef: ").append(toIndentedString(flowRef)).append("\n");
    sb.append("    relatedAssets: ").append(toIndentedString(relatedAssets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("vulnerabilityId");
    openapiFields.add("type");
    openapiFields.add("subType");
    openapiFields.add("title");
    openapiFields.add("description");
    openapiFields.add("reason");
    openapiFields.add("configurationReason");
    openapiFields.add("recommendation");
    openapiFields.add("remediation");
    openapiFields.add("detectionTimestamp");
    openapiFields.add("criticality");
    openapiFields.add("threats");
    openapiFields.add("compliance");
    openapiFields.add("affectedAsset");
    openapiFields.add("statusHistory");
    openapiFields.add("flowRef");
    openapiFields.add("relatedAssets");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("vulnerabilityId");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("detectionTimestamp");
    openapiRequiredFields.add("criticality");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Vulnerability
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Vulnerability.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Vulnerability is not found in the empty JSON string", Vulnerability.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Vulnerability.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Vulnerability` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Vulnerability.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("vulnerabilityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vulnerabilityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vulnerabilityId").toString()));
      }
      // validate the required field `type`
      VulnerabilityType.validateJsonElement(jsonObj.get("type"));
      if ((jsonObj.get("subType") != null && !jsonObj.get("subType").isJsonNull()) && !jsonObj.get("subType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subType").toString()));
      }
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      if ((jsonObj.get("configurationReason") != null && !jsonObj.get("configurationReason").isJsonNull()) && !jsonObj.get("configurationReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `configurationReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("configurationReason").toString()));
      }
      if ((jsonObj.get("recommendation") != null && !jsonObj.get("recommendation").isJsonNull()) && !jsonObj.get("recommendation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recommendation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recommendation").toString()));
      }
      // validate the optional field `remediation`
      if (jsonObj.get("remediation") != null && !jsonObj.get("remediation").isJsonNull()) {
        VulnerabilityRemediation.validateJsonElement(jsonObj.get("remediation"));
      }
      // validate the required field `criticality`
      VulnerabilityCriticality.validateJsonElement(jsonObj.get("criticality"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("threats") != null && !jsonObj.get("threats").isJsonNull() && !jsonObj.get("threats").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `threats` to be an array in the JSON string but got `%s`", jsonObj.get("threats").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("compliance") != null && !jsonObj.get("compliance").isJsonNull() && !jsonObj.get("compliance").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `compliance` to be an array in the JSON string but got `%s`", jsonObj.get("compliance").toString()));
      }
      // validate the optional field `affectedAsset`
      if (jsonObj.get("affectedAsset") != null && !jsonObj.get("affectedAsset").isJsonNull()) {
        VulnerabilityRelatedAsset.validateJsonElement(jsonObj.get("affectedAsset"));
      }
      if (jsonObj.get("statusHistory") != null && !jsonObj.get("statusHistory").isJsonNull()) {
        JsonArray jsonArraystatusHistory = jsonObj.getAsJsonArray("statusHistory");
        if (jsonArraystatusHistory != null) {
          // ensure the json data is an array
          if (!jsonObj.get("statusHistory").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `statusHistory` to be an array in the JSON string but got `%s`", jsonObj.get("statusHistory").toString()));
          }

          // validate the optional field `statusHistory` (array)
          for (int i = 0; i < jsonArraystatusHistory.size(); i++) {
            VulnerabilityStatus.validateJsonElement(jsonArraystatusHistory.get(i));
          };
        }
      }
      // validate the optional field `flowRef`
      if (jsonObj.get("flowRef") != null && !jsonObj.get("flowRef").isJsonNull()) {
        VulnerabilityFlowRef.validateJsonElement(jsonObj.get("flowRef"));
      }
      if (jsonObj.get("relatedAssets") != null && !jsonObj.get("relatedAssets").isJsonNull()) {
        JsonArray jsonArrayrelatedAssets = jsonObj.getAsJsonArray("relatedAssets");
        if (jsonArrayrelatedAssets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("relatedAssets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `relatedAssets` to be an array in the JSON string but got `%s`", jsonObj.get("relatedAssets").toString()));
          }

          // validate the optional field `relatedAssets` (array)
          for (int i = 0; i < jsonArrayrelatedAssets.size(); i++) {
            VulnerabilityRelatedAsset.validateJsonElement(jsonArrayrelatedAssets.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Vulnerability.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Vulnerability' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Vulnerability> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Vulnerability.class));

       return (TypeAdapter<T>) new TypeAdapter<Vulnerability>() {
           @Override
           public void write(JsonWriter out, Vulnerability value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Vulnerability read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Vulnerability given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Vulnerability
  * @throws IOException if the JSON string is invalid with respect to Vulnerability
  */
  public static Vulnerability fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Vulnerability.class);
  }

 /**
  * Convert an instance of Vulnerability to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

