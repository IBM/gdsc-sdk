/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.JSON;

/**
 * File object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-18T20:02:04.461512Z[UTC]", comments = "Generator version: 7.6.0")
public class Datamartprocessorv3DatamartFileInfo {
  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private String error;

  public static final String SERIALIZED_NAME_FAILED_STATE = "failed_state";
  @SerializedName(SERIALIZED_NAME_FAILED_STATE)
  private Boolean failedState;

  public static final String SERIALIZED_NAME_FILE_NAME = "file_name";
  @SerializedName(SERIALIZED_NAME_FILE_NAME)
  private String fileName;

  public static final String SERIALIZED_NAME_FILE_STATUS = "file_status";
  @SerializedName(SERIALIZED_NAME_FILE_STATUS)
  private Integer fileStatus;

  public static final String SERIALIZED_NAME_INGEST_RECORD_COUNT = "ingest_record_count";
  @SerializedName(SERIALIZED_NAME_INGEST_RECORD_COUNT)
  private Integer ingestRecordCount;

  public static final String SERIALIZED_NAME_RETRY_COUNT = "retry_count";
  @SerializedName(SERIALIZED_NAME_RETRY_COUNT)
  private Integer retryCount;

  public static final String SERIALIZED_NAME_RETRY_END_TIME = "retry_end_time";
  @SerializedName(SERIALIZED_NAME_RETRY_END_TIME)
  private OffsetDateTime retryEndTime;

  public static final String SERIALIZED_NAME_RETRY_START_TIME = "retry_start_time";
  @SerializedName(SERIALIZED_NAME_RETRY_START_TIME)
  private OffsetDateTime retryStartTime;

  public Datamartprocessorv3DatamartFileInfo() {
  }

  public Datamartprocessorv3DatamartFileInfo error(String error) {
    this.error = error;
    return this;
  }

   /**
   * Errors if any.
   * @return error
  **/
  @javax.annotation.Nullable
  public String getError() {
    return error;
  }

  public void setError(String error) {
    this.error = error;
  }


  public Datamartprocessorv3DatamartFileInfo failedState(Boolean failedState) {
    this.failedState = failedState;
    return this;
  }

   /**
   * If the file is in failed state, usually means failed permanently.
   * @return failedState
  **/
  @javax.annotation.Nullable
  public Boolean getFailedState() {
    return failedState;
  }

  public void setFailedState(Boolean failedState) {
    this.failedState = failedState;
  }


  public Datamartprocessorv3DatamartFileInfo fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

   /**
   * Filename.
   * @return fileName
  **/
  @javax.annotation.Nullable
  public String getFileName() {
    return fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }


  public Datamartprocessorv3DatamartFileInfo fileStatus(Integer fileStatus) {
    this.fileStatus = fileStatus;
    return this;
  }

   /**
   * Status of the file.
   * @return fileStatus
  **/
  @javax.annotation.Nullable
  public Integer getFileStatus() {
    return fileStatus;
  }

  public void setFileStatus(Integer fileStatus) {
    this.fileStatus = fileStatus;
  }


  public Datamartprocessorv3DatamartFileInfo ingestRecordCount(Integer ingestRecordCount) {
    this.ingestRecordCount = ingestRecordCount;
    return this;
  }

   /**
   * Total numbers of records ingested for this file in Insights.
   * @return ingestRecordCount
  **/
  @javax.annotation.Nullable
  public Integer getIngestRecordCount() {
    return ingestRecordCount;
  }

  public void setIngestRecordCount(Integer ingestRecordCount) {
    this.ingestRecordCount = ingestRecordCount;
  }


  public Datamartprocessorv3DatamartFileInfo retryCount(Integer retryCount) {
    this.retryCount = retryCount;
    return this;
  }

   /**
   * Total number of times file has been retried.
   * @return retryCount
  **/
  @javax.annotation.Nullable
  public Integer getRetryCount() {
    return retryCount;
  }

  public void setRetryCount(Integer retryCount) {
    this.retryCount = retryCount;
  }


  public Datamartprocessorv3DatamartFileInfo retryEndTime(OffsetDateTime retryEndTime) {
    this.retryEndTime = retryEndTime;
    return this;
  }

   /**
   * End time of last retry attempt.
   * @return retryEndTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getRetryEndTime() {
    return retryEndTime;
  }

  public void setRetryEndTime(OffsetDateTime retryEndTime) {
    this.retryEndTime = retryEndTime;
  }


  public Datamartprocessorv3DatamartFileInfo retryStartTime(OffsetDateTime retryStartTime) {
    this.retryStartTime = retryStartTime;
    return this;
  }

   /**
   * Start time of last retry attempt.
   * @return retryStartTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getRetryStartTime() {
    return retryStartTime;
  }

  public void setRetryStartTime(OffsetDateTime retryStartTime) {
    this.retryStartTime = retryStartTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Datamartprocessorv3DatamartFileInfo datamartprocessorv3DatamartFileInfo = (Datamartprocessorv3DatamartFileInfo) o;
    return Objects.equals(this.error, datamartprocessorv3DatamartFileInfo.error) &&
        Objects.equals(this.failedState, datamartprocessorv3DatamartFileInfo.failedState) &&
        Objects.equals(this.fileName, datamartprocessorv3DatamartFileInfo.fileName) &&
        Objects.equals(this.fileStatus, datamartprocessorv3DatamartFileInfo.fileStatus) &&
        Objects.equals(this.ingestRecordCount, datamartprocessorv3DatamartFileInfo.ingestRecordCount) &&
        Objects.equals(this.retryCount, datamartprocessorv3DatamartFileInfo.retryCount) &&
        Objects.equals(this.retryEndTime, datamartprocessorv3DatamartFileInfo.retryEndTime) &&
        Objects.equals(this.retryStartTime, datamartprocessorv3DatamartFileInfo.retryStartTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(error, failedState, fileName, fileStatus, ingestRecordCount, retryCount, retryEndTime, retryStartTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Datamartprocessorv3DatamartFileInfo {\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    failedState: ").append(toIndentedString(failedState)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    fileStatus: ").append(toIndentedString(fileStatus)).append("\n");
    sb.append("    ingestRecordCount: ").append(toIndentedString(ingestRecordCount)).append("\n");
    sb.append("    retryCount: ").append(toIndentedString(retryCount)).append("\n");
    sb.append("    retryEndTime: ").append(toIndentedString(retryEndTime)).append("\n");
    sb.append("    retryStartTime: ").append(toIndentedString(retryStartTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("error");
    openapiFields.add("failed_state");
    openapiFields.add("file_name");
    openapiFields.add("file_status");
    openapiFields.add("ingest_record_count");
    openapiFields.add("retry_count");
    openapiFields.add("retry_end_time");
    openapiFields.add("retry_start_time");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Datamartprocessorv3DatamartFileInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Datamartprocessorv3DatamartFileInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Datamartprocessorv3DatamartFileInfo is not found in the empty JSON string", Datamartprocessorv3DatamartFileInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Datamartprocessorv3DatamartFileInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Datamartprocessorv3DatamartFileInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) && !jsonObj.get("error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error").toString()));
      }
      if ((jsonObj.get("file_name") != null && !jsonObj.get("file_name").isJsonNull()) && !jsonObj.get("file_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Datamartprocessorv3DatamartFileInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Datamartprocessorv3DatamartFileInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Datamartprocessorv3DatamartFileInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Datamartprocessorv3DatamartFileInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<Datamartprocessorv3DatamartFileInfo>() {
           @Override
           public void write(JsonWriter out, Datamartprocessorv3DatamartFileInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Datamartprocessorv3DatamartFileInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Datamartprocessorv3DatamartFileInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Datamartprocessorv3DatamartFileInfo
  * @throws IOException if the JSON string is invalid with respect to Datamartprocessorv3DatamartFileInfo
  */
  public static Datamartprocessorv3DatamartFileInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Datamartprocessorv3DatamartFileInfo.class);
  }

 /**
  * Convert an instance of Datamartprocessorv3DatamartFileInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

