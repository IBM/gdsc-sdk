/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.JSON;

/**
 * AggregationDetailsObject gets additional information about aggregation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-15T03:58:58.617687Z[UTC]", comments = "Generator version: 7.6.0")
public class Healthcollectorv3AggregationDetailsObject {
  public static final String SERIALIZED_NAME_AGGREGATION_ACTION_ERROR = "aggregation_action_error";
  @SerializedName(SERIALIZED_NAME_AGGREGATION_ACTION_ERROR)
  private String aggregationActionError;

  public static final String SERIALIZED_NAME_AGGREGATION_ACTION_HEALTH_STATUS = "aggregation_action_health_status";
  @SerializedName(SERIALIZED_NAME_AGGREGATION_ACTION_HEALTH_STATUS)
  private Integer aggregationActionHealthStatus;

  public static final String SERIALIZED_NAME_AGGREGATION_TYPE = "aggregation_type";
  @SerializedName(SERIALIZED_NAME_AGGREGATION_TYPE)
  private String aggregationType;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private Integer error;

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private String unit;

  public Healthcollectorv3AggregationDetailsObject() {
  }

  public Healthcollectorv3AggregationDetailsObject aggregationActionError(String aggregationActionError) {
    this.aggregationActionError = aggregationActionError;
    return this;
  }

   /**
   * Aggregation action error.
   * @return aggregationActionError
  **/
  @javax.annotation.Nullable
  public String getAggregationActionError() {
    return aggregationActionError;
  }

  public void setAggregationActionError(String aggregationActionError) {
    this.aggregationActionError = aggregationActionError;
  }


  public Healthcollectorv3AggregationDetailsObject aggregationActionHealthStatus(Integer aggregationActionHealthStatus) {
    this.aggregationActionHealthStatus = aggregationActionHealthStatus;
    return this;
  }

   /**
   * Aggregation health status.
   * @return aggregationActionHealthStatus
  **/
  @javax.annotation.Nullable
  public Integer getAggregationActionHealthStatus() {
    return aggregationActionHealthStatus;
  }

  public void setAggregationActionHealthStatus(Integer aggregationActionHealthStatus) {
    this.aggregationActionHealthStatus = aggregationActionHealthStatus;
  }


  public Healthcollectorv3AggregationDetailsObject aggregationType(String aggregationType) {
    this.aggregationType = aggregationType;
    return this;
  }

   /**
   * Aggregation type.
   * @return aggregationType
  **/
  @javax.annotation.Nullable
  public String getAggregationType() {
    return aggregationType;
  }

  public void setAggregationType(String aggregationType) {
    this.aggregationType = aggregationType;
  }


  public Healthcollectorv3AggregationDetailsObject error(Integer error) {
    this.error = error;
    return this;
  }

   /**
   * Error code for the aggregator.
   * @return error
  **/
  @javax.annotation.Nullable
  public Integer getError() {
    return error;
  }

  public void setError(Integer error) {
    this.error = error;
  }


  public Healthcollectorv3AggregationDetailsObject unit(String unit) {
    this.unit = unit;
    return this;
  }

   /**
   * Aggregator host name or IP address.
   * @return unit
  **/
  @javax.annotation.Nullable
  public String getUnit() {
    return unit;
  }

  public void setUnit(String unit) {
    this.unit = unit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Healthcollectorv3AggregationDetailsObject healthcollectorv3AggregationDetailsObject = (Healthcollectorv3AggregationDetailsObject) o;
    return Objects.equals(this.aggregationActionError, healthcollectorv3AggregationDetailsObject.aggregationActionError) &&
        Objects.equals(this.aggregationActionHealthStatus, healthcollectorv3AggregationDetailsObject.aggregationActionHealthStatus) &&
        Objects.equals(this.aggregationType, healthcollectorv3AggregationDetailsObject.aggregationType) &&
        Objects.equals(this.error, healthcollectorv3AggregationDetailsObject.error) &&
        Objects.equals(this.unit, healthcollectorv3AggregationDetailsObject.unit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregationActionError, aggregationActionHealthStatus, aggregationType, error, unit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Healthcollectorv3AggregationDetailsObject {\n");
    sb.append("    aggregationActionError: ").append(toIndentedString(aggregationActionError)).append("\n");
    sb.append("    aggregationActionHealthStatus: ").append(toIndentedString(aggregationActionHealthStatus)).append("\n");
    sb.append("    aggregationType: ").append(toIndentedString(aggregationType)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aggregation_action_error");
    openapiFields.add("aggregation_action_health_status");
    openapiFields.add("aggregation_type");
    openapiFields.add("error");
    openapiFields.add("unit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Healthcollectorv3AggregationDetailsObject
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Healthcollectorv3AggregationDetailsObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Healthcollectorv3AggregationDetailsObject is not found in the empty JSON string", Healthcollectorv3AggregationDetailsObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Healthcollectorv3AggregationDetailsObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Healthcollectorv3AggregationDetailsObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("aggregation_action_error") != null && !jsonObj.get("aggregation_action_error").isJsonNull()) && !jsonObj.get("aggregation_action_error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aggregation_action_error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aggregation_action_error").toString()));
      }
      if ((jsonObj.get("aggregation_type") != null && !jsonObj.get("aggregation_type").isJsonNull()) && !jsonObj.get("aggregation_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aggregation_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aggregation_type").toString()));
      }
      if ((jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) && !jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Healthcollectorv3AggregationDetailsObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Healthcollectorv3AggregationDetailsObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Healthcollectorv3AggregationDetailsObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Healthcollectorv3AggregationDetailsObject.class));

       return (TypeAdapter<T>) new TypeAdapter<Healthcollectorv3AggregationDetailsObject>() {
           @Override
           public void write(JsonWriter out, Healthcollectorv3AggregationDetailsObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Healthcollectorv3AggregationDetailsObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Healthcollectorv3AggregationDetailsObject given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Healthcollectorv3AggregationDetailsObject
  * @throws IOException if the JSON string is invalid with respect to Healthcollectorv3AggregationDetailsObject
  */
  public static Healthcollectorv3AggregationDetailsObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Healthcollectorv3AggregationDetailsObject.class);
  }

 /**
  * Convert an instance of Healthcollectorv3AggregationDetailsObject to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

