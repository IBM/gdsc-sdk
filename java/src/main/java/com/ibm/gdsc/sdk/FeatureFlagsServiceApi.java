/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import com.ibm.gdsc.ApiCallback;
import com.ibm.gdsc.ApiClient;
import com.ibm.gdsc.ApiException;
import com.ibm.gdsc.ApiResponse;
import com.ibm.gdsc.Configuration;
import com.ibm.gdsc.Pair;
import com.ibm.gdsc.ProgressRequestBody;
import com.ibm.gdsc.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ibm.gdsc.sdk.Featureflagsv3DeleteFeatureFlagOverridesResponse;
import com.ibm.gdsc.sdk.Featureflagsv3GetFeatureFlagOverridesResponse;
import com.ibm.gdsc.sdk.Featureflagsv3GetFeatureFlagsResponse;
import com.ibm.gdsc.sdk.Featureflagsv3UpdateFeatureFlagOverridesRequest;
import com.ibm.gdsc.sdk.Featureflagsv3UpdateFeatureFlagOverridesResponse;
import com.ibm.gdsc.sdk.RuntimeError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FeatureFlagsServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FeatureFlagsServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FeatureFlagsServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for featureFlagsServiceDeleteFeatureFlagOverrides
     * @param flagName Flag name. (optional)
     * @param tenantId Optional tenant id. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call featureFlagsServiceDeleteFeatureFlagOverridesCall(String flagName, String tenantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/feature_flags/overrides";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (flagName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("flag_name", flagName));
        }

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call featureFlagsServiceDeleteFeatureFlagOverridesValidateBeforeCall(String flagName, String tenantId, final ApiCallback _callback) throws ApiException {
        return featureFlagsServiceDeleteFeatureFlagOverridesCall(flagName, tenantId, _callback);

    }

    /**
     * Summary: Delete feature Flag overrides Description: Delete feature Flag overrides from database.
     * 
     * @param flagName Flag name. (optional)
     * @param tenantId Optional tenant id. (optional)
     * @return Featureflagsv3DeleteFeatureFlagOverridesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Featureflagsv3DeleteFeatureFlagOverridesResponse featureFlagsServiceDeleteFeatureFlagOverrides(String flagName, String tenantId) throws ApiException {
        ApiResponse<Featureflagsv3DeleteFeatureFlagOverridesResponse> localVarResp = featureFlagsServiceDeleteFeatureFlagOverridesWithHttpInfo(flagName, tenantId);
        return localVarResp.getData();
    }

    /**
     * Summary: Delete feature Flag overrides Description: Delete feature Flag overrides from database.
     * 
     * @param flagName Flag name. (optional)
     * @param tenantId Optional tenant id. (optional)
     * @return ApiResponse&lt;Featureflagsv3DeleteFeatureFlagOverridesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Featureflagsv3DeleteFeatureFlagOverridesResponse> featureFlagsServiceDeleteFeatureFlagOverridesWithHttpInfo(String flagName, String tenantId) throws ApiException {
        okhttp3.Call localVarCall = featureFlagsServiceDeleteFeatureFlagOverridesValidateBeforeCall(flagName, tenantId, null);
        Type localVarReturnType = new TypeToken<Featureflagsv3DeleteFeatureFlagOverridesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Delete feature Flag overrides Description: Delete feature Flag overrides from database. (asynchronously)
     * 
     * @param flagName Flag name. (optional)
     * @param tenantId Optional tenant id. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call featureFlagsServiceDeleteFeatureFlagOverridesAsync(String flagName, String tenantId, final ApiCallback<Featureflagsv3DeleteFeatureFlagOverridesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = featureFlagsServiceDeleteFeatureFlagOverridesValidateBeforeCall(flagName, tenantId, _callback);
        Type localVarReturnType = new TypeToken<Featureflagsv3DeleteFeatureFlagOverridesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for featureFlagsServiceGetFeatureFlagOverrides
     * @param tenantId Optional tenant id. (optional)
     * @param flagNames Optional flag names; if empty then return all flag. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call featureFlagsServiceGetFeatureFlagOverridesCall(String tenantId, List<String> flagNames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/feature_flags/overrides";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }

        if (flagNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "flag_names", flagNames));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call featureFlagsServiceGetFeatureFlagOverridesValidateBeforeCall(String tenantId, List<String> flagNames, final ApiCallback _callback) throws ApiException {
        return featureFlagsServiceGetFeatureFlagOverridesCall(tenantId, flagNames, _callback);

    }

    /**
     * Summary: Get feature Flag overrides Description: Get feature Flag overrides by Feature Flag Name.
     * 
     * @param tenantId Optional tenant id. (optional)
     * @param flagNames Optional flag names; if empty then return all flag. (optional)
     * @return Featureflagsv3GetFeatureFlagOverridesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Featureflagsv3GetFeatureFlagOverridesResponse featureFlagsServiceGetFeatureFlagOverrides(String tenantId, List<String> flagNames) throws ApiException {
        ApiResponse<Featureflagsv3GetFeatureFlagOverridesResponse> localVarResp = featureFlagsServiceGetFeatureFlagOverridesWithHttpInfo(tenantId, flagNames);
        return localVarResp.getData();
    }

    /**
     * Summary: Get feature Flag overrides Description: Get feature Flag overrides by Feature Flag Name.
     * 
     * @param tenantId Optional tenant id. (optional)
     * @param flagNames Optional flag names; if empty then return all flag. (optional)
     * @return ApiResponse&lt;Featureflagsv3GetFeatureFlagOverridesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Featureflagsv3GetFeatureFlagOverridesResponse> featureFlagsServiceGetFeatureFlagOverridesWithHttpInfo(String tenantId, List<String> flagNames) throws ApiException {
        okhttp3.Call localVarCall = featureFlagsServiceGetFeatureFlagOverridesValidateBeforeCall(tenantId, flagNames, null);
        Type localVarReturnType = new TypeToken<Featureflagsv3GetFeatureFlagOverridesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get feature Flag overrides Description: Get feature Flag overrides by Feature Flag Name. (asynchronously)
     * 
     * @param tenantId Optional tenant id. (optional)
     * @param flagNames Optional flag names; if empty then return all flag. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call featureFlagsServiceGetFeatureFlagOverridesAsync(String tenantId, List<String> flagNames, final ApiCallback<Featureflagsv3GetFeatureFlagOverridesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = featureFlagsServiceGetFeatureFlagOverridesValidateBeforeCall(tenantId, flagNames, _callback);
        Type localVarReturnType = new TypeToken<Featureflagsv3GetFeatureFlagOverridesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for featureFlagsServiceGetFeatureFlags
     * @param tenantId Tenant id. (optional)
     * @param flagNames Optional flag names; if empty then return all flag. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call featureFlagsServiceGetFeatureFlagsCall(String tenantId, List<String> flagNames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/feature_flags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tenantId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tenant_id", tenantId));
        }

        if (flagNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "flag_names", flagNames));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call featureFlagsServiceGetFeatureFlagsValidateBeforeCall(String tenantId, List<String> flagNames, final ApiCallback _callback) throws ApiException {
        return featureFlagsServiceGetFeatureFlagsCall(tenantId, flagNames, _callback);

    }

    /**
     * Summary: Get feature flags Description: Get feature flags by Feature Flag Name.
     * 
     * @param tenantId Tenant id. (optional)
     * @param flagNames Optional flag names; if empty then return all flag. (optional)
     * @return Featureflagsv3GetFeatureFlagsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Featureflagsv3GetFeatureFlagsResponse featureFlagsServiceGetFeatureFlags(String tenantId, List<String> flagNames) throws ApiException {
        ApiResponse<Featureflagsv3GetFeatureFlagsResponse> localVarResp = featureFlagsServiceGetFeatureFlagsWithHttpInfo(tenantId, flagNames);
        return localVarResp.getData();
    }

    /**
     * Summary: Get feature flags Description: Get feature flags by Feature Flag Name.
     * 
     * @param tenantId Tenant id. (optional)
     * @param flagNames Optional flag names; if empty then return all flag. (optional)
     * @return ApiResponse&lt;Featureflagsv3GetFeatureFlagsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Featureflagsv3GetFeatureFlagsResponse> featureFlagsServiceGetFeatureFlagsWithHttpInfo(String tenantId, List<String> flagNames) throws ApiException {
        okhttp3.Call localVarCall = featureFlagsServiceGetFeatureFlagsValidateBeforeCall(tenantId, flagNames, null);
        Type localVarReturnType = new TypeToken<Featureflagsv3GetFeatureFlagsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get feature flags Description: Get feature flags by Feature Flag Name. (asynchronously)
     * 
     * @param tenantId Tenant id. (optional)
     * @param flagNames Optional flag names; if empty then return all flag. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call featureFlagsServiceGetFeatureFlagsAsync(String tenantId, List<String> flagNames, final ApiCallback<Featureflagsv3GetFeatureFlagsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = featureFlagsServiceGetFeatureFlagsValidateBeforeCall(tenantId, flagNames, _callback);
        Type localVarReturnType = new TypeToken<Featureflagsv3GetFeatureFlagsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for featureFlagsServiceUpdateFeatureFlagOverrides
     * @param featureflagsv3UpdateFeatureFlagOverridesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call featureFlagsServiceUpdateFeatureFlagOverridesCall(Featureflagsv3UpdateFeatureFlagOverridesRequest featureflagsv3UpdateFeatureFlagOverridesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = featureflagsv3UpdateFeatureFlagOverridesRequest;

        // create path and map variables
        String localVarPath = "/api/v3/feature_flags/overrides";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call featureFlagsServiceUpdateFeatureFlagOverridesValidateBeforeCall(Featureflagsv3UpdateFeatureFlagOverridesRequest featureflagsv3UpdateFeatureFlagOverridesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'featureflagsv3UpdateFeatureFlagOverridesRequest' is set
        if (featureflagsv3UpdateFeatureFlagOverridesRequest == null) {
            throw new ApiException("Missing the required parameter 'featureflagsv3UpdateFeatureFlagOverridesRequest' when calling featureFlagsServiceUpdateFeatureFlagOverrides(Async)");
        }

        return featureFlagsServiceUpdateFeatureFlagOverridesCall(featureflagsv3UpdateFeatureFlagOverridesRequest, _callback);

    }

    /**
     * Summary: Update feature Flag overrides Description: Update feature Flag overrides in the database.
     * 
     * @param featureflagsv3UpdateFeatureFlagOverridesRequest  (required)
     * @return Featureflagsv3UpdateFeatureFlagOverridesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Featureflagsv3UpdateFeatureFlagOverridesResponse featureFlagsServiceUpdateFeatureFlagOverrides(Featureflagsv3UpdateFeatureFlagOverridesRequest featureflagsv3UpdateFeatureFlagOverridesRequest) throws ApiException {
        ApiResponse<Featureflagsv3UpdateFeatureFlagOverridesResponse> localVarResp = featureFlagsServiceUpdateFeatureFlagOverridesWithHttpInfo(featureflagsv3UpdateFeatureFlagOverridesRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Update feature Flag overrides Description: Update feature Flag overrides in the database.
     * 
     * @param featureflagsv3UpdateFeatureFlagOverridesRequest  (required)
     * @return ApiResponse&lt;Featureflagsv3UpdateFeatureFlagOverridesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Featureflagsv3UpdateFeatureFlagOverridesResponse> featureFlagsServiceUpdateFeatureFlagOverridesWithHttpInfo(Featureflagsv3UpdateFeatureFlagOverridesRequest featureflagsv3UpdateFeatureFlagOverridesRequest) throws ApiException {
        okhttp3.Call localVarCall = featureFlagsServiceUpdateFeatureFlagOverridesValidateBeforeCall(featureflagsv3UpdateFeatureFlagOverridesRequest, null);
        Type localVarReturnType = new TypeToken<Featureflagsv3UpdateFeatureFlagOverridesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Update feature Flag overrides Description: Update feature Flag overrides in the database. (asynchronously)
     * 
     * @param featureflagsv3UpdateFeatureFlagOverridesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call featureFlagsServiceUpdateFeatureFlagOverridesAsync(Featureflagsv3UpdateFeatureFlagOverridesRequest featureflagsv3UpdateFeatureFlagOverridesRequest, final ApiCallback<Featureflagsv3UpdateFeatureFlagOverridesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = featureFlagsServiceUpdateFeatureFlagOverridesValidateBeforeCall(featureflagsv3UpdateFeatureFlagOverridesRequest, _callback);
        Type localVarReturnType = new TypeToken<Featureflagsv3UpdateFeatureFlagOverridesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
