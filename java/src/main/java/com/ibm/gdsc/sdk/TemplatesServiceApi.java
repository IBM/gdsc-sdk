/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import com.ibm.gdsc.ApiCallback;
import com.ibm.gdsc.ApiClient;
import com.ibm.gdsc.ApiException;
import com.ibm.gdsc.ApiResponse;
import com.ibm.gdsc.Configuration;
import com.ibm.gdsc.Pair;
import com.ibm.gdsc.ProgressRequestBody;
import com.ibm.gdsc.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ibm.gdsc.sdk.RuntimeError;
import com.ibm.gdsc.sdk.Templatesv3CreateIntegrationRequest;
import com.ibm.gdsc.sdk.Templatesv3CreateIntegrationResponse;
import com.ibm.gdsc.sdk.Templatesv3CreateTemplateRequest;
import com.ibm.gdsc.sdk.Templatesv3CreateTemplateResponse;
import com.ibm.gdsc.sdk.Templatesv3DeleteIntegrationResponse;
import com.ibm.gdsc.sdk.Templatesv3DeleteTemplateResponse;
import com.ibm.gdsc.sdk.Templatesv3GetOriginDefaultContentResponse;
import com.ibm.gdsc.sdk.Templatesv3GetOriginFieldsResponse;
import com.ibm.gdsc.sdk.Templatesv3GetTemplateResponse;
import com.ibm.gdsc.sdk.Templatesv3GetTemplatesResponse;
import com.ibm.gdsc.sdk.Templatesv3TestTemplateRequest;
import com.ibm.gdsc.sdk.Templatesv3TestTemplateResponse;
import com.ibm.gdsc.sdk.Templatesv3TransformTemplateJSONRequest;
import com.ibm.gdsc.sdk.Templatesv3TransformTemplateJSONResponse;
import com.ibm.gdsc.sdk.Templatesv3TransformTemplateRequest;
import com.ibm.gdsc.sdk.Templatesv3TransformTemplateResponse;
import com.ibm.gdsc.sdk.Templatesv3UpdateTemplateRequest;
import com.ibm.gdsc.sdk.Templatesv3UpdateTemplateResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TemplatesServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TemplatesServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TemplatesServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for templatesServiceCreateIntegration
     * @param templatesv3CreateIntegrationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesServiceCreateIntegrationCall(Templatesv3CreateIntegrationRequest templatesv3CreateIntegrationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = templatesv3CreateIntegrationRequest;

        // create path and map variables
        String localVarPath = "/api/v3/templates/integration";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templatesServiceCreateIntegrationValidateBeforeCall(Templatesv3CreateIntegrationRequest templatesv3CreateIntegrationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templatesv3CreateIntegrationRequest' is set
        if (templatesv3CreateIntegrationRequest == null) {
            throw new ApiException("Missing the required parameter 'templatesv3CreateIntegrationRequest' when calling templatesServiceCreateIntegration(Async)");
        }

        return templatesServiceCreateIntegrationCall(templatesv3CreateIntegrationRequest, _callback);

    }

    /**
     * Summary: Create integration Description: Create a set of new templates for a new integration.
     * 
     * @param templatesv3CreateIntegrationRequest  (required)
     * @return Templatesv3CreateIntegrationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Templatesv3CreateIntegrationResponse templatesServiceCreateIntegration(Templatesv3CreateIntegrationRequest templatesv3CreateIntegrationRequest) throws ApiException {
        ApiResponse<Templatesv3CreateIntegrationResponse> localVarResp = templatesServiceCreateIntegrationWithHttpInfo(templatesv3CreateIntegrationRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Create integration Description: Create a set of new templates for a new integration.
     * 
     * @param templatesv3CreateIntegrationRequest  (required)
     * @return ApiResponse&lt;Templatesv3CreateIntegrationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Templatesv3CreateIntegrationResponse> templatesServiceCreateIntegrationWithHttpInfo(Templatesv3CreateIntegrationRequest templatesv3CreateIntegrationRequest) throws ApiException {
        okhttp3.Call localVarCall = templatesServiceCreateIntegrationValidateBeforeCall(templatesv3CreateIntegrationRequest, null);
        Type localVarReturnType = new TypeToken<Templatesv3CreateIntegrationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Create integration Description: Create a set of new templates for a new integration. (asynchronously)
     * 
     * @param templatesv3CreateIntegrationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesServiceCreateIntegrationAsync(Templatesv3CreateIntegrationRequest templatesv3CreateIntegrationRequest, final ApiCallback<Templatesv3CreateIntegrationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = templatesServiceCreateIntegrationValidateBeforeCall(templatesv3CreateIntegrationRequest, _callback);
        Type localVarReturnType = new TypeToken<Templatesv3CreateIntegrationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for templatesServiceCreateTemplate
     * @param templatesv3CreateTemplateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesServiceCreateTemplateCall(Templatesv3CreateTemplateRequest templatesv3CreateTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = templatesv3CreateTemplateRequest;

        // create path and map variables
        String localVarPath = "/api/v3/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templatesServiceCreateTemplateValidateBeforeCall(Templatesv3CreateTemplateRequest templatesv3CreateTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templatesv3CreateTemplateRequest' is set
        if (templatesv3CreateTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'templatesv3CreateTemplateRequest' when calling templatesServiceCreateTemplate(Async)");
        }

        return templatesServiceCreateTemplateCall(templatesv3CreateTemplateRequest, _callback);

    }

    /**
     * Summary: Create template Description: Create a new template.
     * 
     * @param templatesv3CreateTemplateRequest  (required)
     * @return Templatesv3CreateTemplateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Templatesv3CreateTemplateResponse templatesServiceCreateTemplate(Templatesv3CreateTemplateRequest templatesv3CreateTemplateRequest) throws ApiException {
        ApiResponse<Templatesv3CreateTemplateResponse> localVarResp = templatesServiceCreateTemplateWithHttpInfo(templatesv3CreateTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Create template Description: Create a new template.
     * 
     * @param templatesv3CreateTemplateRequest  (required)
     * @return ApiResponse&lt;Templatesv3CreateTemplateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Templatesv3CreateTemplateResponse> templatesServiceCreateTemplateWithHttpInfo(Templatesv3CreateTemplateRequest templatesv3CreateTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = templatesServiceCreateTemplateValidateBeforeCall(templatesv3CreateTemplateRequest, null);
        Type localVarReturnType = new TypeToken<Templatesv3CreateTemplateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Create template Description: Create a new template. (asynchronously)
     * 
     * @param templatesv3CreateTemplateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesServiceCreateTemplateAsync(Templatesv3CreateTemplateRequest templatesv3CreateTemplateRequest, final ApiCallback<Templatesv3CreateTemplateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = templatesServiceCreateTemplateValidateBeforeCall(templatesv3CreateTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<Templatesv3CreateTemplateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for templatesServiceDeleteIntegration
     * @param integrationId Delete the templates associated with the specified integration ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesServiceDeleteIntegrationCall(String integrationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/templates/integrations/{integration_id}"
            .replace("{" + "integration_id" + "}", localVarApiClient.escapeString(integrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templatesServiceDeleteIntegrationValidateBeforeCall(String integrationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'integrationId' is set
        if (integrationId == null) {
            throw new ApiException("Missing the required parameter 'integrationId' when calling templatesServiceDeleteIntegration(Async)");
        }

        return templatesServiceDeleteIntegrationCall(integrationId, _callback);

    }

    /**
     * Summary: Delete integration Description: Delete all templates associated with an integration.
     * 
     * @param integrationId Delete the templates associated with the specified integration ID. (required)
     * @return Templatesv3DeleteIntegrationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Templatesv3DeleteIntegrationResponse templatesServiceDeleteIntegration(String integrationId) throws ApiException {
        ApiResponse<Templatesv3DeleteIntegrationResponse> localVarResp = templatesServiceDeleteIntegrationWithHttpInfo(integrationId);
        return localVarResp.getData();
    }

    /**
     * Summary: Delete integration Description: Delete all templates associated with an integration.
     * 
     * @param integrationId Delete the templates associated with the specified integration ID. (required)
     * @return ApiResponse&lt;Templatesv3DeleteIntegrationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Templatesv3DeleteIntegrationResponse> templatesServiceDeleteIntegrationWithHttpInfo(String integrationId) throws ApiException {
        okhttp3.Call localVarCall = templatesServiceDeleteIntegrationValidateBeforeCall(integrationId, null);
        Type localVarReturnType = new TypeToken<Templatesv3DeleteIntegrationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Delete integration Description: Delete all templates associated with an integration. (asynchronously)
     * 
     * @param integrationId Delete the templates associated with the specified integration ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesServiceDeleteIntegrationAsync(String integrationId, final ApiCallback<Templatesv3DeleteIntegrationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = templatesServiceDeleteIntegrationValidateBeforeCall(integrationId, _callback);
        Type localVarReturnType = new TypeToken<Templatesv3DeleteIntegrationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for templatesServiceDeleteTemplate
     * @param templateId Delete the template with the specified unique ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesServiceDeleteTemplateCall(String templateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/templates/{template_id}"
            .replace("{" + "template_id" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templatesServiceDeleteTemplateValidateBeforeCall(String templateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling templatesServiceDeleteTemplate(Async)");
        }

        return templatesServiceDeleteTemplateCall(templateId, _callback);

    }

    /**
     * Summary: Delete template Description: Delete a specific template.
     * 
     * @param templateId Delete the template with the specified unique ID. (required)
     * @return Templatesv3DeleteTemplateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Templatesv3DeleteTemplateResponse templatesServiceDeleteTemplate(String templateId) throws ApiException {
        ApiResponse<Templatesv3DeleteTemplateResponse> localVarResp = templatesServiceDeleteTemplateWithHttpInfo(templateId);
        return localVarResp.getData();
    }

    /**
     * Summary: Delete template Description: Delete a specific template.
     * 
     * @param templateId Delete the template with the specified unique ID. (required)
     * @return ApiResponse&lt;Templatesv3DeleteTemplateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Templatesv3DeleteTemplateResponse> templatesServiceDeleteTemplateWithHttpInfo(String templateId) throws ApiException {
        okhttp3.Call localVarCall = templatesServiceDeleteTemplateValidateBeforeCall(templateId, null);
        Type localVarReturnType = new TypeToken<Templatesv3DeleteTemplateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Delete template Description: Delete a specific template. (asynchronously)
     * 
     * @param templateId Delete the template with the specified unique ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesServiceDeleteTemplateAsync(String templateId, final ApiCallback<Templatesv3DeleteTemplateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = templatesServiceDeleteTemplateValidateBeforeCall(templateId, _callback);
        Type localVarReturnType = new TypeToken<Templatesv3DeleteTemplateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for templatesServiceGetOriginDefaultContent
     * @param origin Origin for the desired content. (required)
     * @param integration Integration provides the context for the Request. (optional, default to UNDEFINED_INTEGRATION)
     * @param mimeType MIME type for the desired content. (optional, default to PLAIN_TEXT)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesServiceGetOriginDefaultContentCall(String origin, String integration, String mimeType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/templates/origins/{origin}/content"
            .replace("{" + "origin" + "}", localVarApiClient.escapeString(origin.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (integration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("integration", integration));
        }

        if (mimeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mime_type", mimeType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templatesServiceGetOriginDefaultContentValidateBeforeCall(String origin, String integration, String mimeType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling templatesServiceGetOriginDefaultContent(Async)");
        }

        return templatesServiceGetOriginDefaultContentCall(origin, integration, mimeType, _callback);

    }

    /**
     * Summary: Get origin default content Description: Return the default content for a template with a specified origin and MIME type.
     * 
     * @param origin Origin for the desired content. (required)
     * @param integration Integration provides the context for the Request. (optional, default to UNDEFINED_INTEGRATION)
     * @param mimeType MIME type for the desired content. (optional, default to PLAIN_TEXT)
     * @return Templatesv3GetOriginDefaultContentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Templatesv3GetOriginDefaultContentResponse templatesServiceGetOriginDefaultContent(String origin, String integration, String mimeType) throws ApiException {
        ApiResponse<Templatesv3GetOriginDefaultContentResponse> localVarResp = templatesServiceGetOriginDefaultContentWithHttpInfo(origin, integration, mimeType);
        return localVarResp.getData();
    }

    /**
     * Summary: Get origin default content Description: Return the default content for a template with a specified origin and MIME type.
     * 
     * @param origin Origin for the desired content. (required)
     * @param integration Integration provides the context for the Request. (optional, default to UNDEFINED_INTEGRATION)
     * @param mimeType MIME type for the desired content. (optional, default to PLAIN_TEXT)
     * @return ApiResponse&lt;Templatesv3GetOriginDefaultContentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Templatesv3GetOriginDefaultContentResponse> templatesServiceGetOriginDefaultContentWithHttpInfo(String origin, String integration, String mimeType) throws ApiException {
        okhttp3.Call localVarCall = templatesServiceGetOriginDefaultContentValidateBeforeCall(origin, integration, mimeType, null);
        Type localVarReturnType = new TypeToken<Templatesv3GetOriginDefaultContentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get origin default content Description: Return the default content for a template with a specified origin and MIME type. (asynchronously)
     * 
     * @param origin Origin for the desired content. (required)
     * @param integration Integration provides the context for the Request. (optional, default to UNDEFINED_INTEGRATION)
     * @param mimeType MIME type for the desired content. (optional, default to PLAIN_TEXT)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesServiceGetOriginDefaultContentAsync(String origin, String integration, String mimeType, final ApiCallback<Templatesv3GetOriginDefaultContentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = templatesServiceGetOriginDefaultContentValidateBeforeCall(origin, integration, mimeType, _callback);
        Type localVarReturnType = new TypeToken<Templatesv3GetOriginDefaultContentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for templatesServiceGetOriginFields
     * @param origin Origin for the desired fields. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesServiceGetOriginFieldsCall(String origin, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/templates/origins/{origin}/fields"
            .replace("{" + "origin" + "}", localVarApiClient.escapeString(origin.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templatesServiceGetOriginFieldsValidateBeforeCall(String origin, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling templatesServiceGetOriginFields(Async)");
        }

        return templatesServiceGetOriginFieldsCall(origin, _callback);

    }

    /**
     * Summary: Get origin fields Description: Return the fields available with a specific origin.
     * 
     * @param origin Origin for the desired fields. (required)
     * @return Templatesv3GetOriginFieldsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Templatesv3GetOriginFieldsResponse templatesServiceGetOriginFields(String origin) throws ApiException {
        ApiResponse<Templatesv3GetOriginFieldsResponse> localVarResp = templatesServiceGetOriginFieldsWithHttpInfo(origin);
        return localVarResp.getData();
    }

    /**
     * Summary: Get origin fields Description: Return the fields available with a specific origin.
     * 
     * @param origin Origin for the desired fields. (required)
     * @return ApiResponse&lt;Templatesv3GetOriginFieldsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Templatesv3GetOriginFieldsResponse> templatesServiceGetOriginFieldsWithHttpInfo(String origin) throws ApiException {
        okhttp3.Call localVarCall = templatesServiceGetOriginFieldsValidateBeforeCall(origin, null);
        Type localVarReturnType = new TypeToken<Templatesv3GetOriginFieldsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get origin fields Description: Return the fields available with a specific origin. (asynchronously)
     * 
     * @param origin Origin for the desired fields. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesServiceGetOriginFieldsAsync(String origin, final ApiCallback<Templatesv3GetOriginFieldsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = templatesServiceGetOriginFieldsValidateBeforeCall(origin, _callback);
        Type localVarReturnType = new TypeToken<Templatesv3GetOriginFieldsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for templatesServiceGetTemplate
     * @param templateId The unique ID for the template to fetch. (required)
     * @param includeIntegrationName Include the Integration name in the returned template. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesServiceGetTemplateCall(String templateId, Boolean includeIntegrationName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/templates/{template_id}"
            .replace("{" + "template_id" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeIntegrationName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_integration_name", includeIntegrationName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templatesServiceGetTemplateValidateBeforeCall(String templateId, Boolean includeIntegrationName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling templatesServiceGetTemplate(Async)");
        }

        return templatesServiceGetTemplateCall(templateId, includeIntegrationName, _callback);

    }

    /**
     * Summary: Get template Description: Return a specific template by id.
     * 
     * @param templateId The unique ID for the template to fetch. (required)
     * @param includeIntegrationName Include the Integration name in the returned template. (optional)
     * @return Templatesv3GetTemplateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Templatesv3GetTemplateResponse templatesServiceGetTemplate(String templateId, Boolean includeIntegrationName) throws ApiException {
        ApiResponse<Templatesv3GetTemplateResponse> localVarResp = templatesServiceGetTemplateWithHttpInfo(templateId, includeIntegrationName);
        return localVarResp.getData();
    }

    /**
     * Summary: Get template Description: Return a specific template by id.
     * 
     * @param templateId The unique ID for the template to fetch. (required)
     * @param includeIntegrationName Include the Integration name in the returned template. (optional)
     * @return ApiResponse&lt;Templatesv3GetTemplateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Templatesv3GetTemplateResponse> templatesServiceGetTemplateWithHttpInfo(String templateId, Boolean includeIntegrationName) throws ApiException {
        okhttp3.Call localVarCall = templatesServiceGetTemplateValidateBeforeCall(templateId, includeIntegrationName, null);
        Type localVarReturnType = new TypeToken<Templatesv3GetTemplateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get template Description: Return a specific template by id. (asynchronously)
     * 
     * @param templateId The unique ID for the template to fetch. (required)
     * @param includeIntegrationName Include the Integration name in the returned template. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesServiceGetTemplateAsync(String templateId, Boolean includeIntegrationName, final ApiCallback<Templatesv3GetTemplateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = templatesServiceGetTemplateValidateBeforeCall(templateId, includeIntegrationName, _callback);
        Type localVarReturnType = new TypeToken<Templatesv3GetTemplateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for templatesServiceGetTemplates
     * @param integrationId Filter on templates associated with a specific integration. (optional)
     * @param filterIntegration Filter on a set of integrations; ignored if empty. (optional)
     * @param filterOrigin Filter on a specific set of data origins; ignored if empty. (optional)
     * @param filterMimeType Filter on specific mime types; ignored if empty. (optional)
     * @param filterTags Filter on specific tags; ignored if empty. (optional)
     * @param filterEnabledOnly Filter on all templates instead of just the enabled templates. (optional)
     * @param includeIntegrationName Include the Integration name in the returned templates. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesServiceGetTemplatesCall(String integrationId, List<String> filterIntegration, List<String> filterOrigin, List<String> filterMimeType, List<String> filterTags, Boolean filterEnabledOnly, Boolean includeIntegrationName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (integrationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("integration_id", integrationId));
        }

        if (filterIntegration != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter_integration", filterIntegration));
        }

        if (filterOrigin != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter_origin", filterOrigin));
        }

        if (filterMimeType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter_mime_type", filterMimeType));
        }

        if (filterTags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter_tags", filterTags));
        }

        if (filterEnabledOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_enabled_only", filterEnabledOnly));
        }

        if (includeIntegrationName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_integration_name", includeIntegrationName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templatesServiceGetTemplatesValidateBeforeCall(String integrationId, List<String> filterIntegration, List<String> filterOrigin, List<String> filterMimeType, List<String> filterTags, Boolean filterEnabledOnly, Boolean includeIntegrationName, final ApiCallback _callback) throws ApiException {
        return templatesServiceGetTemplatesCall(integrationId, filterIntegration, filterOrigin, filterMimeType, filterTags, filterEnabledOnly, includeIntegrationName, _callback);

    }

    /**
     * Summary: Get templates Description: Return all templates based on supplied filters.
     * 
     * @param integrationId Filter on templates associated with a specific integration. (optional)
     * @param filterIntegration Filter on a set of integrations; ignored if empty. (optional)
     * @param filterOrigin Filter on a specific set of data origins; ignored if empty. (optional)
     * @param filterMimeType Filter on specific mime types; ignored if empty. (optional)
     * @param filterTags Filter on specific tags; ignored if empty. (optional)
     * @param filterEnabledOnly Filter on all templates instead of just the enabled templates. (optional)
     * @param includeIntegrationName Include the Integration name in the returned templates. (optional)
     * @return Templatesv3GetTemplatesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Templatesv3GetTemplatesResponse templatesServiceGetTemplates(String integrationId, List<String> filterIntegration, List<String> filterOrigin, List<String> filterMimeType, List<String> filterTags, Boolean filterEnabledOnly, Boolean includeIntegrationName) throws ApiException {
        ApiResponse<Templatesv3GetTemplatesResponse> localVarResp = templatesServiceGetTemplatesWithHttpInfo(integrationId, filterIntegration, filterOrigin, filterMimeType, filterTags, filterEnabledOnly, includeIntegrationName);
        return localVarResp.getData();
    }

    /**
     * Summary: Get templates Description: Return all templates based on supplied filters.
     * 
     * @param integrationId Filter on templates associated with a specific integration. (optional)
     * @param filterIntegration Filter on a set of integrations; ignored if empty. (optional)
     * @param filterOrigin Filter on a specific set of data origins; ignored if empty. (optional)
     * @param filterMimeType Filter on specific mime types; ignored if empty. (optional)
     * @param filterTags Filter on specific tags; ignored if empty. (optional)
     * @param filterEnabledOnly Filter on all templates instead of just the enabled templates. (optional)
     * @param includeIntegrationName Include the Integration name in the returned templates. (optional)
     * @return ApiResponse&lt;Templatesv3GetTemplatesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Templatesv3GetTemplatesResponse> templatesServiceGetTemplatesWithHttpInfo(String integrationId, List<String> filterIntegration, List<String> filterOrigin, List<String> filterMimeType, List<String> filterTags, Boolean filterEnabledOnly, Boolean includeIntegrationName) throws ApiException {
        okhttp3.Call localVarCall = templatesServiceGetTemplatesValidateBeforeCall(integrationId, filterIntegration, filterOrigin, filterMimeType, filterTags, filterEnabledOnly, includeIntegrationName, null);
        Type localVarReturnType = new TypeToken<Templatesv3GetTemplatesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get templates Description: Return all templates based on supplied filters. (asynchronously)
     * 
     * @param integrationId Filter on templates associated with a specific integration. (optional)
     * @param filterIntegration Filter on a set of integrations; ignored if empty. (optional)
     * @param filterOrigin Filter on a specific set of data origins; ignored if empty. (optional)
     * @param filterMimeType Filter on specific mime types; ignored if empty. (optional)
     * @param filterTags Filter on specific tags; ignored if empty. (optional)
     * @param filterEnabledOnly Filter on all templates instead of just the enabled templates. (optional)
     * @param includeIntegrationName Include the Integration name in the returned templates. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesServiceGetTemplatesAsync(String integrationId, List<String> filterIntegration, List<String> filterOrigin, List<String> filterMimeType, List<String> filterTags, Boolean filterEnabledOnly, Boolean includeIntegrationName, final ApiCallback<Templatesv3GetTemplatesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = templatesServiceGetTemplatesValidateBeforeCall(integrationId, filterIntegration, filterOrigin, filterMimeType, filterTags, filterEnabledOnly, includeIntegrationName, _callback);
        Type localVarReturnType = new TypeToken<Templatesv3GetTemplatesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for templatesServiceTestTemplate
     * @param templatesv3TestTemplateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesServiceTestTemplateCall(Templatesv3TestTemplateRequest templatesv3TestTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = templatesv3TestTemplateRequest;

        // create path and map variables
        String localVarPath = "/api/v3/templates/test";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templatesServiceTestTemplateValidateBeforeCall(Templatesv3TestTemplateRequest templatesv3TestTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templatesv3TestTemplateRequest' is set
        if (templatesv3TestTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'templatesv3TestTemplateRequest' when calling templatesServiceTestTemplate(Async)");
        }

        return templatesServiceTestTemplateCall(templatesv3TestTemplateRequest, _callback);

    }

    /**
     * Summary: Test template Description: Analyze a specified template to ensure will function correctly when utilized.
     * 
     * @param templatesv3TestTemplateRequest  (required)
     * @return Templatesv3TestTemplateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Templatesv3TestTemplateResponse templatesServiceTestTemplate(Templatesv3TestTemplateRequest templatesv3TestTemplateRequest) throws ApiException {
        ApiResponse<Templatesv3TestTemplateResponse> localVarResp = templatesServiceTestTemplateWithHttpInfo(templatesv3TestTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Test template Description: Analyze a specified template to ensure will function correctly when utilized.
     * 
     * @param templatesv3TestTemplateRequest  (required)
     * @return ApiResponse&lt;Templatesv3TestTemplateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Templatesv3TestTemplateResponse> templatesServiceTestTemplateWithHttpInfo(Templatesv3TestTemplateRequest templatesv3TestTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = templatesServiceTestTemplateValidateBeforeCall(templatesv3TestTemplateRequest, null);
        Type localVarReturnType = new TypeToken<Templatesv3TestTemplateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Test template Description: Analyze a specified template to ensure will function correctly when utilized. (asynchronously)
     * 
     * @param templatesv3TestTemplateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesServiceTestTemplateAsync(Templatesv3TestTemplateRequest templatesv3TestTemplateRequest, final ApiCallback<Templatesv3TestTemplateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = templatesServiceTestTemplateValidateBeforeCall(templatesv3TestTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<Templatesv3TestTemplateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for templatesServiceTransformTemplate
     * @param templatesv3TransformTemplateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesServiceTransformTemplateCall(Templatesv3TransformTemplateRequest templatesv3TransformTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = templatesv3TransformTemplateRequest;

        // create path and map variables
        String localVarPath = "/api/v3/templates/transform";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templatesServiceTransformTemplateValidateBeforeCall(Templatesv3TransformTemplateRequest templatesv3TransformTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templatesv3TransformTemplateRequest' is set
        if (templatesv3TransformTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'templatesv3TransformTemplateRequest' when calling templatesServiceTransformTemplate(Async)");
        }

        return templatesServiceTransformTemplateCall(templatesv3TransformTemplateRequest, _callback);

    }

    /**
     * Summary: Transform template Description: Process the specified template and returns the Title and Content based on supplied data.
     * 
     * @param templatesv3TransformTemplateRequest  (required)
     * @return Templatesv3TransformTemplateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Templatesv3TransformTemplateResponse templatesServiceTransformTemplate(Templatesv3TransformTemplateRequest templatesv3TransformTemplateRequest) throws ApiException {
        ApiResponse<Templatesv3TransformTemplateResponse> localVarResp = templatesServiceTransformTemplateWithHttpInfo(templatesv3TransformTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Transform template Description: Process the specified template and returns the Title and Content based on supplied data.
     * 
     * @param templatesv3TransformTemplateRequest  (required)
     * @return ApiResponse&lt;Templatesv3TransformTemplateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Templatesv3TransformTemplateResponse> templatesServiceTransformTemplateWithHttpInfo(Templatesv3TransformTemplateRequest templatesv3TransformTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = templatesServiceTransformTemplateValidateBeforeCall(templatesv3TransformTemplateRequest, null);
        Type localVarReturnType = new TypeToken<Templatesv3TransformTemplateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Transform template Description: Process the specified template and returns the Title and Content based on supplied data. (asynchronously)
     * 
     * @param templatesv3TransformTemplateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesServiceTransformTemplateAsync(Templatesv3TransformTemplateRequest templatesv3TransformTemplateRequest, final ApiCallback<Templatesv3TransformTemplateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = templatesServiceTransformTemplateValidateBeforeCall(templatesv3TransformTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<Templatesv3TransformTemplateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for templatesServiceTransformTemplateJSON
     * @param templatesv3TransformTemplateJSONRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesServiceTransformTemplateJSONCall(Templatesv3TransformTemplateJSONRequest templatesv3TransformTemplateJSONRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = templatesv3TransformTemplateJSONRequest;

        // create path and map variables
        String localVarPath = "/api/v3/templates/transformjson";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templatesServiceTransformTemplateJSONValidateBeforeCall(Templatesv3TransformTemplateJSONRequest templatesv3TransformTemplateJSONRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templatesv3TransformTemplateJSONRequest' is set
        if (templatesv3TransformTemplateJSONRequest == null) {
            throw new ApiException("Missing the required parameter 'templatesv3TransformTemplateJSONRequest' when calling templatesServiceTransformTemplateJSON(Async)");
        }

        return templatesServiceTransformTemplateJSONCall(templatesv3TransformTemplateJSONRequest, _callback);

    }

    /**
     * Summary: Transform template JSON Description: Process the specified template and returns the Title and Content based on supplied json data string.
     * 
     * @param templatesv3TransformTemplateJSONRequest  (required)
     * @return Templatesv3TransformTemplateJSONResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Templatesv3TransformTemplateJSONResponse templatesServiceTransformTemplateJSON(Templatesv3TransformTemplateJSONRequest templatesv3TransformTemplateJSONRequest) throws ApiException {
        ApiResponse<Templatesv3TransformTemplateJSONResponse> localVarResp = templatesServiceTransformTemplateJSONWithHttpInfo(templatesv3TransformTemplateJSONRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Transform template JSON Description: Process the specified template and returns the Title and Content based on supplied json data string.
     * 
     * @param templatesv3TransformTemplateJSONRequest  (required)
     * @return ApiResponse&lt;Templatesv3TransformTemplateJSONResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Templatesv3TransformTemplateJSONResponse> templatesServiceTransformTemplateJSONWithHttpInfo(Templatesv3TransformTemplateJSONRequest templatesv3TransformTemplateJSONRequest) throws ApiException {
        okhttp3.Call localVarCall = templatesServiceTransformTemplateJSONValidateBeforeCall(templatesv3TransformTemplateJSONRequest, null);
        Type localVarReturnType = new TypeToken<Templatesv3TransformTemplateJSONResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Transform template JSON Description: Process the specified template and returns the Title and Content based on supplied json data string. (asynchronously)
     * 
     * @param templatesv3TransformTemplateJSONRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesServiceTransformTemplateJSONAsync(Templatesv3TransformTemplateJSONRequest templatesv3TransformTemplateJSONRequest, final ApiCallback<Templatesv3TransformTemplateJSONResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = templatesServiceTransformTemplateJSONValidateBeforeCall(templatesv3TransformTemplateJSONRequest, _callback);
        Type localVarReturnType = new TypeToken<Templatesv3TransformTemplateJSONResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for templatesServiceUpdateTemplate
     * @param templateId The template id to update. (required)
     * @param templatesv3UpdateTemplateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesServiceUpdateTemplateCall(String templateId, Templatesv3UpdateTemplateRequest templatesv3UpdateTemplateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = templatesv3UpdateTemplateRequest;

        // create path and map variables
        String localVarPath = "/api/v3/templates/{template_id}"
            .replace("{" + "template_id" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call templatesServiceUpdateTemplateValidateBeforeCall(String templateId, Templatesv3UpdateTemplateRequest templatesv3UpdateTemplateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling templatesServiceUpdateTemplate(Async)");
        }

        // verify the required parameter 'templatesv3UpdateTemplateRequest' is set
        if (templatesv3UpdateTemplateRequest == null) {
            throw new ApiException("Missing the required parameter 'templatesv3UpdateTemplateRequest' when calling templatesServiceUpdateTemplate(Async)");
        }

        return templatesServiceUpdateTemplateCall(templateId, templatesv3UpdateTemplateRequest, _callback);

    }

    /**
     * Summary: Update template Description: Update a single template.
     * 
     * @param templateId The template id to update. (required)
     * @param templatesv3UpdateTemplateRequest  (required)
     * @return Templatesv3UpdateTemplateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Templatesv3UpdateTemplateResponse templatesServiceUpdateTemplate(String templateId, Templatesv3UpdateTemplateRequest templatesv3UpdateTemplateRequest) throws ApiException {
        ApiResponse<Templatesv3UpdateTemplateResponse> localVarResp = templatesServiceUpdateTemplateWithHttpInfo(templateId, templatesv3UpdateTemplateRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Update template Description: Update a single template.
     * 
     * @param templateId The template id to update. (required)
     * @param templatesv3UpdateTemplateRequest  (required)
     * @return ApiResponse&lt;Templatesv3UpdateTemplateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Templatesv3UpdateTemplateResponse> templatesServiceUpdateTemplateWithHttpInfo(String templateId, Templatesv3UpdateTemplateRequest templatesv3UpdateTemplateRequest) throws ApiException {
        okhttp3.Call localVarCall = templatesServiceUpdateTemplateValidateBeforeCall(templateId, templatesv3UpdateTemplateRequest, null);
        Type localVarReturnType = new TypeToken<Templatesv3UpdateTemplateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Update template Description: Update a single template. (asynchronously)
     * 
     * @param templateId The template id to update. (required)
     * @param templatesv3UpdateTemplateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call templatesServiceUpdateTemplateAsync(String templateId, Templatesv3UpdateTemplateRequest templatesv3UpdateTemplateRequest, final ApiCallback<Templatesv3UpdateTemplateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = templatesServiceUpdateTemplateValidateBeforeCall(templateId, templatesv3UpdateTemplateRequest, _callback);
        Type localVarReturnType = new TypeToken<Templatesv3UpdateTemplateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
