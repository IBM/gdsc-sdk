/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.gdsc.sdk.AccessType;
import com.ibm.gdsc.sdk.UserSensitiveCategoriesSensitiveCategoriesInner;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.JSON;

/**
 * UserSensitiveCategories200Response
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-18T18:23:51.166908Z[UTC]", comments = "Generator version: 7.6.0")
public class UserSensitiveCategories200Response {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private List<AccessType> permissions = new ArrayList<>();

  public static final String SERIALIZED_NAME_ACCOUNT_IDS = "accountIds";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_IDS)
  private List<String> accountIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_SENSITIVE_CATEGORIES = "sensitiveCategories";
  @SerializedName(SERIALIZED_NAME_SENSITIVE_CATEGORIES)
  private List<UserSensitiveCategoriesSensitiveCategoriesInner> sensitiveCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_ACCESSIBLE_PERMISSION_CONFIGURATIONS = "accessiblePermissionConfigurations";
  @SerializedName(SERIALIZED_NAME_ACCESSIBLE_PERMISSION_CONFIGURATIONS)
  private BigDecimal accessiblePermissionConfigurations;

  public UserSensitiveCategories200Response() {
  }

  public UserSensitiveCategories200Response id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public UserSensitiveCategories200Response name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public UserSensitiveCategories200Response type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public UserSensitiveCategories200Response permissions(List<AccessType> permissions) {
    this.permissions = permissions;
    return this;
  }

  public UserSensitiveCategories200Response addPermissionsItem(AccessType permissionsItem) {
    if (this.permissions == null) {
      this.permissions = new ArrayList<>();
    }
    this.permissions.add(permissionsItem);
    return this;
  }

   /**
   * Get permissions
   * @return permissions
  **/
  @javax.annotation.Nonnull
  public List<AccessType> getPermissions() {
    return permissions;
  }

  public void setPermissions(List<AccessType> permissions) {
    this.permissions = permissions;
  }


  public UserSensitiveCategories200Response accountIds(List<String> accountIds) {
    this.accountIds = accountIds;
    return this;
  }

  public UserSensitiveCategories200Response addAccountIdsItem(String accountIdsItem) {
    if (this.accountIds == null) {
      this.accountIds = new ArrayList<>();
    }
    this.accountIds.add(accountIdsItem);
    return this;
  }

   /**
   * Get accountIds
   * @return accountIds
  **/
  @javax.annotation.Nonnull
  public List<String> getAccountIds() {
    return accountIds;
  }

  public void setAccountIds(List<String> accountIds) {
    this.accountIds = accountIds;
  }


  public UserSensitiveCategories200Response sensitiveCategories(List<UserSensitiveCategoriesSensitiveCategoriesInner> sensitiveCategories) {
    this.sensitiveCategories = sensitiveCategories;
    return this;
  }

  public UserSensitiveCategories200Response addSensitiveCategoriesItem(UserSensitiveCategoriesSensitiveCategoriesInner sensitiveCategoriesItem) {
    if (this.sensitiveCategories == null) {
      this.sensitiveCategories = new ArrayList<>();
    }
    this.sensitiveCategories.add(sensitiveCategoriesItem);
    return this;
  }

   /**
   * Get sensitiveCategories
   * @return sensitiveCategories
  **/
  @javax.annotation.Nonnull
  public List<UserSensitiveCategoriesSensitiveCategoriesInner> getSensitiveCategories() {
    return sensitiveCategories;
  }

  public void setSensitiveCategories(List<UserSensitiveCategoriesSensitiveCategoriesInner> sensitiveCategories) {
    this.sensitiveCategories = sensitiveCategories;
  }


  public UserSensitiveCategories200Response accessiblePermissionConfigurations(BigDecimal accessiblePermissionConfigurations) {
    this.accessiblePermissionConfigurations = accessiblePermissionConfigurations;
    return this;
  }

   /**
   * Get accessiblePermissionConfigurations
   * @return accessiblePermissionConfigurations
  **/
  @javax.annotation.Nonnull
  public BigDecimal getAccessiblePermissionConfigurations() {
    return accessiblePermissionConfigurations;
  }

  public void setAccessiblePermissionConfigurations(BigDecimal accessiblePermissionConfigurations) {
    this.accessiblePermissionConfigurations = accessiblePermissionConfigurations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserSensitiveCategories200Response userSensitiveCategories200Response = (UserSensitiveCategories200Response) o;
    return Objects.equals(this.id, userSensitiveCategories200Response.id) &&
        Objects.equals(this.name, userSensitiveCategories200Response.name) &&
        Objects.equals(this.type, userSensitiveCategories200Response.type) &&
        Objects.equals(this.permissions, userSensitiveCategories200Response.permissions) &&
        Objects.equals(this.accountIds, userSensitiveCategories200Response.accountIds) &&
        Objects.equals(this.sensitiveCategories, userSensitiveCategories200Response.sensitiveCategories) &&
        Objects.equals(this.accessiblePermissionConfigurations, userSensitiveCategories200Response.accessiblePermissionConfigurations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, type, permissions, accountIds, sensitiveCategories, accessiblePermissionConfigurations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserSensitiveCategories200Response {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    accountIds: ").append(toIndentedString(accountIds)).append("\n");
    sb.append("    sensitiveCategories: ").append(toIndentedString(sensitiveCategories)).append("\n");
    sb.append("    accessiblePermissionConfigurations: ").append(toIndentedString(accessiblePermissionConfigurations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("type");
    openapiFields.add("permissions");
    openapiFields.add("accountIds");
    openapiFields.add("sensitiveCategories");
    openapiFields.add("accessiblePermissionConfigurations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("permissions");
    openapiRequiredFields.add("accountIds");
    openapiRequiredFields.add("sensitiveCategories");
    openapiRequiredFields.add("accessiblePermissionConfigurations");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to UserSensitiveCategories200Response
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserSensitiveCategories200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserSensitiveCategories200Response is not found in the empty JSON string", UserSensitiveCategories200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserSensitiveCategories200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserSensitiveCategories200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserSensitiveCategories200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("permissions") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("permissions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `permissions` to be an array in the JSON string but got `%s`", jsonObj.get("permissions").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("accountIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("accountIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountIds` to be an array in the JSON string but got `%s`", jsonObj.get("accountIds").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("sensitiveCategories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sensitiveCategories` to be an array in the JSON string but got `%s`", jsonObj.get("sensitiveCategories").toString()));
      }

      JsonArray jsonArraysensitiveCategories = jsonObj.getAsJsonArray("sensitiveCategories");
      // validate the required field `sensitiveCategories` (array)
      for (int i = 0; i < jsonArraysensitiveCategories.size(); i++) {
        UserSensitiveCategoriesSensitiveCategoriesInner.validateJsonElement(jsonArraysensitiveCategories.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserSensitiveCategories200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserSensitiveCategories200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserSensitiveCategories200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserSensitiveCategories200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<UserSensitiveCategories200Response>() {
           @Override
           public void write(JsonWriter out, UserSensitiveCategories200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserSensitiveCategories200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UserSensitiveCategories200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UserSensitiveCategories200Response
  * @throws IOException if the JSON string is invalid with respect to UserSensitiveCategories200Response
  */
  public static UserSensitiveCategories200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserSensitiveCategories200Response.class);
  }

 /**
  * Convert an instance of UserSensitiveCategories200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

