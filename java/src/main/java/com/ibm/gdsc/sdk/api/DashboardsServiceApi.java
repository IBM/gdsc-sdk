/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk.api;

import com.ibm.gdsc.sdk.ApiCallback;
import com.ibm.gdsc.sdk.ApiClient;
import com.ibm.gdsc.sdk.ApiException;
import com.ibm.gdsc.sdk.ApiResponse;
import com.ibm.gdsc.sdk.Configuration;
import com.ibm.gdsc.sdk.Pair;
import com.ibm.gdsc.sdk.ProgressRequestBody;
import com.ibm.gdsc.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ibm.gdsc.sdk.models.Dashboardsv3CreateDashboardResponse;
import com.ibm.gdsc.sdk.models.Dashboardsv3Dashboard;
import com.ibm.gdsc.sdk.models.Dashboardsv3DeleteDashboardRequest;
import com.ibm.gdsc.sdk.models.Dashboardsv3DeleteDashboardResponse;
import com.ibm.gdsc.sdk.models.Dashboardsv3GetDashboardsResponse;
import com.ibm.gdsc.sdk.models.Dashboardsv3UpdateDashboardRequest;
import com.ibm.gdsc.sdk.models.Dashboardsv3UpdateDashboardResponse;
import com.ibm.gdsc.sdk.models.RuntimeError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DashboardsServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DashboardsServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DashboardsServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for dashboardsServiceCreateDashboard
     * @param dashboardsv3Dashboard Unique dashboard. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dashboardsServiceCreateDashboardCall(Dashboardsv3Dashboard dashboardsv3Dashboard, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dashboardsv3Dashboard;

        // create path and map variables
        String localVarPath = "/api/v3/dashboards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dashboardsServiceCreateDashboardValidateBeforeCall(Dashboardsv3Dashboard dashboardsv3Dashboard, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardsv3Dashboard' is set
        if (dashboardsv3Dashboard == null) {
            throw new ApiException("Missing the required parameter 'dashboardsv3Dashboard' when calling dashboardsServiceCreateDashboard(Async)");
        }

        return dashboardsServiceCreateDashboardCall(dashboardsv3Dashboard, _callback);

    }

    /**
     * Summary: Create dashboard Description: Create a unique dashboard.
     * 
     * @param dashboardsv3Dashboard Unique dashboard. (required)
     * @return Dashboardsv3CreateDashboardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Dashboardsv3CreateDashboardResponse dashboardsServiceCreateDashboard(Dashboardsv3Dashboard dashboardsv3Dashboard) throws ApiException {
        ApiResponse<Dashboardsv3CreateDashboardResponse> localVarResp = dashboardsServiceCreateDashboardWithHttpInfo(dashboardsv3Dashboard);
        return localVarResp.getData();
    }

    /**
     * Summary: Create dashboard Description: Create a unique dashboard.
     * 
     * @param dashboardsv3Dashboard Unique dashboard. (required)
     * @return ApiResponse&lt;Dashboardsv3CreateDashboardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dashboardsv3CreateDashboardResponse> dashboardsServiceCreateDashboardWithHttpInfo(Dashboardsv3Dashboard dashboardsv3Dashboard) throws ApiException {
        okhttp3.Call localVarCall = dashboardsServiceCreateDashboardValidateBeforeCall(dashboardsv3Dashboard, null);
        Type localVarReturnType = new TypeToken<Dashboardsv3CreateDashboardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Create dashboard Description: Create a unique dashboard. (asynchronously)
     * 
     * @param dashboardsv3Dashboard Unique dashboard. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dashboardsServiceCreateDashboardAsync(Dashboardsv3Dashboard dashboardsv3Dashboard, final ApiCallback<Dashboardsv3CreateDashboardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dashboardsServiceCreateDashboardValidateBeforeCall(dashboardsv3Dashboard, _callback);
        Type localVarReturnType = new TypeToken<Dashboardsv3CreateDashboardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dashboardsServiceDeleteDashboard
     * @param dashboardId The id of the dashboard to be deleted. (required)
     * @param dashboardsv3DeleteDashboardRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dashboardsServiceDeleteDashboardCall(String dashboardId, Dashboardsv3DeleteDashboardRequest dashboardsv3DeleteDashboardRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dashboardsv3DeleteDashboardRequest;

        // create path and map variables
        String localVarPath = "/api/v3/dashboards/{dashboard_id}"
            .replace("{" + "dashboard_id" + "}", localVarApiClient.escapeString(dashboardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dashboardsServiceDeleteDashboardValidateBeforeCall(String dashboardId, Dashboardsv3DeleteDashboardRequest dashboardsv3DeleteDashboardRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardId' is set
        if (dashboardId == null) {
            throw new ApiException("Missing the required parameter 'dashboardId' when calling dashboardsServiceDeleteDashboard(Async)");
        }

        // verify the required parameter 'dashboardsv3DeleteDashboardRequest' is set
        if (dashboardsv3DeleteDashboardRequest == null) {
            throw new ApiException("Missing the required parameter 'dashboardsv3DeleteDashboardRequest' when calling dashboardsServiceDeleteDashboard(Async)");
        }

        return dashboardsServiceDeleteDashboardCall(dashboardId, dashboardsv3DeleteDashboardRequest, _callback);

    }

    /**
     * Summary: Delete dashboard Description: Delete a unique dashboard.
     * 
     * @param dashboardId The id of the dashboard to be deleted. (required)
     * @param dashboardsv3DeleteDashboardRequest  (required)
     * @return Dashboardsv3DeleteDashboardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Dashboardsv3DeleteDashboardResponse dashboardsServiceDeleteDashboard(String dashboardId, Dashboardsv3DeleteDashboardRequest dashboardsv3DeleteDashboardRequest) throws ApiException {
        ApiResponse<Dashboardsv3DeleteDashboardResponse> localVarResp = dashboardsServiceDeleteDashboardWithHttpInfo(dashboardId, dashboardsv3DeleteDashboardRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Delete dashboard Description: Delete a unique dashboard.
     * 
     * @param dashboardId The id of the dashboard to be deleted. (required)
     * @param dashboardsv3DeleteDashboardRequest  (required)
     * @return ApiResponse&lt;Dashboardsv3DeleteDashboardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dashboardsv3DeleteDashboardResponse> dashboardsServiceDeleteDashboardWithHttpInfo(String dashboardId, Dashboardsv3DeleteDashboardRequest dashboardsv3DeleteDashboardRequest) throws ApiException {
        okhttp3.Call localVarCall = dashboardsServiceDeleteDashboardValidateBeforeCall(dashboardId, dashboardsv3DeleteDashboardRequest, null);
        Type localVarReturnType = new TypeToken<Dashboardsv3DeleteDashboardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Delete dashboard Description: Delete a unique dashboard. (asynchronously)
     * 
     * @param dashboardId The id of the dashboard to be deleted. (required)
     * @param dashboardsv3DeleteDashboardRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dashboardsServiceDeleteDashboardAsync(String dashboardId, Dashboardsv3DeleteDashboardRequest dashboardsv3DeleteDashboardRequest, final ApiCallback<Dashboardsv3DeleteDashboardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dashboardsServiceDeleteDashboardValidateBeforeCall(dashboardId, dashboardsv3DeleteDashboardRequest, _callback);
        Type localVarReturnType = new TypeToken<Dashboardsv3DeleteDashboardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dashboardsServiceGetDashboards
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dashboardsServiceGetDashboardsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/dashboards";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dashboardsServiceGetDashboardsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return dashboardsServiceGetDashboardsCall(_callback);

    }

    /**
     * Summary: Get dashboards Description: Get a list of dashboards with all data.
     * 
     * @return Dashboardsv3GetDashboardsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Dashboardsv3GetDashboardsResponse dashboardsServiceGetDashboards() throws ApiException {
        ApiResponse<Dashboardsv3GetDashboardsResponse> localVarResp = dashboardsServiceGetDashboardsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Summary: Get dashboards Description: Get a list of dashboards with all data.
     * 
     * @return ApiResponse&lt;Dashboardsv3GetDashboardsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dashboardsv3GetDashboardsResponse> dashboardsServiceGetDashboardsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = dashboardsServiceGetDashboardsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Dashboardsv3GetDashboardsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get dashboards Description: Get a list of dashboards with all data. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dashboardsServiceGetDashboardsAsync(final ApiCallback<Dashboardsv3GetDashboardsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dashboardsServiceGetDashboardsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Dashboardsv3GetDashboardsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dashboardsServiceUpdateDashboard
     * @param dashboardId The id of the dashboard that was updated. (required)
     * @param dashboardsv3UpdateDashboardRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dashboardsServiceUpdateDashboardCall(String dashboardId, Dashboardsv3UpdateDashboardRequest dashboardsv3UpdateDashboardRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dashboardsv3UpdateDashboardRequest;

        // create path and map variables
        String localVarPath = "/api/v3/dashboards/{dashboard_id}"
            .replace("{" + "dashboard_id" + "}", localVarApiClient.escapeString(dashboardId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dashboardsServiceUpdateDashboardValidateBeforeCall(String dashboardId, Dashboardsv3UpdateDashboardRequest dashboardsv3UpdateDashboardRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dashboardId' is set
        if (dashboardId == null) {
            throw new ApiException("Missing the required parameter 'dashboardId' when calling dashboardsServiceUpdateDashboard(Async)");
        }

        // verify the required parameter 'dashboardsv3UpdateDashboardRequest' is set
        if (dashboardsv3UpdateDashboardRequest == null) {
            throw new ApiException("Missing the required parameter 'dashboardsv3UpdateDashboardRequest' when calling dashboardsServiceUpdateDashboard(Async)");
        }

        return dashboardsServiceUpdateDashboardCall(dashboardId, dashboardsv3UpdateDashboardRequest, _callback);

    }

    /**
     * Summary: Update dashboard Description: Update a dashboard.
     * 
     * @param dashboardId The id of the dashboard that was updated. (required)
     * @param dashboardsv3UpdateDashboardRequest  (required)
     * @return Dashboardsv3UpdateDashboardResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Dashboardsv3UpdateDashboardResponse dashboardsServiceUpdateDashboard(String dashboardId, Dashboardsv3UpdateDashboardRequest dashboardsv3UpdateDashboardRequest) throws ApiException {
        ApiResponse<Dashboardsv3UpdateDashboardResponse> localVarResp = dashboardsServiceUpdateDashboardWithHttpInfo(dashboardId, dashboardsv3UpdateDashboardRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Update dashboard Description: Update a dashboard.
     * 
     * @param dashboardId The id of the dashboard that was updated. (required)
     * @param dashboardsv3UpdateDashboardRequest  (required)
     * @return ApiResponse&lt;Dashboardsv3UpdateDashboardResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Dashboardsv3UpdateDashboardResponse> dashboardsServiceUpdateDashboardWithHttpInfo(String dashboardId, Dashboardsv3UpdateDashboardRequest dashboardsv3UpdateDashboardRequest) throws ApiException {
        okhttp3.Call localVarCall = dashboardsServiceUpdateDashboardValidateBeforeCall(dashboardId, dashboardsv3UpdateDashboardRequest, null);
        Type localVarReturnType = new TypeToken<Dashboardsv3UpdateDashboardResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Update dashboard Description: Update a dashboard. (asynchronously)
     * 
     * @param dashboardId The id of the dashboard that was updated. (required)
     * @param dashboardsv3UpdateDashboardRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dashboardsServiceUpdateDashboardAsync(String dashboardId, Dashboardsv3UpdateDashboardRequest dashboardsv3UpdateDashboardRequest, final ApiCallback<Dashboardsv3UpdateDashboardResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dashboardsServiceUpdateDashboardValidateBeforeCall(dashboardId, dashboardsv3UpdateDashboardRequest, _callback);
        Type localVarReturnType = new TypeToken<Dashboardsv3UpdateDashboardResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
