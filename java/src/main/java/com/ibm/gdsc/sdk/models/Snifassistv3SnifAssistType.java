/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk.models;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * This defines what type of service will be provided to sniffer.   - VERSION_NOT_SUPPORTED: Nothing is supported due to version mismatch.  - POLICY: Assist sniffer with Guardium policy configuration.  - CONFIGURATION_PARAMETERS: Assist sniffer with configuration parameters.  - GROUP_UPDATE: Assist sniffer with policy group member updates.  - SNIF_REGISTER: First message going from snif to assist  - STAP_CONFIG: Assist sniffer with STAP configuration.  - STAP_CONFIG_ACK: Ack from assist to snif after receiving STAP config  - STAP_CONFIG_DELETE: Assist sniffer with STAP configuration deletion.  - STAP_CONFIG_DELETE_ACK: Ack from assist to snif after receiving STAP config delete.  - STAP_HEARTBEAT: Assist sniffer with STAP heartbeat report.  - STAP_COMMAND: Send STAP command to stap.  - SNIF_FEEDBACK: Assist sniffer with policy and group update feedback
 */
@JsonAdapter(Snifassistv3SnifAssistType.Adapter.class)
public enum Snifassistv3SnifAssistType {
  
  VERSION_NOT_SUPPORTED("VERSION_NOT_SUPPORTED"),
  
  POLICY("POLICY"),
  
  CONFIGURATION_PARAMETERS("CONFIGURATION_PARAMETERS"),
  
  GROUP_UPDATE("GROUP_UPDATE"),
  
  SNIF_REGISTER("SNIF_REGISTER"),
  
  STAP_CONFIG("STAP_CONFIG"),
  
  STAP_CONFIG_ACK("STAP_CONFIG_ACK"),
  
  STAP_CONFIG_DELETE("STAP_CONFIG_DELETE"),
  
  STAP_CONFIG_DELETE_ACK("STAP_CONFIG_DELETE_ACK"),
  
  STAP_HEARTBEAT("STAP_HEARTBEAT"),
  
  STAP_COMMAND("STAP_COMMAND"),
  
  SNIF_FEEDBACK("SNIF_FEEDBACK");

  private String value;

  Snifassistv3SnifAssistType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static Snifassistv3SnifAssistType fromValue(String value) {
    for (Snifassistv3SnifAssistType b : Snifassistv3SnifAssistType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<Snifassistv3SnifAssistType> {
    @Override
    public void write(final JsonWriter jsonWriter, final Snifassistv3SnifAssistType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public Snifassistv3SnifAssistType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return Snifassistv3SnifAssistType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    Snifassistv3SnifAssistType.fromValue(value);
  }
}

