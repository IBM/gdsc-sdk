/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.gdsc.sdk.Tenantuserv3CurrentUserTenant;
import com.ibm.gdsc.sdk.Tenantuserv3FullUser;
import com.ibm.gdsc.sdk.Tenantuserv3Tenant;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.JSON;

/**
 * CurrentUser contains a single user.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-18T20:02:04.461512Z[UTC]", comments = "Generator version: 7.6.0")
public class Tenantuserv3CurrentUser {
  public static final String SERIALIZED_NAME_CUR_USER_TENANT = "cur_user_tenant";
  @SerializedName(SERIALIZED_NAME_CUR_USER_TENANT)
  private Tenantuserv3Tenant curUserTenant;

  public static final String SERIALIZED_NAME_TENANTS = "tenants";
  @SerializedName(SERIALIZED_NAME_TENANTS)
  private List<Tenantuserv3CurrentUserTenant> tenants = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private Tenantuserv3FullUser user;

  public Tenantuserv3CurrentUser() {
  }

  public Tenantuserv3CurrentUser curUserTenant(Tenantuserv3Tenant curUserTenant) {
    this.curUserTenant = curUserTenant;
    return this;
  }

   /**
   * Get curUserTenant
   * @return curUserTenant
  **/
  @javax.annotation.Nullable
  public Tenantuserv3Tenant getCurUserTenant() {
    return curUserTenant;
  }

  public void setCurUserTenant(Tenantuserv3Tenant curUserTenant) {
    this.curUserTenant = curUserTenant;
  }


  public Tenantuserv3CurrentUser tenants(List<Tenantuserv3CurrentUserTenant> tenants) {
    this.tenants = tenants;
    return this;
  }

  public Tenantuserv3CurrentUser addTenantsItem(Tenantuserv3CurrentUserTenant tenantsItem) {
    if (this.tenants == null) {
      this.tenants = new ArrayList<>();
    }
    this.tenants.add(tenantsItem);
    return this;
  }

   /**
   * Get tenants
   * @return tenants
  **/
  @javax.annotation.Nullable
  public List<Tenantuserv3CurrentUserTenant> getTenants() {
    return tenants;
  }

  public void setTenants(List<Tenantuserv3CurrentUserTenant> tenants) {
    this.tenants = tenants;
  }


  public Tenantuserv3CurrentUser user(Tenantuserv3FullUser user) {
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nullable
  public Tenantuserv3FullUser getUser() {
    return user;
  }

  public void setUser(Tenantuserv3FullUser user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Tenantuserv3CurrentUser tenantuserv3CurrentUser = (Tenantuserv3CurrentUser) o;
    return Objects.equals(this.curUserTenant, tenantuserv3CurrentUser.curUserTenant) &&
        Objects.equals(this.tenants, tenantuserv3CurrentUser.tenants) &&
        Objects.equals(this.user, tenantuserv3CurrentUser.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(curUserTenant, tenants, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Tenantuserv3CurrentUser {\n");
    sb.append("    curUserTenant: ").append(toIndentedString(curUserTenant)).append("\n");
    sb.append("    tenants: ").append(toIndentedString(tenants)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cur_user_tenant");
    openapiFields.add("tenants");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Tenantuserv3CurrentUser
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Tenantuserv3CurrentUser.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Tenantuserv3CurrentUser is not found in the empty JSON string", Tenantuserv3CurrentUser.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Tenantuserv3CurrentUser.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Tenantuserv3CurrentUser` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cur_user_tenant`
      if (jsonObj.get("cur_user_tenant") != null && !jsonObj.get("cur_user_tenant").isJsonNull()) {
        Tenantuserv3Tenant.validateJsonElement(jsonObj.get("cur_user_tenant"));
      }
      if (jsonObj.get("tenants") != null && !jsonObj.get("tenants").isJsonNull()) {
        JsonArray jsonArraytenants = jsonObj.getAsJsonArray("tenants");
        if (jsonArraytenants != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tenants").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tenants` to be an array in the JSON string but got `%s`", jsonObj.get("tenants").toString()));
          }

          // validate the optional field `tenants` (array)
          for (int i = 0; i < jsonArraytenants.size(); i++) {
            Tenantuserv3CurrentUserTenant.validateJsonElement(jsonArraytenants.get(i));
          };
        }
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        Tenantuserv3FullUser.validateJsonElement(jsonObj.get("user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Tenantuserv3CurrentUser.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Tenantuserv3CurrentUser' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Tenantuserv3CurrentUser> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Tenantuserv3CurrentUser.class));

       return (TypeAdapter<T>) new TypeAdapter<Tenantuserv3CurrentUser>() {
           @Override
           public void write(JsonWriter out, Tenantuserv3CurrentUser value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Tenantuserv3CurrentUser read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Tenantuserv3CurrentUser given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Tenantuserv3CurrentUser
  * @throws IOException if the JSON string is invalid with respect to Tenantuserv3CurrentUser
  */
  public static Tenantuserv3CurrentUser fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Tenantuserv3CurrentUser.class);
  }

 /**
  * Convert an instance of Tenantuserv3CurrentUser to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

