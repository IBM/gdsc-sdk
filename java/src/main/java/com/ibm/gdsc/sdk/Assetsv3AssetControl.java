/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.gdsc.sdk.Assetsv3PolicyApplied;
import com.ibm.gdsc.sdk.Assetsv3StatusType;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.JSON;

/**
 * AssetControl - Asset Overview - Control Health widget data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-18T18:23:51.166908Z[UTC]", comments = "Generator version: 7.6.0")
public class Assetsv3AssetControl {
  public static final String SERIALIZED_NAME_ENCRYPTION = "encryption";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION)
  private Assetsv3StatusType encryption = Assetsv3StatusType.NA;

  public static final String SERIALIZED_NAME_LAST_RESPONSE = "last_response";
  @SerializedName(SERIALIZED_NAME_LAST_RESPONSE)
  private String lastResponse;

  public static final String SERIALIZED_NAME_MONITORING = "monitoring";
  @SerializedName(SERIALIZED_NAME_MONITORING)
  private Assetsv3StatusType monitoring = Assetsv3StatusType.NA;

  public static final String SERIALIZED_NAME_POLICY_APPLIED_STATUS = "policy_applied_status";
  @SerializedName(SERIALIZED_NAME_POLICY_APPLIED_STATUS)
  private Assetsv3PolicyApplied policyAppliedStatus;

  public static final String SERIALIZED_NAME_STAP_NAME = "stap_name";
  @SerializedName(SERIALIZED_NAME_STAP_NAME)
  private String stapName;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public Assetsv3AssetControl() {
  }

  public Assetsv3AssetControl encryption(Assetsv3StatusType encryption) {
    this.encryption = encryption;
    return this;
  }

   /**
   * Get encryption
   * @return encryption
  **/
  @javax.annotation.Nullable
  public Assetsv3StatusType getEncryption() {
    return encryption;
  }

  public void setEncryption(Assetsv3StatusType encryption) {
    this.encryption = encryption;
  }


  public Assetsv3AssetControl lastResponse(String lastResponse) {
    this.lastResponse = lastResponse;
    return this;
  }

   /**
   * Get lastResponse
   * @return lastResponse
  **/
  @javax.annotation.Nullable
  public String getLastResponse() {
    return lastResponse;
  }

  public void setLastResponse(String lastResponse) {
    this.lastResponse = lastResponse;
  }


  public Assetsv3AssetControl monitoring(Assetsv3StatusType monitoring) {
    this.monitoring = monitoring;
    return this;
  }

   /**
   * Get monitoring
   * @return monitoring
  **/
  @javax.annotation.Nullable
  public Assetsv3StatusType getMonitoring() {
    return monitoring;
  }

  public void setMonitoring(Assetsv3StatusType monitoring) {
    this.monitoring = monitoring;
  }


  public Assetsv3AssetControl policyAppliedStatus(Assetsv3PolicyApplied policyAppliedStatus) {
    this.policyAppliedStatus = policyAppliedStatus;
    return this;
  }

   /**
   * Get policyAppliedStatus
   * @return policyAppliedStatus
  **/
  @javax.annotation.Nullable
  public Assetsv3PolicyApplied getPolicyAppliedStatus() {
    return policyAppliedStatus;
  }

  public void setPolicyAppliedStatus(Assetsv3PolicyApplied policyAppliedStatus) {
    this.policyAppliedStatus = policyAppliedStatus;
  }


  public Assetsv3AssetControl stapName(String stapName) {
    this.stapName = stapName;
    return this;
  }

   /**
   * Get stapName
   * @return stapName
  **/
  @javax.annotation.Nullable
  public String getStapName() {
    return stapName;
  }

  public void setStapName(String stapName) {
    this.stapName = stapName;
  }


  public Assetsv3AssetControl version(String version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Assetsv3AssetControl assetsv3AssetControl = (Assetsv3AssetControl) o;
    return Objects.equals(this.encryption, assetsv3AssetControl.encryption) &&
        Objects.equals(this.lastResponse, assetsv3AssetControl.lastResponse) &&
        Objects.equals(this.monitoring, assetsv3AssetControl.monitoring) &&
        Objects.equals(this.policyAppliedStatus, assetsv3AssetControl.policyAppliedStatus) &&
        Objects.equals(this.stapName, assetsv3AssetControl.stapName) &&
        Objects.equals(this.version, assetsv3AssetControl.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(encryption, lastResponse, monitoring, policyAppliedStatus, stapName, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Assetsv3AssetControl {\n");
    sb.append("    encryption: ").append(toIndentedString(encryption)).append("\n");
    sb.append("    lastResponse: ").append(toIndentedString(lastResponse)).append("\n");
    sb.append("    monitoring: ").append(toIndentedString(monitoring)).append("\n");
    sb.append("    policyAppliedStatus: ").append(toIndentedString(policyAppliedStatus)).append("\n");
    sb.append("    stapName: ").append(toIndentedString(stapName)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("encryption");
    openapiFields.add("last_response");
    openapiFields.add("monitoring");
    openapiFields.add("policy_applied_status");
    openapiFields.add("stap_name");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Assetsv3AssetControl
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Assetsv3AssetControl.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Assetsv3AssetControl is not found in the empty JSON string", Assetsv3AssetControl.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Assetsv3AssetControl.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Assetsv3AssetControl` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `encryption`
      if (jsonObj.get("encryption") != null && !jsonObj.get("encryption").isJsonNull()) {
        Assetsv3StatusType.validateJsonElement(jsonObj.get("encryption"));
      }
      if ((jsonObj.get("last_response") != null && !jsonObj.get("last_response").isJsonNull()) && !jsonObj.get("last_response").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_response` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_response").toString()));
      }
      // validate the optional field `monitoring`
      if (jsonObj.get("monitoring") != null && !jsonObj.get("monitoring").isJsonNull()) {
        Assetsv3StatusType.validateJsonElement(jsonObj.get("monitoring"));
      }
      // validate the optional field `policy_applied_status`
      if (jsonObj.get("policy_applied_status") != null && !jsonObj.get("policy_applied_status").isJsonNull()) {
        Assetsv3PolicyApplied.validateJsonElement(jsonObj.get("policy_applied_status"));
      }
      if ((jsonObj.get("stap_name") != null && !jsonObj.get("stap_name").isJsonNull()) && !jsonObj.get("stap_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stap_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stap_name").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Assetsv3AssetControl.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Assetsv3AssetControl' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Assetsv3AssetControl> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Assetsv3AssetControl.class));

       return (TypeAdapter<T>) new TypeAdapter<Assetsv3AssetControl>() {
           @Override
           public void write(JsonWriter out, Assetsv3AssetControl value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Assetsv3AssetControl read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Assetsv3AssetControl given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Assetsv3AssetControl
  * @throws IOException if the JSON string is invalid with respect to Assetsv3AssetControl
  */
  public static Assetsv3AssetControl fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Assetsv3AssetControl.class);
  }

 /**
  * Convert an instance of Assetsv3AssetControl to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

