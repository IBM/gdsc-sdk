/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.gdsc.sdk.ClassificationStatus;
import com.ibm.gdsc.sdk.Compliance;
import com.ibm.gdsc.sdk.DataStoreEncryptionStatus;
import com.ibm.gdsc.sdk.SensitivityCategory;
import com.ibm.gdsc.sdk.ServiceProvider;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.JSON;

/**
 * ListDataStoresFilterParameter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-18T18:23:51.166908Z[UTC]", comments = "Generator version: 7.6.0")
public class ListDataStoresFilterParameter {
  /**
   * Gets or Sets storeTypesFamily
   */
  @JsonAdapter(StoreTypesFamilyEnum.Adapter.class)
  public enum StoreTypesFamilyEnum {
    SAAS("SAAS"),
    
    CLOUD("CLOUD");

    private String value;

    StoreTypesFamilyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StoreTypesFamilyEnum fromValue(String value) {
      for (StoreTypesFamilyEnum b : StoreTypesFamilyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StoreTypesFamilyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StoreTypesFamilyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StoreTypesFamilyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StoreTypesFamilyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StoreTypesFamilyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STORE_TYPES_FAMILY = "storeTypesFamily";
  @SerializedName(SERIALIZED_NAME_STORE_TYPES_FAMILY)
  private List<StoreTypesFamilyEnum> storeTypesFamily = new ArrayList<>();

  public static final String SERIALIZED_NAME_STORE_NAMES = "storeNames";
  @SerializedName(SERIALIZED_NAME_STORE_NAMES)
  private List<String> storeNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_STORE_TYPES = "storeTypes";
  @SerializedName(SERIALIZED_NAME_STORE_TYPES)
  private List<String> storeTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICE_PROVIDERS = "serviceProviders";
  @SerializedName(SERIALIZED_NAME_SERVICE_PROVIDERS)
  private List<ServiceProvider> serviceProviders = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLOUD_ACCOUNT_IDS = "cloudAccountIds";
  @SerializedName(SERIALIZED_NAME_CLOUD_ACCOUNT_IDS)
  private List<String> cloudAccountIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLOUD_REGIONS = "cloudRegions";
  @SerializedName(SERIALIZED_NAME_CLOUD_REGIONS)
  private List<String> cloudRegions = new ArrayList<>();

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<String> labels = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLASSIFICATION_STATUSES = "classificationStatuses";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION_STATUSES)
  private List<ClassificationStatus> classificationStatuses = new ArrayList<>();

  public static final String SERIALIZED_NAME_SENSITIVITY_TAGS = "sensitivityTags";
  @SerializedName(SERIALIZED_NAME_SENSITIVITY_TAGS)
  private List<String> sensitivityTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_SENSITIVITY_CATEGORIES = "sensitivityCategories";
  @SerializedName(SERIALIZED_NAME_SENSITIVITY_CATEGORIES)
  private List<SensitivityCategory> sensitivityCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMPLIANCES = "compliances";
  @SerializedName(SERIALIZED_NAME_COMPLIANCES)
  private List<Compliance> compliances = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLOUD_TAGS = "cloudTags";
  @SerializedName(SERIALIZED_NAME_CLOUD_TAGS)
  private List<String> cloudTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENCRYPTION_STATUSES = "encryptionStatuses";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_STATUSES)
  private List<DataStoreEncryptionStatus> encryptionStatuses = new ArrayList<>();

  public static final String SERIALIZED_NAME_STORE_PARTIAL_NAME = "storePartialName";
  @SerializedName(SERIALIZED_NAME_STORE_PARTIAL_NAME)
  private String storePartialName;

  public ListDataStoresFilterParameter() {
  }

  public ListDataStoresFilterParameter storeTypesFamily(List<StoreTypesFamilyEnum> storeTypesFamily) {
    this.storeTypesFamily = storeTypesFamily;
    return this;
  }

  public ListDataStoresFilterParameter addStoreTypesFamilyItem(StoreTypesFamilyEnum storeTypesFamilyItem) {
    if (this.storeTypesFamily == null) {
      this.storeTypesFamily = new ArrayList<>();
    }
    this.storeTypesFamily.add(storeTypesFamilyItem);
    return this;
  }

   /**
   * Get storeTypesFamily
   * @return storeTypesFamily
  **/
  @javax.annotation.Nullable
  public List<StoreTypesFamilyEnum> getStoreTypesFamily() {
    return storeTypesFamily;
  }

  public void setStoreTypesFamily(List<StoreTypesFamilyEnum> storeTypesFamily) {
    this.storeTypesFamily = storeTypesFamily;
  }


  public ListDataStoresFilterParameter storeNames(List<String> storeNames) {
    this.storeNames = storeNames;
    return this;
  }

  public ListDataStoresFilterParameter addStoreNamesItem(String storeNamesItem) {
    if (this.storeNames == null) {
      this.storeNames = new ArrayList<>();
    }
    this.storeNames.add(storeNamesItem);
    return this;
  }

   /**
   * Get storeNames
   * @return storeNames
  **/
  @javax.annotation.Nullable
  public List<String> getStoreNames() {
    return storeNames;
  }

  public void setStoreNames(List<String> storeNames) {
    this.storeNames = storeNames;
  }


  public ListDataStoresFilterParameter storeTypes(List<String> storeTypes) {
    this.storeTypes = storeTypes;
    return this;
  }

  public ListDataStoresFilterParameter addStoreTypesItem(String storeTypesItem) {
    if (this.storeTypes == null) {
      this.storeTypes = new ArrayList<>();
    }
    this.storeTypes.add(storeTypesItem);
    return this;
  }

   /**
   * Get storeTypes
   * @return storeTypes
  **/
  @javax.annotation.Nullable
  public List<String> getStoreTypes() {
    return storeTypes;
  }

  public void setStoreTypes(List<String> storeTypes) {
    this.storeTypes = storeTypes;
  }


  public ListDataStoresFilterParameter serviceProviders(List<ServiceProvider> serviceProviders) {
    this.serviceProviders = serviceProviders;
    return this;
  }

  public ListDataStoresFilterParameter addServiceProvidersItem(ServiceProvider serviceProvidersItem) {
    if (this.serviceProviders == null) {
      this.serviceProviders = new ArrayList<>();
    }
    this.serviceProviders.add(serviceProvidersItem);
    return this;
  }

   /**
   * Get serviceProviders
   * @return serviceProviders
  **/
  @javax.annotation.Nullable
  public List<ServiceProvider> getServiceProviders() {
    return serviceProviders;
  }

  public void setServiceProviders(List<ServiceProvider> serviceProviders) {
    this.serviceProviders = serviceProviders;
  }


  public ListDataStoresFilterParameter cloudAccountIds(List<String> cloudAccountIds) {
    this.cloudAccountIds = cloudAccountIds;
    return this;
  }

  public ListDataStoresFilterParameter addCloudAccountIdsItem(String cloudAccountIdsItem) {
    if (this.cloudAccountIds == null) {
      this.cloudAccountIds = new ArrayList<>();
    }
    this.cloudAccountIds.add(cloudAccountIdsItem);
    return this;
  }

   /**
   * Get cloudAccountIds
   * @return cloudAccountIds
  **/
  @javax.annotation.Nullable
  public List<String> getCloudAccountIds() {
    return cloudAccountIds;
  }

  public void setCloudAccountIds(List<String> cloudAccountIds) {
    this.cloudAccountIds = cloudAccountIds;
  }


  public ListDataStoresFilterParameter cloudRegions(List<String> cloudRegions) {
    this.cloudRegions = cloudRegions;
    return this;
  }

  public ListDataStoresFilterParameter addCloudRegionsItem(String cloudRegionsItem) {
    if (this.cloudRegions == null) {
      this.cloudRegions = new ArrayList<>();
    }
    this.cloudRegions.add(cloudRegionsItem);
    return this;
  }

   /**
   * Get cloudRegions
   * @return cloudRegions
  **/
  @javax.annotation.Nullable
  public List<String> getCloudRegions() {
    return cloudRegions;
  }

  public void setCloudRegions(List<String> cloudRegions) {
    this.cloudRegions = cloudRegions;
  }


  public ListDataStoresFilterParameter labels(List<String> labels) {
    this.labels = labels;
    return this;
  }

  public ListDataStoresFilterParameter addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

   /**
   * Get labels
   * @return labels
  **/
  @javax.annotation.Nullable
  public List<String> getLabels() {
    return labels;
  }

  public void setLabels(List<String> labels) {
    this.labels = labels;
  }


  public ListDataStoresFilterParameter classificationStatuses(List<ClassificationStatus> classificationStatuses) {
    this.classificationStatuses = classificationStatuses;
    return this;
  }

  public ListDataStoresFilterParameter addClassificationStatusesItem(ClassificationStatus classificationStatusesItem) {
    if (this.classificationStatuses == null) {
      this.classificationStatuses = new ArrayList<>();
    }
    this.classificationStatuses.add(classificationStatusesItem);
    return this;
  }

   /**
   * Get classificationStatuses
   * @return classificationStatuses
  **/
  @javax.annotation.Nullable
  public List<ClassificationStatus> getClassificationStatuses() {
    return classificationStatuses;
  }

  public void setClassificationStatuses(List<ClassificationStatus> classificationStatuses) {
    this.classificationStatuses = classificationStatuses;
  }


  public ListDataStoresFilterParameter sensitivityTags(List<String> sensitivityTags) {
    this.sensitivityTags = sensitivityTags;
    return this;
  }

  public ListDataStoresFilterParameter addSensitivityTagsItem(String sensitivityTagsItem) {
    if (this.sensitivityTags == null) {
      this.sensitivityTags = new ArrayList<>();
    }
    this.sensitivityTags.add(sensitivityTagsItem);
    return this;
  }

   /**
   * Get sensitivityTags
   * @return sensitivityTags
  **/
  @javax.annotation.Nullable
  public List<String> getSensitivityTags() {
    return sensitivityTags;
  }

  public void setSensitivityTags(List<String> sensitivityTags) {
    this.sensitivityTags = sensitivityTags;
  }


  public ListDataStoresFilterParameter sensitivityCategories(List<SensitivityCategory> sensitivityCategories) {
    this.sensitivityCategories = sensitivityCategories;
    return this;
  }

  public ListDataStoresFilterParameter addSensitivityCategoriesItem(SensitivityCategory sensitivityCategoriesItem) {
    if (this.sensitivityCategories == null) {
      this.sensitivityCategories = new ArrayList<>();
    }
    this.sensitivityCategories.add(sensitivityCategoriesItem);
    return this;
  }

   /**
   * Get sensitivityCategories
   * @return sensitivityCategories
  **/
  @javax.annotation.Nullable
  public List<SensitivityCategory> getSensitivityCategories() {
    return sensitivityCategories;
  }

  public void setSensitivityCategories(List<SensitivityCategory> sensitivityCategories) {
    this.sensitivityCategories = sensitivityCategories;
  }


  public ListDataStoresFilterParameter compliances(List<Compliance> compliances) {
    this.compliances = compliances;
    return this;
  }

  public ListDataStoresFilterParameter addCompliancesItem(Compliance compliancesItem) {
    if (this.compliances == null) {
      this.compliances = new ArrayList<>();
    }
    this.compliances.add(compliancesItem);
    return this;
  }

   /**
   * Get compliances
   * @return compliances
  **/
  @javax.annotation.Nullable
  public List<Compliance> getCompliances() {
    return compliances;
  }

  public void setCompliances(List<Compliance> compliances) {
    this.compliances = compliances;
  }


  public ListDataStoresFilterParameter cloudTags(List<String> cloudTags) {
    this.cloudTags = cloudTags;
    return this;
  }

  public ListDataStoresFilterParameter addCloudTagsItem(String cloudTagsItem) {
    if (this.cloudTags == null) {
      this.cloudTags = new ArrayList<>();
    }
    this.cloudTags.add(cloudTagsItem);
    return this;
  }

   /**
   * Get cloudTags
   * @return cloudTags
  **/
  @javax.annotation.Nullable
  public List<String> getCloudTags() {
    return cloudTags;
  }

  public void setCloudTags(List<String> cloudTags) {
    this.cloudTags = cloudTags;
  }


  public ListDataStoresFilterParameter encryptionStatuses(List<DataStoreEncryptionStatus> encryptionStatuses) {
    this.encryptionStatuses = encryptionStatuses;
    return this;
  }

  public ListDataStoresFilterParameter addEncryptionStatusesItem(DataStoreEncryptionStatus encryptionStatusesItem) {
    if (this.encryptionStatuses == null) {
      this.encryptionStatuses = new ArrayList<>();
    }
    this.encryptionStatuses.add(encryptionStatusesItem);
    return this;
  }

   /**
   * Get encryptionStatuses
   * @return encryptionStatuses
  **/
  @javax.annotation.Nullable
  public List<DataStoreEncryptionStatus> getEncryptionStatuses() {
    return encryptionStatuses;
  }

  public void setEncryptionStatuses(List<DataStoreEncryptionStatus> encryptionStatuses) {
    this.encryptionStatuses = encryptionStatuses;
  }


  public ListDataStoresFilterParameter storePartialName(String storePartialName) {
    this.storePartialName = storePartialName;
    return this;
  }

   /**
   * Get storePartialName
   * @return storePartialName
  **/
  @javax.annotation.Nullable
  public String getStorePartialName() {
    return storePartialName;
  }

  public void setStorePartialName(String storePartialName) {
    this.storePartialName = storePartialName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListDataStoresFilterParameter listDataStoresFilterParameter = (ListDataStoresFilterParameter) o;
    return Objects.equals(this.storeTypesFamily, listDataStoresFilterParameter.storeTypesFamily) &&
        Objects.equals(this.storeNames, listDataStoresFilterParameter.storeNames) &&
        Objects.equals(this.storeTypes, listDataStoresFilterParameter.storeTypes) &&
        Objects.equals(this.serviceProviders, listDataStoresFilterParameter.serviceProviders) &&
        Objects.equals(this.cloudAccountIds, listDataStoresFilterParameter.cloudAccountIds) &&
        Objects.equals(this.cloudRegions, listDataStoresFilterParameter.cloudRegions) &&
        Objects.equals(this.labels, listDataStoresFilterParameter.labels) &&
        Objects.equals(this.classificationStatuses, listDataStoresFilterParameter.classificationStatuses) &&
        Objects.equals(this.sensitivityTags, listDataStoresFilterParameter.sensitivityTags) &&
        Objects.equals(this.sensitivityCategories, listDataStoresFilterParameter.sensitivityCategories) &&
        Objects.equals(this.compliances, listDataStoresFilterParameter.compliances) &&
        Objects.equals(this.cloudTags, listDataStoresFilterParameter.cloudTags) &&
        Objects.equals(this.encryptionStatuses, listDataStoresFilterParameter.encryptionStatuses) &&
        Objects.equals(this.storePartialName, listDataStoresFilterParameter.storePartialName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(storeTypesFamily, storeNames, storeTypes, serviceProviders, cloudAccountIds, cloudRegions, labels, classificationStatuses, sensitivityTags, sensitivityCategories, compliances, cloudTags, encryptionStatuses, storePartialName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListDataStoresFilterParameter {\n");
    sb.append("    storeTypesFamily: ").append(toIndentedString(storeTypesFamily)).append("\n");
    sb.append("    storeNames: ").append(toIndentedString(storeNames)).append("\n");
    sb.append("    storeTypes: ").append(toIndentedString(storeTypes)).append("\n");
    sb.append("    serviceProviders: ").append(toIndentedString(serviceProviders)).append("\n");
    sb.append("    cloudAccountIds: ").append(toIndentedString(cloudAccountIds)).append("\n");
    sb.append("    cloudRegions: ").append(toIndentedString(cloudRegions)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    classificationStatuses: ").append(toIndentedString(classificationStatuses)).append("\n");
    sb.append("    sensitivityTags: ").append(toIndentedString(sensitivityTags)).append("\n");
    sb.append("    sensitivityCategories: ").append(toIndentedString(sensitivityCategories)).append("\n");
    sb.append("    compliances: ").append(toIndentedString(compliances)).append("\n");
    sb.append("    cloudTags: ").append(toIndentedString(cloudTags)).append("\n");
    sb.append("    encryptionStatuses: ").append(toIndentedString(encryptionStatuses)).append("\n");
    sb.append("    storePartialName: ").append(toIndentedString(storePartialName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("storeTypesFamily");
    openapiFields.add("storeNames");
    openapiFields.add("storeTypes");
    openapiFields.add("serviceProviders");
    openapiFields.add("cloudAccountIds");
    openapiFields.add("cloudRegions");
    openapiFields.add("labels");
    openapiFields.add("classificationStatuses");
    openapiFields.add("sensitivityTags");
    openapiFields.add("sensitivityCategories");
    openapiFields.add("compliances");
    openapiFields.add("cloudTags");
    openapiFields.add("encryptionStatuses");
    openapiFields.add("storePartialName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ListDataStoresFilterParameter
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListDataStoresFilterParameter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListDataStoresFilterParameter is not found in the empty JSON string", ListDataStoresFilterParameter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListDataStoresFilterParameter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListDataStoresFilterParameter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("storeTypesFamily") != null && !jsonObj.get("storeTypesFamily").isJsonNull() && !jsonObj.get("storeTypesFamily").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `storeTypesFamily` to be an array in the JSON string but got `%s`", jsonObj.get("storeTypesFamily").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("storeNames") != null && !jsonObj.get("storeNames").isJsonNull() && !jsonObj.get("storeNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `storeNames` to be an array in the JSON string but got `%s`", jsonObj.get("storeNames").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("storeTypes") != null && !jsonObj.get("storeTypes").isJsonNull() && !jsonObj.get("storeTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `storeTypes` to be an array in the JSON string but got `%s`", jsonObj.get("storeTypes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("serviceProviders") != null && !jsonObj.get("serviceProviders").isJsonNull() && !jsonObj.get("serviceProviders").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceProviders` to be an array in the JSON string but got `%s`", jsonObj.get("serviceProviders").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cloudAccountIds") != null && !jsonObj.get("cloudAccountIds").isJsonNull() && !jsonObj.get("cloudAccountIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloudAccountIds` to be an array in the JSON string but got `%s`", jsonObj.get("cloudAccountIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cloudRegions") != null && !jsonObj.get("cloudRegions").isJsonNull() && !jsonObj.get("cloudRegions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloudRegions` to be an array in the JSON string but got `%s`", jsonObj.get("cloudRegions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull() && !jsonObj.get("labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("classificationStatuses") != null && !jsonObj.get("classificationStatuses").isJsonNull() && !jsonObj.get("classificationStatuses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `classificationStatuses` to be an array in the JSON string but got `%s`", jsonObj.get("classificationStatuses").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sensitivityTags") != null && !jsonObj.get("sensitivityTags").isJsonNull() && !jsonObj.get("sensitivityTags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sensitivityTags` to be an array in the JSON string but got `%s`", jsonObj.get("sensitivityTags").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sensitivityCategories") != null && !jsonObj.get("sensitivityCategories").isJsonNull() && !jsonObj.get("sensitivityCategories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sensitivityCategories` to be an array in the JSON string but got `%s`", jsonObj.get("sensitivityCategories").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("compliances") != null && !jsonObj.get("compliances").isJsonNull() && !jsonObj.get("compliances").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `compliances` to be an array in the JSON string but got `%s`", jsonObj.get("compliances").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cloudTags") != null && !jsonObj.get("cloudTags").isJsonNull() && !jsonObj.get("cloudTags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloudTags` to be an array in the JSON string but got `%s`", jsonObj.get("cloudTags").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("encryptionStatuses") != null && !jsonObj.get("encryptionStatuses").isJsonNull() && !jsonObj.get("encryptionStatuses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptionStatuses` to be an array in the JSON string but got `%s`", jsonObj.get("encryptionStatuses").toString()));
      }
      if ((jsonObj.get("storePartialName") != null && !jsonObj.get("storePartialName").isJsonNull()) && !jsonObj.get("storePartialName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storePartialName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storePartialName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListDataStoresFilterParameter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListDataStoresFilterParameter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListDataStoresFilterParameter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListDataStoresFilterParameter.class));

       return (TypeAdapter<T>) new TypeAdapter<ListDataStoresFilterParameter>() {
           @Override
           public void write(JsonWriter out, ListDataStoresFilterParameter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListDataStoresFilterParameter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ListDataStoresFilterParameter given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ListDataStoresFilterParameter
  * @throws IOException if the JSON string is invalid with respect to ListDataStoresFilterParameter
  */
  public static ListDataStoresFilterParameter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListDataStoresFilterParameter.class);
  }

 /**
  * Convert an instance of ListDataStoresFilterParameter to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

