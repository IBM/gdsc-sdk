/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.gdsc.sdk.models.SensitivityCategory;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.sdk.JSON;

/**
 * ListSensitivitiesFilterParameter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-07T13:24:05.648078332-08:00[America/Los_Angeles]", comments = "Generator version: 7.6.0")
public class ListSensitivitiesFilterParameter {
  public static final String SERIALIZED_NAME_RESOURCE_ID = "resourceId";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ID)
  private String resourceId;

  public static final String SERIALIZED_NAME_DATA_STORE_ID = "dataStoreId";
  @SerializedName(SERIALIZED_NAME_DATA_STORE_ID)
  private String dataStoreId;

  public static final String SERIALIZED_NAME_SENSITIVE_TAG = "sensitiveTag";
  @SerializedName(SERIALIZED_NAME_SENSITIVE_TAG)
  private String sensitiveTag;

  public static final String SERIALIZED_NAME_SENSITIVITY_CATEGORIES = "sensitivityCategories";
  @SerializedName(SERIALIZED_NAME_SENSITIVITY_CATEGORIES)
  private List<SensitivityCategory> sensitivityCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_HASH = "hash";
  @SerializedName(SERIALIZED_NAME_HASH)
  private String hash;

  public ListSensitivitiesFilterParameter() {
  }

  public ListSensitivitiesFilterParameter resourceId(String resourceId) {
    this.resourceId = resourceId;
    return this;
  }

   /**
   * Get resourceId
   * @return resourceId
  **/
  @javax.annotation.Nullable
  public String getResourceId() {
    return resourceId;
  }

  public void setResourceId(String resourceId) {
    this.resourceId = resourceId;
  }


  public ListSensitivitiesFilterParameter dataStoreId(String dataStoreId) {
    this.dataStoreId = dataStoreId;
    return this;
  }

   /**
   * Get dataStoreId
   * @return dataStoreId
  **/
  @javax.annotation.Nullable
  public String getDataStoreId() {
    return dataStoreId;
  }

  public void setDataStoreId(String dataStoreId) {
    this.dataStoreId = dataStoreId;
  }


  public ListSensitivitiesFilterParameter sensitiveTag(String sensitiveTag) {
    this.sensitiveTag = sensitiveTag;
    return this;
  }

   /**
   * Get sensitiveTag
   * @return sensitiveTag
  **/
  @javax.annotation.Nullable
  public String getSensitiveTag() {
    return sensitiveTag;
  }

  public void setSensitiveTag(String sensitiveTag) {
    this.sensitiveTag = sensitiveTag;
  }


  public ListSensitivitiesFilterParameter sensitivityCategories(List<SensitivityCategory> sensitivityCategories) {
    this.sensitivityCategories = sensitivityCategories;
    return this;
  }

  public ListSensitivitiesFilterParameter addSensitivityCategoriesItem(SensitivityCategory sensitivityCategoriesItem) {
    if (this.sensitivityCategories == null) {
      this.sensitivityCategories = new ArrayList<>();
    }
    this.sensitivityCategories.add(sensitivityCategoriesItem);
    return this;
  }

   /**
   * Get sensitivityCategories
   * @return sensitivityCategories
  **/
  @javax.annotation.Nullable
  public List<SensitivityCategory> getSensitivityCategories() {
    return sensitivityCategories;
  }

  public void setSensitivityCategories(List<SensitivityCategory> sensitivityCategories) {
    this.sensitivityCategories = sensitivityCategories;
  }


  public ListSensitivitiesFilterParameter hash(String hash) {
    this.hash = hash;
    return this;
  }

   /**
   * Get hash
   * @return hash
  **/
  @javax.annotation.Nullable
  public String getHash() {
    return hash;
  }

  public void setHash(String hash) {
    this.hash = hash;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListSensitivitiesFilterParameter listSensitivitiesFilterParameter = (ListSensitivitiesFilterParameter) o;
    return Objects.equals(this.resourceId, listSensitivitiesFilterParameter.resourceId) &&
        Objects.equals(this.dataStoreId, listSensitivitiesFilterParameter.dataStoreId) &&
        Objects.equals(this.sensitiveTag, listSensitivitiesFilterParameter.sensitiveTag) &&
        Objects.equals(this.sensitivityCategories, listSensitivitiesFilterParameter.sensitivityCategories) &&
        Objects.equals(this.hash, listSensitivitiesFilterParameter.hash);
  }

  @Override
  public int hashCode() {
    return Objects.hash(resourceId, dataStoreId, sensitiveTag, sensitivityCategories, hash);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListSensitivitiesFilterParameter {\n");
    sb.append("    resourceId: ").append(toIndentedString(resourceId)).append("\n");
    sb.append("    dataStoreId: ").append(toIndentedString(dataStoreId)).append("\n");
    sb.append("    sensitiveTag: ").append(toIndentedString(sensitiveTag)).append("\n");
    sb.append("    sensitivityCategories: ").append(toIndentedString(sensitivityCategories)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("resourceId");
    openapiFields.add("dataStoreId");
    openapiFields.add("sensitiveTag");
    openapiFields.add("sensitivityCategories");
    openapiFields.add("hash");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ListSensitivitiesFilterParameter
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListSensitivitiesFilterParameter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListSensitivitiesFilterParameter is not found in the empty JSON string", ListSensitivitiesFilterParameter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListSensitivitiesFilterParameter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListSensitivitiesFilterParameter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("resourceId") != null && !jsonObj.get("resourceId").isJsonNull()) && !jsonObj.get("resourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceId").toString()));
      }
      if ((jsonObj.get("dataStoreId") != null && !jsonObj.get("dataStoreId").isJsonNull()) && !jsonObj.get("dataStoreId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataStoreId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataStoreId").toString()));
      }
      if ((jsonObj.get("sensitiveTag") != null && !jsonObj.get("sensitiveTag").isJsonNull()) && !jsonObj.get("sensitiveTag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sensitiveTag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sensitiveTag").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sensitivityCategories") != null && !jsonObj.get("sensitivityCategories").isJsonNull() && !jsonObj.get("sensitivityCategories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sensitivityCategories` to be an array in the JSON string but got `%s`", jsonObj.get("sensitivityCategories").toString()));
      }
      if ((jsonObj.get("hash") != null && !jsonObj.get("hash").isJsonNull()) && !jsonObj.get("hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hash").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListSensitivitiesFilterParameter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListSensitivitiesFilterParameter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListSensitivitiesFilterParameter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListSensitivitiesFilterParameter.class));

       return (TypeAdapter<T>) new TypeAdapter<ListSensitivitiesFilterParameter>() {
           @Override
           public void write(JsonWriter out, ListSensitivitiesFilterParameter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListSensitivitiesFilterParameter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ListSensitivitiesFilterParameter given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ListSensitivitiesFilterParameter
  * @throws IOException if the JSON string is invalid with respect to ListSensitivitiesFilterParameter
  */
  public static ListSensitivitiesFilterParameter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListSensitivitiesFilterParameter.class);
  }

 /**
  * Convert an instance of ListSensitivitiesFilterParameter to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

