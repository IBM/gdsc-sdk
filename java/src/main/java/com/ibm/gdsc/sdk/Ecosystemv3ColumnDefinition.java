/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.gdsc.sdk.Ecosystemv3DataType;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.JSON;

/**
 * ColumnDefinition defines a column in database.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-18T18:23:51.166908Z[UTC]", comments = "Generator version: 7.6.0")
public class Ecosystemv3ColumnDefinition {
  public static final String SERIALIZED_NAME_ALLOW_NULL = "allow_null";
  @SerializedName(SERIALIZED_NAME_ALLOW_NULL)
  private Boolean allowNull;

  public static final String SERIALIZED_NAME_COLUMN_ID = "column_id";
  @SerializedName(SERIALIZED_NAME_COLUMN_ID)
  private Integer columnId;

  public static final String SERIALIZED_NAME_COLUMN_NAME = "column_name";
  @SerializedName(SERIALIZED_NAME_COLUMN_NAME)
  private String columnName;

  public static final String SERIALIZED_NAME_COLUMN_SIZE = "column_size";
  @SerializedName(SERIALIZED_NAME_COLUMN_SIZE)
  private String columnSize;

  public static final String SERIALIZED_NAME_COLUMN_TYPE = "column_type";
  @SerializedName(SERIALIZED_NAME_COLUMN_TYPE)
  private Ecosystemv3DataType columnType = Ecosystemv3DataType.UNDEFINED_DATA_TYPE;

  public static final String SERIALIZED_NAME_UNIQUE = "unique";
  @SerializedName(SERIALIZED_NAME_UNIQUE)
  private Boolean unique;

  public Ecosystemv3ColumnDefinition() {
  }

  public Ecosystemv3ColumnDefinition allowNull(Boolean allowNull) {
    this.allowNull = allowNull;
    return this;
  }

   /**
   * If null is allowed.
   * @return allowNull
  **/
  @javax.annotation.Nullable
  public Boolean getAllowNull() {
    return allowNull;
  }

  public void setAllowNull(Boolean allowNull) {
    this.allowNull = allowNull;
  }


  public Ecosystemv3ColumnDefinition columnId(Integer columnId) {
    this.columnId = columnId;
    return this;
  }

   /**
   * The id of the column.
   * @return columnId
  **/
  @javax.annotation.Nullable
  public Integer getColumnId() {
    return columnId;
  }

  public void setColumnId(Integer columnId) {
    this.columnId = columnId;
  }


  public Ecosystemv3ColumnDefinition columnName(String columnName) {
    this.columnName = columnName;
    return this;
  }

   /**
   * The name of the column.
   * @return columnName
  **/
  @javax.annotation.Nullable
  public String getColumnName() {
    return columnName;
  }

  public void setColumnName(String columnName) {
    this.columnName = columnName;
  }


  public Ecosystemv3ColumnDefinition columnSize(String columnSize) {
    this.columnSize = columnSize;
    return this;
  }

   /**
   * Data size of the column.
   * @return columnSize
  **/
  @javax.annotation.Nullable
  public String getColumnSize() {
    return columnSize;
  }

  public void setColumnSize(String columnSize) {
    this.columnSize = columnSize;
  }


  public Ecosystemv3ColumnDefinition columnType(Ecosystemv3DataType columnType) {
    this.columnType = columnType;
    return this;
  }

   /**
   * Get columnType
   * @return columnType
  **/
  @javax.annotation.Nullable
  public Ecosystemv3DataType getColumnType() {
    return columnType;
  }

  public void setColumnType(Ecosystemv3DataType columnType) {
    this.columnType = columnType;
  }


  public Ecosystemv3ColumnDefinition unique(Boolean unique) {
    this.unique = unique;
    return this;
  }

   /**
   * If the column is unique.
   * @return unique
  **/
  @javax.annotation.Nullable
  public Boolean getUnique() {
    return unique;
  }

  public void setUnique(Boolean unique) {
    this.unique = unique;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Ecosystemv3ColumnDefinition ecosystemv3ColumnDefinition = (Ecosystemv3ColumnDefinition) o;
    return Objects.equals(this.allowNull, ecosystemv3ColumnDefinition.allowNull) &&
        Objects.equals(this.columnId, ecosystemv3ColumnDefinition.columnId) &&
        Objects.equals(this.columnName, ecosystemv3ColumnDefinition.columnName) &&
        Objects.equals(this.columnSize, ecosystemv3ColumnDefinition.columnSize) &&
        Objects.equals(this.columnType, ecosystemv3ColumnDefinition.columnType) &&
        Objects.equals(this.unique, ecosystemv3ColumnDefinition.unique);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowNull, columnId, columnName, columnSize, columnType, unique);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Ecosystemv3ColumnDefinition {\n");
    sb.append("    allowNull: ").append(toIndentedString(allowNull)).append("\n");
    sb.append("    columnId: ").append(toIndentedString(columnId)).append("\n");
    sb.append("    columnName: ").append(toIndentedString(columnName)).append("\n");
    sb.append("    columnSize: ").append(toIndentedString(columnSize)).append("\n");
    sb.append("    columnType: ").append(toIndentedString(columnType)).append("\n");
    sb.append("    unique: ").append(toIndentedString(unique)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allow_null");
    openapiFields.add("column_id");
    openapiFields.add("column_name");
    openapiFields.add("column_size");
    openapiFields.add("column_type");
    openapiFields.add("unique");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Ecosystemv3ColumnDefinition
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Ecosystemv3ColumnDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Ecosystemv3ColumnDefinition is not found in the empty JSON string", Ecosystemv3ColumnDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Ecosystemv3ColumnDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Ecosystemv3ColumnDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("column_name") != null && !jsonObj.get("column_name").isJsonNull()) && !jsonObj.get("column_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `column_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("column_name").toString()));
      }
      if ((jsonObj.get("column_size") != null && !jsonObj.get("column_size").isJsonNull()) && !jsonObj.get("column_size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `column_size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("column_size").toString()));
      }
      // validate the optional field `column_type`
      if (jsonObj.get("column_type") != null && !jsonObj.get("column_type").isJsonNull()) {
        Ecosystemv3DataType.validateJsonElement(jsonObj.get("column_type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Ecosystemv3ColumnDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Ecosystemv3ColumnDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Ecosystemv3ColumnDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Ecosystemv3ColumnDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<Ecosystemv3ColumnDefinition>() {
           @Override
           public void write(JsonWriter out, Ecosystemv3ColumnDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Ecosystemv3ColumnDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Ecosystemv3ColumnDefinition given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Ecosystemv3ColumnDefinition
  * @throws IOException if the JSON string is invalid with respect to Ecosystemv3ColumnDefinition
  */
  public static Ecosystemv3ColumnDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Ecosystemv3ColumnDefinition.class);
  }

 /**
  * Convert an instance of Ecosystemv3ColumnDefinition to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

