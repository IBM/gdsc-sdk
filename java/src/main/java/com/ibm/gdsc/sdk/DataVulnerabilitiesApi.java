/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import com.ibm.gdsc.ApiCallback;
import com.ibm.gdsc.ApiClient;
import com.ibm.gdsc.ApiException;
import com.ibm.gdsc.ApiResponse;
import com.ibm.gdsc.Configuration;
import com.ibm.gdsc.Pair;
import com.ibm.gdsc.ProgressRequestBody;
import com.ibm.gdsc.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ibm.gdsc.sdk.AddCommentBody;
import com.ibm.gdsc.sdk.Authenticate400Response;
import java.math.BigDecimal;
import com.ibm.gdsc.sdk.ListVulnerabilities200Response;
import com.ibm.gdsc.sdk.ListVulnerabilitiesByDataStore200Response;
import com.ibm.gdsc.sdk.ListVulnerabilitiesByDataStoreSortParameter;
import com.ibm.gdsc.sdk.ListVulnerabilitiesSortParameter;
import com.ibm.gdsc.sdk.SetVulnerabilityStatusRequest;
import com.ibm.gdsc.sdk.UpdateCommentBody;
import com.ibm.gdsc.sdk.VulnerabilitiesByDataStoreFilterOptions;
import com.ibm.gdsc.sdk.VulnerabilitiesFilterOptions;
import com.ibm.gdsc.sdk.VulnerabilitiesSummary;
import com.ibm.gdsc.sdk.Vulnerability;
import com.ibm.gdsc.sdk.VulnerabilityStatus;
import com.ibm.gdsc.sdk.VulnerabilityStatusComment;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DataVulnerabilitiesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DataVulnerabilitiesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DataVulnerabilitiesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addVulnerabilityStatusComment
     * @param vulnerabilityId  (required)
     * @param statusId  (required)
     * @param addCommentBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call addVulnerabilityStatusCommentCall(String vulnerabilityId, String statusId, AddCommentBody addCommentBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addCommentBody;

        // create path and map variables
        String localVarPath = "/api/v1/dspm/vulnerabilities/{vulnerabilityId}/statuses/{statusId}/comments"
            .replace("{" + "vulnerabilityId" + "}", localVarApiClient.escapeString(vulnerabilityId.toString()))
            .replace("{" + "statusId" + "}", localVarApiClient.escapeString(statusId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVulnerabilityStatusCommentValidateBeforeCall(String vulnerabilityId, String statusId, AddCommentBody addCommentBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vulnerabilityId' is set
        if (vulnerabilityId == null) {
            throw new ApiException("Missing the required parameter 'vulnerabilityId' when calling addVulnerabilityStatusComment(Async)");
        }

        // verify the required parameter 'statusId' is set
        if (statusId == null) {
            throw new ApiException("Missing the required parameter 'statusId' when calling addVulnerabilityStatusComment(Async)");
        }

        // verify the required parameter 'addCommentBody' is set
        if (addCommentBody == null) {
            throw new ApiException("Missing the required parameter 'addCommentBody' when calling addVulnerabilityStatusComment(Async)");
        }

        return addVulnerabilityStatusCommentCall(vulnerabilityId, statusId, addCommentBody, _callback);

    }

    /**
     * Add vulnerability status comment
     * Add or update the status comment of a vulnerability status to keep track of the workflow progress.
     * @param vulnerabilityId  (required)
     * @param statusId  (required)
     * @param addCommentBody  (required)
     * @return VulnerabilityStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public VulnerabilityStatus addVulnerabilityStatusComment(String vulnerabilityId, String statusId, AddCommentBody addCommentBody) throws ApiException {
        ApiResponse<VulnerabilityStatus> localVarResp = addVulnerabilityStatusCommentWithHttpInfo(vulnerabilityId, statusId, addCommentBody);
        return localVarResp.getData();
    }

    /**
     * Add vulnerability status comment
     * Add or update the status comment of a vulnerability status to keep track of the workflow progress.
     * @param vulnerabilityId  (required)
     * @param statusId  (required)
     * @param addCommentBody  (required)
     * @return ApiResponse&lt;VulnerabilityStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<VulnerabilityStatus> addVulnerabilityStatusCommentWithHttpInfo(String vulnerabilityId, String statusId, AddCommentBody addCommentBody) throws ApiException {
        okhttp3.Call localVarCall = addVulnerabilityStatusCommentValidateBeforeCall(vulnerabilityId, statusId, addCommentBody, null);
        Type localVarReturnType = new TypeToken<VulnerabilityStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add vulnerability status comment (asynchronously)
     * Add or update the status comment of a vulnerability status to keep track of the workflow progress.
     * @param vulnerabilityId  (required)
     * @param statusId  (required)
     * @param addCommentBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call addVulnerabilityStatusCommentAsync(String vulnerabilityId, String statusId, AddCommentBody addCommentBody, final ApiCallback<VulnerabilityStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVulnerabilityStatusCommentValidateBeforeCall(vulnerabilityId, statusId, addCommentBody, _callback);
        Type localVarReturnType = new TypeToken<VulnerabilityStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVulnerabilitiesSummary
     * @param filter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getVulnerabilitiesSummaryCall(VulnerabilitiesFilterOptions filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/dspm/vulnerabilities/summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVulnerabilitiesSummaryValidateBeforeCall(VulnerabilitiesFilterOptions filter, final ApiCallback _callback) throws ApiException {
        return getVulnerabilitiesSummaryCall(filter, _callback);

    }

    /**
     * Get vulnerabilities summary
     * Get a summary of all the vulnerabilities. You can also filter the results of the vulnerabilities based on the vulnerebility&#39;s type, threat, status, and so on.&lt;BR&gt;&lt;B&gt;Note:&lt;/B&gt; Filter needs to be HTML Encoded.
     * @param filter  (optional)
     * @return VulnerabilitiesSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public VulnerabilitiesSummary getVulnerabilitiesSummary(VulnerabilitiesFilterOptions filter) throws ApiException {
        ApiResponse<VulnerabilitiesSummary> localVarResp = getVulnerabilitiesSummaryWithHttpInfo(filter);
        return localVarResp.getData();
    }

    /**
     * Get vulnerabilities summary
     * Get a summary of all the vulnerabilities. You can also filter the results of the vulnerabilities based on the vulnerebility&#39;s type, threat, status, and so on.&lt;BR&gt;&lt;B&gt;Note:&lt;/B&gt; Filter needs to be HTML Encoded.
     * @param filter  (optional)
     * @return ApiResponse&lt;VulnerabilitiesSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<VulnerabilitiesSummary> getVulnerabilitiesSummaryWithHttpInfo(VulnerabilitiesFilterOptions filter) throws ApiException {
        okhttp3.Call localVarCall = getVulnerabilitiesSummaryValidateBeforeCall(filter, null);
        Type localVarReturnType = new TypeToken<VulnerabilitiesSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get vulnerabilities summary (asynchronously)
     * Get a summary of all the vulnerabilities. You can also filter the results of the vulnerabilities based on the vulnerebility&#39;s type, threat, status, and so on.&lt;BR&gt;&lt;B&gt;Note:&lt;/B&gt; Filter needs to be HTML Encoded.
     * @param filter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getVulnerabilitiesSummaryAsync(VulnerabilitiesFilterOptions filter, final ApiCallback<VulnerabilitiesSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVulnerabilitiesSummaryValidateBeforeCall(filter, _callback);
        Type localVarReturnType = new TypeToken<VulnerabilitiesSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVulnerability
     * @param vulnerabilityId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getVulnerabilityCall(String vulnerabilityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/dspm/vulnerabilities/{vulnerabilityId}"
            .replace("{" + "vulnerabilityId" + "}", localVarApiClient.escapeString(vulnerabilityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVulnerabilityValidateBeforeCall(String vulnerabilityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vulnerabilityId' is set
        if (vulnerabilityId == null) {
            throw new ApiException("Missing the required parameter 'vulnerabilityId' when calling getVulnerability(Async)");
        }

        return getVulnerabilityCall(vulnerabilityId, _callback);

    }

    /**
     * Get vulnerability details by ID
     * Get vulnerability details by providing its ID.
     * @param vulnerabilityId  (required)
     * @return Vulnerability
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public Vulnerability getVulnerability(String vulnerabilityId) throws ApiException {
        ApiResponse<Vulnerability> localVarResp = getVulnerabilityWithHttpInfo(vulnerabilityId);
        return localVarResp.getData();
    }

    /**
     * Get vulnerability details by ID
     * Get vulnerability details by providing its ID.
     * @param vulnerabilityId  (required)
     * @return ApiResponse&lt;Vulnerability&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Vulnerability> getVulnerabilityWithHttpInfo(String vulnerabilityId) throws ApiException {
        okhttp3.Call localVarCall = getVulnerabilityValidateBeforeCall(vulnerabilityId, null);
        Type localVarReturnType = new TypeToken<Vulnerability>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get vulnerability details by ID (asynchronously)
     * Get vulnerability details by providing its ID.
     * @param vulnerabilityId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getVulnerabilityAsync(String vulnerabilityId, final ApiCallback<Vulnerability> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVulnerabilityValidateBeforeCall(vulnerabilityId, _callback);
        Type localVarReturnType = new TypeToken<Vulnerability>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listVulnerabilities
     * @param filter  (optional)
     * @param sort  (optional)
     * @param pageSize  (optional)
     * @param nextToken  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call listVulnerabilitiesCall(VulnerabilitiesFilterOptions filter, ListVulnerabilitiesSortParameter sort, BigDecimal pageSize, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/dspm/vulnerabilities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listVulnerabilitiesValidateBeforeCall(VulnerabilitiesFilterOptions filter, ListVulnerabilitiesSortParameter sort, BigDecimal pageSize, String nextToken, final ApiCallback _callback) throws ApiException {
        return listVulnerabilitiesCall(filter, sort, pageSize, nextToken, _callback);

    }

    /**
     * List vulnerabilities based on an applied filter
     * Get a list of data vulnerabilities based on a filter applied. You can filter by ID of the vulnerability, type of the vulnerability, and so on.&lt;BR&gt;&lt;B&gt;Note:&lt;/B&gt; Filter needs to be HTML encoded.
     * @param filter  (optional)
     * @param sort  (optional)
     * @param pageSize  (optional)
     * @param nextToken  (optional)
     * @return ListVulnerabilities200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public ListVulnerabilities200Response listVulnerabilities(VulnerabilitiesFilterOptions filter, ListVulnerabilitiesSortParameter sort, BigDecimal pageSize, String nextToken) throws ApiException {
        ApiResponse<ListVulnerabilities200Response> localVarResp = listVulnerabilitiesWithHttpInfo(filter, sort, pageSize, nextToken);
        return localVarResp.getData();
    }

    /**
     * List vulnerabilities based on an applied filter
     * Get a list of data vulnerabilities based on a filter applied. You can filter by ID of the vulnerability, type of the vulnerability, and so on.&lt;BR&gt;&lt;B&gt;Note:&lt;/B&gt; Filter needs to be HTML encoded.
     * @param filter  (optional)
     * @param sort  (optional)
     * @param pageSize  (optional)
     * @param nextToken  (optional)
     * @return ApiResponse&lt;ListVulnerabilities200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<ListVulnerabilities200Response> listVulnerabilitiesWithHttpInfo(VulnerabilitiesFilterOptions filter, ListVulnerabilitiesSortParameter sort, BigDecimal pageSize, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listVulnerabilitiesValidateBeforeCall(filter, sort, pageSize, nextToken, null);
        Type localVarReturnType = new TypeToken<ListVulnerabilities200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List vulnerabilities based on an applied filter (asynchronously)
     * Get a list of data vulnerabilities based on a filter applied. You can filter by ID of the vulnerability, type of the vulnerability, and so on.&lt;BR&gt;&lt;B&gt;Note:&lt;/B&gt; Filter needs to be HTML encoded.
     * @param filter  (optional)
     * @param sort  (optional)
     * @param pageSize  (optional)
     * @param nextToken  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call listVulnerabilitiesAsync(VulnerabilitiesFilterOptions filter, ListVulnerabilitiesSortParameter sort, BigDecimal pageSize, String nextToken, final ApiCallback<ListVulnerabilities200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listVulnerabilitiesValidateBeforeCall(filter, sort, pageSize, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListVulnerabilities200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listVulnerabilitiesByDataStore
     * @param filter  (optional)
     * @param sort  (optional)
     * @param pageSize  (optional)
     * @param nextToken  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call listVulnerabilitiesByDataStoreCall(VulnerabilitiesByDataStoreFilterOptions filter, ListVulnerabilitiesByDataStoreSortParameter sort, BigDecimal pageSize, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/dspm/vulnerabilities/byDataStore";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listVulnerabilitiesByDataStoreValidateBeforeCall(VulnerabilitiesByDataStoreFilterOptions filter, ListVulnerabilitiesByDataStoreSortParameter sort, BigDecimal pageSize, String nextToken, final ApiCallback _callback) throws ApiException {
        return listVulnerabilitiesByDataStoreCall(filter, sort, pageSize, nextToken, _callback);

    }

    /**
     * List vulnerabilities of data stores
     * Get a list of all the vulnerabilities of data stores.
     * @param filter  (optional)
     * @param sort  (optional)
     * @param pageSize  (optional)
     * @param nextToken  (optional)
     * @return ListVulnerabilitiesByDataStore200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public ListVulnerabilitiesByDataStore200Response listVulnerabilitiesByDataStore(VulnerabilitiesByDataStoreFilterOptions filter, ListVulnerabilitiesByDataStoreSortParameter sort, BigDecimal pageSize, String nextToken) throws ApiException {
        ApiResponse<ListVulnerabilitiesByDataStore200Response> localVarResp = listVulnerabilitiesByDataStoreWithHttpInfo(filter, sort, pageSize, nextToken);
        return localVarResp.getData();
    }

    /**
     * List vulnerabilities of data stores
     * Get a list of all the vulnerabilities of data stores.
     * @param filter  (optional)
     * @param sort  (optional)
     * @param pageSize  (optional)
     * @param nextToken  (optional)
     * @return ApiResponse&lt;ListVulnerabilitiesByDataStore200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<ListVulnerabilitiesByDataStore200Response> listVulnerabilitiesByDataStoreWithHttpInfo(VulnerabilitiesByDataStoreFilterOptions filter, ListVulnerabilitiesByDataStoreSortParameter sort, BigDecimal pageSize, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listVulnerabilitiesByDataStoreValidateBeforeCall(filter, sort, pageSize, nextToken, null);
        Type localVarReturnType = new TypeToken<ListVulnerabilitiesByDataStore200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List vulnerabilities of data stores (asynchronously)
     * Get a list of all the vulnerabilities of data stores.
     * @param filter  (optional)
     * @param sort  (optional)
     * @param pageSize  (optional)
     * @param nextToken  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call listVulnerabilitiesByDataStoreAsync(VulnerabilitiesByDataStoreFilterOptions filter, ListVulnerabilitiesByDataStoreSortParameter sort, BigDecimal pageSize, String nextToken, final ApiCallback<ListVulnerabilitiesByDataStore200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listVulnerabilitiesByDataStoreValidateBeforeCall(filter, sort, pageSize, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListVulnerabilitiesByDataStore200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeVulnerabilityStatusComment
     * @param vulnerabilityId  (required)
     * @param statusId  (required)
     * @param commentId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call removeVulnerabilityStatusCommentCall(String vulnerabilityId, String statusId, String commentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/dspm/vulnerabilities/{vulnerabilityId}/statuses/{statusId}/comments/{commentId}"
            .replace("{" + "vulnerabilityId" + "}", localVarApiClient.escapeString(vulnerabilityId.toString()))
            .replace("{" + "statusId" + "}", localVarApiClient.escapeString(statusId.toString()))
            .replace("{" + "commentId" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeVulnerabilityStatusCommentValidateBeforeCall(String vulnerabilityId, String statusId, String commentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vulnerabilityId' is set
        if (vulnerabilityId == null) {
            throw new ApiException("Missing the required parameter 'vulnerabilityId' when calling removeVulnerabilityStatusComment(Async)");
        }

        // verify the required parameter 'statusId' is set
        if (statusId == null) {
            throw new ApiException("Missing the required parameter 'statusId' when calling removeVulnerabilityStatusComment(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling removeVulnerabilityStatusComment(Async)");
        }

        return removeVulnerabilityStatusCommentCall(vulnerabilityId, statusId, commentId, _callback);

    }

    /**
     * Delete vulnerability status comment
     * Delete a status comment of a vulnerability status.
     * @param vulnerabilityId  (required)
     * @param statusId  (required)
     * @param commentId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public void removeVulnerabilityStatusComment(String vulnerabilityId, String statusId, String commentId) throws ApiException {
        removeVulnerabilityStatusCommentWithHttpInfo(vulnerabilityId, statusId, commentId);
    }

    /**
     * Delete vulnerability status comment
     * Delete a status comment of a vulnerability status.
     * @param vulnerabilityId  (required)
     * @param statusId  (required)
     * @param commentId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeVulnerabilityStatusCommentWithHttpInfo(String vulnerabilityId, String statusId, String commentId) throws ApiException {
        okhttp3.Call localVarCall = removeVulnerabilityStatusCommentValidateBeforeCall(vulnerabilityId, statusId, commentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete vulnerability status comment (asynchronously)
     * Delete a status comment of a vulnerability status.
     * @param vulnerabilityId  (required)
     * @param statusId  (required)
     * @param commentId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call removeVulnerabilityStatusCommentAsync(String vulnerabilityId, String statusId, String commentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeVulnerabilityStatusCommentValidateBeforeCall(vulnerabilityId, statusId, commentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setVulnerabilityStatus
     * @param vulnerabilityId  (required)
     * @param setVulnerabilityStatusRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call setVulnerabilityStatusCall(String vulnerabilityId, SetVulnerabilityStatusRequest setVulnerabilityStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setVulnerabilityStatusRequest;

        // create path and map variables
        String localVarPath = "/api/v1/dspm/vulnerabilities/{vulnerabilityId}/statuses"
            .replace("{" + "vulnerabilityId" + "}", localVarApiClient.escapeString(vulnerabilityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setVulnerabilityStatusValidateBeforeCall(String vulnerabilityId, SetVulnerabilityStatusRequest setVulnerabilityStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vulnerabilityId' is set
        if (vulnerabilityId == null) {
            throw new ApiException("Missing the required parameter 'vulnerabilityId' when calling setVulnerabilityStatus(Async)");
        }

        // verify the required parameter 'setVulnerabilityStatusRequest' is set
        if (setVulnerabilityStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'setVulnerabilityStatusRequest' when calling setVulnerabilityStatus(Async)");
        }

        return setVulnerabilityStatusCall(vulnerabilityId, setVulnerabilityStatusRequest, _callback);

    }

    /**
     * Set status of a vulnerability
     * Add or update the status of a vulnerability to track its progress.
     * @param vulnerabilityId  (required)
     * @param setVulnerabilityStatusRequest  (required)
     * @return VulnerabilityStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public VulnerabilityStatus setVulnerabilityStatus(String vulnerabilityId, SetVulnerabilityStatusRequest setVulnerabilityStatusRequest) throws ApiException {
        ApiResponse<VulnerabilityStatus> localVarResp = setVulnerabilityStatusWithHttpInfo(vulnerabilityId, setVulnerabilityStatusRequest);
        return localVarResp.getData();
    }

    /**
     * Set status of a vulnerability
     * Add or update the status of a vulnerability to track its progress.
     * @param vulnerabilityId  (required)
     * @param setVulnerabilityStatusRequest  (required)
     * @return ApiResponse&lt;VulnerabilityStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<VulnerabilityStatus> setVulnerabilityStatusWithHttpInfo(String vulnerabilityId, SetVulnerabilityStatusRequest setVulnerabilityStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = setVulnerabilityStatusValidateBeforeCall(vulnerabilityId, setVulnerabilityStatusRequest, null);
        Type localVarReturnType = new TypeToken<VulnerabilityStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set status of a vulnerability (asynchronously)
     * Add or update the status of a vulnerability to track its progress.
     * @param vulnerabilityId  (required)
     * @param setVulnerabilityStatusRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call setVulnerabilityStatusAsync(String vulnerabilityId, SetVulnerabilityStatusRequest setVulnerabilityStatusRequest, final ApiCallback<VulnerabilityStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = setVulnerabilityStatusValidateBeforeCall(vulnerabilityId, setVulnerabilityStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<VulnerabilityStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateVulnerabilityStatusComment
     * @param vulnerabilityId  (required)
     * @param statusId  (required)
     * @param commentId  (required)
     * @param updateCommentBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateVulnerabilityStatusCommentCall(String vulnerabilityId, String statusId, String commentId, UpdateCommentBody updateCommentBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateCommentBody;

        // create path and map variables
        String localVarPath = "/api/v1/dspm/vulnerabilities/{vulnerabilityId}/statuses/{statusId}/comments/{commentId}"
            .replace("{" + "vulnerabilityId" + "}", localVarApiClient.escapeString(vulnerabilityId.toString()))
            .replace("{" + "statusId" + "}", localVarApiClient.escapeString(statusId.toString()))
            .replace("{" + "commentId" + "}", localVarApiClient.escapeString(commentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateVulnerabilityStatusCommentValidateBeforeCall(String vulnerabilityId, String statusId, String commentId, UpdateCommentBody updateCommentBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'vulnerabilityId' is set
        if (vulnerabilityId == null) {
            throw new ApiException("Missing the required parameter 'vulnerabilityId' when calling updateVulnerabilityStatusComment(Async)");
        }

        // verify the required parameter 'statusId' is set
        if (statusId == null) {
            throw new ApiException("Missing the required parameter 'statusId' when calling updateVulnerabilityStatusComment(Async)");
        }

        // verify the required parameter 'commentId' is set
        if (commentId == null) {
            throw new ApiException("Missing the required parameter 'commentId' when calling updateVulnerabilityStatusComment(Async)");
        }

        // verify the required parameter 'updateCommentBody' is set
        if (updateCommentBody == null) {
            throw new ApiException("Missing the required parameter 'updateCommentBody' when calling updateVulnerabilityStatusComment(Async)");
        }

        return updateVulnerabilityStatusCommentCall(vulnerabilityId, statusId, commentId, updateCommentBody, _callback);

    }

    /**
     * Set vulnerability status
     * Set a vulnerability status of a vulnerability.
     * @param vulnerabilityId  (required)
     * @param statusId  (required)
     * @param commentId  (required)
     * @param updateCommentBody  (required)
     * @return VulnerabilityStatusComment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public VulnerabilityStatusComment updateVulnerabilityStatusComment(String vulnerabilityId, String statusId, String commentId, UpdateCommentBody updateCommentBody) throws ApiException {
        ApiResponse<VulnerabilityStatusComment> localVarResp = updateVulnerabilityStatusCommentWithHttpInfo(vulnerabilityId, statusId, commentId, updateCommentBody);
        return localVarResp.getData();
    }

    /**
     * Set vulnerability status
     * Set a vulnerability status of a vulnerability.
     * @param vulnerabilityId  (required)
     * @param statusId  (required)
     * @param commentId  (required)
     * @param updateCommentBody  (required)
     * @return ApiResponse&lt;VulnerabilityStatusComment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<VulnerabilityStatusComment> updateVulnerabilityStatusCommentWithHttpInfo(String vulnerabilityId, String statusId, String commentId, UpdateCommentBody updateCommentBody) throws ApiException {
        okhttp3.Call localVarCall = updateVulnerabilityStatusCommentValidateBeforeCall(vulnerabilityId, statusId, commentId, updateCommentBody, null);
        Type localVarReturnType = new TypeToken<VulnerabilityStatusComment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Set vulnerability status (asynchronously)
     * Set a vulnerability status of a vulnerability.
     * @param vulnerabilityId  (required)
     * @param statusId  (required)
     * @param commentId  (required)
     * @param updateCommentBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateVulnerabilityStatusCommentAsync(String vulnerabilityId, String statusId, String commentId, UpdateCommentBody updateCommentBody, final ApiCallback<VulnerabilityStatusComment> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateVulnerabilityStatusCommentValidateBeforeCall(vulnerabilityId, statusId, commentId, updateCommentBody, _callback);
        Type localVarReturnType = new TypeToken<VulnerabilityStatusComment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
