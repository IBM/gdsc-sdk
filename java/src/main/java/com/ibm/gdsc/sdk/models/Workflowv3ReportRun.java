/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.gdsc.sdk.models.Reportsv3ReportFilterBrackets;
import com.ibm.gdsc.sdk.models.Schedulerv3TaskType;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.sdk.JSON;

/**
 * Information about the report run.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-07T13:24:05.648078332-08:00[America/Los_Angeles]", comments = "Generator version: 7.6.0")
public class Workflowv3ReportRun {
  public static final String SERIALIZED_NAME_DATE_END = "date_end";
  @SerializedName(SERIALIZED_NAME_DATE_END)
  private OffsetDateTime dateEnd;

  public static final String SERIALIZED_NAME_DATE_START = "date_start";
  @SerializedName(SERIALIZED_NAME_DATE_START)
  private OffsetDateTime dateStart;

  public static final String SERIALIZED_NAME_DETAIL = "detail";
  @SerializedName(SERIALIZED_NAME_DETAIL)
  private String detail;

  public static final String SERIALIZED_NAME_QUERY_FROM = "query_from";
  @SerializedName(SERIALIZED_NAME_QUERY_FROM)
  private String queryFrom;

  public static final String SERIALIZED_NAME_QUERY_TO = "query_to";
  @SerializedName(SERIALIZED_NAME_QUERY_TO)
  private String queryTo;

  public static final String SERIALIZED_NAME_REPORT_FILTERS = "report_filters";
  @SerializedName(SERIALIZED_NAME_REPORT_FILTERS)
  private Reportsv3ReportFilterBrackets reportFilters;

  public static final String SERIALIZED_NAME_REPORT_ID = "report_id";
  @SerializedName(SERIALIZED_NAME_REPORT_ID)
  private String reportId;

  public static final String SERIALIZED_NAME_REPORT_NAME = "report_name";
  @SerializedName(SERIALIZED_NAME_REPORT_NAME)
  private String reportName;

  public static final String SERIALIZED_NAME_REPORT_RESULT_FILE_NAME = "report_result_file_name";
  @SerializedName(SERIALIZED_NAME_REPORT_RESULT_FILE_NAME)
  private String reportResultFileName;

  public static final String SERIALIZED_NAME_RUN_ID = "run_id";
  @SerializedName(SERIALIZED_NAME_RUN_ID)
  private String runId;

  public static final String SERIALIZED_NAME_SCHEDULED_JOB_ID = "scheduled_job_id";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_JOB_ID)
  private String scheduledJobId;

  public static final String SERIALIZED_NAME_SCHEDULED_JOB_NAME = "scheduled_job_name";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_JOB_NAME)
  private String scheduledJobName;

  public static final String SERIALIZED_NAME_SCHEDULED_TASK_ID = "scheduled_task_id";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_TASK_ID)
  private String scheduledTaskId;

  public static final String SERIALIZED_NAME_SCHEDULED_TASK_TYPE = "scheduled_task_type";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_TASK_TYPE)
  private Schedulerv3TaskType scheduledTaskType = Schedulerv3TaskType.UNDEFINED_JOBTYPE;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Integer status;

  public Workflowv3ReportRun() {
  }

  public Workflowv3ReportRun dateEnd(OffsetDateTime dateEnd) {
    this.dateEnd = dateEnd;
    return this;
  }

   /**
   * When the job finished.
   * @return dateEnd
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDateEnd() {
    return dateEnd;
  }

  public void setDateEnd(OffsetDateTime dateEnd) {
    this.dateEnd = dateEnd;
  }


  public Workflowv3ReportRun dateStart(OffsetDateTime dateStart) {
    this.dateStart = dateStart;
    return this;
  }

   /**
   * When the job started.
   * @return dateStart
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDateStart() {
    return dateStart;
  }

  public void setDateStart(OffsetDateTime dateStart) {
    this.dateStart = dateStart;
  }


  public Workflowv3ReportRun detail(String detail) {
    this.detail = detail;
    return this;
  }

   /**
   * Job status detail.
   * @return detail
  **/
  @javax.annotation.Nullable
  public String getDetail() {
    return detail;
  }

  public void setDetail(String detail) {
    this.detail = detail;
  }


  public Workflowv3ReportRun queryFrom(String queryFrom) {
    this.queryFrom = queryFrom;
    return this;
  }

   /**
   * Absolute value of the runtime parameter for time period (time from).
   * @return queryFrom
  **/
  @javax.annotation.Nullable
  public String getQueryFrom() {
    return queryFrom;
  }

  public void setQueryFrom(String queryFrom) {
    this.queryFrom = queryFrom;
  }


  public Workflowv3ReportRun queryTo(String queryTo) {
    this.queryTo = queryTo;
    return this;
  }

   /**
   * Absolute value of the runtime parameter for time period (time to).
   * @return queryTo
  **/
  @javax.annotation.Nullable
  public String getQueryTo() {
    return queryTo;
  }

  public void setQueryTo(String queryTo) {
    this.queryTo = queryTo;
  }


  public Workflowv3ReportRun reportFilters(Reportsv3ReportFilterBrackets reportFilters) {
    this.reportFilters = reportFilters;
    return this;
  }

   /**
   * Get reportFilters
   * @return reportFilters
  **/
  @javax.annotation.Nullable
  public Reportsv3ReportFilterBrackets getReportFilters() {
    return reportFilters;
  }

  public void setReportFilters(Reportsv3ReportFilterBrackets reportFilters) {
    this.reportFilters = reportFilters;
  }


  public Workflowv3ReportRun reportId(String reportId) {
    this.reportId = reportId;
    return this;
  }

   /**
   * Report ID.
   * @return reportId
  **/
  @javax.annotation.Nullable
  public String getReportId() {
    return reportId;
  }

  public void setReportId(String reportId) {
    this.reportId = reportId;
  }


  public Workflowv3ReportRun reportName(String reportName) {
    this.reportName = reportName;
    return this;
  }

   /**
   * Report name.
   * @return reportName
  **/
  @javax.annotation.Nullable
  public String getReportName() {
    return reportName;
  }

  public void setReportName(String reportName) {
    this.reportName = reportName;
  }


  public Workflowv3ReportRun reportResultFileName(String reportResultFileName) {
    this.reportResultFileName = reportResultFileName;
    return this;
  }

   /**
   * The report result file name.
   * @return reportResultFileName
  **/
  @javax.annotation.Nullable
  public String getReportResultFileName() {
    return reportResultFileName;
  }

  public void setReportResultFileName(String reportResultFileName) {
    this.reportResultFileName = reportResultFileName;
  }


  public Workflowv3ReportRun runId(String runId) {
    this.runId = runId;
    return this;
  }

   /**
   * The identifier of the run.
   * @return runId
  **/
  @javax.annotation.Nullable
  public String getRunId() {
    return runId;
  }

  public void setRunId(String runId) {
    this.runId = runId;
  }


  public Workflowv3ReportRun scheduledJobId(String scheduledJobId) {
    this.scheduledJobId = scheduledJobId;
    return this;
  }

   /**
   * The ScheduledJob identifier.
   * @return scheduledJobId
  **/
  @javax.annotation.Nullable
  public String getScheduledJobId() {
    return scheduledJobId;
  }

  public void setScheduledJobId(String scheduledJobId) {
    this.scheduledJobId = scheduledJobId;
  }


  public Workflowv3ReportRun scheduledJobName(String scheduledJobName) {
    this.scheduledJobName = scheduledJobName;
    return this;
  }

   /**
   * The ScheduledJob name identifier.
   * @return scheduledJobName
  **/
  @javax.annotation.Nullable
  public String getScheduledJobName() {
    return scheduledJobName;
  }

  public void setScheduledJobName(String scheduledJobName) {
    this.scheduledJobName = scheduledJobName;
  }


  public Workflowv3ReportRun scheduledTaskId(String scheduledTaskId) {
    this.scheduledTaskId = scheduledTaskId;
    return this;
  }

   /**
   * The task within the ScheduledJob.
   * @return scheduledTaskId
  **/
  @javax.annotation.Nullable
  public String getScheduledTaskId() {
    return scheduledTaskId;
  }

  public void setScheduledTaskId(String scheduledTaskId) {
    this.scheduledTaskId = scheduledTaskId;
  }


  public Workflowv3ReportRun scheduledTaskType(Schedulerv3TaskType scheduledTaskType) {
    this.scheduledTaskType = scheduledTaskType;
    return this;
  }

   /**
   * Get scheduledTaskType
   * @return scheduledTaskType
  **/
  @javax.annotation.Nullable
  public Schedulerv3TaskType getScheduledTaskType() {
    return scheduledTaskType;
  }

  public void setScheduledTaskType(Schedulerv3TaskType scheduledTaskType) {
    this.scheduledTaskType = scheduledTaskType;
  }


  public Workflowv3ReportRun status(Integer status) {
    this.status = status;
    return this;
  }

   /**
   * Job status.
   * @return status
  **/
  @javax.annotation.Nullable
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Workflowv3ReportRun workflowv3ReportRun = (Workflowv3ReportRun) o;
    return Objects.equals(this.dateEnd, workflowv3ReportRun.dateEnd) &&
        Objects.equals(this.dateStart, workflowv3ReportRun.dateStart) &&
        Objects.equals(this.detail, workflowv3ReportRun.detail) &&
        Objects.equals(this.queryFrom, workflowv3ReportRun.queryFrom) &&
        Objects.equals(this.queryTo, workflowv3ReportRun.queryTo) &&
        Objects.equals(this.reportFilters, workflowv3ReportRun.reportFilters) &&
        Objects.equals(this.reportId, workflowv3ReportRun.reportId) &&
        Objects.equals(this.reportName, workflowv3ReportRun.reportName) &&
        Objects.equals(this.reportResultFileName, workflowv3ReportRun.reportResultFileName) &&
        Objects.equals(this.runId, workflowv3ReportRun.runId) &&
        Objects.equals(this.scheduledJobId, workflowv3ReportRun.scheduledJobId) &&
        Objects.equals(this.scheduledJobName, workflowv3ReportRun.scheduledJobName) &&
        Objects.equals(this.scheduledTaskId, workflowv3ReportRun.scheduledTaskId) &&
        Objects.equals(this.scheduledTaskType, workflowv3ReportRun.scheduledTaskType) &&
        Objects.equals(this.status, workflowv3ReportRun.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateEnd, dateStart, detail, queryFrom, queryTo, reportFilters, reportId, reportName, reportResultFileName, runId, scheduledJobId, scheduledJobName, scheduledTaskId, scheduledTaskType, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Workflowv3ReportRun {\n");
    sb.append("    dateEnd: ").append(toIndentedString(dateEnd)).append("\n");
    sb.append("    dateStart: ").append(toIndentedString(dateStart)).append("\n");
    sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
    sb.append("    queryFrom: ").append(toIndentedString(queryFrom)).append("\n");
    sb.append("    queryTo: ").append(toIndentedString(queryTo)).append("\n");
    sb.append("    reportFilters: ").append(toIndentedString(reportFilters)).append("\n");
    sb.append("    reportId: ").append(toIndentedString(reportId)).append("\n");
    sb.append("    reportName: ").append(toIndentedString(reportName)).append("\n");
    sb.append("    reportResultFileName: ").append(toIndentedString(reportResultFileName)).append("\n");
    sb.append("    runId: ").append(toIndentedString(runId)).append("\n");
    sb.append("    scheduledJobId: ").append(toIndentedString(scheduledJobId)).append("\n");
    sb.append("    scheduledJobName: ").append(toIndentedString(scheduledJobName)).append("\n");
    sb.append("    scheduledTaskId: ").append(toIndentedString(scheduledTaskId)).append("\n");
    sb.append("    scheduledTaskType: ").append(toIndentedString(scheduledTaskType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("date_end");
    openapiFields.add("date_start");
    openapiFields.add("detail");
    openapiFields.add("query_from");
    openapiFields.add("query_to");
    openapiFields.add("report_filters");
    openapiFields.add("report_id");
    openapiFields.add("report_name");
    openapiFields.add("report_result_file_name");
    openapiFields.add("run_id");
    openapiFields.add("scheduled_job_id");
    openapiFields.add("scheduled_job_name");
    openapiFields.add("scheduled_task_id");
    openapiFields.add("scheduled_task_type");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Workflowv3ReportRun
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Workflowv3ReportRun.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Workflowv3ReportRun is not found in the empty JSON string", Workflowv3ReportRun.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Workflowv3ReportRun.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Workflowv3ReportRun` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("detail") != null && !jsonObj.get("detail").isJsonNull()) && !jsonObj.get("detail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detail").toString()));
      }
      if ((jsonObj.get("query_from") != null && !jsonObj.get("query_from").isJsonNull()) && !jsonObj.get("query_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query_from").toString()));
      }
      if ((jsonObj.get("query_to") != null && !jsonObj.get("query_to").isJsonNull()) && !jsonObj.get("query_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query_to").toString()));
      }
      // validate the optional field `report_filters`
      if (jsonObj.get("report_filters") != null && !jsonObj.get("report_filters").isJsonNull()) {
        Reportsv3ReportFilterBrackets.validateJsonElement(jsonObj.get("report_filters"));
      }
      if ((jsonObj.get("report_id") != null && !jsonObj.get("report_id").isJsonNull()) && !jsonObj.get("report_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `report_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("report_id").toString()));
      }
      if ((jsonObj.get("report_name") != null && !jsonObj.get("report_name").isJsonNull()) && !jsonObj.get("report_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `report_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("report_name").toString()));
      }
      if ((jsonObj.get("report_result_file_name") != null && !jsonObj.get("report_result_file_name").isJsonNull()) && !jsonObj.get("report_result_file_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `report_result_file_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("report_result_file_name").toString()));
      }
      if ((jsonObj.get("run_id") != null && !jsonObj.get("run_id").isJsonNull()) && !jsonObj.get("run_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `run_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("run_id").toString()));
      }
      if ((jsonObj.get("scheduled_job_id") != null && !jsonObj.get("scheduled_job_id").isJsonNull()) && !jsonObj.get("scheduled_job_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduled_job_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduled_job_id").toString()));
      }
      if ((jsonObj.get("scheduled_job_name") != null && !jsonObj.get("scheduled_job_name").isJsonNull()) && !jsonObj.get("scheduled_job_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduled_job_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduled_job_name").toString()));
      }
      if ((jsonObj.get("scheduled_task_id") != null && !jsonObj.get("scheduled_task_id").isJsonNull()) && !jsonObj.get("scheduled_task_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduled_task_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduled_task_id").toString()));
      }
      // validate the optional field `scheduled_task_type`
      if (jsonObj.get("scheduled_task_type") != null && !jsonObj.get("scheduled_task_type").isJsonNull()) {
        Schedulerv3TaskType.validateJsonElement(jsonObj.get("scheduled_task_type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Workflowv3ReportRun.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Workflowv3ReportRun' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Workflowv3ReportRun> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Workflowv3ReportRun.class));

       return (TypeAdapter<T>) new TypeAdapter<Workflowv3ReportRun>() {
           @Override
           public void write(JsonWriter out, Workflowv3ReportRun value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Workflowv3ReportRun read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Workflowv3ReportRun given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Workflowv3ReportRun
  * @throws IOException if the JSON string is invalid with respect to Workflowv3ReportRun
  */
  public static Workflowv3ReportRun fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Workflowv3ReportRun.class);
  }

 /**
  * Convert an instance of Workflowv3ReportRun to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

