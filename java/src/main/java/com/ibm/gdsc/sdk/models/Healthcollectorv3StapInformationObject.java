/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.gdsc.sdk.models.Healthcollectorv3InspectionEnginePresentDetails;
import com.ibm.gdsc.sdk.models.Healthcollectorv3StapObject;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.sdk.JSON;

/**
 * S-tap related information object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-07T13:24:05.648078332-08:00[America/Los_Angeles]", comments = "Generator version: 7.6.0")
public class Healthcollectorv3StapInformationObject {
  public static final String SERIALIZED_NAME_INSPECTION_ENGINE_DETAILS = "inspection_engine_details";
  @SerializedName(SERIALIZED_NAME_INSPECTION_ENGINE_DETAILS)
  private List<Healthcollectorv3InspectionEnginePresentDetails> inspectionEngineDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_INSPECTION_ENGINE_DETAILS_CHANGE = "inspection_engine_details_change";
  @SerializedName(SERIALIZED_NAME_INSPECTION_ENGINE_DETAILS_CHANGE)
  private Integer inspectionEngineDetailsChange;

  public static final String SERIALIZED_NAME_PRESENT_AT_END = "present_at_end";
  @SerializedName(SERIALIZED_NAME_PRESENT_AT_END)
  private Boolean presentAtEnd;

  public static final String SERIALIZED_NAME_PRESENT_AT_START = "present_at_start";
  @SerializedName(SERIALIZED_NAME_PRESENT_AT_START)
  private Boolean presentAtStart;

  public static final String SERIALIZED_NAME_STAP = "stap";
  @SerializedName(SERIALIZED_NAME_STAP)
  private Healthcollectorv3StapObject stap;

  public Healthcollectorv3StapInformationObject() {
  }

  public Healthcollectorv3StapInformationObject inspectionEngineDetails(List<Healthcollectorv3InspectionEnginePresentDetails> inspectionEngineDetails) {
    this.inspectionEngineDetails = inspectionEngineDetails;
    return this;
  }

  public Healthcollectorv3StapInformationObject addInspectionEngineDetailsItem(Healthcollectorv3InspectionEnginePresentDetails inspectionEngineDetailsItem) {
    if (this.inspectionEngineDetails == null) {
      this.inspectionEngineDetails = new ArrayList<>();
    }
    this.inspectionEngineDetails.add(inspectionEngineDetailsItem);
    return this;
  }

   /**
   * Details of inspection engines present at start and end.
   * @return inspectionEngineDetails
  **/
  @javax.annotation.Nullable
  public List<Healthcollectorv3InspectionEnginePresentDetails> getInspectionEngineDetails() {
    return inspectionEngineDetails;
  }

  public void setInspectionEngineDetails(List<Healthcollectorv3InspectionEnginePresentDetails> inspectionEngineDetails) {
    this.inspectionEngineDetails = inspectionEngineDetails;
  }


  public Healthcollectorv3StapInformationObject inspectionEngineDetailsChange(Integer inspectionEngineDetailsChange) {
    this.inspectionEngineDetailsChange = inspectionEngineDetailsChange;
    return this;
  }

   /**
   * Difference of inspection engines present at start and end.
   * @return inspectionEngineDetailsChange
  **/
  @javax.annotation.Nullable
  public Integer getInspectionEngineDetailsChange() {
    return inspectionEngineDetailsChange;
  }

  public void setInspectionEngineDetailsChange(Integer inspectionEngineDetailsChange) {
    this.inspectionEngineDetailsChange = inspectionEngineDetailsChange;
  }


  public Healthcollectorv3StapInformationObject presentAtEnd(Boolean presentAtEnd) {
    this.presentAtEnd = presentAtEnd;
    return this;
  }

   /**
   * Indicates whether the s-tap was present at end.
   * @return presentAtEnd
  **/
  @javax.annotation.Nullable
  public Boolean getPresentAtEnd() {
    return presentAtEnd;
  }

  public void setPresentAtEnd(Boolean presentAtEnd) {
    this.presentAtEnd = presentAtEnd;
  }


  public Healthcollectorv3StapInformationObject presentAtStart(Boolean presentAtStart) {
    this.presentAtStart = presentAtStart;
    return this;
  }

   /**
   * Indicates whether the s-tap was present at start.
   * @return presentAtStart
  **/
  @javax.annotation.Nullable
  public Boolean getPresentAtStart() {
    return presentAtStart;
  }

  public void setPresentAtStart(Boolean presentAtStart) {
    this.presentAtStart = presentAtStart;
  }


  public Healthcollectorv3StapInformationObject stap(Healthcollectorv3StapObject stap) {
    this.stap = stap;
    return this;
  }

   /**
   * Get stap
   * @return stap
  **/
  @javax.annotation.Nullable
  public Healthcollectorv3StapObject getStap() {
    return stap;
  }

  public void setStap(Healthcollectorv3StapObject stap) {
    this.stap = stap;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Healthcollectorv3StapInformationObject healthcollectorv3StapInformationObject = (Healthcollectorv3StapInformationObject) o;
    return Objects.equals(this.inspectionEngineDetails, healthcollectorv3StapInformationObject.inspectionEngineDetails) &&
        Objects.equals(this.inspectionEngineDetailsChange, healthcollectorv3StapInformationObject.inspectionEngineDetailsChange) &&
        Objects.equals(this.presentAtEnd, healthcollectorv3StapInformationObject.presentAtEnd) &&
        Objects.equals(this.presentAtStart, healthcollectorv3StapInformationObject.presentAtStart) &&
        Objects.equals(this.stap, healthcollectorv3StapInformationObject.stap);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inspectionEngineDetails, inspectionEngineDetailsChange, presentAtEnd, presentAtStart, stap);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Healthcollectorv3StapInformationObject {\n");
    sb.append("    inspectionEngineDetails: ").append(toIndentedString(inspectionEngineDetails)).append("\n");
    sb.append("    inspectionEngineDetailsChange: ").append(toIndentedString(inspectionEngineDetailsChange)).append("\n");
    sb.append("    presentAtEnd: ").append(toIndentedString(presentAtEnd)).append("\n");
    sb.append("    presentAtStart: ").append(toIndentedString(presentAtStart)).append("\n");
    sb.append("    stap: ").append(toIndentedString(stap)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("inspection_engine_details");
    openapiFields.add("inspection_engine_details_change");
    openapiFields.add("present_at_end");
    openapiFields.add("present_at_start");
    openapiFields.add("stap");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Healthcollectorv3StapInformationObject
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Healthcollectorv3StapInformationObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Healthcollectorv3StapInformationObject is not found in the empty JSON string", Healthcollectorv3StapInformationObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Healthcollectorv3StapInformationObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Healthcollectorv3StapInformationObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("inspection_engine_details") != null && !jsonObj.get("inspection_engine_details").isJsonNull()) {
        JsonArray jsonArrayinspectionEngineDetails = jsonObj.getAsJsonArray("inspection_engine_details");
        if (jsonArrayinspectionEngineDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inspection_engine_details").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inspection_engine_details` to be an array in the JSON string but got `%s`", jsonObj.get("inspection_engine_details").toString()));
          }

          // validate the optional field `inspection_engine_details` (array)
          for (int i = 0; i < jsonArrayinspectionEngineDetails.size(); i++) {
            Healthcollectorv3InspectionEnginePresentDetails.validateJsonElement(jsonArrayinspectionEngineDetails.get(i));
          };
        }
      }
      // validate the optional field `stap`
      if (jsonObj.get("stap") != null && !jsonObj.get("stap").isJsonNull()) {
        Healthcollectorv3StapObject.validateJsonElement(jsonObj.get("stap"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Healthcollectorv3StapInformationObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Healthcollectorv3StapInformationObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Healthcollectorv3StapInformationObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Healthcollectorv3StapInformationObject.class));

       return (TypeAdapter<T>) new TypeAdapter<Healthcollectorv3StapInformationObject>() {
           @Override
           public void write(JsonWriter out, Healthcollectorv3StapInformationObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Healthcollectorv3StapInformationObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Healthcollectorv3StapInformationObject given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Healthcollectorv3StapInformationObject
  * @throws IOException if the JSON string is invalid with respect to Healthcollectorv3StapInformationObject
  */
  public static Healthcollectorv3StapInformationObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Healthcollectorv3StapInformationObject.class);
  }

 /**
  * Convert an instance of Healthcollectorv3StapInformationObject to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

