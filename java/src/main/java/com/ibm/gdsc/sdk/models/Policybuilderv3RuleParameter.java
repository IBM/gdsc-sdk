/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.gdsc.sdk.models.Policybuilderv3ParameterOperator;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.sdk.JSON;

/**
 * Message format for rule parameters.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-07T13:24:05.648078332-08:00[America/Los_Angeles]", comments = "Generator version: 7.6.0")
public class Policybuilderv3RuleParameter {
  public static final String SERIALIZED_NAME_PARAMETER_NAME = "parameter_name";
  @SerializedName(SERIALIZED_NAME_PARAMETER_NAME)
  private String parameterName;

  public static final String SERIALIZED_NAME_PARAMETER_OPERATOR = "parameter_operator";
  @SerializedName(SERIALIZED_NAME_PARAMETER_OPERATOR)
  private Policybuilderv3ParameterOperator parameterOperator = Policybuilderv3ParameterOperator.UNKNOWN_OPERATOR;

  public static final String SERIALIZED_NAME_PARAMETER_TYPE = "parameter_type";
  @SerializedName(SERIALIZED_NAME_PARAMETER_TYPE)
  private String parameterType;

  public static final String SERIALIZED_NAME_PARAMETER_VALUE = "parameter_value";
  @SerializedName(SERIALIZED_NAME_PARAMETER_VALUE)
  private String parameterValue;

  public static final String SERIALIZED_NAME_PARAMETER_VALUE_LABEL = "parameter_value_label";
  @SerializedName(SERIALIZED_NAME_PARAMETER_VALUE_LABEL)
  private String parameterValueLabel;

  public static final String SERIALIZED_NAME_UI_LABEL = "ui_label";
  @SerializedName(SERIALIZED_NAME_UI_LABEL)
  private String uiLabel;

  public Policybuilderv3RuleParameter() {
  }

  public Policybuilderv3RuleParameter parameterName(String parameterName) {
    this.parameterName = parameterName;
    return this;
  }

   /**
   * Parameter Name.
   * @return parameterName
  **/
  @javax.annotation.Nullable
  public String getParameterName() {
    return parameterName;
  }

  public void setParameterName(String parameterName) {
    this.parameterName = parameterName;
  }


  public Policybuilderv3RuleParameter parameterOperator(Policybuilderv3ParameterOperator parameterOperator) {
    this.parameterOperator = parameterOperator;
    return this;
  }

   /**
   * Get parameterOperator
   * @return parameterOperator
  **/
  @javax.annotation.Nullable
  public Policybuilderv3ParameterOperator getParameterOperator() {
    return parameterOperator;
  }

  public void setParameterOperator(Policybuilderv3ParameterOperator parameterOperator) {
    this.parameterOperator = parameterOperator;
  }


  public Policybuilderv3RuleParameter parameterType(String parameterType) {
    this.parameterType = parameterType;
    return this;
  }

   /**
   * Type of the parameter.
   * @return parameterType
  **/
  @javax.annotation.Nullable
  public String getParameterType() {
    return parameterType;
  }

  public void setParameterType(String parameterType) {
    this.parameterType = parameterType;
  }


  public Policybuilderv3RuleParameter parameterValue(String parameterValue) {
    this.parameterValue = parameterValue;
    return this;
  }

   /**
   * The operator of the parameter.
   * @return parameterValue
  **/
  @javax.annotation.Nullable
  public String getParameterValue() {
    return parameterValue;
  }

  public void setParameterValue(String parameterValue) {
    this.parameterValue = parameterValue;
  }


  public Policybuilderv3RuleParameter parameterValueLabel(String parameterValueLabel) {
    this.parameterValueLabel = parameterValueLabel;
    return this;
  }

   /**
   * Label of the value if the original value is some id referencing to external entity.
   * @return parameterValueLabel
  **/
  @javax.annotation.Nullable
  public String getParameterValueLabel() {
    return parameterValueLabel;
  }

  public void setParameterValueLabel(String parameterValueLabel) {
    this.parameterValueLabel = parameterValueLabel;
  }


  public Policybuilderv3RuleParameter uiLabel(String uiLabel) {
    this.uiLabel = uiLabel;
    return this;
  }

   /**
   * Display label for UI for this parameter.
   * @return uiLabel
  **/
  @javax.annotation.Nullable
  public String getUiLabel() {
    return uiLabel;
  }

  public void setUiLabel(String uiLabel) {
    this.uiLabel = uiLabel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Policybuilderv3RuleParameter policybuilderv3RuleParameter = (Policybuilderv3RuleParameter) o;
    return Objects.equals(this.parameterName, policybuilderv3RuleParameter.parameterName) &&
        Objects.equals(this.parameterOperator, policybuilderv3RuleParameter.parameterOperator) &&
        Objects.equals(this.parameterType, policybuilderv3RuleParameter.parameterType) &&
        Objects.equals(this.parameterValue, policybuilderv3RuleParameter.parameterValue) &&
        Objects.equals(this.parameterValueLabel, policybuilderv3RuleParameter.parameterValueLabel) &&
        Objects.equals(this.uiLabel, policybuilderv3RuleParameter.uiLabel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(parameterName, parameterOperator, parameterType, parameterValue, parameterValueLabel, uiLabel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Policybuilderv3RuleParameter {\n");
    sb.append("    parameterName: ").append(toIndentedString(parameterName)).append("\n");
    sb.append("    parameterOperator: ").append(toIndentedString(parameterOperator)).append("\n");
    sb.append("    parameterType: ").append(toIndentedString(parameterType)).append("\n");
    sb.append("    parameterValue: ").append(toIndentedString(parameterValue)).append("\n");
    sb.append("    parameterValueLabel: ").append(toIndentedString(parameterValueLabel)).append("\n");
    sb.append("    uiLabel: ").append(toIndentedString(uiLabel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("parameter_name");
    openapiFields.add("parameter_operator");
    openapiFields.add("parameter_type");
    openapiFields.add("parameter_value");
    openapiFields.add("parameter_value_label");
    openapiFields.add("ui_label");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Policybuilderv3RuleParameter
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Policybuilderv3RuleParameter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Policybuilderv3RuleParameter is not found in the empty JSON string", Policybuilderv3RuleParameter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Policybuilderv3RuleParameter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Policybuilderv3RuleParameter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("parameter_name") != null && !jsonObj.get("parameter_name").isJsonNull()) && !jsonObj.get("parameter_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parameter_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parameter_name").toString()));
      }
      // validate the optional field `parameter_operator`
      if (jsonObj.get("parameter_operator") != null && !jsonObj.get("parameter_operator").isJsonNull()) {
        Policybuilderv3ParameterOperator.validateJsonElement(jsonObj.get("parameter_operator"));
      }
      if ((jsonObj.get("parameter_type") != null && !jsonObj.get("parameter_type").isJsonNull()) && !jsonObj.get("parameter_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parameter_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parameter_type").toString()));
      }
      if ((jsonObj.get("parameter_value") != null && !jsonObj.get("parameter_value").isJsonNull()) && !jsonObj.get("parameter_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parameter_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parameter_value").toString()));
      }
      if ((jsonObj.get("parameter_value_label") != null && !jsonObj.get("parameter_value_label").isJsonNull()) && !jsonObj.get("parameter_value_label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parameter_value_label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parameter_value_label").toString()));
      }
      if ((jsonObj.get("ui_label") != null && !jsonObj.get("ui_label").isJsonNull()) && !jsonObj.get("ui_label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ui_label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ui_label").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Policybuilderv3RuleParameter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Policybuilderv3RuleParameter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Policybuilderv3RuleParameter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Policybuilderv3RuleParameter.class));

       return (TypeAdapter<T>) new TypeAdapter<Policybuilderv3RuleParameter>() {
           @Override
           public void write(JsonWriter out, Policybuilderv3RuleParameter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Policybuilderv3RuleParameter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Policybuilderv3RuleParameter given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Policybuilderv3RuleParameter
  * @throws IOException if the JSON string is invalid with respect to Policybuilderv3RuleParameter
  */
  public static Policybuilderv3RuleParameter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Policybuilderv3RuleParameter.class);
  }

 /**
  * Convert an instance of Policybuilderv3RuleParameter to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

