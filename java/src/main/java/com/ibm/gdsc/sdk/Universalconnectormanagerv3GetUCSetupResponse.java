/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.gdsc.sdk.Universalconnectormanagerv3File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.JSON;

/**
 * GetUCSetupResponse is the response object for getting the UC parameters of a specific Universal Connector.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-15T03:58:58.617687Z[UTC]", comments = "Generator version: 7.6.0")
public class Universalconnectormanagerv3GetUCSetupResponse {
  public static final String SERIALIZED_NAME_BINARIES = "binaries";
  @SerializedName(SERIALIZED_NAME_BINARIES)
  private List<Universalconnectormanagerv3File> binaries = new ArrayList<>();

  public static final String SERIALIZED_NAME_CERTIFICATES = "certificates";
  @SerializedName(SERIALIZED_NAME_CERTIFICATES)
  private Map<String, String> certificates = new HashMap<>();

  public static final String SERIALIZED_NAME_CONFIGURATIONS = "configurations";
  @SerializedName(SERIALIZED_NAME_CONFIGURATIONS)
  private List<Universalconnectormanagerv3File> configurations = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREDENTIALS = "credentials";
  @SerializedName(SERIALIZED_NAME_CREDENTIALS)
  private Map<String, String> credentials = new HashMap<>();

  public static final String SERIALIZED_NAME_OFFLINE_PACKAGES = "offline_packages";
  @SerializedName(SERIALIZED_NAME_OFFLINE_PACKAGES)
  private List<Universalconnectormanagerv3File> offlinePackages = new ArrayList<>();

  public static final String SERIALIZED_NAME_PIPELINE_TYPE = "pipeline_type";
  @SerializedName(SERIALIZED_NAME_PIPELINE_TYPE)
  private String pipelineType;

  public Universalconnectormanagerv3GetUCSetupResponse() {
  }

  public Universalconnectormanagerv3GetUCSetupResponse binaries(List<Universalconnectormanagerv3File> binaries) {
    this.binaries = binaries;
    return this;
  }

  public Universalconnectormanagerv3GetUCSetupResponse addBinariesItem(Universalconnectormanagerv3File binariesItem) {
    if (this.binaries == null) {
      this.binaries = new ArrayList<>();
    }
    this.binaries.add(binariesItem);
    return this;
  }

   /**
   * Binaries files (zip,rpm,jar, base64 encoded).
   * @return binaries
  **/
  @javax.annotation.Nullable
  public List<Universalconnectormanagerv3File> getBinaries() {
    return binaries;
  }

  public void setBinaries(List<Universalconnectormanagerv3File> binaries) {
    this.binaries = binaries;
  }


  public Universalconnectormanagerv3GetUCSetupResponse certificates(Map<String, String> certificates) {
    this.certificates = certificates;
    return this;
  }

  public Universalconnectormanagerv3GetUCSetupResponse putCertificatesItem(String key, String certificatesItem) {
    if (this.certificates == null) {
      this.certificates = new HashMap<>();
    }
    this.certificates.put(key, certificatesItem);
    return this;
  }

   /**
   * Map of certificates (key is the name, value is the value itself).
   * @return certificates
  **/
  @javax.annotation.Nullable
  public Map<String, String> getCertificates() {
    return certificates;
  }

  public void setCertificates(Map<String, String> certificates) {
    this.certificates = certificates;
  }


  public Universalconnectormanagerv3GetUCSetupResponse configurations(List<Universalconnectormanagerv3File> configurations) {
    this.configurations = configurations;
    return this;
  }

  public Universalconnectormanagerv3GetUCSetupResponse addConfigurationsItem(Universalconnectormanagerv3File configurationsItem) {
    if (this.configurations == null) {
      this.configurations = new ArrayList<>();
    }
    this.configurations.add(configurationsItem);
    return this;
  }

   /**
   * Configuration files for pipeline.
   * @return configurations
  **/
  @javax.annotation.Nullable
  public List<Universalconnectormanagerv3File> getConfigurations() {
    return configurations;
  }

  public void setConfigurations(List<Universalconnectormanagerv3File> configurations) {
    this.configurations = configurations;
  }


  public Universalconnectormanagerv3GetUCSetupResponse credentials(Map<String, String> credentials) {
    this.credentials = credentials;
    return this;
  }

  public Universalconnectormanagerv3GetUCSetupResponse putCredentialsItem(String key, String credentialsItem) {
    if (this.credentials == null) {
      this.credentials = new HashMap<>();
    }
    this.credentials.put(key, credentialsItem);
    return this;
  }

   /**
   * Map of credentials (key is the name, value is the value itself).
   * @return credentials
  **/
  @javax.annotation.Nullable
  public Map<String, String> getCredentials() {
    return credentials;
  }

  public void setCredentials(Map<String, String> credentials) {
    this.credentials = credentials;
  }


  public Universalconnectormanagerv3GetUCSetupResponse offlinePackages(List<Universalconnectormanagerv3File> offlinePackages) {
    this.offlinePackages = offlinePackages;
    return this;
  }

  public Universalconnectormanagerv3GetUCSetupResponse addOfflinePackagesItem(Universalconnectormanagerv3File offlinePackagesItem) {
    if (this.offlinePackages == null) {
      this.offlinePackages = new ArrayList<>();
    }
    this.offlinePackages.add(offlinePackagesItem);
    return this;
  }

   /**
   * Get offlinePackages
   * @return offlinePackages
  **/
  @javax.annotation.Nullable
  public List<Universalconnectormanagerv3File> getOfflinePackages() {
    return offlinePackages;
  }

  public void setOfflinePackages(List<Universalconnectormanagerv3File> offlinePackages) {
    this.offlinePackages = offlinePackages;
  }


  public Universalconnectormanagerv3GetUCSetupResponse pipelineType(String pipelineType) {
    this.pipelineType = pipelineType;
    return this;
  }

   /**
   * Type of the pipeline (pull or push).
   * @return pipelineType
  **/
  @javax.annotation.Nullable
  public String getPipelineType() {
    return pipelineType;
  }

  public void setPipelineType(String pipelineType) {
    this.pipelineType = pipelineType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Universalconnectormanagerv3GetUCSetupResponse universalconnectormanagerv3GetUCSetupResponse = (Universalconnectormanagerv3GetUCSetupResponse) o;
    return Objects.equals(this.binaries, universalconnectormanagerv3GetUCSetupResponse.binaries) &&
        Objects.equals(this.certificates, universalconnectormanagerv3GetUCSetupResponse.certificates) &&
        Objects.equals(this.configurations, universalconnectormanagerv3GetUCSetupResponse.configurations) &&
        Objects.equals(this.credentials, universalconnectormanagerv3GetUCSetupResponse.credentials) &&
        Objects.equals(this.offlinePackages, universalconnectormanagerv3GetUCSetupResponse.offlinePackages) &&
        Objects.equals(this.pipelineType, universalconnectormanagerv3GetUCSetupResponse.pipelineType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(binaries, certificates, configurations, credentials, offlinePackages, pipelineType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Universalconnectormanagerv3GetUCSetupResponse {\n");
    sb.append("    binaries: ").append(toIndentedString(binaries)).append("\n");
    sb.append("    certificates: ").append(toIndentedString(certificates)).append("\n");
    sb.append("    configurations: ").append(toIndentedString(configurations)).append("\n");
    sb.append("    credentials: ").append(toIndentedString(credentials)).append("\n");
    sb.append("    offlinePackages: ").append(toIndentedString(offlinePackages)).append("\n");
    sb.append("    pipelineType: ").append(toIndentedString(pipelineType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("binaries");
    openapiFields.add("certificates");
    openapiFields.add("configurations");
    openapiFields.add("credentials");
    openapiFields.add("offline_packages");
    openapiFields.add("pipeline_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Universalconnectormanagerv3GetUCSetupResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Universalconnectormanagerv3GetUCSetupResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Universalconnectormanagerv3GetUCSetupResponse is not found in the empty JSON string", Universalconnectormanagerv3GetUCSetupResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Universalconnectormanagerv3GetUCSetupResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Universalconnectormanagerv3GetUCSetupResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("binaries") != null && !jsonObj.get("binaries").isJsonNull()) {
        JsonArray jsonArraybinaries = jsonObj.getAsJsonArray("binaries");
        if (jsonArraybinaries != null) {
          // ensure the json data is an array
          if (!jsonObj.get("binaries").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `binaries` to be an array in the JSON string but got `%s`", jsonObj.get("binaries").toString()));
          }

          // validate the optional field `binaries` (array)
          for (int i = 0; i < jsonArraybinaries.size(); i++) {
            Universalconnectormanagerv3File.validateJsonElement(jsonArraybinaries.get(i));
          };
        }
      }
      if (jsonObj.get("configurations") != null && !jsonObj.get("configurations").isJsonNull()) {
        JsonArray jsonArrayconfigurations = jsonObj.getAsJsonArray("configurations");
        if (jsonArrayconfigurations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("configurations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `configurations` to be an array in the JSON string but got `%s`", jsonObj.get("configurations").toString()));
          }

          // validate the optional field `configurations` (array)
          for (int i = 0; i < jsonArrayconfigurations.size(); i++) {
            Universalconnectormanagerv3File.validateJsonElement(jsonArrayconfigurations.get(i));
          };
        }
      }
      if (jsonObj.get("offline_packages") != null && !jsonObj.get("offline_packages").isJsonNull()) {
        JsonArray jsonArrayofflinePackages = jsonObj.getAsJsonArray("offline_packages");
        if (jsonArrayofflinePackages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("offline_packages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `offline_packages` to be an array in the JSON string but got `%s`", jsonObj.get("offline_packages").toString()));
          }

          // validate the optional field `offline_packages` (array)
          for (int i = 0; i < jsonArrayofflinePackages.size(); i++) {
            Universalconnectormanagerv3File.validateJsonElement(jsonArrayofflinePackages.get(i));
          };
        }
      }
      if ((jsonObj.get("pipeline_type") != null && !jsonObj.get("pipeline_type").isJsonNull()) && !jsonObj.get("pipeline_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pipeline_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pipeline_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Universalconnectormanagerv3GetUCSetupResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Universalconnectormanagerv3GetUCSetupResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Universalconnectormanagerv3GetUCSetupResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Universalconnectormanagerv3GetUCSetupResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<Universalconnectormanagerv3GetUCSetupResponse>() {
           @Override
           public void write(JsonWriter out, Universalconnectormanagerv3GetUCSetupResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Universalconnectormanagerv3GetUCSetupResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Universalconnectormanagerv3GetUCSetupResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Universalconnectormanagerv3GetUCSetupResponse
  * @throws IOException if the JSON string is invalid with respect to Universalconnectormanagerv3GetUCSetupResponse
  */
  public static Universalconnectormanagerv3GetUCSetupResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Universalconnectormanagerv3GetUCSetupResponse.class);
  }

 /**
  * Convert an instance of Universalconnectormanagerv3GetUCSetupResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

