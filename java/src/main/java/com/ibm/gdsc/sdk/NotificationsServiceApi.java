/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import com.ibm.gdsc.ApiCallback;
import com.ibm.gdsc.ApiClient;
import com.ibm.gdsc.ApiException;
import com.ibm.gdsc.ApiResponse;
import com.ibm.gdsc.Configuration;
import com.ibm.gdsc.Pair;
import com.ibm.gdsc.ProgressRequestBody;
import com.ibm.gdsc.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ibm.gdsc.sdk.Notificationsv3CreateTicketRequest;
import com.ibm.gdsc.sdk.Notificationsv3CreateTicketResponse;
import com.ibm.gdsc.sdk.Notificationsv3GetFoldersRequest;
import com.ibm.gdsc.sdk.Notificationsv3GetFoldersResponse;
import com.ibm.gdsc.sdk.Notificationsv3GetNotificationFilenameResponse;
import com.ibm.gdsc.sdk.Notificationsv3GetNotificationRecordResponse;
import com.ibm.gdsc.sdk.Notificationsv3GetNotificationRecordsResponse;
import com.ibm.gdsc.sdk.Notificationsv3GetTicketStatusResponse;
import com.ibm.gdsc.sdk.Notificationsv3TestIntegrationRequest;
import com.ibm.gdsc.sdk.Notificationsv3TestIntegrationResponse;
import com.ibm.gdsc.sdk.Notificationsv3UpdateNotificationRecordRequest;
import com.ibm.gdsc.sdk.Notificationsv3UpdateNotificationRecordResponse;
import java.time.OffsetDateTime;
import com.ibm.gdsc.sdk.RuntimeError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class NotificationsServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NotificationsServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public NotificationsServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for notificationsServiceCreateTicket
     * @param notificationsv3CreateTicketRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsServiceCreateTicketCall(Notificationsv3CreateTicketRequest notificationsv3CreateTicketRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notificationsv3CreateTicketRequest;

        // create path and map variables
        String localVarPath = "/api/v3/integrations/ticket";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationsServiceCreateTicketValidateBeforeCall(Notificationsv3CreateTicketRequest notificationsv3CreateTicketRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'notificationsv3CreateTicketRequest' is set
        if (notificationsv3CreateTicketRequest == null) {
            throw new ApiException("Missing the required parameter 'notificationsv3CreateTicketRequest' when calling notificationsServiceCreateTicket(Async)");
        }

        return notificationsServiceCreateTicketCall(notificationsv3CreateTicketRequest, _callback);

    }

    /**
     * Summary: Create ticket Description: Create ticket based on information passed in.
     * 
     * @param notificationsv3CreateTicketRequest  (required)
     * @return Notificationsv3CreateTicketResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Notificationsv3CreateTicketResponse notificationsServiceCreateTicket(Notificationsv3CreateTicketRequest notificationsv3CreateTicketRequest) throws ApiException {
        ApiResponse<Notificationsv3CreateTicketResponse> localVarResp = notificationsServiceCreateTicketWithHttpInfo(notificationsv3CreateTicketRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Create ticket Description: Create ticket based on information passed in.
     * 
     * @param notificationsv3CreateTicketRequest  (required)
     * @return ApiResponse&lt;Notificationsv3CreateTicketResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Notificationsv3CreateTicketResponse> notificationsServiceCreateTicketWithHttpInfo(Notificationsv3CreateTicketRequest notificationsv3CreateTicketRequest) throws ApiException {
        okhttp3.Call localVarCall = notificationsServiceCreateTicketValidateBeforeCall(notificationsv3CreateTicketRequest, null);
        Type localVarReturnType = new TypeToken<Notificationsv3CreateTicketResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Create ticket Description: Create ticket based on information passed in. (asynchronously)
     * 
     * @param notificationsv3CreateTicketRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsServiceCreateTicketAsync(Notificationsv3CreateTicketRequest notificationsv3CreateTicketRequest, final ApiCallback<Notificationsv3CreateTicketResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationsServiceCreateTicketValidateBeforeCall(notificationsv3CreateTicketRequest, _callback);
        Type localVarReturnType = new TypeToken<Notificationsv3CreateTicketResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationsServiceGetFolders
     * @param notificationsv3GetFoldersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsServiceGetFoldersCall(Notificationsv3GetFoldersRequest notificationsv3GetFoldersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notificationsv3GetFoldersRequest;

        // create path and map variables
        String localVarPath = "/api/v3/integrations/folders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationsServiceGetFoldersValidateBeforeCall(Notificationsv3GetFoldersRequest notificationsv3GetFoldersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'notificationsv3GetFoldersRequest' is set
        if (notificationsv3GetFoldersRequest == null) {
            throw new ApiException("Missing the required parameter 'notificationsv3GetFoldersRequest' when calling notificationsServiceGetFolders(Async)");
        }

        return notificationsServiceGetFoldersCall(notificationsv3GetFoldersRequest, _callback);

    }

    /**
     * Summary: Get folders Description: Get folder for the integration connection provided.
     * 
     * @param notificationsv3GetFoldersRequest  (required)
     * @return Notificationsv3GetFoldersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Notificationsv3GetFoldersResponse notificationsServiceGetFolders(Notificationsv3GetFoldersRequest notificationsv3GetFoldersRequest) throws ApiException {
        ApiResponse<Notificationsv3GetFoldersResponse> localVarResp = notificationsServiceGetFoldersWithHttpInfo(notificationsv3GetFoldersRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Get folders Description: Get folder for the integration connection provided.
     * 
     * @param notificationsv3GetFoldersRequest  (required)
     * @return ApiResponse&lt;Notificationsv3GetFoldersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Notificationsv3GetFoldersResponse> notificationsServiceGetFoldersWithHttpInfo(Notificationsv3GetFoldersRequest notificationsv3GetFoldersRequest) throws ApiException {
        okhttp3.Call localVarCall = notificationsServiceGetFoldersValidateBeforeCall(notificationsv3GetFoldersRequest, null);
        Type localVarReturnType = new TypeToken<Notificationsv3GetFoldersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get folders Description: Get folder for the integration connection provided. (asynchronously)
     * 
     * @param notificationsv3GetFoldersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsServiceGetFoldersAsync(Notificationsv3GetFoldersRequest notificationsv3GetFoldersRequest, final ApiCallback<Notificationsv3GetFoldersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationsServiceGetFoldersValidateBeforeCall(notificationsv3GetFoldersRequest, _callback);
        Type localVarReturnType = new TypeToken<Notificationsv3GetFoldersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationsServiceGetNotificationFilename
     * @param notificationId Params are located in the requests context (tenant id, user email, notification id). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsServiceGetNotificationFilenameCall(String notificationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/notifications/filename";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (notificationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("notification_id", notificationId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationsServiceGetNotificationFilenameValidateBeforeCall(String notificationId, final ApiCallback _callback) throws ApiException {
        return notificationsServiceGetNotificationFilenameCall(notificationId, _callback);

    }

    /**
     * Summary: Get notification filename Description: Return filename associated with the notifications record referenced in the associated context record. The notification id is required but may be set in the associated authentication token or explicitly in the request.
     * 
     * @param notificationId Params are located in the requests context (tenant id, user email, notification id). (optional)
     * @return Notificationsv3GetNotificationFilenameResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Notificationsv3GetNotificationFilenameResponse notificationsServiceGetNotificationFilename(String notificationId) throws ApiException {
        ApiResponse<Notificationsv3GetNotificationFilenameResponse> localVarResp = notificationsServiceGetNotificationFilenameWithHttpInfo(notificationId);
        return localVarResp.getData();
    }

    /**
     * Summary: Get notification filename Description: Return filename associated with the notifications record referenced in the associated context record. The notification id is required but may be set in the associated authentication token or explicitly in the request.
     * 
     * @param notificationId Params are located in the requests context (tenant id, user email, notification id). (optional)
     * @return ApiResponse&lt;Notificationsv3GetNotificationFilenameResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Notificationsv3GetNotificationFilenameResponse> notificationsServiceGetNotificationFilenameWithHttpInfo(String notificationId) throws ApiException {
        okhttp3.Call localVarCall = notificationsServiceGetNotificationFilenameValidateBeforeCall(notificationId, null);
        Type localVarReturnType = new TypeToken<Notificationsv3GetNotificationFilenameResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get notification filename Description: Return filename associated with the notifications record referenced in the associated context record. The notification id is required but may be set in the associated authentication token or explicitly in the request. (asynchronously)
     * 
     * @param notificationId Params are located in the requests context (tenant id, user email, notification id). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsServiceGetNotificationFilenameAsync(String notificationId, final ApiCallback<Notificationsv3GetNotificationFilenameResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationsServiceGetNotificationFilenameValidateBeforeCall(notificationId, _callback);
        Type localVarReturnType = new TypeToken<Notificationsv3GetNotificationFilenameResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationsServiceGetNotificationRecord
     * @param notificationId ID for the record to return. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsServiceGetNotificationRecordCall(String notificationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/notifications/details/{notification_id}"
            .replace("{" + "notification_id" + "}", localVarApiClient.escapeString(notificationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationsServiceGetNotificationRecordValidateBeforeCall(String notificationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'notificationId' is set
        if (notificationId == null) {
            throw new ApiException("Missing the required parameter 'notificationId' when calling notificationsServiceGetNotificationRecord(Async)");
        }

        return notificationsServiceGetNotificationRecordCall(notificationId, _callback);

    }

    /**
     * Summary: Get notification record Description: Return notifications record with the specified ID.
     * 
     * @param notificationId ID for the record to return. (required)
     * @return Notificationsv3GetNotificationRecordResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Notificationsv3GetNotificationRecordResponse notificationsServiceGetNotificationRecord(String notificationId) throws ApiException {
        ApiResponse<Notificationsv3GetNotificationRecordResponse> localVarResp = notificationsServiceGetNotificationRecordWithHttpInfo(notificationId);
        return localVarResp.getData();
    }

    /**
     * Summary: Get notification record Description: Return notifications record with the specified ID.
     * 
     * @param notificationId ID for the record to return. (required)
     * @return ApiResponse&lt;Notificationsv3GetNotificationRecordResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Notificationsv3GetNotificationRecordResponse> notificationsServiceGetNotificationRecordWithHttpInfo(String notificationId) throws ApiException {
        okhttp3.Call localVarCall = notificationsServiceGetNotificationRecordValidateBeforeCall(notificationId, null);
        Type localVarReturnType = new TypeToken<Notificationsv3GetNotificationRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get notification record Description: Return notifications record with the specified ID. (asynchronously)
     * 
     * @param notificationId ID for the record to return. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsServiceGetNotificationRecordAsync(String notificationId, final ApiCallback<Notificationsv3GetNotificationRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationsServiceGetNotificationRecordValidateBeforeCall(notificationId, _callback);
        Type localVarReturnType = new TypeToken<Notificationsv3GetNotificationRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationsServiceGetNotificationRecords
     * @param filterStartTime Return records created at this time or later (&gt;&#x3D;). (optional)
     * @param filterEndTime Return records created before this time (&lt;). (optional)
     * @param filterState Only return record that include the specified state. (optional, default to INCLUDE_ALL)
     * @param filterOrigins Only return record that includes the specified origins. (optional)
     * @param filterOriginData Only return record that with the specified origin_data. (optional)
     * @param offset The amount to offset the rows by for pagination. (optional)
     * @param limit The max amount of rows to return for pagination. (optional)
     * @param includeFilterCounts Computing the filter counts is relatively expensive, only compute when needed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsServiceGetNotificationRecordsCall(OffsetDateTime filterStartTime, OffsetDateTime filterEndTime, String filterState, List<String> filterOrigins, String filterOriginData, Long offset, Long limit, Boolean includeFilterCounts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/notifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterStartTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.start_time", filterStartTime));
        }

        if (filterEndTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.end_time", filterEndTime));
        }

        if (filterState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.state", filterState));
        }

        if (filterOrigins != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter.origins", filterOrigins));
        }

        if (filterOriginData != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.origin_data", filterOriginData));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (includeFilterCounts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_filter_counts", includeFilterCounts));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationsServiceGetNotificationRecordsValidateBeforeCall(OffsetDateTime filterStartTime, OffsetDateTime filterEndTime, String filterState, List<String> filterOrigins, String filterOriginData, Long offset, Long limit, Boolean includeFilterCounts, final ApiCallback _callback) throws ApiException {
        return notificationsServiceGetNotificationRecordsCall(filterStartTime, filterEndTime, filterState, filterOrigins, filterOriginData, offset, limit, includeFilterCounts, _callback);

    }

    /**
     * Summary: Get notification records Description: Return notifications records that match the specified filter.
     * 
     * @param filterStartTime Return records created at this time or later (&gt;&#x3D;). (optional)
     * @param filterEndTime Return records created before this time (&lt;). (optional)
     * @param filterState Only return record that include the specified state. (optional, default to INCLUDE_ALL)
     * @param filterOrigins Only return record that includes the specified origins. (optional)
     * @param filterOriginData Only return record that with the specified origin_data. (optional)
     * @param offset The amount to offset the rows by for pagination. (optional)
     * @param limit The max amount of rows to return for pagination. (optional)
     * @param includeFilterCounts Computing the filter counts is relatively expensive, only compute when needed. (optional)
     * @return Notificationsv3GetNotificationRecordsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Notificationsv3GetNotificationRecordsResponse notificationsServiceGetNotificationRecords(OffsetDateTime filterStartTime, OffsetDateTime filterEndTime, String filterState, List<String> filterOrigins, String filterOriginData, Long offset, Long limit, Boolean includeFilterCounts) throws ApiException {
        ApiResponse<Notificationsv3GetNotificationRecordsResponse> localVarResp = notificationsServiceGetNotificationRecordsWithHttpInfo(filterStartTime, filterEndTime, filterState, filterOrigins, filterOriginData, offset, limit, includeFilterCounts);
        return localVarResp.getData();
    }

    /**
     * Summary: Get notification records Description: Return notifications records that match the specified filter.
     * 
     * @param filterStartTime Return records created at this time or later (&gt;&#x3D;). (optional)
     * @param filterEndTime Return records created before this time (&lt;). (optional)
     * @param filterState Only return record that include the specified state. (optional, default to INCLUDE_ALL)
     * @param filterOrigins Only return record that includes the specified origins. (optional)
     * @param filterOriginData Only return record that with the specified origin_data. (optional)
     * @param offset The amount to offset the rows by for pagination. (optional)
     * @param limit The max amount of rows to return for pagination. (optional)
     * @param includeFilterCounts Computing the filter counts is relatively expensive, only compute when needed. (optional)
     * @return ApiResponse&lt;Notificationsv3GetNotificationRecordsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Notificationsv3GetNotificationRecordsResponse> notificationsServiceGetNotificationRecordsWithHttpInfo(OffsetDateTime filterStartTime, OffsetDateTime filterEndTime, String filterState, List<String> filterOrigins, String filterOriginData, Long offset, Long limit, Boolean includeFilterCounts) throws ApiException {
        okhttp3.Call localVarCall = notificationsServiceGetNotificationRecordsValidateBeforeCall(filterStartTime, filterEndTime, filterState, filterOrigins, filterOriginData, offset, limit, includeFilterCounts, null);
        Type localVarReturnType = new TypeToken<Notificationsv3GetNotificationRecordsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get notification records Description: Return notifications records that match the specified filter. (asynchronously)
     * 
     * @param filterStartTime Return records created at this time or later (&gt;&#x3D;). (optional)
     * @param filterEndTime Return records created before this time (&lt;). (optional)
     * @param filterState Only return record that include the specified state. (optional, default to INCLUDE_ALL)
     * @param filterOrigins Only return record that includes the specified origins. (optional)
     * @param filterOriginData Only return record that with the specified origin_data. (optional)
     * @param offset The amount to offset the rows by for pagination. (optional)
     * @param limit The max amount of rows to return for pagination. (optional)
     * @param includeFilterCounts Computing the filter counts is relatively expensive, only compute when needed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsServiceGetNotificationRecordsAsync(OffsetDateTime filterStartTime, OffsetDateTime filterEndTime, String filterState, List<String> filterOrigins, String filterOriginData, Long offset, Long limit, Boolean includeFilterCounts, final ApiCallback<Notificationsv3GetNotificationRecordsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationsServiceGetNotificationRecordsValidateBeforeCall(filterStartTime, filterEndTime, filterState, filterOrigins, filterOriginData, offset, limit, includeFilterCounts, _callback);
        Type localVarReturnType = new TypeToken<Notificationsv3GetNotificationRecordsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationsServiceGetTicketStatus
     * @param ticketId The ID of the ticket to fetch. (optional)
     * @param integrationId The ID of the ticketing integration. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsServiceGetTicketStatusCall(String ticketId, String integrationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/integrations/ticket/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ticketId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ticket_id", ticketId));
        }

        if (integrationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("integration_id", integrationId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationsServiceGetTicketStatusValidateBeforeCall(String ticketId, String integrationId, final ApiCallback _callback) throws ApiException {
        return notificationsServiceGetTicketStatusCall(ticketId, integrationId, _callback);

    }

    /**
     * Summary: Get ticket status Description: Get the status of the given ticket
     * 
     * @param ticketId The ID of the ticket to fetch. (optional)
     * @param integrationId The ID of the ticketing integration. (optional)
     * @return Notificationsv3GetTicketStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Notificationsv3GetTicketStatusResponse notificationsServiceGetTicketStatus(String ticketId, String integrationId) throws ApiException {
        ApiResponse<Notificationsv3GetTicketStatusResponse> localVarResp = notificationsServiceGetTicketStatusWithHttpInfo(ticketId, integrationId);
        return localVarResp.getData();
    }

    /**
     * Summary: Get ticket status Description: Get the status of the given ticket
     * 
     * @param ticketId The ID of the ticket to fetch. (optional)
     * @param integrationId The ID of the ticketing integration. (optional)
     * @return ApiResponse&lt;Notificationsv3GetTicketStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Notificationsv3GetTicketStatusResponse> notificationsServiceGetTicketStatusWithHttpInfo(String ticketId, String integrationId) throws ApiException {
        okhttp3.Call localVarCall = notificationsServiceGetTicketStatusValidateBeforeCall(ticketId, integrationId, null);
        Type localVarReturnType = new TypeToken<Notificationsv3GetTicketStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get ticket status Description: Get the status of the given ticket (asynchronously)
     * 
     * @param ticketId The ID of the ticket to fetch. (optional)
     * @param integrationId The ID of the ticketing integration. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsServiceGetTicketStatusAsync(String ticketId, String integrationId, final ApiCallback<Notificationsv3GetTicketStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationsServiceGetTicketStatusValidateBeforeCall(ticketId, integrationId, _callback);
        Type localVarReturnType = new TypeToken<Notificationsv3GetTicketStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationsServiceTestIntegration
     * @param notificationsv3TestIntegrationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsServiceTestIntegrationCall(Notificationsv3TestIntegrationRequest notificationsv3TestIntegrationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notificationsv3TestIntegrationRequest;

        // create path and map variables
        String localVarPath = "/api/v3/integrations/test";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationsServiceTestIntegrationValidateBeforeCall(Notificationsv3TestIntegrationRequest notificationsv3TestIntegrationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'notificationsv3TestIntegrationRequest' is set
        if (notificationsv3TestIntegrationRequest == null) {
            throw new ApiException("Missing the required parameter 'notificationsv3TestIntegrationRequest' when calling notificationsServiceTestIntegration(Async)");
        }

        return notificationsServiceTestIntegrationCall(notificationsv3TestIntegrationRequest, _callback);

    }

    /**
     * Summary: Test integration Description: Test the integration connection with the arguments passed in the TestIntegrationRequest.  When possible a test message is sent to the integration to ensure it is functional.
     * 
     * @param notificationsv3TestIntegrationRequest  (required)
     * @return Notificationsv3TestIntegrationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Notificationsv3TestIntegrationResponse notificationsServiceTestIntegration(Notificationsv3TestIntegrationRequest notificationsv3TestIntegrationRequest) throws ApiException {
        ApiResponse<Notificationsv3TestIntegrationResponse> localVarResp = notificationsServiceTestIntegrationWithHttpInfo(notificationsv3TestIntegrationRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Test integration Description: Test the integration connection with the arguments passed in the TestIntegrationRequest.  When possible a test message is sent to the integration to ensure it is functional.
     * 
     * @param notificationsv3TestIntegrationRequest  (required)
     * @return ApiResponse&lt;Notificationsv3TestIntegrationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Notificationsv3TestIntegrationResponse> notificationsServiceTestIntegrationWithHttpInfo(Notificationsv3TestIntegrationRequest notificationsv3TestIntegrationRequest) throws ApiException {
        okhttp3.Call localVarCall = notificationsServiceTestIntegrationValidateBeforeCall(notificationsv3TestIntegrationRequest, null);
        Type localVarReturnType = new TypeToken<Notificationsv3TestIntegrationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Test integration Description: Test the integration connection with the arguments passed in the TestIntegrationRequest.  When possible a test message is sent to the integration to ensure it is functional. (asynchronously)
     * 
     * @param notificationsv3TestIntegrationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsServiceTestIntegrationAsync(Notificationsv3TestIntegrationRequest notificationsv3TestIntegrationRequest, final ApiCallback<Notificationsv3TestIntegrationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationsServiceTestIntegrationValidateBeforeCall(notificationsv3TestIntegrationRequest, _callback);
        Type localVarReturnType = new TypeToken<Notificationsv3TestIntegrationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for notificationsServiceUpdateNotificationRecord
     * @param notificationsv3UpdateNotificationRecordRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsServiceUpdateNotificationRecordCall(Notificationsv3UpdateNotificationRecordRequest notificationsv3UpdateNotificationRecordRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = notificationsv3UpdateNotificationRecordRequest;

        // create path and map variables
        String localVarPath = "/api/v3/notifications";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call notificationsServiceUpdateNotificationRecordValidateBeforeCall(Notificationsv3UpdateNotificationRecordRequest notificationsv3UpdateNotificationRecordRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'notificationsv3UpdateNotificationRecordRequest' is set
        if (notificationsv3UpdateNotificationRecordRequest == null) {
            throw new ApiException("Missing the required parameter 'notificationsv3UpdateNotificationRecordRequest' when calling notificationsServiceUpdateNotificationRecord(Async)");
        }

        return notificationsServiceUpdateNotificationRecordCall(notificationsv3UpdateNotificationRecordRequest, _callback);

    }

    /**
     * Summary: Update notification record Description: Update a notification record with the specified values.  The ID field is required and must match an existing notification. All fields other than the ID are optional. Creation timestamp, user and other administrative fields can not updated.
     * 
     * @param notificationsv3UpdateNotificationRecordRequest  (required)
     * @return Notificationsv3UpdateNotificationRecordResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Notificationsv3UpdateNotificationRecordResponse notificationsServiceUpdateNotificationRecord(Notificationsv3UpdateNotificationRecordRequest notificationsv3UpdateNotificationRecordRequest) throws ApiException {
        ApiResponse<Notificationsv3UpdateNotificationRecordResponse> localVarResp = notificationsServiceUpdateNotificationRecordWithHttpInfo(notificationsv3UpdateNotificationRecordRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Update notification record Description: Update a notification record with the specified values.  The ID field is required and must match an existing notification. All fields other than the ID are optional. Creation timestamp, user and other administrative fields can not updated.
     * 
     * @param notificationsv3UpdateNotificationRecordRequest  (required)
     * @return ApiResponse&lt;Notificationsv3UpdateNotificationRecordResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Notificationsv3UpdateNotificationRecordResponse> notificationsServiceUpdateNotificationRecordWithHttpInfo(Notificationsv3UpdateNotificationRecordRequest notificationsv3UpdateNotificationRecordRequest) throws ApiException {
        okhttp3.Call localVarCall = notificationsServiceUpdateNotificationRecordValidateBeforeCall(notificationsv3UpdateNotificationRecordRequest, null);
        Type localVarReturnType = new TypeToken<Notificationsv3UpdateNotificationRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Update notification record Description: Update a notification record with the specified values.  The ID field is required and must match an existing notification. All fields other than the ID are optional. Creation timestamp, user and other administrative fields can not updated. (asynchronously)
     * 
     * @param notificationsv3UpdateNotificationRecordRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call notificationsServiceUpdateNotificationRecordAsync(Notificationsv3UpdateNotificationRecordRequest notificationsv3UpdateNotificationRecordRequest, final ApiCallback<Notificationsv3UpdateNotificationRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = notificationsServiceUpdateNotificationRecordValidateBeforeCall(notificationsv3UpdateNotificationRecordRequest, _callback);
        Type localVarReturnType = new TypeToken<Notificationsv3UpdateNotificationRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
