/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.gdsc.sdk.models.Riskanalyticscontrollerv3ObservationType;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.sdk.JSON;

/**
 * Observation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-07T13:24:05.648078332-08:00[America/Los_Angeles]", comments = "Generator version: 7.6.0")
public class Riskanalyticscontrollerv3Observation {
  public static final String SERIALIZED_NAME_LEAD_FEATURE_ID = "lead_feature_id";
  @SerializedName(SERIALIZED_NAME_LEAD_FEATURE_ID)
  private Integer leadFeatureId;

  public static final String SERIALIZED_NAME_OBSERVATION_DESCRIPTION = "observation_description";
  @SerializedName(SERIALIZED_NAME_OBSERVATION_DESCRIPTION)
  private String observationDescription;

  public static final String SERIALIZED_NAME_OBSERVATION_ID = "observation_id";
  @SerializedName(SERIALIZED_NAME_OBSERVATION_ID)
  private Integer observationId;

  public static final String SERIALIZED_NAME_OBSERVATION_TYPE = "observation_type";
  @SerializedName(SERIALIZED_NAME_OBSERVATION_TYPE)
  private Riskanalyticscontrollerv3ObservationType observationType = Riskanalyticscontrollerv3ObservationType.UNDEFINED_OBSERVATION_TYPE;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private OffsetDateTime time;

  public Riskanalyticscontrollerv3Observation() {
  }

  public Riskanalyticscontrollerv3Observation leadFeatureId(Integer leadFeatureId) {
    this.leadFeatureId = leadFeatureId;
    return this;
  }

   /**
   * Lead feature id.
   * @return leadFeatureId
  **/
  @javax.annotation.Nullable
  public Integer getLeadFeatureId() {
    return leadFeatureId;
  }

  public void setLeadFeatureId(Integer leadFeatureId) {
    this.leadFeatureId = leadFeatureId;
  }


  public Riskanalyticscontrollerv3Observation observationDescription(String observationDescription) {
    this.observationDescription = observationDescription;
    return this;
  }

   /**
   * Observation description.
   * @return observationDescription
  **/
  @javax.annotation.Nullable
  public String getObservationDescription() {
    return observationDescription;
  }

  public void setObservationDescription(String observationDescription) {
    this.observationDescription = observationDescription;
  }


  public Riskanalyticscontrollerv3Observation observationId(Integer observationId) {
    this.observationId = observationId;
    return this;
  }

   /**
   * Id.
   * @return observationId
  **/
  @javax.annotation.Nullable
  public Integer getObservationId() {
    return observationId;
  }

  public void setObservationId(Integer observationId) {
    this.observationId = observationId;
  }


  public Riskanalyticscontrollerv3Observation observationType(Riskanalyticscontrollerv3ObservationType observationType) {
    this.observationType = observationType;
    return this;
  }

   /**
   * Get observationType
   * @return observationType
  **/
  @javax.annotation.Nullable
  public Riskanalyticscontrollerv3ObservationType getObservationType() {
    return observationType;
  }

  public void setObservationType(Riskanalyticscontrollerv3ObservationType observationType) {
    this.observationType = observationType;
  }


  public Riskanalyticscontrollerv3Observation time(OffsetDateTime time) {
    this.time = time;
    return this;
  }

   /**
   * Time - date in format YYYY-MM-DDTHH:mm:ssZ.
   * @return time
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getTime() {
    return time;
  }

  public void setTime(OffsetDateTime time) {
    this.time = time;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Riskanalyticscontrollerv3Observation riskanalyticscontrollerv3Observation = (Riskanalyticscontrollerv3Observation) o;
    return Objects.equals(this.leadFeatureId, riskanalyticscontrollerv3Observation.leadFeatureId) &&
        Objects.equals(this.observationDescription, riskanalyticscontrollerv3Observation.observationDescription) &&
        Objects.equals(this.observationId, riskanalyticscontrollerv3Observation.observationId) &&
        Objects.equals(this.observationType, riskanalyticscontrollerv3Observation.observationType) &&
        Objects.equals(this.time, riskanalyticscontrollerv3Observation.time);
  }

  @Override
  public int hashCode() {
    return Objects.hash(leadFeatureId, observationDescription, observationId, observationType, time);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Riskanalyticscontrollerv3Observation {\n");
    sb.append("    leadFeatureId: ").append(toIndentedString(leadFeatureId)).append("\n");
    sb.append("    observationDescription: ").append(toIndentedString(observationDescription)).append("\n");
    sb.append("    observationId: ").append(toIndentedString(observationId)).append("\n");
    sb.append("    observationType: ").append(toIndentedString(observationType)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lead_feature_id");
    openapiFields.add("observation_description");
    openapiFields.add("observation_id");
    openapiFields.add("observation_type");
    openapiFields.add("time");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Riskanalyticscontrollerv3Observation
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Riskanalyticscontrollerv3Observation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Riskanalyticscontrollerv3Observation is not found in the empty JSON string", Riskanalyticscontrollerv3Observation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Riskanalyticscontrollerv3Observation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Riskanalyticscontrollerv3Observation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("observation_description") != null && !jsonObj.get("observation_description").isJsonNull()) && !jsonObj.get("observation_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `observation_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("observation_description").toString()));
      }
      // validate the optional field `observation_type`
      if (jsonObj.get("observation_type") != null && !jsonObj.get("observation_type").isJsonNull()) {
        Riskanalyticscontrollerv3ObservationType.validateJsonElement(jsonObj.get("observation_type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Riskanalyticscontrollerv3Observation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Riskanalyticscontrollerv3Observation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Riskanalyticscontrollerv3Observation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Riskanalyticscontrollerv3Observation.class));

       return (TypeAdapter<T>) new TypeAdapter<Riskanalyticscontrollerv3Observation>() {
           @Override
           public void write(JsonWriter out, Riskanalyticscontrollerv3Observation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Riskanalyticscontrollerv3Observation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Riskanalyticscontrollerv3Observation given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Riskanalyticscontrollerv3Observation
  * @throws IOException if the JSON string is invalid with respect to Riskanalyticscontrollerv3Observation
  */
  public static Riskanalyticscontrollerv3Observation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Riskanalyticscontrollerv3Observation.class);
  }

 /**
  * Convert an instance of Riskanalyticscontrollerv3Observation to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

