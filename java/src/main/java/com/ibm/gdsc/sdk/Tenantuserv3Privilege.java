/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.JSON;

/**
 * Tenantuserv3Privilege
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-18T20:02:04.461512Z[UTC]", comments = "Generator version: 7.6.0")
public class Tenantuserv3Privilege {
  public static final String SERIALIZED_NAME_AUTHOR_ID = "author_id";
  @SerializedName(SERIALIZED_NAME_AUTHOR_ID)
  private String authorId;

  public static final String SERIALIZED_NAME_IMMUTABLE_ROLES = "immutable_roles";
  @SerializedName(SERIALIZED_NAME_IMMUTABLE_ROLES)
  private List<String> immutableRoles = new ArrayList<>();

  public static final String SERIALIZED_NAME_MANAGE_ROLES = "manage_roles";
  @SerializedName(SERIALIZED_NAME_MANAGE_ROLES)
  private List<String> manageRoles = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NLS_ID = "nls_id";
  @SerializedName(SERIALIZED_NAME_NLS_ID)
  private String nlsId;

  public static final String SERIALIZED_NAME_PRIVILEGE_ID = "privilege_id";
  @SerializedName(SERIALIZED_NAME_PRIVILEGE_ID)
  private String privilegeId;

  public static final String SERIALIZED_NAME_REMOVABLE = "removable";
  @SerializedName(SERIALIZED_NAME_REMOVABLE)
  private Boolean removable;

  public static final String SERIALIZED_NAME_ROLES = "roles";
  @SerializedName(SERIALIZED_NAME_ROLES)
  private List<String> roles = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public Tenantuserv3Privilege() {
  }

  public Tenantuserv3Privilege authorId(String authorId) {
    this.authorId = authorId;
    return this;
  }

   /**
   * Privilege author&#39;s id.
   * @return authorId
  **/
  @javax.annotation.Nullable
  public String getAuthorId() {
    return authorId;
  }

  public void setAuthorId(String authorId) {
    this.authorId = authorId;
  }


  public Tenantuserv3Privilege immutableRoles(List<String> immutableRoles) {
    this.immutableRoles = immutableRoles;
    return this;
  }

  public Tenantuserv3Privilege addImmutableRolesItem(String immutableRolesItem) {
    if (this.immutableRoles == null) {
      this.immutableRoles = new ArrayList<>();
    }
    this.immutableRoles.add(immutableRolesItem);
    return this;
  }

   /**
   * Roles of the type:* permission.
   * @return immutableRoles
  **/
  @javax.annotation.Nullable
  public List<String> getImmutableRoles() {
    return immutableRoles;
  }

  public void setImmutableRoles(List<String> immutableRoles) {
    this.immutableRoles = immutableRoles;
  }


  public Tenantuserv3Privilege manageRoles(List<String> manageRoles) {
    this.manageRoles = manageRoles;
    return this;
  }

  public Tenantuserv3Privilege addManageRolesItem(String manageRolesItem) {
    if (this.manageRoles == null) {
      this.manageRoles = new ArrayList<>();
    }
    this.manageRoles.add(manageRolesItem);
    return this;
  }

   /**
   * Roles of the management permission.
   * @return manageRoles
  **/
  @javax.annotation.Nullable
  public List<String> getManageRoles() {
    return manageRoles;
  }

  public void setManageRoles(List<String> manageRoles) {
    this.manageRoles = manageRoles;
  }


  public Tenantuserv3Privilege name(String name) {
    this.name = name;
    return this;
  }

   /**
   * A privilege name that the access-manager sees (for pre-defined privileges, use translation text).
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Tenantuserv3Privilege nlsId(String nlsId) {
    this.nlsId = nlsId;
    return this;
  }

   /**
   * Get nlsId
   * @return nlsId
  **/
  @javax.annotation.Nullable
  public String getNlsId() {
    return nlsId;
  }

  public void setNlsId(String nlsId) {
    this.nlsId = nlsId;
  }


  public Tenantuserv3Privilege privilegeId(String privilegeId) {
    this.privilegeId = privilegeId;
    return this;
  }

   /**
   * Permanent id of the privilege.
   * @return privilegeId
  **/
  @javax.annotation.Nullable
  public String getPrivilegeId() {
    return privilegeId;
  }

  public void setPrivilegeId(String privilegeId) {
    this.privilegeId = privilegeId;
  }


  public Tenantuserv3Privilege removable(Boolean removable) {
    this.removable = removable;
    return this;
  }

   /**
   * All pre-defined privileges are not removable.
   * @return removable
  **/
  @javax.annotation.Nullable
  public Boolean getRemovable() {
    return removable;
  }

  public void setRemovable(Boolean removable) {
    this.removable = removable;
  }


  public Tenantuserv3Privilege roles(List<String> roles) {
    this.roles = roles;
    return this;
  }

  public Tenantuserv3Privilege addRolesItem(String rolesItem) {
    if (this.roles == null) {
      this.roles = new ArrayList<>();
    }
    this.roles.add(rolesItem);
    return this;
  }

   /**
   * The array of Insights roles that this privilege belongs to.
   * @return roles
  **/
  @javax.annotation.Nullable
  public List<String> getRoles() {
    return roles;
  }

  public void setRoles(List<String> roles) {
    this.roles = roles;
  }


  public Tenantuserv3Privilege type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Type of privilege: report, classification, group, page, restapi, etc.
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Tenantuserv3Privilege tenantuserv3Privilege = (Tenantuserv3Privilege) o;
    return Objects.equals(this.authorId, tenantuserv3Privilege.authorId) &&
        Objects.equals(this.immutableRoles, tenantuserv3Privilege.immutableRoles) &&
        Objects.equals(this.manageRoles, tenantuserv3Privilege.manageRoles) &&
        Objects.equals(this.name, tenantuserv3Privilege.name) &&
        Objects.equals(this.nlsId, tenantuserv3Privilege.nlsId) &&
        Objects.equals(this.privilegeId, tenantuserv3Privilege.privilegeId) &&
        Objects.equals(this.removable, tenantuserv3Privilege.removable) &&
        Objects.equals(this.roles, tenantuserv3Privilege.roles) &&
        Objects.equals(this.type, tenantuserv3Privilege.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorId, immutableRoles, manageRoles, name, nlsId, privilegeId, removable, roles, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Tenantuserv3Privilege {\n");
    sb.append("    authorId: ").append(toIndentedString(authorId)).append("\n");
    sb.append("    immutableRoles: ").append(toIndentedString(immutableRoles)).append("\n");
    sb.append("    manageRoles: ").append(toIndentedString(manageRoles)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nlsId: ").append(toIndentedString(nlsId)).append("\n");
    sb.append("    privilegeId: ").append(toIndentedString(privilegeId)).append("\n");
    sb.append("    removable: ").append(toIndentedString(removable)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("author_id");
    openapiFields.add("immutable_roles");
    openapiFields.add("manage_roles");
    openapiFields.add("name");
    openapiFields.add("nls_id");
    openapiFields.add("privilege_id");
    openapiFields.add("removable");
    openapiFields.add("roles");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Tenantuserv3Privilege
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Tenantuserv3Privilege.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Tenantuserv3Privilege is not found in the empty JSON string", Tenantuserv3Privilege.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Tenantuserv3Privilege.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Tenantuserv3Privilege` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("author_id") != null && !jsonObj.get("author_id").isJsonNull()) && !jsonObj.get("author_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("immutable_roles") != null && !jsonObj.get("immutable_roles").isJsonNull() && !jsonObj.get("immutable_roles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `immutable_roles` to be an array in the JSON string but got `%s`", jsonObj.get("immutable_roles").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("manage_roles") != null && !jsonObj.get("manage_roles").isJsonNull() && !jsonObj.get("manage_roles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `manage_roles` to be an array in the JSON string but got `%s`", jsonObj.get("manage_roles").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("nls_id") != null && !jsonObj.get("nls_id").isJsonNull()) && !jsonObj.get("nls_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nls_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nls_id").toString()));
      }
      if ((jsonObj.get("privilege_id") != null && !jsonObj.get("privilege_id").isJsonNull()) && !jsonObj.get("privilege_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privilege_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privilege_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("roles") != null && !jsonObj.get("roles").isJsonNull() && !jsonObj.get("roles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `roles` to be an array in the JSON string but got `%s`", jsonObj.get("roles").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Tenantuserv3Privilege.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Tenantuserv3Privilege' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Tenantuserv3Privilege> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Tenantuserv3Privilege.class));

       return (TypeAdapter<T>) new TypeAdapter<Tenantuserv3Privilege>() {
           @Override
           public void write(JsonWriter out, Tenantuserv3Privilege value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Tenantuserv3Privilege read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Tenantuserv3Privilege given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Tenantuserv3Privilege
  * @throws IOException if the JSON string is invalid with respect to Tenantuserv3Privilege
  */
  public static Tenantuserv3Privilege fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Tenantuserv3Privilege.class);
  }

 /**
  * Convert an instance of Tenantuserv3Privilege to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

