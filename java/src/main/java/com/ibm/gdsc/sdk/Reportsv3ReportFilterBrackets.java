/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.gdsc.sdk.Reportsv3OptionType;
import com.ibm.gdsc.sdk.Reportsv3ReportAggFilter;
import com.ibm.gdsc.sdk.Reportsv3ReportFilter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.JSON;

/**
 * ReportFilterBrackets represents a report filter bracket.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-15T03:58:58.617687Z[UTC]", comments = "Generator version: 7.6.0")
public class Reportsv3ReportFilterBrackets {
  public static final String SERIALIZED_NAME_BRACKETS_ID = "brackets_id";
  @SerializedName(SERIALIZED_NAME_BRACKETS_ID)
  private Integer bracketsId;

  public static final String SERIALIZED_NAME_FILTER_NAME = "filter_name";
  @SerializedName(SERIALIZED_NAME_FILTER_NAME)
  private String filterName;

  public static final String SERIALIZED_NAME_FILTERS_ARRAY = "filters_array";
  @SerializedName(SERIALIZED_NAME_FILTERS_ARRAY)
  private List<Reportsv3ReportFilter> filtersArray = new ArrayList<>();

  public static final String SERIALIZED_NAME_HAVING_ARRAY = "having_array";
  @SerializedName(SERIALIZED_NAME_HAVING_ARRAY)
  private List<Reportsv3ReportAggFilter> havingArray = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_CUSTOM = "is_custom";
  @SerializedName(SERIALIZED_NAME_IS_CUSTOM)
  private Boolean isCustom;

  public static final String SERIALIZED_NAME_OPTION_TYPE = "option_type";
  @SerializedName(SERIALIZED_NAME_OPTION_TYPE)
  private Reportsv3OptionType optionType = Reportsv3OptionType.UNDEFINED_OPTION_TYPE;

  public static final String SERIALIZED_NAME_SEQUENCE = "sequence";
  @SerializedName(SERIALIZED_NAME_SEQUENCE)
  private Integer sequence;

  public Reportsv3ReportFilterBrackets() {
  }

  public Reportsv3ReportFilterBrackets bracketsId(Integer bracketsId) {
    this.bracketsId = bracketsId;
    return this;
  }

   /**
   * Brackets ID.
   * @return bracketsId
  **/
  @javax.annotation.Nullable
  public Integer getBracketsId() {
    return bracketsId;
  }

  public void setBracketsId(Integer bracketsId) {
    this.bracketsId = bracketsId;
  }


  public Reportsv3ReportFilterBrackets filterName(String filterName) {
    this.filterName = filterName;
    return this;
  }

   /**
   * Optional: Allow for naming of custom filters.
   * @return filterName
  **/
  @javax.annotation.Nullable
  public String getFilterName() {
    return filterName;
  }

  public void setFilterName(String filterName) {
    this.filterName = filterName;
  }


  public Reportsv3ReportFilterBrackets filtersArray(List<Reportsv3ReportFilter> filtersArray) {
    this.filtersArray = filtersArray;
    return this;
  }

  public Reportsv3ReportFilterBrackets addFiltersArrayItem(Reportsv3ReportFilter filtersArrayItem) {
    if (this.filtersArray == null) {
      this.filtersArray = new ArrayList<>();
    }
    this.filtersArray.add(filtersArrayItem);
    return this;
  }

   /**
   * Filters Array.
   * @return filtersArray
  **/
  @javax.annotation.Nullable
  public List<Reportsv3ReportFilter> getFiltersArray() {
    return filtersArray;
  }

  public void setFiltersArray(List<Reportsv3ReportFilter> filtersArray) {
    this.filtersArray = filtersArray;
  }


  public Reportsv3ReportFilterBrackets havingArray(List<Reportsv3ReportAggFilter> havingArray) {
    this.havingArray = havingArray;
    return this;
  }

  public Reportsv3ReportFilterBrackets addHavingArrayItem(Reportsv3ReportAggFilter havingArrayItem) {
    if (this.havingArray == null) {
      this.havingArray = new ArrayList<>();
    }
    this.havingArray.add(havingArrayItem);
    return this;
  }

   /**
   * Get havingArray
   * @return havingArray
  **/
  @javax.annotation.Nullable
  public List<Reportsv3ReportAggFilter> getHavingArray() {
    return havingArray;
  }

  public void setHavingArray(List<Reportsv3ReportAggFilter> havingArray) {
    this.havingArray = havingArray;
  }


  public Reportsv3ReportFilterBrackets isCustom(Boolean isCustom) {
    this.isCustom = isCustom;
    return this;
  }

   /**
   * Optional: Indicate if this is a custom filter in the UI.
   * @return isCustom
  **/
  @javax.annotation.Nullable
  public Boolean getIsCustom() {
    return isCustom;
  }

  public void setIsCustom(Boolean isCustom) {
    this.isCustom = isCustom;
  }


  public Reportsv3ReportFilterBrackets optionType(Reportsv3OptionType optionType) {
    this.optionType = optionType;
    return this;
  }

   /**
   * Get optionType
   * @return optionType
  **/
  @javax.annotation.Nullable
  public Reportsv3OptionType getOptionType() {
    return optionType;
  }

  public void setOptionType(Reportsv3OptionType optionType) {
    this.optionType = optionType;
  }


  public Reportsv3ReportFilterBrackets sequence(Integer sequence) {
    this.sequence = sequence;
    return this;
  }

   /**
   * Filter sequence.
   * @return sequence
  **/
  @javax.annotation.Nullable
  public Integer getSequence() {
    return sequence;
  }

  public void setSequence(Integer sequence) {
    this.sequence = sequence;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Reportsv3ReportFilterBrackets reportsv3ReportFilterBrackets = (Reportsv3ReportFilterBrackets) o;
    return Objects.equals(this.bracketsId, reportsv3ReportFilterBrackets.bracketsId) &&
        Objects.equals(this.filterName, reportsv3ReportFilterBrackets.filterName) &&
        Objects.equals(this.filtersArray, reportsv3ReportFilterBrackets.filtersArray) &&
        Objects.equals(this.havingArray, reportsv3ReportFilterBrackets.havingArray) &&
        Objects.equals(this.isCustom, reportsv3ReportFilterBrackets.isCustom) &&
        Objects.equals(this.optionType, reportsv3ReportFilterBrackets.optionType) &&
        Objects.equals(this.sequence, reportsv3ReportFilterBrackets.sequence);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bracketsId, filterName, filtersArray, havingArray, isCustom, optionType, sequence);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Reportsv3ReportFilterBrackets {\n");
    sb.append("    bracketsId: ").append(toIndentedString(bracketsId)).append("\n");
    sb.append("    filterName: ").append(toIndentedString(filterName)).append("\n");
    sb.append("    filtersArray: ").append(toIndentedString(filtersArray)).append("\n");
    sb.append("    havingArray: ").append(toIndentedString(havingArray)).append("\n");
    sb.append("    isCustom: ").append(toIndentedString(isCustom)).append("\n");
    sb.append("    optionType: ").append(toIndentedString(optionType)).append("\n");
    sb.append("    sequence: ").append(toIndentedString(sequence)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("brackets_id");
    openapiFields.add("filter_name");
    openapiFields.add("filters_array");
    openapiFields.add("having_array");
    openapiFields.add("is_custom");
    openapiFields.add("option_type");
    openapiFields.add("sequence");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Reportsv3ReportFilterBrackets
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Reportsv3ReportFilterBrackets.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Reportsv3ReportFilterBrackets is not found in the empty JSON string", Reportsv3ReportFilterBrackets.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Reportsv3ReportFilterBrackets.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Reportsv3ReportFilterBrackets` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("filter_name") != null && !jsonObj.get("filter_name").isJsonNull()) && !jsonObj.get("filter_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter_name").toString()));
      }
      if (jsonObj.get("filters_array") != null && !jsonObj.get("filters_array").isJsonNull()) {
        JsonArray jsonArrayfiltersArray = jsonObj.getAsJsonArray("filters_array");
        if (jsonArrayfiltersArray != null) {
          // ensure the json data is an array
          if (!jsonObj.get("filters_array").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `filters_array` to be an array in the JSON string but got `%s`", jsonObj.get("filters_array").toString()));
          }

          // validate the optional field `filters_array` (array)
          for (int i = 0; i < jsonArrayfiltersArray.size(); i++) {
            Reportsv3ReportFilter.validateJsonElement(jsonArrayfiltersArray.get(i));
          };
        }
      }
      if (jsonObj.get("having_array") != null && !jsonObj.get("having_array").isJsonNull()) {
        JsonArray jsonArrayhavingArray = jsonObj.getAsJsonArray("having_array");
        if (jsonArrayhavingArray != null) {
          // ensure the json data is an array
          if (!jsonObj.get("having_array").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `having_array` to be an array in the JSON string but got `%s`", jsonObj.get("having_array").toString()));
          }

          // validate the optional field `having_array` (array)
          for (int i = 0; i < jsonArrayhavingArray.size(); i++) {
            Reportsv3ReportAggFilter.validateJsonElement(jsonArrayhavingArray.get(i));
          };
        }
      }
      // validate the optional field `option_type`
      if (jsonObj.get("option_type") != null && !jsonObj.get("option_type").isJsonNull()) {
        Reportsv3OptionType.validateJsonElement(jsonObj.get("option_type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Reportsv3ReportFilterBrackets.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Reportsv3ReportFilterBrackets' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Reportsv3ReportFilterBrackets> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Reportsv3ReportFilterBrackets.class));

       return (TypeAdapter<T>) new TypeAdapter<Reportsv3ReportFilterBrackets>() {
           @Override
           public void write(JsonWriter out, Reportsv3ReportFilterBrackets value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Reportsv3ReportFilterBrackets read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Reportsv3ReportFilterBrackets given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Reportsv3ReportFilterBrackets
  * @throws IOException if the JSON string is invalid with respect to Reportsv3ReportFilterBrackets
  */
  public static Reportsv3ReportFilterBrackets fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Reportsv3ReportFilterBrackets.class);
  }

 /**
  * Convert an instance of Reportsv3ReportFilterBrackets to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

