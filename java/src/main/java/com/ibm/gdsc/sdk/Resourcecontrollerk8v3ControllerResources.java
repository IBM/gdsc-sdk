/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.JSON;

/**
 * ControllerResources contains the information about a controller&#39;s resources.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-11T14:56:28.892451Z[UTC]", comments = "Generator version: 7.6.0")
public class Resourcecontrollerk8v3ControllerResources {
  public static final String SERIALIZED_NAME_ALLOCATABLE = "allocatable";
  @SerializedName(SERIALIZED_NAME_ALLOCATABLE)
  private Map<String, String> allocatable = new HashMap<>();

  public static final String SERIALIZED_NAME_NODE = "node";
  @SerializedName(SERIALIZED_NAME_NODE)
  private String node;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private String timestamp;

  public static final String SERIALIZED_NAME_USAGE = "usage";
  @SerializedName(SERIALIZED_NAME_USAGE)
  private Map<String, String> usage = new HashMap<>();

  public static final String SERIALIZED_NAME_WINDOW = "window";
  @SerializedName(SERIALIZED_NAME_WINDOW)
  private String window;

  public Resourcecontrollerk8v3ControllerResources() {
  }

  public Resourcecontrollerk8v3ControllerResources allocatable(Map<String, String> allocatable) {
    this.allocatable = allocatable;
    return this;
  }

  public Resourcecontrollerk8v3ControllerResources putAllocatableItem(String key, String allocatableItem) {
    if (this.allocatable == null) {
      this.allocatable = new HashMap<>();
    }
    this.allocatable.put(key, allocatableItem);
    return this;
  }

   /**
   * The allocatable resources for the controller.
   * @return allocatable
  **/
  @javax.annotation.Nullable
  public Map<String, String> getAllocatable() {
    return allocatable;
  }

  public void setAllocatable(Map<String, String> allocatable) {
    this.allocatable = allocatable;
  }


  public Resourcecontrollerk8v3ControllerResources node(String node) {
    this.node = node;
    return this;
  }

   /**
   * The node where the controller is.
   * @return node
  **/
  @javax.annotation.Nullable
  public String getNode() {
    return node;
  }

  public void setNode(String node) {
    this.node = node;
  }


  public Resourcecontrollerk8v3ControllerResources timestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * The date this controller resource was queried.
   * @return timestamp
  **/
  @javax.annotation.Nullable
  public String getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }


  public Resourcecontrollerk8v3ControllerResources usage(Map<String, String> usage) {
    this.usage = usage;
    return this;
  }

  public Resourcecontrollerk8v3ControllerResources putUsageItem(String key, String usageItem) {
    if (this.usage == null) {
      this.usage = new HashMap<>();
    }
    this.usage.put(key, usageItem);
    return this;
  }

   /**
   * The CPU and memory usage.
   * @return usage
  **/
  @javax.annotation.Nullable
  public Map<String, String> getUsage() {
    return usage;
  }

  public void setUsage(Map<String, String> usage) {
    this.usage = usage;
  }


  public Resourcecontrollerk8v3ControllerResources window(String window) {
    this.window = window;
    return this;
  }

   /**
   * The duration this controller resource was collected (in seconds).
   * @return window
  **/
  @javax.annotation.Nullable
  public String getWindow() {
    return window;
  }

  public void setWindow(String window) {
    this.window = window;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Resourcecontrollerk8v3ControllerResources resourcecontrollerk8v3ControllerResources = (Resourcecontrollerk8v3ControllerResources) o;
    return Objects.equals(this.allocatable, resourcecontrollerk8v3ControllerResources.allocatable) &&
        Objects.equals(this.node, resourcecontrollerk8v3ControllerResources.node) &&
        Objects.equals(this.timestamp, resourcecontrollerk8v3ControllerResources.timestamp) &&
        Objects.equals(this.usage, resourcecontrollerk8v3ControllerResources.usage) &&
        Objects.equals(this.window, resourcecontrollerk8v3ControllerResources.window);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allocatable, node, timestamp, usage, window);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Resourcecontrollerk8v3ControllerResources {\n");
    sb.append("    allocatable: ").append(toIndentedString(allocatable)).append("\n");
    sb.append("    node: ").append(toIndentedString(node)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    usage: ").append(toIndentedString(usage)).append("\n");
    sb.append("    window: ").append(toIndentedString(window)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allocatable");
    openapiFields.add("node");
    openapiFields.add("timestamp");
    openapiFields.add("usage");
    openapiFields.add("window");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Resourcecontrollerk8v3ControllerResources
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Resourcecontrollerk8v3ControllerResources.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Resourcecontrollerk8v3ControllerResources is not found in the empty JSON string", Resourcecontrollerk8v3ControllerResources.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Resourcecontrollerk8v3ControllerResources.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Resourcecontrollerk8v3ControllerResources` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("node") != null && !jsonObj.get("node").isJsonNull()) && !jsonObj.get("node").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node").toString()));
      }
      if ((jsonObj.get("timestamp") != null && !jsonObj.get("timestamp").isJsonNull()) && !jsonObj.get("timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestamp").toString()));
      }
      if ((jsonObj.get("window") != null && !jsonObj.get("window").isJsonNull()) && !jsonObj.get("window").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `window` to be a primitive type in the JSON string but got `%s`", jsonObj.get("window").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Resourcecontrollerk8v3ControllerResources.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Resourcecontrollerk8v3ControllerResources' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Resourcecontrollerk8v3ControllerResources> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Resourcecontrollerk8v3ControllerResources.class));

       return (TypeAdapter<T>) new TypeAdapter<Resourcecontrollerk8v3ControllerResources>() {
           @Override
           public void write(JsonWriter out, Resourcecontrollerk8v3ControllerResources value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Resourcecontrollerk8v3ControllerResources read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Resourcecontrollerk8v3ControllerResources given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Resourcecontrollerk8v3ControllerResources
  * @throws IOException if the JSON string is invalid with respect to Resourcecontrollerk8v3ControllerResources
  */
  public static Resourcecontrollerk8v3ControllerResources fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Resourcecontrollerk8v3ControllerResources.class);
  }

 /**
  * Convert an instance of Resourcecontrollerk8v3ControllerResources to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

