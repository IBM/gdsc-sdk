/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.gdsc.sdk.models.RpcStatus;
import com.ibm.gdsc.sdk.models.Templatesv3Template;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.sdk.JSON;

/**
 * The templates that match the specified criteria; an empty array is returned if no templates match.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-07T13:24:05.648078332-08:00[America/Los_Angeles]", comments = "Generator version: 7.6.0")
public class Templatesv3GetTemplatesResponse {
  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private RpcStatus status;

  public static final String SERIALIZED_NAME_TEMPLATE = "template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  private List<Templatesv3Template> template = new ArrayList<>();

  public Templatesv3GetTemplatesResponse() {
  }

  public Templatesv3GetTemplatesResponse status(RpcStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  public RpcStatus getStatus() {
    return status;
  }

  public void setStatus(RpcStatus status) {
    this.status = status;
  }


  public Templatesv3GetTemplatesResponse template(List<Templatesv3Template> template) {
    this.template = template;
    return this;
  }

  public Templatesv3GetTemplatesResponse addTemplateItem(Templatesv3Template templateItem) {
    if (this.template == null) {
      this.template = new ArrayList<>();
    }
    this.template.add(templateItem);
    return this;
  }

   /**
   * List of templates that match the specified filters.
   * @return template
  **/
  @javax.annotation.Nullable
  public List<Templatesv3Template> getTemplate() {
    return template;
  }

  public void setTemplate(List<Templatesv3Template> template) {
    this.template = template;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Templatesv3GetTemplatesResponse templatesv3GetTemplatesResponse = (Templatesv3GetTemplatesResponse) o;
    return Objects.equals(this.status, templatesv3GetTemplatesResponse.status) &&
        Objects.equals(this.template, templatesv3GetTemplatesResponse.template);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, template);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Templatesv3GetTemplatesResponse {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("status");
    openapiFields.add("template");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Templatesv3GetTemplatesResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Templatesv3GetTemplatesResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Templatesv3GetTemplatesResponse is not found in the empty JSON string", Templatesv3GetTemplatesResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Templatesv3GetTemplatesResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Templatesv3GetTemplatesResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        RpcStatus.validateJsonElement(jsonObj.get("status"));
      }
      if (jsonObj.get("template") != null && !jsonObj.get("template").isJsonNull()) {
        JsonArray jsonArraytemplate = jsonObj.getAsJsonArray("template");
        if (jsonArraytemplate != null) {
          // ensure the json data is an array
          if (!jsonObj.get("template").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `template` to be an array in the JSON string but got `%s`", jsonObj.get("template").toString()));
          }

          // validate the optional field `template` (array)
          for (int i = 0; i < jsonArraytemplate.size(); i++) {
            Templatesv3Template.validateJsonElement(jsonArraytemplate.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Templatesv3GetTemplatesResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Templatesv3GetTemplatesResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Templatesv3GetTemplatesResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Templatesv3GetTemplatesResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<Templatesv3GetTemplatesResponse>() {
           @Override
           public void write(JsonWriter out, Templatesv3GetTemplatesResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Templatesv3GetTemplatesResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Templatesv3GetTemplatesResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Templatesv3GetTemplatesResponse
  * @throws IOException if the JSON string is invalid with respect to Templatesv3GetTemplatesResponse
  */
  public static Templatesv3GetTemplatesResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Templatesv3GetTemplatesResponse.class);
  }

 /**
  * Convert an instance of Templatesv3GetTemplatesResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

