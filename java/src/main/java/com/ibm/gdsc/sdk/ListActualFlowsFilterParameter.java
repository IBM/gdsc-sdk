/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.gdsc.sdk.AccessType;
import com.ibm.gdsc.sdk.CloudServiceProvider;
import com.ibm.gdsc.sdk.Comparator;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.JSON;

/**
 * ListActualFlowsFilterParameter
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-15T03:58:58.617687Z[UTC]", comments = "Generator version: 7.6.0")
public class ListActualFlowsFilterParameter {
  public static final String SERIALIZED_NAME_SOURCE_IDS = "sourceIds";
  @SerializedName(SERIALIZED_NAME_SOURCE_IDS)
  private List<String> sourceIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE_TYPES = "sourceTypes";
  @SerializedName(SERIALIZED_NAME_SOURCE_TYPES)
  private List<String> sourceTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE_CLOUD_ACCOUNT_IDS = "sourceCloudAccountIds";
  @SerializedName(SERIALIZED_NAME_SOURCE_CLOUD_ACCOUNT_IDS)
  private List<String> sourceCloudAccountIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE_CLOUD_REGIONS = "sourceCloudRegions";
  @SerializedName(SERIALIZED_NAME_SOURCE_CLOUD_REGIONS)
  private List<String> sourceCloudRegions = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE_CLOUD_PROVIDERS = "sourceCloudProviders";
  @SerializedName(SERIALIZED_NAME_SOURCE_CLOUD_PROVIDERS)
  private List<CloudServiceProvider> sourceCloudProviders = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESTINATION_IDS = "destinationIds";
  @SerializedName(SERIALIZED_NAME_DESTINATION_IDS)
  private List<String> destinationIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESTINATION_TYPES = "destinationTypes";
  @SerializedName(SERIALIZED_NAME_DESTINATION_TYPES)
  private List<String> destinationTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESTINATION_CLOUD_ACCOUNT_IDS = "destinationCloudAccountIds";
  @SerializedName(SERIALIZED_NAME_DESTINATION_CLOUD_ACCOUNT_IDS)
  private List<String> destinationCloudAccountIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESTINATION_CLOUD_REGIONS = "destinationCloudRegions";
  @SerializedName(SERIALIZED_NAME_DESTINATION_CLOUD_REGIONS)
  private List<String> destinationCloudRegions = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESTINATION_CLOUD_PROVIDERS = "destinationCloudProviders";
  @SerializedName(SERIALIZED_NAME_DESTINATION_CLOUD_PROVIDERS)
  private List<CloudServiceProvider> destinationCloudProviders = new ArrayList<>();

  public static final String SERIALIZED_NAME_ACCESS_TYPES = "accessTypes";
  @SerializedName(SERIALIZED_NAME_ACCESS_TYPES)
  private List<AccessType> accessTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAST_SEEN = "lastSeen";
  @SerializedName(SERIALIZED_NAME_LAST_SEEN)
  private Comparator lastSeen;

  public static final String SERIALIZED_NAME_FIRST_SEEN = "firstSeen";
  @SerializedName(SERIALIZED_NAME_FIRST_SEEN)
  private Comparator firstSeen;

  public ListActualFlowsFilterParameter() {
  }

  public ListActualFlowsFilterParameter sourceIds(List<String> sourceIds) {
    this.sourceIds = sourceIds;
    return this;
  }

  public ListActualFlowsFilterParameter addSourceIdsItem(String sourceIdsItem) {
    if (this.sourceIds == null) {
      this.sourceIds = new ArrayList<>();
    }
    this.sourceIds.add(sourceIdsItem);
    return this;
  }

   /**
   * Get sourceIds
   * @return sourceIds
  **/
  @javax.annotation.Nullable
  public List<String> getSourceIds() {
    return sourceIds;
  }

  public void setSourceIds(List<String> sourceIds) {
    this.sourceIds = sourceIds;
  }


  public ListActualFlowsFilterParameter sourceTypes(List<String> sourceTypes) {
    this.sourceTypes = sourceTypes;
    return this;
  }

  public ListActualFlowsFilterParameter addSourceTypesItem(String sourceTypesItem) {
    if (this.sourceTypes == null) {
      this.sourceTypes = new ArrayList<>();
    }
    this.sourceTypes.add(sourceTypesItem);
    return this;
  }

   /**
   * Get sourceTypes
   * @return sourceTypes
  **/
  @javax.annotation.Nullable
  public List<String> getSourceTypes() {
    return sourceTypes;
  }

  public void setSourceTypes(List<String> sourceTypes) {
    this.sourceTypes = sourceTypes;
  }


  public ListActualFlowsFilterParameter sourceCloudAccountIds(List<String> sourceCloudAccountIds) {
    this.sourceCloudAccountIds = sourceCloudAccountIds;
    return this;
  }

  public ListActualFlowsFilterParameter addSourceCloudAccountIdsItem(String sourceCloudAccountIdsItem) {
    if (this.sourceCloudAccountIds == null) {
      this.sourceCloudAccountIds = new ArrayList<>();
    }
    this.sourceCloudAccountIds.add(sourceCloudAccountIdsItem);
    return this;
  }

   /**
   * Get sourceCloudAccountIds
   * @return sourceCloudAccountIds
  **/
  @javax.annotation.Nullable
  public List<String> getSourceCloudAccountIds() {
    return sourceCloudAccountIds;
  }

  public void setSourceCloudAccountIds(List<String> sourceCloudAccountIds) {
    this.sourceCloudAccountIds = sourceCloudAccountIds;
  }


  public ListActualFlowsFilterParameter sourceCloudRegions(List<String> sourceCloudRegions) {
    this.sourceCloudRegions = sourceCloudRegions;
    return this;
  }

  public ListActualFlowsFilterParameter addSourceCloudRegionsItem(String sourceCloudRegionsItem) {
    if (this.sourceCloudRegions == null) {
      this.sourceCloudRegions = new ArrayList<>();
    }
    this.sourceCloudRegions.add(sourceCloudRegionsItem);
    return this;
  }

   /**
   * Get sourceCloudRegions
   * @return sourceCloudRegions
  **/
  @javax.annotation.Nullable
  public List<String> getSourceCloudRegions() {
    return sourceCloudRegions;
  }

  public void setSourceCloudRegions(List<String> sourceCloudRegions) {
    this.sourceCloudRegions = sourceCloudRegions;
  }


  public ListActualFlowsFilterParameter sourceCloudProviders(List<CloudServiceProvider> sourceCloudProviders) {
    this.sourceCloudProviders = sourceCloudProviders;
    return this;
  }

  public ListActualFlowsFilterParameter addSourceCloudProvidersItem(CloudServiceProvider sourceCloudProvidersItem) {
    if (this.sourceCloudProviders == null) {
      this.sourceCloudProviders = new ArrayList<>();
    }
    this.sourceCloudProviders.add(sourceCloudProvidersItem);
    return this;
  }

   /**
   * Get sourceCloudProviders
   * @return sourceCloudProviders
  **/
  @javax.annotation.Nullable
  public List<CloudServiceProvider> getSourceCloudProviders() {
    return sourceCloudProviders;
  }

  public void setSourceCloudProviders(List<CloudServiceProvider> sourceCloudProviders) {
    this.sourceCloudProviders = sourceCloudProviders;
  }


  public ListActualFlowsFilterParameter destinationIds(List<String> destinationIds) {
    this.destinationIds = destinationIds;
    return this;
  }

  public ListActualFlowsFilterParameter addDestinationIdsItem(String destinationIdsItem) {
    if (this.destinationIds == null) {
      this.destinationIds = new ArrayList<>();
    }
    this.destinationIds.add(destinationIdsItem);
    return this;
  }

   /**
   * Get destinationIds
   * @return destinationIds
  **/
  @javax.annotation.Nullable
  public List<String> getDestinationIds() {
    return destinationIds;
  }

  public void setDestinationIds(List<String> destinationIds) {
    this.destinationIds = destinationIds;
  }


  public ListActualFlowsFilterParameter destinationTypes(List<String> destinationTypes) {
    this.destinationTypes = destinationTypes;
    return this;
  }

  public ListActualFlowsFilterParameter addDestinationTypesItem(String destinationTypesItem) {
    if (this.destinationTypes == null) {
      this.destinationTypes = new ArrayList<>();
    }
    this.destinationTypes.add(destinationTypesItem);
    return this;
  }

   /**
   * Get destinationTypes
   * @return destinationTypes
  **/
  @javax.annotation.Nullable
  public List<String> getDestinationTypes() {
    return destinationTypes;
  }

  public void setDestinationTypes(List<String> destinationTypes) {
    this.destinationTypes = destinationTypes;
  }


  public ListActualFlowsFilterParameter destinationCloudAccountIds(List<String> destinationCloudAccountIds) {
    this.destinationCloudAccountIds = destinationCloudAccountIds;
    return this;
  }

  public ListActualFlowsFilterParameter addDestinationCloudAccountIdsItem(String destinationCloudAccountIdsItem) {
    if (this.destinationCloudAccountIds == null) {
      this.destinationCloudAccountIds = new ArrayList<>();
    }
    this.destinationCloudAccountIds.add(destinationCloudAccountIdsItem);
    return this;
  }

   /**
   * Get destinationCloudAccountIds
   * @return destinationCloudAccountIds
  **/
  @javax.annotation.Nullable
  public List<String> getDestinationCloudAccountIds() {
    return destinationCloudAccountIds;
  }

  public void setDestinationCloudAccountIds(List<String> destinationCloudAccountIds) {
    this.destinationCloudAccountIds = destinationCloudAccountIds;
  }


  public ListActualFlowsFilterParameter destinationCloudRegions(List<String> destinationCloudRegions) {
    this.destinationCloudRegions = destinationCloudRegions;
    return this;
  }

  public ListActualFlowsFilterParameter addDestinationCloudRegionsItem(String destinationCloudRegionsItem) {
    if (this.destinationCloudRegions == null) {
      this.destinationCloudRegions = new ArrayList<>();
    }
    this.destinationCloudRegions.add(destinationCloudRegionsItem);
    return this;
  }

   /**
   * Get destinationCloudRegions
   * @return destinationCloudRegions
  **/
  @javax.annotation.Nullable
  public List<String> getDestinationCloudRegions() {
    return destinationCloudRegions;
  }

  public void setDestinationCloudRegions(List<String> destinationCloudRegions) {
    this.destinationCloudRegions = destinationCloudRegions;
  }


  public ListActualFlowsFilterParameter destinationCloudProviders(List<CloudServiceProvider> destinationCloudProviders) {
    this.destinationCloudProviders = destinationCloudProviders;
    return this;
  }

  public ListActualFlowsFilterParameter addDestinationCloudProvidersItem(CloudServiceProvider destinationCloudProvidersItem) {
    if (this.destinationCloudProviders == null) {
      this.destinationCloudProviders = new ArrayList<>();
    }
    this.destinationCloudProviders.add(destinationCloudProvidersItem);
    return this;
  }

   /**
   * Get destinationCloudProviders
   * @return destinationCloudProviders
  **/
  @javax.annotation.Nullable
  public List<CloudServiceProvider> getDestinationCloudProviders() {
    return destinationCloudProviders;
  }

  public void setDestinationCloudProviders(List<CloudServiceProvider> destinationCloudProviders) {
    this.destinationCloudProviders = destinationCloudProviders;
  }


  public ListActualFlowsFilterParameter accessTypes(List<AccessType> accessTypes) {
    this.accessTypes = accessTypes;
    return this;
  }

  public ListActualFlowsFilterParameter addAccessTypesItem(AccessType accessTypesItem) {
    if (this.accessTypes == null) {
      this.accessTypes = new ArrayList<>();
    }
    this.accessTypes.add(accessTypesItem);
    return this;
  }

   /**
   * Get accessTypes
   * @return accessTypes
  **/
  @javax.annotation.Nullable
  public List<AccessType> getAccessTypes() {
    return accessTypes;
  }

  public void setAccessTypes(List<AccessType> accessTypes) {
    this.accessTypes = accessTypes;
  }


  public ListActualFlowsFilterParameter lastSeen(Comparator lastSeen) {
    this.lastSeen = lastSeen;
    return this;
  }

   /**
   * Get lastSeen
   * @return lastSeen
  **/
  @javax.annotation.Nullable
  public Comparator getLastSeen() {
    return lastSeen;
  }

  public void setLastSeen(Comparator lastSeen) {
    this.lastSeen = lastSeen;
  }


  public ListActualFlowsFilterParameter firstSeen(Comparator firstSeen) {
    this.firstSeen = firstSeen;
    return this;
  }

   /**
   * Get firstSeen
   * @return firstSeen
  **/
  @javax.annotation.Nullable
  public Comparator getFirstSeen() {
    return firstSeen;
  }

  public void setFirstSeen(Comparator firstSeen) {
    this.firstSeen = firstSeen;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListActualFlowsFilterParameter listActualFlowsFilterParameter = (ListActualFlowsFilterParameter) o;
    return Objects.equals(this.sourceIds, listActualFlowsFilterParameter.sourceIds) &&
        Objects.equals(this.sourceTypes, listActualFlowsFilterParameter.sourceTypes) &&
        Objects.equals(this.sourceCloudAccountIds, listActualFlowsFilterParameter.sourceCloudAccountIds) &&
        Objects.equals(this.sourceCloudRegions, listActualFlowsFilterParameter.sourceCloudRegions) &&
        Objects.equals(this.sourceCloudProviders, listActualFlowsFilterParameter.sourceCloudProviders) &&
        Objects.equals(this.destinationIds, listActualFlowsFilterParameter.destinationIds) &&
        Objects.equals(this.destinationTypes, listActualFlowsFilterParameter.destinationTypes) &&
        Objects.equals(this.destinationCloudAccountIds, listActualFlowsFilterParameter.destinationCloudAccountIds) &&
        Objects.equals(this.destinationCloudRegions, listActualFlowsFilterParameter.destinationCloudRegions) &&
        Objects.equals(this.destinationCloudProviders, listActualFlowsFilterParameter.destinationCloudProviders) &&
        Objects.equals(this.accessTypes, listActualFlowsFilterParameter.accessTypes) &&
        Objects.equals(this.lastSeen, listActualFlowsFilterParameter.lastSeen) &&
        Objects.equals(this.firstSeen, listActualFlowsFilterParameter.firstSeen);
  }

  @Override
  public int hashCode() {
    return Objects.hash(sourceIds, sourceTypes, sourceCloudAccountIds, sourceCloudRegions, sourceCloudProviders, destinationIds, destinationTypes, destinationCloudAccountIds, destinationCloudRegions, destinationCloudProviders, accessTypes, lastSeen, firstSeen);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListActualFlowsFilterParameter {\n");
    sb.append("    sourceIds: ").append(toIndentedString(sourceIds)).append("\n");
    sb.append("    sourceTypes: ").append(toIndentedString(sourceTypes)).append("\n");
    sb.append("    sourceCloudAccountIds: ").append(toIndentedString(sourceCloudAccountIds)).append("\n");
    sb.append("    sourceCloudRegions: ").append(toIndentedString(sourceCloudRegions)).append("\n");
    sb.append("    sourceCloudProviders: ").append(toIndentedString(sourceCloudProviders)).append("\n");
    sb.append("    destinationIds: ").append(toIndentedString(destinationIds)).append("\n");
    sb.append("    destinationTypes: ").append(toIndentedString(destinationTypes)).append("\n");
    sb.append("    destinationCloudAccountIds: ").append(toIndentedString(destinationCloudAccountIds)).append("\n");
    sb.append("    destinationCloudRegions: ").append(toIndentedString(destinationCloudRegions)).append("\n");
    sb.append("    destinationCloudProviders: ").append(toIndentedString(destinationCloudProviders)).append("\n");
    sb.append("    accessTypes: ").append(toIndentedString(accessTypes)).append("\n");
    sb.append("    lastSeen: ").append(toIndentedString(lastSeen)).append("\n");
    sb.append("    firstSeen: ").append(toIndentedString(firstSeen)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sourceIds");
    openapiFields.add("sourceTypes");
    openapiFields.add("sourceCloudAccountIds");
    openapiFields.add("sourceCloudRegions");
    openapiFields.add("sourceCloudProviders");
    openapiFields.add("destinationIds");
    openapiFields.add("destinationTypes");
    openapiFields.add("destinationCloudAccountIds");
    openapiFields.add("destinationCloudRegions");
    openapiFields.add("destinationCloudProviders");
    openapiFields.add("accessTypes");
    openapiFields.add("lastSeen");
    openapiFields.add("firstSeen");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ListActualFlowsFilterParameter
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListActualFlowsFilterParameter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListActualFlowsFilterParameter is not found in the empty JSON string", ListActualFlowsFilterParameter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListActualFlowsFilterParameter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListActualFlowsFilterParameter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("sourceIds") != null && !jsonObj.get("sourceIds").isJsonNull() && !jsonObj.get("sourceIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceIds` to be an array in the JSON string but got `%s`", jsonObj.get("sourceIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sourceTypes") != null && !jsonObj.get("sourceTypes").isJsonNull() && !jsonObj.get("sourceTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceTypes` to be an array in the JSON string but got `%s`", jsonObj.get("sourceTypes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sourceCloudAccountIds") != null && !jsonObj.get("sourceCloudAccountIds").isJsonNull() && !jsonObj.get("sourceCloudAccountIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceCloudAccountIds` to be an array in the JSON string but got `%s`", jsonObj.get("sourceCloudAccountIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sourceCloudRegions") != null && !jsonObj.get("sourceCloudRegions").isJsonNull() && !jsonObj.get("sourceCloudRegions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceCloudRegions` to be an array in the JSON string but got `%s`", jsonObj.get("sourceCloudRegions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sourceCloudProviders") != null && !jsonObj.get("sourceCloudProviders").isJsonNull() && !jsonObj.get("sourceCloudProviders").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceCloudProviders` to be an array in the JSON string but got `%s`", jsonObj.get("sourceCloudProviders").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("destinationIds") != null && !jsonObj.get("destinationIds").isJsonNull() && !jsonObj.get("destinationIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationIds` to be an array in the JSON string but got `%s`", jsonObj.get("destinationIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("destinationTypes") != null && !jsonObj.get("destinationTypes").isJsonNull() && !jsonObj.get("destinationTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationTypes` to be an array in the JSON string but got `%s`", jsonObj.get("destinationTypes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("destinationCloudAccountIds") != null && !jsonObj.get("destinationCloudAccountIds").isJsonNull() && !jsonObj.get("destinationCloudAccountIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationCloudAccountIds` to be an array in the JSON string but got `%s`", jsonObj.get("destinationCloudAccountIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("destinationCloudRegions") != null && !jsonObj.get("destinationCloudRegions").isJsonNull() && !jsonObj.get("destinationCloudRegions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationCloudRegions` to be an array in the JSON string but got `%s`", jsonObj.get("destinationCloudRegions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("destinationCloudProviders") != null && !jsonObj.get("destinationCloudProviders").isJsonNull() && !jsonObj.get("destinationCloudProviders").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationCloudProviders` to be an array in the JSON string but got `%s`", jsonObj.get("destinationCloudProviders").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("accessTypes") != null && !jsonObj.get("accessTypes").isJsonNull() && !jsonObj.get("accessTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessTypes` to be an array in the JSON string but got `%s`", jsonObj.get("accessTypes").toString()));
      }
      // validate the optional field `lastSeen`
      if (jsonObj.get("lastSeen") != null && !jsonObj.get("lastSeen").isJsonNull()) {
        Comparator.validateJsonElement(jsonObj.get("lastSeen"));
      }
      // validate the optional field `firstSeen`
      if (jsonObj.get("firstSeen") != null && !jsonObj.get("firstSeen").isJsonNull()) {
        Comparator.validateJsonElement(jsonObj.get("firstSeen"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListActualFlowsFilterParameter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListActualFlowsFilterParameter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListActualFlowsFilterParameter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListActualFlowsFilterParameter.class));

       return (TypeAdapter<T>) new TypeAdapter<ListActualFlowsFilterParameter>() {
           @Override
           public void write(JsonWriter out, ListActualFlowsFilterParameter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListActualFlowsFilterParameter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ListActualFlowsFilterParameter given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ListActualFlowsFilterParameter
  * @throws IOException if the JSON string is invalid with respect to ListActualFlowsFilterParameter
  */
  public static ListActualFlowsFilterParameter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListActualFlowsFilterParameter.class);
  }

 /**
  * Convert an instance of ListActualFlowsFilterParameter to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

