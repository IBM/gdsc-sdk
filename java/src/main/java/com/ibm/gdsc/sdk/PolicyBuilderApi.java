/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import com.ibm.gdsc.ApiCallback;
import com.ibm.gdsc.ApiClient;
import com.ibm.gdsc.ApiException;
import com.ibm.gdsc.ApiResponse;
import com.ibm.gdsc.Configuration;
import com.ibm.gdsc.Pair;
import com.ibm.gdsc.ProgressRequestBody;
import com.ibm.gdsc.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ibm.gdsc.sdk.Policybuilderv3ClonePolicyRequest;
import com.ibm.gdsc.sdk.Policybuilderv3CreateUpdatePolicyRequest;
import com.ibm.gdsc.sdk.Policybuilderv3CreateUpdatePolicyResponse;
import com.ibm.gdsc.sdk.Policybuilderv3DeleteGdpPolicySyncResponse;
import com.ibm.gdsc.sdk.Policybuilderv3GetGdpPolicyMetaDataResponse;
import com.ibm.gdsc.sdk.Policybuilderv3GetIntegrationCheckResponse;
import com.ibm.gdsc.sdk.Policybuilderv3GetPoliciesGroupsResponse;
import com.ibm.gdsc.sdk.Policybuilderv3GetPoliciesResponse;
import com.ibm.gdsc.sdk.Policybuilderv3GetPolicyDetailsResponse;
import com.ibm.gdsc.sdk.Policybuilderv3GetPolicyNamesFromRuleIDsRequest;
import com.ibm.gdsc.sdk.Policybuilderv3GetPolicyNamesFromRuleIDsResponse;
import com.ibm.gdsc.sdk.Policybuilderv3GetPolicySyncListResponse;
import com.ibm.gdsc.sdk.Policybuilderv3GetReceiversResponse;
import com.ibm.gdsc.sdk.Policybuilderv3GetRuleValidationRequest;
import com.ibm.gdsc.sdk.Policybuilderv3InsertGdpPolicyMetaDataRequest;
import com.ibm.gdsc.sdk.Policybuilderv3InsertGdpPolicyMetaDataResponse;
import com.ibm.gdsc.sdk.Policybuilderv3InsertGdpPolicySyncRequest;
import com.ibm.gdsc.sdk.Policybuilderv3InsertGdpPolicySyncResponse;
import com.ibm.gdsc.sdk.Policybuilderv3InstallPoliciesRequest;
import com.ibm.gdsc.sdk.Policybuilderv3RuleMetadataResponse;
import com.ibm.gdsc.sdk.Policybuilderv3StandardCRUDResponse;
import com.ibm.gdsc.sdk.Policybuilderv3StatusResponseBase;
import com.ibm.gdsc.sdk.Policybuilderv3StorePolicyGdpRequest;
import com.ibm.gdsc.sdk.Policybuilderv3StorePolicyGdpResponse;
import com.ibm.gdsc.sdk.RuntimeError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PolicyBuilderApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PolicyBuilderApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PolicyBuilderApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for policyBuilderClonePolicy
     * @param policyId Policy id that needs to be cloned. (required)
     * @param policybuilderv3ClonePolicyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyBuilderClonePolicyCall(String policyId, Policybuilderv3ClonePolicyRequest policybuilderv3ClonePolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = policybuilderv3ClonePolicyRequest;

        // create path and map variables
        String localVarPath = "/api/v3/policies/clone/{policy_id}"
            .replace("{" + "policy_id" + "}", localVarApiClient.escapeString(policyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyBuilderClonePolicyValidateBeforeCall(String policyId, Policybuilderv3ClonePolicyRequest policybuilderv3ClonePolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling policyBuilderClonePolicy(Async)");
        }

        // verify the required parameter 'policybuilderv3ClonePolicyRequest' is set
        if (policybuilderv3ClonePolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'policybuilderv3ClonePolicyRequest' when calling policyBuilderClonePolicy(Async)");
        }

        return policyBuilderClonePolicyCall(policyId, policybuilderv3ClonePolicyRequest, _callback);

    }

    /**
     * Summary: Clone policy Description: Clone a policy.
     * 
     * @param policyId Policy id that needs to be cloned. (required)
     * @param policybuilderv3ClonePolicyRequest  (required)
     * @return Policybuilderv3StandardCRUDResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Policybuilderv3StandardCRUDResponse policyBuilderClonePolicy(String policyId, Policybuilderv3ClonePolicyRequest policybuilderv3ClonePolicyRequest) throws ApiException {
        ApiResponse<Policybuilderv3StandardCRUDResponse> localVarResp = policyBuilderClonePolicyWithHttpInfo(policyId, policybuilderv3ClonePolicyRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Clone policy Description: Clone a policy.
     * 
     * @param policyId Policy id that needs to be cloned. (required)
     * @param policybuilderv3ClonePolicyRequest  (required)
     * @return ApiResponse&lt;Policybuilderv3StandardCRUDResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Policybuilderv3StandardCRUDResponse> policyBuilderClonePolicyWithHttpInfo(String policyId, Policybuilderv3ClonePolicyRequest policybuilderv3ClonePolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = policyBuilderClonePolicyValidateBeforeCall(policyId, policybuilderv3ClonePolicyRequest, null);
        Type localVarReturnType = new TypeToken<Policybuilderv3StandardCRUDResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Clone policy Description: Clone a policy. (asynchronously)
     * 
     * @param policyId Policy id that needs to be cloned. (required)
     * @param policybuilderv3ClonePolicyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyBuilderClonePolicyAsync(String policyId, Policybuilderv3ClonePolicyRequest policybuilderv3ClonePolicyRequest, final ApiCallback<Policybuilderv3StandardCRUDResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyBuilderClonePolicyValidateBeforeCall(policyId, policybuilderv3ClonePolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<Policybuilderv3StandardCRUDResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policyBuilderCreatePolicy
     * @param policybuilderv3CreateUpdatePolicyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyBuilderCreatePolicyCall(Policybuilderv3CreateUpdatePolicyRequest policybuilderv3CreateUpdatePolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = policybuilderv3CreateUpdatePolicyRequest;

        // create path and map variables
        String localVarPath = "/api/v3/policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyBuilderCreatePolicyValidateBeforeCall(Policybuilderv3CreateUpdatePolicyRequest policybuilderv3CreateUpdatePolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policybuilderv3CreateUpdatePolicyRequest' is set
        if (policybuilderv3CreateUpdatePolicyRequest == null) {
            throw new ApiException("Missing the required parameter 'policybuilderv3CreateUpdatePolicyRequest' when calling policyBuilderCreatePolicy(Async)");
        }

        return policyBuilderCreatePolicyCall(policybuilderv3CreateUpdatePolicyRequest, _callback);

    }

    /**
     * Summary: Create policy Description: Create Policy returns response code and message.
     * 
     * @param policybuilderv3CreateUpdatePolicyRequest  (required)
     * @return Policybuilderv3CreateUpdatePolicyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Policybuilderv3CreateUpdatePolicyResponse policyBuilderCreatePolicy(Policybuilderv3CreateUpdatePolicyRequest policybuilderv3CreateUpdatePolicyRequest) throws ApiException {
        ApiResponse<Policybuilderv3CreateUpdatePolicyResponse> localVarResp = policyBuilderCreatePolicyWithHttpInfo(policybuilderv3CreateUpdatePolicyRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Create policy Description: Create Policy returns response code and message.
     * 
     * @param policybuilderv3CreateUpdatePolicyRequest  (required)
     * @return ApiResponse&lt;Policybuilderv3CreateUpdatePolicyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Policybuilderv3CreateUpdatePolicyResponse> policyBuilderCreatePolicyWithHttpInfo(Policybuilderv3CreateUpdatePolicyRequest policybuilderv3CreateUpdatePolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = policyBuilderCreatePolicyValidateBeforeCall(policybuilderv3CreateUpdatePolicyRequest, null);
        Type localVarReturnType = new TypeToken<Policybuilderv3CreateUpdatePolicyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Create policy Description: Create Policy returns response code and message. (asynchronously)
     * 
     * @param policybuilderv3CreateUpdatePolicyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyBuilderCreatePolicyAsync(Policybuilderv3CreateUpdatePolicyRequest policybuilderv3CreateUpdatePolicyRequest, final ApiCallback<Policybuilderv3CreateUpdatePolicyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyBuilderCreatePolicyValidateBeforeCall(policybuilderv3CreateUpdatePolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<Policybuilderv3CreateUpdatePolicyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policyBuilderDeleteGdpSyncEntry
     * @param syncIds Policy sync entry id to delete from sync. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyBuilderDeleteGdpSyncEntryCall(List<String> syncIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/policies/sync_entry";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (syncIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sync_ids", syncIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyBuilderDeleteGdpSyncEntryValidateBeforeCall(List<String> syncIds, final ApiCallback _callback) throws ApiException {
        return policyBuilderDeleteGdpSyncEntryCall(syncIds, _callback);

    }

    /**
     * Summary: Delete GDP policy sync entry Description: Deletes GDP policy from sync collection
     * 
     * @param syncIds Policy sync entry id to delete from sync. (optional)
     * @return Policybuilderv3DeleteGdpPolicySyncResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Policybuilderv3DeleteGdpPolicySyncResponse policyBuilderDeleteGdpSyncEntry(List<String> syncIds) throws ApiException {
        ApiResponse<Policybuilderv3DeleteGdpPolicySyncResponse> localVarResp = policyBuilderDeleteGdpSyncEntryWithHttpInfo(syncIds);
        return localVarResp.getData();
    }

    /**
     * Summary: Delete GDP policy sync entry Description: Deletes GDP policy from sync collection
     * 
     * @param syncIds Policy sync entry id to delete from sync. (optional)
     * @return ApiResponse&lt;Policybuilderv3DeleteGdpPolicySyncResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Policybuilderv3DeleteGdpPolicySyncResponse> policyBuilderDeleteGdpSyncEntryWithHttpInfo(List<String> syncIds) throws ApiException {
        okhttp3.Call localVarCall = policyBuilderDeleteGdpSyncEntryValidateBeforeCall(syncIds, null);
        Type localVarReturnType = new TypeToken<Policybuilderv3DeleteGdpPolicySyncResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Delete GDP policy sync entry Description: Deletes GDP policy from sync collection (asynchronously)
     * 
     * @param syncIds Policy sync entry id to delete from sync. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyBuilderDeleteGdpSyncEntryAsync(List<String> syncIds, final ApiCallback<Policybuilderv3DeleteGdpPolicySyncResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyBuilderDeleteGdpSyncEntryValidateBeforeCall(syncIds, _callback);
        Type localVarReturnType = new TypeToken<Policybuilderv3DeleteGdpPolicySyncResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policyBuilderDeletePolicies
     * @param policyIds Policy ids. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyBuilderDeletePoliciesCall(List<String> policyIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (policyIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "policy_ids", policyIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyBuilderDeletePoliciesValidateBeforeCall(List<String> policyIds, final ApiCallback _callback) throws ApiException {
        return policyBuilderDeletePoliciesCall(policyIds, _callback);

    }

    /**
     * Summary: Delete policies Description: Delete Policy returns response code and message.
     * 
     * @param policyIds Policy ids. (optional)
     * @return Policybuilderv3StandardCRUDResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Policybuilderv3StandardCRUDResponse policyBuilderDeletePolicies(List<String> policyIds) throws ApiException {
        ApiResponse<Policybuilderv3StandardCRUDResponse> localVarResp = policyBuilderDeletePoliciesWithHttpInfo(policyIds);
        return localVarResp.getData();
    }

    /**
     * Summary: Delete policies Description: Delete Policy returns response code and message.
     * 
     * @param policyIds Policy ids. (optional)
     * @return ApiResponse&lt;Policybuilderv3StandardCRUDResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Policybuilderv3StandardCRUDResponse> policyBuilderDeletePoliciesWithHttpInfo(List<String> policyIds) throws ApiException {
        okhttp3.Call localVarCall = policyBuilderDeletePoliciesValidateBeforeCall(policyIds, null);
        Type localVarReturnType = new TypeToken<Policybuilderv3StandardCRUDResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Delete policies Description: Delete Policy returns response code and message. (asynchronously)
     * 
     * @param policyIds Policy ids. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyBuilderDeletePoliciesAsync(List<String> policyIds, final ApiCallback<Policybuilderv3StandardCRUDResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyBuilderDeletePoliciesValidateBeforeCall(policyIds, _callback);
        Type localVarReturnType = new TypeToken<Policybuilderv3StandardCRUDResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policyBuilderGetGdpPolicyMetaData
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyBuilderGetGdpPolicyMetaDataCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/policies/metadata_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyBuilderGetGdpPolicyMetaDataValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return policyBuilderGetGdpPolicyMetaDataCall(_callback);

    }

    /**
     * Summary: Get GDP policy summary information Description: Get GDP&#39;s CM&#39;s policy summary from mogodb
     * 
     * @return Policybuilderv3GetGdpPolicyMetaDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Policybuilderv3GetGdpPolicyMetaDataResponse policyBuilderGetGdpPolicyMetaData() throws ApiException {
        ApiResponse<Policybuilderv3GetGdpPolicyMetaDataResponse> localVarResp = policyBuilderGetGdpPolicyMetaDataWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Summary: Get GDP policy summary information Description: Get GDP&#39;s CM&#39;s policy summary from mogodb
     * 
     * @return ApiResponse&lt;Policybuilderv3GetGdpPolicyMetaDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Policybuilderv3GetGdpPolicyMetaDataResponse> policyBuilderGetGdpPolicyMetaDataWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = policyBuilderGetGdpPolicyMetaDataValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Policybuilderv3GetGdpPolicyMetaDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get GDP policy summary information Description: Get GDP&#39;s CM&#39;s policy summary from mogodb (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyBuilderGetGdpPolicyMetaDataAsync(final ApiCallback<Policybuilderv3GetGdpPolicyMetaDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyBuilderGetGdpPolicyMetaDataValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Policybuilderv3GetGdpPolicyMetaDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policyBuilderGetPolicies
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyBuilderGetPoliciesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyBuilderGetPoliciesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return policyBuilderGetPoliciesCall(_callback);

    }

    /**
     * Summary: Get policies Description: Return a list of policies to the caller.
     * 
     * @return Policybuilderv3GetPoliciesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Policybuilderv3GetPoliciesResponse policyBuilderGetPolicies() throws ApiException {
        ApiResponse<Policybuilderv3GetPoliciesResponse> localVarResp = policyBuilderGetPoliciesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Summary: Get policies Description: Return a list of policies to the caller.
     * 
     * @return ApiResponse&lt;Policybuilderv3GetPoliciesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Policybuilderv3GetPoliciesResponse> policyBuilderGetPoliciesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = policyBuilderGetPoliciesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Policybuilderv3GetPoliciesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get policies Description: Return a list of policies to the caller. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyBuilderGetPoliciesAsync(final ApiCallback<Policybuilderv3GetPoliciesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyBuilderGetPoliciesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Policybuilderv3GetPoliciesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policyBuilderGetPolicyDetails
     * @param policyId Policy id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyBuilderGetPolicyDetailsCall(String policyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/policies/{policy_id}/details"
            .replace("{" + "policy_id" + "}", localVarApiClient.escapeString(policyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyBuilderGetPolicyDetailsValidateBeforeCall(String policyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling policyBuilderGetPolicyDetails(Async)");
        }

        return policyBuilderGetPolicyDetailsCall(policyId, _callback);

    }

    /**
     * Summary: Get policy details Description: Return a list of rules inside the policy.
     * 
     * @param policyId Policy id. (required)
     * @return Policybuilderv3GetPolicyDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Policybuilderv3GetPolicyDetailsResponse policyBuilderGetPolicyDetails(String policyId) throws ApiException {
        ApiResponse<Policybuilderv3GetPolicyDetailsResponse> localVarResp = policyBuilderGetPolicyDetailsWithHttpInfo(policyId);
        return localVarResp.getData();
    }

    /**
     * Summary: Get policy details Description: Return a list of rules inside the policy.
     * 
     * @param policyId Policy id. (required)
     * @return ApiResponse&lt;Policybuilderv3GetPolicyDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Policybuilderv3GetPolicyDetailsResponse> policyBuilderGetPolicyDetailsWithHttpInfo(String policyId) throws ApiException {
        okhttp3.Call localVarCall = policyBuilderGetPolicyDetailsValidateBeforeCall(policyId, null);
        Type localVarReturnType = new TypeToken<Policybuilderv3GetPolicyDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get policy details Description: Return a list of rules inside the policy. (asynchronously)
     * 
     * @param policyId Policy id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyBuilderGetPolicyDetailsAsync(String policyId, final ApiCallback<Policybuilderv3GetPolicyDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyBuilderGetPolicyDetailsValidateBeforeCall(policyId, _callback);
        Type localVarReturnType = new TypeToken<Policybuilderv3GetPolicyDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policyBuilderGetPolicyNamesFromRuleIDs
     * @param policybuilderv3GetPolicyNamesFromRuleIDsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyBuilderGetPolicyNamesFromRuleIDsCall(Policybuilderv3GetPolicyNamesFromRuleIDsRequest policybuilderv3GetPolicyNamesFromRuleIDsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = policybuilderv3GetPolicyNamesFromRuleIDsRequest;

        // create path and map variables
        String localVarPath = "/api/v3/policies/policy_names";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyBuilderGetPolicyNamesFromRuleIDsValidateBeforeCall(Policybuilderv3GetPolicyNamesFromRuleIDsRequest policybuilderv3GetPolicyNamesFromRuleIDsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policybuilderv3GetPolicyNamesFromRuleIDsRequest' is set
        if (policybuilderv3GetPolicyNamesFromRuleIDsRequest == null) {
            throw new ApiException("Missing the required parameter 'policybuilderv3GetPolicyNamesFromRuleIDsRequest' when calling policyBuilderGetPolicyNamesFromRuleIDs(Async)");
        }

        return policyBuilderGetPolicyNamesFromRuleIDsCall(policybuilderv3GetPolicyNamesFromRuleIDsRequest, _callback);

    }

    /**
     * Summary: GetPolicy names from rule IDs Description: Return a map where the key is the rule ID and value is the policy name that has the rule ID.
     * 
     * @param policybuilderv3GetPolicyNamesFromRuleIDsRequest  (required)
     * @return Policybuilderv3GetPolicyNamesFromRuleIDsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Policybuilderv3GetPolicyNamesFromRuleIDsResponse policyBuilderGetPolicyNamesFromRuleIDs(Policybuilderv3GetPolicyNamesFromRuleIDsRequest policybuilderv3GetPolicyNamesFromRuleIDsRequest) throws ApiException {
        ApiResponse<Policybuilderv3GetPolicyNamesFromRuleIDsResponse> localVarResp = policyBuilderGetPolicyNamesFromRuleIDsWithHttpInfo(policybuilderv3GetPolicyNamesFromRuleIDsRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: GetPolicy names from rule IDs Description: Return a map where the key is the rule ID and value is the policy name that has the rule ID.
     * 
     * @param policybuilderv3GetPolicyNamesFromRuleIDsRequest  (required)
     * @return ApiResponse&lt;Policybuilderv3GetPolicyNamesFromRuleIDsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Policybuilderv3GetPolicyNamesFromRuleIDsResponse> policyBuilderGetPolicyNamesFromRuleIDsWithHttpInfo(Policybuilderv3GetPolicyNamesFromRuleIDsRequest policybuilderv3GetPolicyNamesFromRuleIDsRequest) throws ApiException {
        okhttp3.Call localVarCall = policyBuilderGetPolicyNamesFromRuleIDsValidateBeforeCall(policybuilderv3GetPolicyNamesFromRuleIDsRequest, null);
        Type localVarReturnType = new TypeToken<Policybuilderv3GetPolicyNamesFromRuleIDsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: GetPolicy names from rule IDs Description: Return a map where the key is the rule ID and value is the policy name that has the rule ID. (asynchronously)
     * 
     * @param policybuilderv3GetPolicyNamesFromRuleIDsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyBuilderGetPolicyNamesFromRuleIDsAsync(Policybuilderv3GetPolicyNamesFromRuleIDsRequest policybuilderv3GetPolicyNamesFromRuleIDsRequest, final ApiCallback<Policybuilderv3GetPolicyNamesFromRuleIDsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyBuilderGetPolicyNamesFromRuleIDsValidateBeforeCall(policybuilderv3GetPolicyNamesFromRuleIDsRequest, _callback);
        Type localVarReturnType = new TypeToken<Policybuilderv3GetPolicyNamesFromRuleIDsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policyBuilderGetPolicySyncList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyBuilderGetPolicySyncListCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/policies/sync_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyBuilderGetPolicySyncListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return policyBuilderGetPolicySyncListCall(_callback);

    }

    /**
     * Summary: Get list of synced polices Description: Returns the list and status of sync entries
     * 
     * @return Policybuilderv3GetPolicySyncListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Policybuilderv3GetPolicySyncListResponse policyBuilderGetPolicySyncList() throws ApiException {
        ApiResponse<Policybuilderv3GetPolicySyncListResponse> localVarResp = policyBuilderGetPolicySyncListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Summary: Get list of synced polices Description: Returns the list and status of sync entries
     * 
     * @return ApiResponse&lt;Policybuilderv3GetPolicySyncListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Policybuilderv3GetPolicySyncListResponse> policyBuilderGetPolicySyncListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = policyBuilderGetPolicySyncListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Policybuilderv3GetPolicySyncListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get list of synced polices Description: Returns the list and status of sync entries (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyBuilderGetPolicySyncListAsync(final ApiCallback<Policybuilderv3GetPolicySyncListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyBuilderGetPolicySyncListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Policybuilderv3GetPolicySyncListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policyBuilderGetReceivers
     * @param actionId Action id. (optional)
     * @param validateCache Flag that indicates if cache needs to be validated. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyBuilderGetReceiversCall(List<String> actionId, Boolean validateCache, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/policies/receivers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (actionId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "action_id", actionId));
        }

        if (validateCache != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validate_cache", validateCache));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyBuilderGetReceiversValidateBeforeCall(List<String> actionId, Boolean validateCache, final ApiCallback _callback) throws ApiException {
        return policyBuilderGetReceiversCall(actionId, validateCache, _callback);

    }

    /**
     * Summary: Get receivers Description: Get all the receivers associated with actions.
     * 
     * @param actionId Action id. (optional)
     * @param validateCache Flag that indicates if cache needs to be validated. (optional)
     * @return Policybuilderv3GetReceiversResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Policybuilderv3GetReceiversResponse policyBuilderGetReceivers(List<String> actionId, Boolean validateCache) throws ApiException {
        ApiResponse<Policybuilderv3GetReceiversResponse> localVarResp = policyBuilderGetReceiversWithHttpInfo(actionId, validateCache);
        return localVarResp.getData();
    }

    /**
     * Summary: Get receivers Description: Get all the receivers associated with actions.
     * 
     * @param actionId Action id. (optional)
     * @param validateCache Flag that indicates if cache needs to be validated. (optional)
     * @return ApiResponse&lt;Policybuilderv3GetReceiversResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Policybuilderv3GetReceiversResponse> policyBuilderGetReceiversWithHttpInfo(List<String> actionId, Boolean validateCache) throws ApiException {
        okhttp3.Call localVarCall = policyBuilderGetReceiversValidateBeforeCall(actionId, validateCache, null);
        Type localVarReturnType = new TypeToken<Policybuilderv3GetReceiversResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get receivers Description: Get all the receivers associated with actions. (asynchronously)
     * 
     * @param actionId Action id. (optional)
     * @param validateCache Flag that indicates if cache needs to be validated. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyBuilderGetReceiversAsync(List<String> actionId, Boolean validateCache, final ApiCallback<Policybuilderv3GetReceiversResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyBuilderGetReceiversValidateBeforeCall(actionId, validateCache, _callback);
        Type localVarReturnType = new TypeToken<Policybuilderv3GetReceiversResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policyBuilderGetRuleMetadata
     * @param ruleType Rule type integer to indicate rule type. (optional, default to ACCESS)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyBuilderGetRuleMetadataCall(String ruleType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/rules/metadata";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ruleType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rule_type", ruleType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyBuilderGetRuleMetadataValidateBeforeCall(String ruleType, final ApiCallback _callback) throws ApiException {
        return policyBuilderGetRuleMetadataCall(ruleType, _callback);

    }

    /**
     * Summary: Get rule metadata Description: Return a list of rule parameters and actions to the caller.
     * 
     * @param ruleType Rule type integer to indicate rule type. (optional, default to ACCESS)
     * @return Policybuilderv3RuleMetadataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Policybuilderv3RuleMetadataResponse policyBuilderGetRuleMetadata(String ruleType) throws ApiException {
        ApiResponse<Policybuilderv3RuleMetadataResponse> localVarResp = policyBuilderGetRuleMetadataWithHttpInfo(ruleType);
        return localVarResp.getData();
    }

    /**
     * Summary: Get rule metadata Description: Return a list of rule parameters and actions to the caller.
     * 
     * @param ruleType Rule type integer to indicate rule type. (optional, default to ACCESS)
     * @return ApiResponse&lt;Policybuilderv3RuleMetadataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Policybuilderv3RuleMetadataResponse> policyBuilderGetRuleMetadataWithHttpInfo(String ruleType) throws ApiException {
        okhttp3.Call localVarCall = policyBuilderGetRuleMetadataValidateBeforeCall(ruleType, null);
        Type localVarReturnType = new TypeToken<Policybuilderv3RuleMetadataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get rule metadata Description: Return a list of rule parameters and actions to the caller. (asynchronously)
     * 
     * @param ruleType Rule type integer to indicate rule type. (optional, default to ACCESS)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyBuilderGetRuleMetadataAsync(String ruleType, final ApiCallback<Policybuilderv3RuleMetadataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyBuilderGetRuleMetadataValidateBeforeCall(ruleType, _callback);
        Type localVarReturnType = new TypeToken<Policybuilderv3RuleMetadataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policyBuilderInsertGdpPolicy
     * @param policybuilderv3InsertGdpPolicySyncRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyBuilderInsertGdpPolicyCall(Policybuilderv3InsertGdpPolicySyncRequest policybuilderv3InsertGdpPolicySyncRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = policybuilderv3InsertGdpPolicySyncRequest;

        // create path and map variables
        String localVarPath = "/api/v3/policies/sync_entry";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyBuilderInsertGdpPolicyValidateBeforeCall(Policybuilderv3InsertGdpPolicySyncRequest policybuilderv3InsertGdpPolicySyncRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policybuilderv3InsertGdpPolicySyncRequest' is set
        if (policybuilderv3InsertGdpPolicySyncRequest == null) {
            throw new ApiException("Missing the required parameter 'policybuilderv3InsertGdpPolicySyncRequest' when calling policyBuilderInsertGdpPolicy(Async)");
        }

        return policyBuilderInsertGdpPolicyCall(policybuilderv3InsertGdpPolicySyncRequest, _callback);

    }

    /**
     * Summary: Insert GDP policy sync entry Description: Inserts GDP policy&#39;s name into sync collection
     * 
     * @param policybuilderv3InsertGdpPolicySyncRequest  (required)
     * @return Policybuilderv3InsertGdpPolicySyncResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Policybuilderv3InsertGdpPolicySyncResponse policyBuilderInsertGdpPolicy(Policybuilderv3InsertGdpPolicySyncRequest policybuilderv3InsertGdpPolicySyncRequest) throws ApiException {
        ApiResponse<Policybuilderv3InsertGdpPolicySyncResponse> localVarResp = policyBuilderInsertGdpPolicyWithHttpInfo(policybuilderv3InsertGdpPolicySyncRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Insert GDP policy sync entry Description: Inserts GDP policy&#39;s name into sync collection
     * 
     * @param policybuilderv3InsertGdpPolicySyncRequest  (required)
     * @return ApiResponse&lt;Policybuilderv3InsertGdpPolicySyncResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Policybuilderv3InsertGdpPolicySyncResponse> policyBuilderInsertGdpPolicyWithHttpInfo(Policybuilderv3InsertGdpPolicySyncRequest policybuilderv3InsertGdpPolicySyncRequest) throws ApiException {
        okhttp3.Call localVarCall = policyBuilderInsertGdpPolicyValidateBeforeCall(policybuilderv3InsertGdpPolicySyncRequest, null);
        Type localVarReturnType = new TypeToken<Policybuilderv3InsertGdpPolicySyncResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Insert GDP policy sync entry Description: Inserts GDP policy&#39;s name into sync collection (asynchronously)
     * 
     * @param policybuilderv3InsertGdpPolicySyncRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyBuilderInsertGdpPolicyAsync(Policybuilderv3InsertGdpPolicySyncRequest policybuilderv3InsertGdpPolicySyncRequest, final ApiCallback<Policybuilderv3InsertGdpPolicySyncResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyBuilderInsertGdpPolicyValidateBeforeCall(policybuilderv3InsertGdpPolicySyncRequest, _callback);
        Type localVarReturnType = new TypeToken<Policybuilderv3InsertGdpPolicySyncResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policyBuilderInsertGdpPolicyMetaData
     * @param centralManagerId ID of central manager. (required)
     * @param policybuilderv3InsertGdpPolicyMetaDataRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyBuilderInsertGdpPolicyMetaDataCall(String centralManagerId, Policybuilderv3InsertGdpPolicyMetaDataRequest policybuilderv3InsertGdpPolicyMetaDataRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = policybuilderv3InsertGdpPolicyMetaDataRequest;

        // create path and map variables
        String localVarPath = "/api/v3/central_managers/{central_manager_id}/policies/policy_metadata"
            .replace("{" + "central_manager_id" + "}", localVarApiClient.escapeString(centralManagerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyBuilderInsertGdpPolicyMetaDataValidateBeforeCall(String centralManagerId, Policybuilderv3InsertGdpPolicyMetaDataRequest policybuilderv3InsertGdpPolicyMetaDataRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'centralManagerId' is set
        if (centralManagerId == null) {
            throw new ApiException("Missing the required parameter 'centralManagerId' when calling policyBuilderInsertGdpPolicyMetaData(Async)");
        }

        // verify the required parameter 'policybuilderv3InsertGdpPolicyMetaDataRequest' is set
        if (policybuilderv3InsertGdpPolicyMetaDataRequest == null) {
            throw new ApiException("Missing the required parameter 'policybuilderv3InsertGdpPolicyMetaDataRequest' when calling policyBuilderInsertGdpPolicyMetaData(Async)");
        }

        return policyBuilderInsertGdpPolicyMetaDataCall(centralManagerId, policybuilderv3InsertGdpPolicyMetaDataRequest, _callback);

    }

    /**
     * Summary: Insert gdp policy summaries Description: Inserts GDP&#39;s CM&#39;s policy summary information into mogodb. (This API is called from GDP only)
     * 
     * @param centralManagerId ID of central manager. (required)
     * @param policybuilderv3InsertGdpPolicyMetaDataRequest  (required)
     * @return Policybuilderv3InsertGdpPolicyMetaDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Policybuilderv3InsertGdpPolicyMetaDataResponse policyBuilderInsertGdpPolicyMetaData(String centralManagerId, Policybuilderv3InsertGdpPolicyMetaDataRequest policybuilderv3InsertGdpPolicyMetaDataRequest) throws ApiException {
        ApiResponse<Policybuilderv3InsertGdpPolicyMetaDataResponse> localVarResp = policyBuilderInsertGdpPolicyMetaDataWithHttpInfo(centralManagerId, policybuilderv3InsertGdpPolicyMetaDataRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Insert gdp policy summaries Description: Inserts GDP&#39;s CM&#39;s policy summary information into mogodb. (This API is called from GDP only)
     * 
     * @param centralManagerId ID of central manager. (required)
     * @param policybuilderv3InsertGdpPolicyMetaDataRequest  (required)
     * @return ApiResponse&lt;Policybuilderv3InsertGdpPolicyMetaDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Policybuilderv3InsertGdpPolicyMetaDataResponse> policyBuilderInsertGdpPolicyMetaDataWithHttpInfo(String centralManagerId, Policybuilderv3InsertGdpPolicyMetaDataRequest policybuilderv3InsertGdpPolicyMetaDataRequest) throws ApiException {
        okhttp3.Call localVarCall = policyBuilderInsertGdpPolicyMetaDataValidateBeforeCall(centralManagerId, policybuilderv3InsertGdpPolicyMetaDataRequest, null);
        Type localVarReturnType = new TypeToken<Policybuilderv3InsertGdpPolicyMetaDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Insert gdp policy summaries Description: Inserts GDP&#39;s CM&#39;s policy summary information into mogodb. (This API is called from GDP only) (asynchronously)
     * 
     * @param centralManagerId ID of central manager. (required)
     * @param policybuilderv3InsertGdpPolicyMetaDataRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyBuilderInsertGdpPolicyMetaDataAsync(String centralManagerId, Policybuilderv3InsertGdpPolicyMetaDataRequest policybuilderv3InsertGdpPolicyMetaDataRequest, final ApiCallback<Policybuilderv3InsertGdpPolicyMetaDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyBuilderInsertGdpPolicyMetaDataValidateBeforeCall(centralManagerId, policybuilderv3InsertGdpPolicyMetaDataRequest, _callback);
        Type localVarReturnType = new TypeToken<Policybuilderv3InsertGdpPolicyMetaDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policyBuilderInstallPolicies
     * @param policybuilderv3InstallPoliciesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyBuilderInstallPoliciesCall(Policybuilderv3InstallPoliciesRequest policybuilderv3InstallPoliciesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = policybuilderv3InstallPoliciesRequest;

        // create path and map variables
        String localVarPath = "/api/v3/policies/install";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyBuilderInstallPoliciesValidateBeforeCall(Policybuilderv3InstallPoliciesRequest policybuilderv3InstallPoliciesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policybuilderv3InstallPoliciesRequest' is set
        if (policybuilderv3InstallPoliciesRequest == null) {
            throw new ApiException("Missing the required parameter 'policybuilderv3InstallPoliciesRequest' when calling policyBuilderInstallPolicies(Async)");
        }

        return policyBuilderInstallPoliciesCall(policybuilderv3InstallPoliciesRequest, _callback);

    }

    /**
     * Summary: Install policies Description: Activate Policies request performs activations.
     * 
     * @param policybuilderv3InstallPoliciesRequest  (required)
     * @return Policybuilderv3StatusResponseBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Policybuilderv3StatusResponseBase policyBuilderInstallPolicies(Policybuilderv3InstallPoliciesRequest policybuilderv3InstallPoliciesRequest) throws ApiException {
        ApiResponse<Policybuilderv3StatusResponseBase> localVarResp = policyBuilderInstallPoliciesWithHttpInfo(policybuilderv3InstallPoliciesRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Install policies Description: Activate Policies request performs activations.
     * 
     * @param policybuilderv3InstallPoliciesRequest  (required)
     * @return ApiResponse&lt;Policybuilderv3StatusResponseBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Policybuilderv3StatusResponseBase> policyBuilderInstallPoliciesWithHttpInfo(Policybuilderv3InstallPoliciesRequest policybuilderv3InstallPoliciesRequest) throws ApiException {
        okhttp3.Call localVarCall = policyBuilderInstallPoliciesValidateBeforeCall(policybuilderv3InstallPoliciesRequest, null);
        Type localVarReturnType = new TypeToken<Policybuilderv3StatusResponseBase>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Install policies Description: Activate Policies request performs activations. (asynchronously)
     * 
     * @param policybuilderv3InstallPoliciesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyBuilderInstallPoliciesAsync(Policybuilderv3InstallPoliciesRequest policybuilderv3InstallPoliciesRequest, final ApiCallback<Policybuilderv3StatusResponseBase> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyBuilderInstallPoliciesValidateBeforeCall(policybuilderv3InstallPoliciesRequest, _callback);
        Type localVarReturnType = new TypeToken<Policybuilderv3StatusResponseBase>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policyBuilderIntegrationCheck
     * @param integrationId Integration Id to check if it is being used in policies. (required)
     * @param templateId Template Id to check if it is being used in policies. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyBuilderIntegrationCheckCall(String integrationId, String templateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/policies/integration_check/{integration_id}"
            .replace("{" + "integration_id" + "}", localVarApiClient.escapeString(integrationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (templateId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("template_id", templateId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyBuilderIntegrationCheckValidateBeforeCall(String integrationId, String templateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'integrationId' is set
        if (integrationId == null) {
            throw new ApiException("Missing the required parameter 'integrationId' when calling policyBuilderIntegrationCheck(Async)");
        }

        return policyBuilderIntegrationCheckCall(integrationId, templateId, _callback);

    }

    /**
     * Summary: Integration check Description: Check if integration id is being used in policies.
     * 
     * @param integrationId Integration Id to check if it is being used in policies. (required)
     * @param templateId Template Id to check if it is being used in policies. (optional)
     * @return Policybuilderv3GetIntegrationCheckResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Policybuilderv3GetIntegrationCheckResponse policyBuilderIntegrationCheck(String integrationId, String templateId) throws ApiException {
        ApiResponse<Policybuilderv3GetIntegrationCheckResponse> localVarResp = policyBuilderIntegrationCheckWithHttpInfo(integrationId, templateId);
        return localVarResp.getData();
    }

    /**
     * Summary: Integration check Description: Check if integration id is being used in policies.
     * 
     * @param integrationId Integration Id to check if it is being used in policies. (required)
     * @param templateId Template Id to check if it is being used in policies. (optional)
     * @return ApiResponse&lt;Policybuilderv3GetIntegrationCheckResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Policybuilderv3GetIntegrationCheckResponse> policyBuilderIntegrationCheckWithHttpInfo(String integrationId, String templateId) throws ApiException {
        okhttp3.Call localVarCall = policyBuilderIntegrationCheckValidateBeforeCall(integrationId, templateId, null);
        Type localVarReturnType = new TypeToken<Policybuilderv3GetIntegrationCheckResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Integration check Description: Check if integration id is being used in policies. (asynchronously)
     * 
     * @param integrationId Integration Id to check if it is being used in policies. (required)
     * @param templateId Template Id to check if it is being used in policies. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyBuilderIntegrationCheckAsync(String integrationId, String templateId, final ApiCallback<Policybuilderv3GetIntegrationCheckResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyBuilderIntegrationCheckValidateBeforeCall(integrationId, templateId, _callback);
        Type localVarReturnType = new TypeToken<Policybuilderv3GetIntegrationCheckResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policyBuilderPoliciesGroups
     * @param groupIds Group ids to check if they are being used in policies. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyBuilderPoliciesGroupsCall(List<String> groupIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/policies/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groupIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "group_ids", groupIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyBuilderPoliciesGroupsValidateBeforeCall(List<String> groupIds, final ApiCallback _callback) throws ApiException {
        return policyBuilderPoliciesGroupsCall(groupIds, _callback);

    }

    /**
     * Summary: Policies groups Description: Get policy groups.
     * 
     * @param groupIds Group ids to check if they are being used in policies. (optional)
     * @return Policybuilderv3GetPoliciesGroupsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Policybuilderv3GetPoliciesGroupsResponse policyBuilderPoliciesGroups(List<String> groupIds) throws ApiException {
        ApiResponse<Policybuilderv3GetPoliciesGroupsResponse> localVarResp = policyBuilderPoliciesGroupsWithHttpInfo(groupIds);
        return localVarResp.getData();
    }

    /**
     * Summary: Policies groups Description: Get policy groups.
     * 
     * @param groupIds Group ids to check if they are being used in policies. (optional)
     * @return ApiResponse&lt;Policybuilderv3GetPoliciesGroupsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Policybuilderv3GetPoliciesGroupsResponse> policyBuilderPoliciesGroupsWithHttpInfo(List<String> groupIds) throws ApiException {
        okhttp3.Call localVarCall = policyBuilderPoliciesGroupsValidateBeforeCall(groupIds, null);
        Type localVarReturnType = new TypeToken<Policybuilderv3GetPoliciesGroupsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Policies groups Description: Get policy groups. (asynchronously)
     * 
     * @param groupIds Group ids to check if they are being used in policies. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyBuilderPoliciesGroupsAsync(List<String> groupIds, final ApiCallback<Policybuilderv3GetPoliciesGroupsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyBuilderPoliciesGroupsValidateBeforeCall(groupIds, _callback);
        Type localVarReturnType = new TypeToken<Policybuilderv3GetPoliciesGroupsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policyBuilderRuleValidation
     * @param policybuilderv3GetRuleValidationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyBuilderRuleValidationCall(Policybuilderv3GetRuleValidationRequest policybuilderv3GetRuleValidationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = policybuilderv3GetRuleValidationRequest;

        // create path and map variables
        String localVarPath = "/api/v3/rules/validate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyBuilderRuleValidationValidateBeforeCall(Policybuilderv3GetRuleValidationRequest policybuilderv3GetRuleValidationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'policybuilderv3GetRuleValidationRequest' is set
        if (policybuilderv3GetRuleValidationRequest == null) {
            throw new ApiException("Missing the required parameter 'policybuilderv3GetRuleValidationRequest' when calling policyBuilderRuleValidation(Async)");
        }

        return policyBuilderRuleValidationCall(policybuilderv3GetRuleValidationRequest, _callback);

    }

    /**
     * Summary: Rule validation Description: Validate a rule parameters and actions.
     * 
     * @param policybuilderv3GetRuleValidationRequest  (required)
     * @return Policybuilderv3StandardCRUDResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Policybuilderv3StandardCRUDResponse policyBuilderRuleValidation(Policybuilderv3GetRuleValidationRequest policybuilderv3GetRuleValidationRequest) throws ApiException {
        ApiResponse<Policybuilderv3StandardCRUDResponse> localVarResp = policyBuilderRuleValidationWithHttpInfo(policybuilderv3GetRuleValidationRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Rule validation Description: Validate a rule parameters and actions.
     * 
     * @param policybuilderv3GetRuleValidationRequest  (required)
     * @return ApiResponse&lt;Policybuilderv3StandardCRUDResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Policybuilderv3StandardCRUDResponse> policyBuilderRuleValidationWithHttpInfo(Policybuilderv3GetRuleValidationRequest policybuilderv3GetRuleValidationRequest) throws ApiException {
        okhttp3.Call localVarCall = policyBuilderRuleValidationValidateBeforeCall(policybuilderv3GetRuleValidationRequest, null);
        Type localVarReturnType = new TypeToken<Policybuilderv3StandardCRUDResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Rule validation Description: Validate a rule parameters and actions. (asynchronously)
     * 
     * @param policybuilderv3GetRuleValidationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyBuilderRuleValidationAsync(Policybuilderv3GetRuleValidationRequest policybuilderv3GetRuleValidationRequest, final ApiCallback<Policybuilderv3StandardCRUDResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyBuilderRuleValidationValidateBeforeCall(policybuilderv3GetRuleValidationRequest, _callback);
        Type localVarReturnType = new TypeToken<Policybuilderv3StandardCRUDResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for policyBuilderStorePoliciesGdp
     * @param centralManagerId ID of central manager. (required)
     * @param policybuilderv3StorePolicyGdpRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyBuilderStorePoliciesGdpCall(String centralManagerId, Policybuilderv3StorePolicyGdpRequest policybuilderv3StorePolicyGdpRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = policybuilderv3StorePolicyGdpRequest;

        // create path and map variables
        String localVarPath = "/api/v3/policies/{central_manager_id}"
            .replace("{" + "central_manager_id" + "}", localVarApiClient.escapeString(centralManagerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call policyBuilderStorePoliciesGdpValidateBeforeCall(String centralManagerId, Policybuilderv3StorePolicyGdpRequest policybuilderv3StorePolicyGdpRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'centralManagerId' is set
        if (centralManagerId == null) {
            throw new ApiException("Missing the required parameter 'centralManagerId' when calling policyBuilderStorePoliciesGdp(Async)");
        }

        // verify the required parameter 'policybuilderv3StorePolicyGdpRequest' is set
        if (policybuilderv3StorePolicyGdpRequest == null) {
            throw new ApiException("Missing the required parameter 'policybuilderv3StorePolicyGdpRequest' when calling policyBuilderStorePoliciesGdp(Async)");
        }

        return policyBuilderStorePoliciesGdpCall(centralManagerId, policybuilderv3StorePolicyGdpRequest, _callback);

    }

    /**
     * Summary: Store policies Gdp Description: Store policies.  (This API is called from GDP only)
     * 
     * @param centralManagerId ID of central manager. (required)
     * @param policybuilderv3StorePolicyGdpRequest  (required)
     * @return Policybuilderv3StorePolicyGdpResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Policybuilderv3StorePolicyGdpResponse policyBuilderStorePoliciesGdp(String centralManagerId, Policybuilderv3StorePolicyGdpRequest policybuilderv3StorePolicyGdpRequest) throws ApiException {
        ApiResponse<Policybuilderv3StorePolicyGdpResponse> localVarResp = policyBuilderStorePoliciesGdpWithHttpInfo(centralManagerId, policybuilderv3StorePolicyGdpRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Store policies Gdp Description: Store policies.  (This API is called from GDP only)
     * 
     * @param centralManagerId ID of central manager. (required)
     * @param policybuilderv3StorePolicyGdpRequest  (required)
     * @return ApiResponse&lt;Policybuilderv3StorePolicyGdpResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Policybuilderv3StorePolicyGdpResponse> policyBuilderStorePoliciesGdpWithHttpInfo(String centralManagerId, Policybuilderv3StorePolicyGdpRequest policybuilderv3StorePolicyGdpRequest) throws ApiException {
        okhttp3.Call localVarCall = policyBuilderStorePoliciesGdpValidateBeforeCall(centralManagerId, policybuilderv3StorePolicyGdpRequest, null);
        Type localVarReturnType = new TypeToken<Policybuilderv3StorePolicyGdpResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Store policies Gdp Description: Store policies.  (This API is called from GDP only) (asynchronously)
     * 
     * @param centralManagerId ID of central manager. (required)
     * @param policybuilderv3StorePolicyGdpRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call policyBuilderStorePoliciesGdpAsync(String centralManagerId, Policybuilderv3StorePolicyGdpRequest policybuilderv3StorePolicyGdpRequest, final ApiCallback<Policybuilderv3StorePolicyGdpResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = policyBuilderStorePoliciesGdpValidateBeforeCall(centralManagerId, policybuilderv3StorePolicyGdpRequest, _callback);
        Type localVarReturnType = new TypeToken<Policybuilderv3StorePolicyGdpResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
