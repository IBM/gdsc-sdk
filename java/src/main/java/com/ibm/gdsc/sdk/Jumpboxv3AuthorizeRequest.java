/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.JSON;

/**
 * AuthorizeRequest message for POST v3/Authorize api.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-18T18:23:51.166908Z[UTC]", comments = "Generator version: 7.6.0")
public class Jumpboxv3AuthorizeRequest {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "display_name";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "external_id";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_IS_RENEW = "is_renew";
  @SerializedName(SERIALIZED_NAME_IS_RENEW)
  private Boolean isRenew;

  public static final String SERIALIZED_NAME_IS_UPDATE_USER_INFO = "is_update_user_info";
  @SerializedName(SERIALIZED_NAME_IS_UPDATE_USER_INFO)
  private Boolean isUpdateUserInfo;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_LOGIN_ID = "login_id";
  @SerializedName(SERIALIZED_NAME_LOGIN_ID)
  private String loginId;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenant_id";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public Jumpboxv3AuthorizeRequest() {
  }

  public Jumpboxv3AuthorizeRequest displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

   /**
   * Display name of the user.
   * @return displayName
  **/
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public Jumpboxv3AuthorizeRequest email(String email) {
    this.email = email;
    return this;
  }

   /**
   * Contact email address of the user.
   * @return email
  **/
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public Jumpboxv3AuthorizeRequest externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

   /**
   * External id of the user.
   * @return externalId
  **/
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public Jumpboxv3AuthorizeRequest firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

   /**
   * First name of the user.
   * @return firstName
  **/
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public Jumpboxv3AuthorizeRequest isRenew(Boolean isRenew) {
    this.isRenew = isRenew;
    return this;
  }

   /**
   * If it is a renew.
   * @return isRenew
  **/
  @javax.annotation.Nullable
  public Boolean getIsRenew() {
    return isRenew;
  }

  public void setIsRenew(Boolean isRenew) {
    this.isRenew = isRenew;
  }


  public Jumpboxv3AuthorizeRequest isUpdateUserInfo(Boolean isUpdateUserInfo) {
    this.isUpdateUserInfo = isUpdateUserInfo;
    return this;
  }

   /**
   * Whether to update the user info with ISV during login.
   * @return isUpdateUserInfo
  **/
  @javax.annotation.Nullable
  public Boolean getIsUpdateUserInfo() {
    return isUpdateUserInfo;
  }

  public void setIsUpdateUserInfo(Boolean isUpdateUserInfo) {
    this.isUpdateUserInfo = isUpdateUserInfo;
  }


  public Jumpboxv3AuthorizeRequest lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

   /**
   * Last name of the user.
   * @return lastName
  **/
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public Jumpboxv3AuthorizeRequest loginId(String loginId) {
    this.loginId = loginId;
    return this;
  }

   /**
   * Login id of the user.
   * @return loginId
  **/
  @javax.annotation.Nullable
  public String getLoginId() {
    return loginId;
  }

  public void setLoginId(String loginId) {
    this.loginId = loginId;
  }


  public Jumpboxv3AuthorizeRequest tenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

   /**
   * Tenant id.
   * @return tenantId
  **/
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Jumpboxv3AuthorizeRequest jumpboxv3AuthorizeRequest = (Jumpboxv3AuthorizeRequest) o;
    return Objects.equals(this.displayName, jumpboxv3AuthorizeRequest.displayName) &&
        Objects.equals(this.email, jumpboxv3AuthorizeRequest.email) &&
        Objects.equals(this.externalId, jumpboxv3AuthorizeRequest.externalId) &&
        Objects.equals(this.firstName, jumpboxv3AuthorizeRequest.firstName) &&
        Objects.equals(this.isRenew, jumpboxv3AuthorizeRequest.isRenew) &&
        Objects.equals(this.isUpdateUserInfo, jumpboxv3AuthorizeRequest.isUpdateUserInfo) &&
        Objects.equals(this.lastName, jumpboxv3AuthorizeRequest.lastName) &&
        Objects.equals(this.loginId, jumpboxv3AuthorizeRequest.loginId) &&
        Objects.equals(this.tenantId, jumpboxv3AuthorizeRequest.tenantId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, email, externalId, firstName, isRenew, isUpdateUserInfo, lastName, loginId, tenantId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Jumpboxv3AuthorizeRequest {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    isRenew: ").append(toIndentedString(isRenew)).append("\n");
    sb.append("    isUpdateUserInfo: ").append(toIndentedString(isUpdateUserInfo)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    loginId: ").append(toIndentedString(loginId)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("display_name");
    openapiFields.add("email");
    openapiFields.add("external_id");
    openapiFields.add("first_name");
    openapiFields.add("is_renew");
    openapiFields.add("is_update_user_info");
    openapiFields.add("last_name");
    openapiFields.add("login_id");
    openapiFields.add("tenant_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Jumpboxv3AuthorizeRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Jumpboxv3AuthorizeRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Jumpboxv3AuthorizeRequest is not found in the empty JSON string", Jumpboxv3AuthorizeRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Jumpboxv3AuthorizeRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Jumpboxv3AuthorizeRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("display_name") != null && !jsonObj.get("display_name").isJsonNull()) && !jsonObj.get("display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_name").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("external_id") != null && !jsonObj.get("external_id").isJsonNull()) && !jsonObj.get("external_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_id").toString()));
      }
      if ((jsonObj.get("first_name") != null && !jsonObj.get("first_name").isJsonNull()) && !jsonObj.get("first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_name").toString()));
      }
      if ((jsonObj.get("last_name") != null && !jsonObj.get("last_name").isJsonNull()) && !jsonObj.get("last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_name").toString()));
      }
      if ((jsonObj.get("login_id") != null && !jsonObj.get("login_id").isJsonNull()) && !jsonObj.get("login_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `login_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("login_id").toString()));
      }
      if ((jsonObj.get("tenant_id") != null && !jsonObj.get("tenant_id").isJsonNull()) && !jsonObj.get("tenant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenant_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Jumpboxv3AuthorizeRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Jumpboxv3AuthorizeRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Jumpboxv3AuthorizeRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Jumpboxv3AuthorizeRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<Jumpboxv3AuthorizeRequest>() {
           @Override
           public void write(JsonWriter out, Jumpboxv3AuthorizeRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Jumpboxv3AuthorizeRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Jumpboxv3AuthorizeRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Jumpboxv3AuthorizeRequest
  * @throws IOException if the JSON string is invalid with respect to Jumpboxv3AuthorizeRequest
  */
  public static Jumpboxv3AuthorizeRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Jumpboxv3AuthorizeRequest.class);
  }

 /**
  * Convert an instance of Jumpboxv3AuthorizeRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

