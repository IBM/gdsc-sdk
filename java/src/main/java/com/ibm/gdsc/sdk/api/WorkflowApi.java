/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk.api;

import com.ibm.gdsc.sdk.ApiCallback;
import com.ibm.gdsc.sdk.ApiClient;
import com.ibm.gdsc.sdk.ApiException;
import com.ibm.gdsc.sdk.ApiResponse;
import com.ibm.gdsc.sdk.Configuration;
import com.ibm.gdsc.sdk.Pair;
import com.ibm.gdsc.sdk.ProgressRequestBody;
import com.ibm.gdsc.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ibm.gdsc.sdk.models.RuntimeError;
import com.ibm.gdsc.sdk.models.Workflowv3CaseListResponse;
import com.ibm.gdsc.sdk.models.Workflowv3CreateCaseRequest;
import com.ibm.gdsc.sdk.models.Workflowv3CreateCaseResponse;
import com.ibm.gdsc.sdk.models.Workflowv3CreateTaskRequest;
import com.ibm.gdsc.sdk.models.Workflowv3CreateTaskResponse;
import com.ibm.gdsc.sdk.models.Workflowv3GetCasesCountRequest;
import com.ibm.gdsc.sdk.models.Workflowv3GetCasesCountResponse;
import com.ibm.gdsc.sdk.models.Workflowv3GetFilenameResponse;
import com.ibm.gdsc.sdk.models.Workflowv3GetJobsCountRequest;
import com.ibm.gdsc.sdk.models.Workflowv3GetJobsCountResponse;
import com.ibm.gdsc.sdk.models.Workflowv3GetReportResultResponse;
import com.ibm.gdsc.sdk.models.Workflowv3GetTasksCountRequest;
import com.ibm.gdsc.sdk.models.Workflowv3GetTasksCountResponse;
import com.ibm.gdsc.sdk.models.Workflowv3SearchCasesRequest;
import com.ibm.gdsc.sdk.models.Workflowv3SearchReportsResponse;
import com.ibm.gdsc.sdk.models.Workflowv3SearchTasksRequest;
import com.ibm.gdsc.sdk.models.Workflowv3TaskListResponse;
import com.ibm.gdsc.sdk.models.Workflowv3UpdateCasesRequest;
import com.ibm.gdsc.sdk.models.Workflowv3UpdateCasesResponse;
import com.ibm.gdsc.sdk.models.Workflowv3UpdateTasksRequest;
import com.ibm.gdsc.sdk.models.Workflowv3UpdateTasksResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WorkflowApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkflowApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WorkflowApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for workflowCreateCase
     * @param workflowv3CreateCaseRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowCreateCaseCall(Workflowv3CreateCaseRequest workflowv3CreateCaseRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workflowv3CreateCaseRequest;

        // create path and map variables
        String localVarPath = "/api/v3/cases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowCreateCaseValidateBeforeCall(Workflowv3CreateCaseRequest workflowv3CreateCaseRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workflowv3CreateCaseRequest' is set
        if (workflowv3CreateCaseRequest == null) {
            throw new ApiException("Missing the required parameter 'workflowv3CreateCaseRequest' when calling workflowCreateCase(Async)");
        }

        return workflowCreateCaseCall(workflowv3CreateCaseRequest, _callback);

    }

    /**
     * Summary: Create case Description: Create single case.
     * 
     * @param workflowv3CreateCaseRequest  (required)
     * @return Workflowv3CreateCaseResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Workflowv3CreateCaseResponse workflowCreateCase(Workflowv3CreateCaseRequest workflowv3CreateCaseRequest) throws ApiException {
        ApiResponse<Workflowv3CreateCaseResponse> localVarResp = workflowCreateCaseWithHttpInfo(workflowv3CreateCaseRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Create case Description: Create single case.
     * 
     * @param workflowv3CreateCaseRequest  (required)
     * @return ApiResponse&lt;Workflowv3CreateCaseResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Workflowv3CreateCaseResponse> workflowCreateCaseWithHttpInfo(Workflowv3CreateCaseRequest workflowv3CreateCaseRequest) throws ApiException {
        okhttp3.Call localVarCall = workflowCreateCaseValidateBeforeCall(workflowv3CreateCaseRequest, null);
        Type localVarReturnType = new TypeToken<Workflowv3CreateCaseResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Create case Description: Create single case. (asynchronously)
     * 
     * @param workflowv3CreateCaseRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowCreateCaseAsync(Workflowv3CreateCaseRequest workflowv3CreateCaseRequest, final ApiCallback<Workflowv3CreateCaseResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowCreateCaseValidateBeforeCall(workflowv3CreateCaseRequest, _callback);
        Type localVarReturnType = new TypeToken<Workflowv3CreateCaseResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowCreateTask
     * @param caseId Create tasks with common parent. (required)
     * @param workflowv3CreateTaskRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowCreateTaskCall(String caseId, Workflowv3CreateTaskRequest workflowv3CreateTaskRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workflowv3CreateTaskRequest;

        // create path and map variables
        String localVarPath = "/api/v3/cases/{case_id}/tasks"
            .replace("{" + "case_id" + "}", localVarApiClient.escapeString(caseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowCreateTaskValidateBeforeCall(String caseId, Workflowv3CreateTaskRequest workflowv3CreateTaskRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'caseId' is set
        if (caseId == null) {
            throw new ApiException("Missing the required parameter 'caseId' when calling workflowCreateTask(Async)");
        }

        // verify the required parameter 'workflowv3CreateTaskRequest' is set
        if (workflowv3CreateTaskRequest == null) {
            throw new ApiException("Missing the required parameter 'workflowv3CreateTaskRequest' when calling workflowCreateTask(Async)");
        }

        return workflowCreateTaskCall(caseId, workflowv3CreateTaskRequest, _callback);

    }

    /**
     * Summary: Create task Description: Create single task within a parent case.
     * 
     * @param caseId Create tasks with common parent. (required)
     * @param workflowv3CreateTaskRequest  (required)
     * @return Workflowv3CreateTaskResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Workflowv3CreateTaskResponse workflowCreateTask(String caseId, Workflowv3CreateTaskRequest workflowv3CreateTaskRequest) throws ApiException {
        ApiResponse<Workflowv3CreateTaskResponse> localVarResp = workflowCreateTaskWithHttpInfo(caseId, workflowv3CreateTaskRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Create task Description: Create single task within a parent case.
     * 
     * @param caseId Create tasks with common parent. (required)
     * @param workflowv3CreateTaskRequest  (required)
     * @return ApiResponse&lt;Workflowv3CreateTaskResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Workflowv3CreateTaskResponse> workflowCreateTaskWithHttpInfo(String caseId, Workflowv3CreateTaskRequest workflowv3CreateTaskRequest) throws ApiException {
        okhttp3.Call localVarCall = workflowCreateTaskValidateBeforeCall(caseId, workflowv3CreateTaskRequest, null);
        Type localVarReturnType = new TypeToken<Workflowv3CreateTaskResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Create task Description: Create single task within a parent case. (asynchronously)
     * 
     * @param caseId Create tasks with common parent. (required)
     * @param workflowv3CreateTaskRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowCreateTaskAsync(String caseId, Workflowv3CreateTaskRequest workflowv3CreateTaskRequest, final ApiCallback<Workflowv3CreateTaskResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowCreateTaskValidateBeforeCall(caseId, workflowv3CreateTaskRequest, _callback);
        Type localVarReturnType = new TypeToken<Workflowv3CreateTaskResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowGetCases
     * @param caseId Optional case_id to get a response of an array of one member. (optional)
     * @param sortBy Optional field to sort by | first character determines ascending (&gt;) or descending (&lt;). (optional)
     * @param offset Optional starting point for the page of data. (optional)
     * @param limit Optional page size. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowGetCasesCall(String caseId, String sortBy, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/cases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (caseId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("case_id", caseId));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowGetCasesValidateBeforeCall(String caseId, String sortBy, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        return workflowGetCasesCall(caseId, sortBy, offset, limit, _callback);

    }

    /**
     * Summary: Get cases Description: Return all cases requested.
     * 
     * @param caseId Optional case_id to get a response of an array of one member. (optional)
     * @param sortBy Optional field to sort by | first character determines ascending (&gt;) or descending (&lt;). (optional)
     * @param offset Optional starting point for the page of data. (optional)
     * @param limit Optional page size. (optional)
     * @return Workflowv3CaseListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Workflowv3CaseListResponse workflowGetCases(String caseId, String sortBy, Integer offset, Integer limit) throws ApiException {
        ApiResponse<Workflowv3CaseListResponse> localVarResp = workflowGetCasesWithHttpInfo(caseId, sortBy, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Summary: Get cases Description: Return all cases requested.
     * 
     * @param caseId Optional case_id to get a response of an array of one member. (optional)
     * @param sortBy Optional field to sort by | first character determines ascending (&gt;) or descending (&lt;). (optional)
     * @param offset Optional starting point for the page of data. (optional)
     * @param limit Optional page size. (optional)
     * @return ApiResponse&lt;Workflowv3CaseListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Workflowv3CaseListResponse> workflowGetCasesWithHttpInfo(String caseId, String sortBy, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = workflowGetCasesValidateBeforeCall(caseId, sortBy, offset, limit, null);
        Type localVarReturnType = new TypeToken<Workflowv3CaseListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get cases Description: Return all cases requested. (asynchronously)
     * 
     * @param caseId Optional case_id to get a response of an array of one member. (optional)
     * @param sortBy Optional field to sort by | first character determines ascending (&gt;) or descending (&lt;). (optional)
     * @param offset Optional starting point for the page of data. (optional)
     * @param limit Optional page size. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowGetCasesAsync(String caseId, String sortBy, Integer offset, Integer limit, final ApiCallback<Workflowv3CaseListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowGetCasesValidateBeforeCall(caseId, sortBy, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<Workflowv3CaseListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowGetCasesCount
     * @param workflowv3GetCasesCountRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowGetCasesCountCall(Workflowv3GetCasesCountRequest workflowv3GetCasesCountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workflowv3GetCasesCountRequest;

        // create path and map variables
        String localVarPath = "/api/v3/cases/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowGetCasesCountValidateBeforeCall(Workflowv3GetCasesCountRequest workflowv3GetCasesCountRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workflowv3GetCasesCountRequest' is set
        if (workflowv3GetCasesCountRequest == null) {
            throw new ApiException("Missing the required parameter 'workflowv3GetCasesCountRequest' when calling workflowGetCasesCount(Async)");
        }

        return workflowGetCasesCountCall(workflowv3GetCasesCountRequest, _callback);

    }

    /**
     * Summary: Get cases count Description: Get case count.
     * 
     * @param workflowv3GetCasesCountRequest  (required)
     * @return Workflowv3GetCasesCountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Workflowv3GetCasesCountResponse workflowGetCasesCount(Workflowv3GetCasesCountRequest workflowv3GetCasesCountRequest) throws ApiException {
        ApiResponse<Workflowv3GetCasesCountResponse> localVarResp = workflowGetCasesCountWithHttpInfo(workflowv3GetCasesCountRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Get cases count Description: Get case count.
     * 
     * @param workflowv3GetCasesCountRequest  (required)
     * @return ApiResponse&lt;Workflowv3GetCasesCountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Workflowv3GetCasesCountResponse> workflowGetCasesCountWithHttpInfo(Workflowv3GetCasesCountRequest workflowv3GetCasesCountRequest) throws ApiException {
        okhttp3.Call localVarCall = workflowGetCasesCountValidateBeforeCall(workflowv3GetCasesCountRequest, null);
        Type localVarReturnType = new TypeToken<Workflowv3GetCasesCountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get cases count Description: Get case count. (asynchronously)
     * 
     * @param workflowv3GetCasesCountRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowGetCasesCountAsync(Workflowv3GetCasesCountRequest workflowv3GetCasesCountRequest, final ApiCallback<Workflowv3GetCasesCountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowGetCasesCountValidateBeforeCall(workflowv3GetCasesCountRequest, _callback);
        Type localVarReturnType = new TypeToken<Workflowv3GetCasesCountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowGetFilename
     * @param caseId Can be \&quot;*\&quot; if JWT token contains the case_id. (required)
     * @param taskId Can be \&quot;*\&quot; if JWT token contains the task_id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call workflowGetFilenameCall(String caseId, String taskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/cases/{case_id}/tasks/{task_id}/filename"
            .replace("{" + "case_id" + "}", localVarApiClient.escapeString(caseId.toString()))
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowGetFilenameValidateBeforeCall(String caseId, String taskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'caseId' is set
        if (caseId == null) {
            throw new ApiException("Missing the required parameter 'caseId' when calling workflowGetFilename(Async)");
        }

        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling workflowGetFilename(Async)");
        }

        return workflowGetFilenameCall(caseId, taskId, _callback);

    }

    /**
     * Summary: Get filename Description: Return filename associated with the task referenced in the associated context record.
     * 
     * @param caseId Can be \&quot;*\&quot; if JWT token contains the case_id. (required)
     * @param taskId Can be \&quot;*\&quot; if JWT token contains the task_id. (required)
     * @return Workflowv3GetFilenameResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Workflowv3GetFilenameResponse workflowGetFilename(String caseId, String taskId) throws ApiException {
        ApiResponse<Workflowv3GetFilenameResponse> localVarResp = workflowGetFilenameWithHttpInfo(caseId, taskId);
        return localVarResp.getData();
    }

    /**
     * Summary: Get filename Description: Return filename associated with the task referenced in the associated context record.
     * 
     * @param caseId Can be \&quot;*\&quot; if JWT token contains the case_id. (required)
     * @param taskId Can be \&quot;*\&quot; if JWT token contains the task_id. (required)
     * @return ApiResponse&lt;Workflowv3GetFilenameResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Workflowv3GetFilenameResponse> workflowGetFilenameWithHttpInfo(String caseId, String taskId) throws ApiException {
        okhttp3.Call localVarCall = workflowGetFilenameValidateBeforeCall(caseId, taskId, null);
        Type localVarReturnType = new TypeToken<Workflowv3GetFilenameResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get filename Description: Return filename associated with the task referenced in the associated context record. (asynchronously)
     * 
     * @param caseId Can be \&quot;*\&quot; if JWT token contains the case_id. (required)
     * @param taskId Can be \&quot;*\&quot; if JWT token contains the task_id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call workflowGetFilenameAsync(String caseId, String taskId, final ApiCallback<Workflowv3GetFilenameResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowGetFilenameValidateBeforeCall(caseId, taskId, _callback);
        Type localVarReturnType = new TypeToken<Workflowv3GetFilenameResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowGetJobsCount
     * @param caseId Case ID - can be * for all (required)
     * @param workflowv3GetJobsCountRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowGetJobsCountCall(String caseId, Workflowv3GetJobsCountRequest workflowv3GetJobsCountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workflowv3GetJobsCountRequest;

        // create path and map variables
        String localVarPath = "/api/v3/cases/{case_id}/jobs/count"
            .replace("{" + "case_id" + "}", localVarApiClient.escapeString(caseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowGetJobsCountValidateBeforeCall(String caseId, Workflowv3GetJobsCountRequest workflowv3GetJobsCountRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'caseId' is set
        if (caseId == null) {
            throw new ApiException("Missing the required parameter 'caseId' when calling workflowGetJobsCount(Async)");
        }

        // verify the required parameter 'workflowv3GetJobsCountRequest' is set
        if (workflowv3GetJobsCountRequest == null) {
            throw new ApiException("Missing the required parameter 'workflowv3GetJobsCountRequest' when calling workflowGetJobsCount(Async)");
        }

        return workflowGetJobsCountCall(caseId, workflowv3GetJobsCountRequest, _callback);

    }

    /**
     * Summary: Get jobs count Description: Get jobs count.
     * 
     * @param caseId Case ID - can be * for all (required)
     * @param workflowv3GetJobsCountRequest  (required)
     * @return Workflowv3GetJobsCountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Workflowv3GetJobsCountResponse workflowGetJobsCount(String caseId, Workflowv3GetJobsCountRequest workflowv3GetJobsCountRequest) throws ApiException {
        ApiResponse<Workflowv3GetJobsCountResponse> localVarResp = workflowGetJobsCountWithHttpInfo(caseId, workflowv3GetJobsCountRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Get jobs count Description: Get jobs count.
     * 
     * @param caseId Case ID - can be * for all (required)
     * @param workflowv3GetJobsCountRequest  (required)
     * @return ApiResponse&lt;Workflowv3GetJobsCountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Workflowv3GetJobsCountResponse> workflowGetJobsCountWithHttpInfo(String caseId, Workflowv3GetJobsCountRequest workflowv3GetJobsCountRequest) throws ApiException {
        okhttp3.Call localVarCall = workflowGetJobsCountValidateBeforeCall(caseId, workflowv3GetJobsCountRequest, null);
        Type localVarReturnType = new TypeToken<Workflowv3GetJobsCountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get jobs count Description: Get jobs count. (asynchronously)
     * 
     * @param caseId Case ID - can be * for all (required)
     * @param workflowv3GetJobsCountRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowGetJobsCountAsync(String caseId, Workflowv3GetJobsCountRequest workflowv3GetJobsCountRequest, final ApiCallback<Workflowv3GetJobsCountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowGetJobsCountValidateBeforeCall(caseId, workflowv3GetJobsCountRequest, _callback);
        Type localVarReturnType = new TypeToken<Workflowv3GetJobsCountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowGetReportResult
     * @param caseId ID to get the case  (read-only). (required)
     * @param taskId ID to get the task for case(read-only). (required)
     * @param offset Optional starting point for the page of data. (optional)
     * @param limit Optional page size. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call workflowGetReportResultCall(String caseId, String taskId, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/cases/{case_id}/tasks/{task_id}/result"
            .replace("{" + "case_id" + "}", localVarApiClient.escapeString(caseId.toString()))
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowGetReportResultValidateBeforeCall(String caseId, String taskId, Integer offset, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'caseId' is set
        if (caseId == null) {
            throw new ApiException("Missing the required parameter 'caseId' when calling workflowGetReportResult(Async)");
        }

        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling workflowGetReportResult(Async)");
        }

        return workflowGetReportResultCall(caseId, taskId, offset, limit, _callback);

    }

    /**
     * Summary: Get report result Description: Return a page of results.
     * 
     * @param caseId ID to get the case  (read-only). (required)
     * @param taskId ID to get the task for case(read-only). (required)
     * @param offset Optional starting point for the page of data. (optional)
     * @param limit Optional page size. (optional)
     * @return Workflowv3GetReportResultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Workflowv3GetReportResultResponse workflowGetReportResult(String caseId, String taskId, Integer offset, Integer limit) throws ApiException {
        ApiResponse<Workflowv3GetReportResultResponse> localVarResp = workflowGetReportResultWithHttpInfo(caseId, taskId, offset, limit);
        return localVarResp.getData();
    }

    /**
     * Summary: Get report result Description: Return a page of results.
     * 
     * @param caseId ID to get the case  (read-only). (required)
     * @param taskId ID to get the task for case(read-only). (required)
     * @param offset Optional starting point for the page of data. (optional)
     * @param limit Optional page size. (optional)
     * @return ApiResponse&lt;Workflowv3GetReportResultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Workflowv3GetReportResultResponse> workflowGetReportResultWithHttpInfo(String caseId, String taskId, Integer offset, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = workflowGetReportResultValidateBeforeCall(caseId, taskId, offset, limit, null);
        Type localVarReturnType = new TypeToken<Workflowv3GetReportResultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get report result Description: Return a page of results. (asynchronously)
     * 
     * @param caseId ID to get the case  (read-only). (required)
     * @param taskId ID to get the task for case(read-only). (required)
     * @param offset Optional starting point for the page of data. (optional)
     * @param limit Optional page size. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call workflowGetReportResultAsync(String caseId, String taskId, Integer offset, Integer limit, final ApiCallback<Workflowv3GetReportResultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowGetReportResultValidateBeforeCall(caseId, taskId, offset, limit, _callback);
        Type localVarReturnType = new TypeToken<Workflowv3GetReportResultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowGetTasks
     * @param caseId Mandaroty: The parent case which contains the tasks. (required)
     * @param taskId Optional: task_id to return an array of one. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowGetTasksCall(String caseId, String taskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/cases/{case_id}/tasks"
            .replace("{" + "case_id" + "}", localVarApiClient.escapeString(caseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (taskId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("task_id", taskId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowGetTasksValidateBeforeCall(String caseId, String taskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'caseId' is set
        if (caseId == null) {
            throw new ApiException("Missing the required parameter 'caseId' when calling workflowGetTasks(Async)");
        }

        return workflowGetTasksCall(caseId, taskId, _callback);

    }

    /**
     * Summary: Get tasks Description: Return all tasks requested.
     * 
     * @param caseId Mandaroty: The parent case which contains the tasks. (required)
     * @param taskId Optional: task_id to return an array of one. (optional)
     * @return Workflowv3TaskListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Workflowv3TaskListResponse workflowGetTasks(String caseId, String taskId) throws ApiException {
        ApiResponse<Workflowv3TaskListResponse> localVarResp = workflowGetTasksWithHttpInfo(caseId, taskId);
        return localVarResp.getData();
    }

    /**
     * Summary: Get tasks Description: Return all tasks requested.
     * 
     * @param caseId Mandaroty: The parent case which contains the tasks. (required)
     * @param taskId Optional: task_id to return an array of one. (optional)
     * @return ApiResponse&lt;Workflowv3TaskListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Workflowv3TaskListResponse> workflowGetTasksWithHttpInfo(String caseId, String taskId) throws ApiException {
        okhttp3.Call localVarCall = workflowGetTasksValidateBeforeCall(caseId, taskId, null);
        Type localVarReturnType = new TypeToken<Workflowv3TaskListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get tasks Description: Return all tasks requested. (asynchronously)
     * 
     * @param caseId Mandaroty: The parent case which contains the tasks. (required)
     * @param taskId Optional: task_id to return an array of one. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowGetTasksAsync(String caseId, String taskId, final ApiCallback<Workflowv3TaskListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowGetTasksValidateBeforeCall(caseId, taskId, _callback);
        Type localVarReturnType = new TypeToken<Workflowv3TaskListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowGetTasksCount
     * @param caseId Case ID - can be * for all (required)
     * @param workflowv3GetTasksCountRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowGetTasksCountCall(String caseId, Workflowv3GetTasksCountRequest workflowv3GetTasksCountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workflowv3GetTasksCountRequest;

        // create path and map variables
        String localVarPath = "/api/v3/cases/{case_id}/tasks/count"
            .replace("{" + "case_id" + "}", localVarApiClient.escapeString(caseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowGetTasksCountValidateBeforeCall(String caseId, Workflowv3GetTasksCountRequest workflowv3GetTasksCountRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'caseId' is set
        if (caseId == null) {
            throw new ApiException("Missing the required parameter 'caseId' when calling workflowGetTasksCount(Async)");
        }

        // verify the required parameter 'workflowv3GetTasksCountRequest' is set
        if (workflowv3GetTasksCountRequest == null) {
            throw new ApiException("Missing the required parameter 'workflowv3GetTasksCountRequest' when calling workflowGetTasksCount(Async)");
        }

        return workflowGetTasksCountCall(caseId, workflowv3GetTasksCountRequest, _callback);

    }

    /**
     * Summary: Get cases count Description: Get case count.
     * 
     * @param caseId Case ID - can be * for all (required)
     * @param workflowv3GetTasksCountRequest  (required)
     * @return Workflowv3GetTasksCountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Workflowv3GetTasksCountResponse workflowGetTasksCount(String caseId, Workflowv3GetTasksCountRequest workflowv3GetTasksCountRequest) throws ApiException {
        ApiResponse<Workflowv3GetTasksCountResponse> localVarResp = workflowGetTasksCountWithHttpInfo(caseId, workflowv3GetTasksCountRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Get cases count Description: Get case count.
     * 
     * @param caseId Case ID - can be * for all (required)
     * @param workflowv3GetTasksCountRequest  (required)
     * @return ApiResponse&lt;Workflowv3GetTasksCountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Workflowv3GetTasksCountResponse> workflowGetTasksCountWithHttpInfo(String caseId, Workflowv3GetTasksCountRequest workflowv3GetTasksCountRequest) throws ApiException {
        okhttp3.Call localVarCall = workflowGetTasksCountValidateBeforeCall(caseId, workflowv3GetTasksCountRequest, null);
        Type localVarReturnType = new TypeToken<Workflowv3GetTasksCountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get cases count Description: Get case count. (asynchronously)
     * 
     * @param caseId Case ID - can be * for all (required)
     * @param workflowv3GetTasksCountRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowGetTasksCountAsync(String caseId, Workflowv3GetTasksCountRequest workflowv3GetTasksCountRequest, final ApiCallback<Workflowv3GetTasksCountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowGetTasksCountValidateBeforeCall(caseId, workflowv3GetTasksCountRequest, _callback);
        Type localVarReturnType = new TypeToken<Workflowv3GetTasksCountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowSearchCases
     * @param workflowv3SearchCasesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowSearchCasesCall(Workflowv3SearchCasesRequest workflowv3SearchCasesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workflowv3SearchCasesRequest;

        // create path and map variables
        String localVarPath = "/api/v3/cases/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowSearchCasesValidateBeforeCall(Workflowv3SearchCasesRequest workflowv3SearchCasesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workflowv3SearchCasesRequest' is set
        if (workflowv3SearchCasesRequest == null) {
            throw new ApiException("Missing the required parameter 'workflowv3SearchCasesRequest' when calling workflowSearchCases(Async)");
        }

        return workflowSearchCasesCall(workflowv3SearchCasesRequest, _callback);

    }

    /**
     * Summary: Search cases Description: Return a subset of cases.
     * 
     * @param workflowv3SearchCasesRequest  (required)
     * @return Workflowv3CaseListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Workflowv3CaseListResponse workflowSearchCases(Workflowv3SearchCasesRequest workflowv3SearchCasesRequest) throws ApiException {
        ApiResponse<Workflowv3CaseListResponse> localVarResp = workflowSearchCasesWithHttpInfo(workflowv3SearchCasesRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Search cases Description: Return a subset of cases.
     * 
     * @param workflowv3SearchCasesRequest  (required)
     * @return ApiResponse&lt;Workflowv3CaseListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Workflowv3CaseListResponse> workflowSearchCasesWithHttpInfo(Workflowv3SearchCasesRequest workflowv3SearchCasesRequest) throws ApiException {
        okhttp3.Call localVarCall = workflowSearchCasesValidateBeforeCall(workflowv3SearchCasesRequest, null);
        Type localVarReturnType = new TypeToken<Workflowv3CaseListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Search cases Description: Return a subset of cases. (asynchronously)
     * 
     * @param workflowv3SearchCasesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowSearchCasesAsync(Workflowv3SearchCasesRequest workflowv3SearchCasesRequest, final ApiCallback<Workflowv3CaseListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowSearchCasesValidateBeforeCall(workflowv3SearchCasesRequest, _callback);
        Type localVarReturnType = new TypeToken<Workflowv3CaseListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowSearchReports
     * @param workflowv3SearchCasesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowSearchReportsCall(Workflowv3SearchCasesRequest workflowv3SearchCasesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workflowv3SearchCasesRequest;

        // create path and map variables
        String localVarPath = "/api/v3/cases/reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowSearchReportsValidateBeforeCall(Workflowv3SearchCasesRequest workflowv3SearchCasesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workflowv3SearchCasesRequest' is set
        if (workflowv3SearchCasesRequest == null) {
            throw new ApiException("Missing the required parameter 'workflowv3SearchCasesRequest' when calling workflowSearchReports(Async)");
        }

        return workflowSearchReportsCall(workflowv3SearchCasesRequest, _callback);

    }

    /**
     * Summary: Get a list of report IDs Description: Returns a list of report IDs referenced in all cases and tasks
     * 
     * @param workflowv3SearchCasesRequest  (required)
     * @return Workflowv3SearchReportsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Workflowv3SearchReportsResponse workflowSearchReports(Workflowv3SearchCasesRequest workflowv3SearchCasesRequest) throws ApiException {
        ApiResponse<Workflowv3SearchReportsResponse> localVarResp = workflowSearchReportsWithHttpInfo(workflowv3SearchCasesRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Get a list of report IDs Description: Returns a list of report IDs referenced in all cases and tasks
     * 
     * @param workflowv3SearchCasesRequest  (required)
     * @return ApiResponse&lt;Workflowv3SearchReportsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Workflowv3SearchReportsResponse> workflowSearchReportsWithHttpInfo(Workflowv3SearchCasesRequest workflowv3SearchCasesRequest) throws ApiException {
        okhttp3.Call localVarCall = workflowSearchReportsValidateBeforeCall(workflowv3SearchCasesRequest, null);
        Type localVarReturnType = new TypeToken<Workflowv3SearchReportsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get a list of report IDs Description: Returns a list of report IDs referenced in all cases and tasks (asynchronously)
     * 
     * @param workflowv3SearchCasesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowSearchReportsAsync(Workflowv3SearchCasesRequest workflowv3SearchCasesRequest, final ApiCallback<Workflowv3SearchReportsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowSearchReportsValidateBeforeCall(workflowv3SearchCasesRequest, _callback);
        Type localVarReturnType = new TypeToken<Workflowv3SearchReportsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowSearchTasks
     * @param caseId Case ID - can be * for all (required)
     * @param workflowv3SearchTasksRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowSearchTasksCall(String caseId, Workflowv3SearchTasksRequest workflowv3SearchTasksRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workflowv3SearchTasksRequest;

        // create path and map variables
        String localVarPath = "/api/v3/cases/{case_id}/tasks/search"
            .replace("{" + "case_id" + "}", localVarApiClient.escapeString(caseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowSearchTasksValidateBeforeCall(String caseId, Workflowv3SearchTasksRequest workflowv3SearchTasksRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'caseId' is set
        if (caseId == null) {
            throw new ApiException("Missing the required parameter 'caseId' when calling workflowSearchTasks(Async)");
        }

        // verify the required parameter 'workflowv3SearchTasksRequest' is set
        if (workflowv3SearchTasksRequest == null) {
            throw new ApiException("Missing the required parameter 'workflowv3SearchTasksRequest' when calling workflowSearchTasks(Async)");
        }

        return workflowSearchTasksCall(caseId, workflowv3SearchTasksRequest, _callback);

    }

    /**
     * Summary: Search cases Description: Return a subset of cases.
     * 
     * @param caseId Case ID - can be * for all (required)
     * @param workflowv3SearchTasksRequest  (required)
     * @return Workflowv3TaskListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Workflowv3TaskListResponse workflowSearchTasks(String caseId, Workflowv3SearchTasksRequest workflowv3SearchTasksRequest) throws ApiException {
        ApiResponse<Workflowv3TaskListResponse> localVarResp = workflowSearchTasksWithHttpInfo(caseId, workflowv3SearchTasksRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Search cases Description: Return a subset of cases.
     * 
     * @param caseId Case ID - can be * for all (required)
     * @param workflowv3SearchTasksRequest  (required)
     * @return ApiResponse&lt;Workflowv3TaskListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Workflowv3TaskListResponse> workflowSearchTasksWithHttpInfo(String caseId, Workflowv3SearchTasksRequest workflowv3SearchTasksRequest) throws ApiException {
        okhttp3.Call localVarCall = workflowSearchTasksValidateBeforeCall(caseId, workflowv3SearchTasksRequest, null);
        Type localVarReturnType = new TypeToken<Workflowv3TaskListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Search cases Description: Return a subset of cases. (asynchronously)
     * 
     * @param caseId Case ID - can be * for all (required)
     * @param workflowv3SearchTasksRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowSearchTasksAsync(String caseId, Workflowv3SearchTasksRequest workflowv3SearchTasksRequest, final ApiCallback<Workflowv3TaskListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowSearchTasksValidateBeforeCall(caseId, workflowv3SearchTasksRequest, _callback);
        Type localVarReturnType = new TypeToken<Workflowv3TaskListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowUpdateCases
     * @param workflowv3UpdateCasesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowUpdateCasesCall(Workflowv3UpdateCasesRequest workflowv3UpdateCasesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workflowv3UpdateCasesRequest;

        // create path and map variables
        String localVarPath = "/api/v3/cases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowUpdateCasesValidateBeforeCall(Workflowv3UpdateCasesRequest workflowv3UpdateCasesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workflowv3UpdateCasesRequest' is set
        if (workflowv3UpdateCasesRequest == null) {
            throw new ApiException("Missing the required parameter 'workflowv3UpdateCasesRequest' when calling workflowUpdateCases(Async)");
        }

        return workflowUpdateCasesCall(workflowv3UpdateCasesRequest, _callback);

    }

    /**
     * Summary: Update cases Description: Update multiple cases in one request.
     * 
     * @param workflowv3UpdateCasesRequest  (required)
     * @return Workflowv3UpdateCasesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Workflowv3UpdateCasesResponse workflowUpdateCases(Workflowv3UpdateCasesRequest workflowv3UpdateCasesRequest) throws ApiException {
        ApiResponse<Workflowv3UpdateCasesResponse> localVarResp = workflowUpdateCasesWithHttpInfo(workflowv3UpdateCasesRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Update cases Description: Update multiple cases in one request.
     * 
     * @param workflowv3UpdateCasesRequest  (required)
     * @return ApiResponse&lt;Workflowv3UpdateCasesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Workflowv3UpdateCasesResponse> workflowUpdateCasesWithHttpInfo(Workflowv3UpdateCasesRequest workflowv3UpdateCasesRequest) throws ApiException {
        okhttp3.Call localVarCall = workflowUpdateCasesValidateBeforeCall(workflowv3UpdateCasesRequest, null);
        Type localVarReturnType = new TypeToken<Workflowv3UpdateCasesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Update cases Description: Update multiple cases in one request. (asynchronously)
     * 
     * @param workflowv3UpdateCasesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowUpdateCasesAsync(Workflowv3UpdateCasesRequest workflowv3UpdateCasesRequest, final ApiCallback<Workflowv3UpdateCasesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowUpdateCasesValidateBeforeCall(workflowv3UpdateCasesRequest, _callback);
        Type localVarReturnType = new TypeToken<Workflowv3UpdateCasesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowUpdateTasks
     * @param caseId Update tasks belonging to common parent. (required)
     * @param workflowv3UpdateTasksRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowUpdateTasksCall(String caseId, Workflowv3UpdateTasksRequest workflowv3UpdateTasksRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workflowv3UpdateTasksRequest;

        // create path and map variables
        String localVarPath = "/api/v3/cases/{case_id}/tasks"
            .replace("{" + "case_id" + "}", localVarApiClient.escapeString(caseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowUpdateTasksValidateBeforeCall(String caseId, Workflowv3UpdateTasksRequest workflowv3UpdateTasksRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'caseId' is set
        if (caseId == null) {
            throw new ApiException("Missing the required parameter 'caseId' when calling workflowUpdateTasks(Async)");
        }

        // verify the required parameter 'workflowv3UpdateTasksRequest' is set
        if (workflowv3UpdateTasksRequest == null) {
            throw new ApiException("Missing the required parameter 'workflowv3UpdateTasksRequest' when calling workflowUpdateTasks(Async)");
        }

        return workflowUpdateTasksCall(caseId, workflowv3UpdateTasksRequest, _callback);

    }

    /**
     * Summary: Update tasks Description: Update multiple tasks for the same parent in one request.
     * 
     * @param caseId Update tasks belonging to common parent. (required)
     * @param workflowv3UpdateTasksRequest  (required)
     * @return Workflowv3UpdateTasksResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Workflowv3UpdateTasksResponse workflowUpdateTasks(String caseId, Workflowv3UpdateTasksRequest workflowv3UpdateTasksRequest) throws ApiException {
        ApiResponse<Workflowv3UpdateTasksResponse> localVarResp = workflowUpdateTasksWithHttpInfo(caseId, workflowv3UpdateTasksRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Update tasks Description: Update multiple tasks for the same parent in one request.
     * 
     * @param caseId Update tasks belonging to common parent. (required)
     * @param workflowv3UpdateTasksRequest  (required)
     * @return ApiResponse&lt;Workflowv3UpdateTasksResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Workflowv3UpdateTasksResponse> workflowUpdateTasksWithHttpInfo(String caseId, Workflowv3UpdateTasksRequest workflowv3UpdateTasksRequest) throws ApiException {
        okhttp3.Call localVarCall = workflowUpdateTasksValidateBeforeCall(caseId, workflowv3UpdateTasksRequest, null);
        Type localVarReturnType = new TypeToken<Workflowv3UpdateTasksResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Update tasks Description: Update multiple tasks for the same parent in one request. (asynchronously)
     * 
     * @param caseId Update tasks belonging to common parent. (required)
     * @param workflowv3UpdateTasksRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowUpdateTasksAsync(String caseId, Workflowv3UpdateTasksRequest workflowv3UpdateTasksRequest, final ApiCallback<Workflowv3UpdateTasksResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowUpdateTasksValidateBeforeCall(caseId, workflowv3UpdateTasksRequest, _callback);
        Type localVarReturnType = new TypeToken<Workflowv3UpdateTasksResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
