/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.gdsc.sdk.Reportsv3DateRange;
import com.ibm.gdsc.sdk.Reportsv3HeaderType;
import com.ibm.gdsc.sdk.Reportsv3OperatorType;
import com.ibm.gdsc.sdk.Reportsv3ParameterType;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.JSON;

/**
 * ReportFilterCondition represents a report filter condition.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-15T03:58:58.617687Z[UTC]", comments = "Generator version: 7.6.0")
public class Reportsv3ReportFilterCondition {
  public static final String SERIALIZED_NAME_CASE_INSENSITIVE = "case_insensitive";
  @SerializedName(SERIALIZED_NAME_CASE_INSENSITIVE)
  private Boolean caseInsensitive;

  public static final String SERIALIZED_NAME_FIELD_NLS_TRANSLATION_KEY = "field_nls_translation_key";
  @SerializedName(SERIALIZED_NAME_FIELD_NLS_TRANSLATION_KEY)
  private String fieldNlsTranslationKey;

  public static final String SERIALIZED_NAME_FILTER_ID = "filter_id";
  @SerializedName(SERIALIZED_NAME_FILTER_ID)
  private Integer filterId;

  public static final String SERIALIZED_NAME_HEADER_ID = "header_id";
  @SerializedName(SERIALIZED_NAME_HEADER_ID)
  private String headerId;

  public static final String SERIALIZED_NAME_HEADER_NAME = "header_name";
  @SerializedName(SERIALIZED_NAME_HEADER_NAME)
  private String headerName;

  public static final String SERIALIZED_NAME_HEADER_TYPE = "header_type";
  @SerializedName(SERIALIZED_NAME_HEADER_TYPE)
  private Reportsv3HeaderType headerType = Reportsv3HeaderType.UNDEFINED_TYPE;

  public static final String SERIALIZED_NAME_IN_REPORT_DATE_RANGE = "in_report_date_range";
  @SerializedName(SERIALIZED_NAME_IN_REPORT_DATE_RANGE)
  private Reportsv3DateRange inReportDateRange;

  public static final String SERIALIZED_NAME_IN_REPORT_FIELD_NLS_KEY = "in_report_field_nls_key";
  @SerializedName(SERIALIZED_NAME_IN_REPORT_FIELD_NLS_KEY)
  private String inReportFieldNlsKey;

  public static final String SERIALIZED_NAME_IN_REPORT_HEADER_ID = "in_report_header_id";
  @SerializedName(SERIALIZED_NAME_IN_REPORT_HEADER_ID)
  private String inReportHeaderId;

  public static final String SERIALIZED_NAME_IN_REPORT_HEADER_NAME = "in_report_header_name";
  @SerializedName(SERIALIZED_NAME_IN_REPORT_HEADER_NAME)
  private String inReportHeaderName;

  public static final String SERIALIZED_NAME_IN_REPORT_ID = "in_report_id";
  @SerializedName(SERIALIZED_NAME_IN_REPORT_ID)
  private String inReportId;

  public static final String SERIALIZED_NAME_IN_REPORT_NAME = "in_report_name";
  @SerializedName(SERIALIZED_NAME_IN_REPORT_NAME)
  private String inReportName;

  public static final String SERIALIZED_NAME_IN_REPORT_TABLE_NAME = "in_report_table_name";
  @SerializedName(SERIALIZED_NAME_IN_REPORT_TABLE_NAME)
  private String inReportTableName;

  public static final String SERIALIZED_NAME_OPERATOR_TYPE = "operator_type";
  @SerializedName(SERIALIZED_NAME_OPERATOR_TYPE)
  private Reportsv3OperatorType operatorType = Reportsv3OperatorType.UNDEFINED_OPERATOR_TYPE;

  public static final String SERIALIZED_NAME_PARAMETER_TYPE = "parameter_type";
  @SerializedName(SERIALIZED_NAME_PARAMETER_TYPE)
  private Reportsv3ParameterType parameterType = Reportsv3ParameterType.UNDEFINED_PARAM_TYPE;

  public static final String SERIALIZED_NAME_SCHEMA_NAME = "schema_name";
  @SerializedName(SERIALIZED_NAME_SCHEMA_NAME)
  private String schemaName;

  public static final String SERIALIZED_NAME_SEQUENCE = "sequence";
  @SerializedName(SERIALIZED_NAME_SEQUENCE)
  private Integer sequence;

  public static final String SERIALIZED_NAME_TABLE_NAME = "table_name";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  private String tableName;

  public static final String SERIALIZED_NAME_VALUES = "values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private List<String> values = new ArrayList<>();

  public Reportsv3ReportFilterCondition() {
  }

  public Reportsv3ReportFilterCondition caseInsensitive(Boolean caseInsensitive) {
    this.caseInsensitive = caseInsensitive;
    return this;
  }

   /**
   * Case Insensitive - Whether the condition is case insensitive or case sensitive.
   * @return caseInsensitive
  **/
  @javax.annotation.Nullable
  public Boolean getCaseInsensitive() {
    return caseInsensitive;
  }

  public void setCaseInsensitive(Boolean caseInsensitive) {
    this.caseInsensitive = caseInsensitive;
  }


  public Reportsv3ReportFilterCondition fieldNlsTranslationKey(String fieldNlsTranslationKey) {
    this.fieldNlsTranslationKey = fieldNlsTranslationKey;
    return this;
  }

   /**
   * Get fieldNlsTranslationKey
   * @return fieldNlsTranslationKey
  **/
  @javax.annotation.Nullable
  public String getFieldNlsTranslationKey() {
    return fieldNlsTranslationKey;
  }

  public void setFieldNlsTranslationKey(String fieldNlsTranslationKey) {
    this.fieldNlsTranslationKey = fieldNlsTranslationKey;
  }


  public Reportsv3ReportFilterCondition filterId(Integer filterId) {
    this.filterId = filterId;
    return this;
  }

   /**
   * Get filterId
   * @return filterId
  **/
  @javax.annotation.Nullable
  public Integer getFilterId() {
    return filterId;
  }

  public void setFilterId(Integer filterId) {
    this.filterId = filterId;
  }


  public Reportsv3ReportFilterCondition headerId(String headerId) {
    this.headerId = headerId;
    return this;
  }

   /**
   * Get headerId
   * @return headerId
  **/
  @javax.annotation.Nullable
  public String getHeaderId() {
    return headerId;
  }

  public void setHeaderId(String headerId) {
    this.headerId = headerId;
  }


  public Reportsv3ReportFilterCondition headerName(String headerName) {
    this.headerName = headerName;
    return this;
  }

   /**
   * Get headerName
   * @return headerName
  **/
  @javax.annotation.Nullable
  public String getHeaderName() {
    return headerName;
  }

  public void setHeaderName(String headerName) {
    this.headerName = headerName;
  }


  public Reportsv3ReportFilterCondition headerType(Reportsv3HeaderType headerType) {
    this.headerType = headerType;
    return this;
  }

   /**
   * Get headerType
   * @return headerType
  **/
  @javax.annotation.Nullable
  public Reportsv3HeaderType getHeaderType() {
    return headerType;
  }

  public void setHeaderType(Reportsv3HeaderType headerType) {
    this.headerType = headerType;
  }


  public Reportsv3ReportFilterCondition inReportDateRange(Reportsv3DateRange inReportDateRange) {
    this.inReportDateRange = inReportDateRange;
    return this;
  }

   /**
   * Get inReportDateRange
   * @return inReportDateRange
  **/
  @javax.annotation.Nullable
  public Reportsv3DateRange getInReportDateRange() {
    return inReportDateRange;
  }

  public void setInReportDateRange(Reportsv3DateRange inReportDateRange) {
    this.inReportDateRange = inReportDateRange;
  }


  public Reportsv3ReportFilterCondition inReportFieldNlsKey(String inReportFieldNlsKey) {
    this.inReportFieldNlsKey = inReportFieldNlsKey;
    return this;
  }

   /**
   * Get inReportFieldNlsKey
   * @return inReportFieldNlsKey
  **/
  @javax.annotation.Nullable
  public String getInReportFieldNlsKey() {
    return inReportFieldNlsKey;
  }

  public void setInReportFieldNlsKey(String inReportFieldNlsKey) {
    this.inReportFieldNlsKey = inReportFieldNlsKey;
  }


  public Reportsv3ReportFilterCondition inReportHeaderId(String inReportHeaderId) {
    this.inReportHeaderId = inReportHeaderId;
    return this;
  }

   /**
   * Get inReportHeaderId
   * @return inReportHeaderId
  **/
  @javax.annotation.Nullable
  public String getInReportHeaderId() {
    return inReportHeaderId;
  }

  public void setInReportHeaderId(String inReportHeaderId) {
    this.inReportHeaderId = inReportHeaderId;
  }


  public Reportsv3ReportFilterCondition inReportHeaderName(String inReportHeaderName) {
    this.inReportHeaderName = inReportHeaderName;
    return this;
  }

   /**
   * Get inReportHeaderName
   * @return inReportHeaderName
  **/
  @javax.annotation.Nullable
  public String getInReportHeaderName() {
    return inReportHeaderName;
  }

  public void setInReportHeaderName(String inReportHeaderName) {
    this.inReportHeaderName = inReportHeaderName;
  }


  public Reportsv3ReportFilterCondition inReportId(String inReportId) {
    this.inReportId = inReportId;
    return this;
  }

   /**
   * Get inReportId
   * @return inReportId
  **/
  @javax.annotation.Nullable
  public String getInReportId() {
    return inReportId;
  }

  public void setInReportId(String inReportId) {
    this.inReportId = inReportId;
  }


  public Reportsv3ReportFilterCondition inReportName(String inReportName) {
    this.inReportName = inReportName;
    return this;
  }

   /**
   * Get inReportName
   * @return inReportName
  **/
  @javax.annotation.Nullable
  public String getInReportName() {
    return inReportName;
  }

  public void setInReportName(String inReportName) {
    this.inReportName = inReportName;
  }


  public Reportsv3ReportFilterCondition inReportTableName(String inReportTableName) {
    this.inReportTableName = inReportTableName;
    return this;
  }

   /**
   * Get inReportTableName
   * @return inReportTableName
  **/
  @javax.annotation.Nullable
  public String getInReportTableName() {
    return inReportTableName;
  }

  public void setInReportTableName(String inReportTableName) {
    this.inReportTableName = inReportTableName;
  }


  public Reportsv3ReportFilterCondition operatorType(Reportsv3OperatorType operatorType) {
    this.operatorType = operatorType;
    return this;
  }

   /**
   * Get operatorType
   * @return operatorType
  **/
  @javax.annotation.Nullable
  public Reportsv3OperatorType getOperatorType() {
    return operatorType;
  }

  public void setOperatorType(Reportsv3OperatorType operatorType) {
    this.operatorType = operatorType;
  }


  public Reportsv3ReportFilterCondition parameterType(Reportsv3ParameterType parameterType) {
    this.parameterType = parameterType;
    return this;
  }

   /**
   * Get parameterType
   * @return parameterType
  **/
  @javax.annotation.Nullable
  public Reportsv3ParameterType getParameterType() {
    return parameterType;
  }

  public void setParameterType(Reportsv3ParameterType parameterType) {
    this.parameterType = parameterType;
  }


  public Reportsv3ReportFilterCondition schemaName(String schemaName) {
    this.schemaName = schemaName;
    return this;
  }

   /**
   * Get schemaName
   * @return schemaName
  **/
  @javax.annotation.Nullable
  public String getSchemaName() {
    return schemaName;
  }

  public void setSchemaName(String schemaName) {
    this.schemaName = schemaName;
  }


  public Reportsv3ReportFilterCondition sequence(Integer sequence) {
    this.sequence = sequence;
    return this;
  }

   /**
   * Get sequence
   * @return sequence
  **/
  @javax.annotation.Nullable
  public Integer getSequence() {
    return sequence;
  }

  public void setSequence(Integer sequence) {
    this.sequence = sequence;
  }


  public Reportsv3ReportFilterCondition tableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

   /**
   * Get tableName
   * @return tableName
  **/
  @javax.annotation.Nullable
  public String getTableName() {
    return tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }


  public Reportsv3ReportFilterCondition values(List<String> values) {
    this.values = values;
    return this;
  }

  public Reportsv3ReportFilterCondition addValuesItem(String valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<>();
    }
    this.values.add(valuesItem);
    return this;
  }

   /**
   * Get values
   * @return values
  **/
  @javax.annotation.Nullable
  public List<String> getValues() {
    return values;
  }

  public void setValues(List<String> values) {
    this.values = values;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Reportsv3ReportFilterCondition reportsv3ReportFilterCondition = (Reportsv3ReportFilterCondition) o;
    return Objects.equals(this.caseInsensitive, reportsv3ReportFilterCondition.caseInsensitive) &&
        Objects.equals(this.fieldNlsTranslationKey, reportsv3ReportFilterCondition.fieldNlsTranslationKey) &&
        Objects.equals(this.filterId, reportsv3ReportFilterCondition.filterId) &&
        Objects.equals(this.headerId, reportsv3ReportFilterCondition.headerId) &&
        Objects.equals(this.headerName, reportsv3ReportFilterCondition.headerName) &&
        Objects.equals(this.headerType, reportsv3ReportFilterCondition.headerType) &&
        Objects.equals(this.inReportDateRange, reportsv3ReportFilterCondition.inReportDateRange) &&
        Objects.equals(this.inReportFieldNlsKey, reportsv3ReportFilterCondition.inReportFieldNlsKey) &&
        Objects.equals(this.inReportHeaderId, reportsv3ReportFilterCondition.inReportHeaderId) &&
        Objects.equals(this.inReportHeaderName, reportsv3ReportFilterCondition.inReportHeaderName) &&
        Objects.equals(this.inReportId, reportsv3ReportFilterCondition.inReportId) &&
        Objects.equals(this.inReportName, reportsv3ReportFilterCondition.inReportName) &&
        Objects.equals(this.inReportTableName, reportsv3ReportFilterCondition.inReportTableName) &&
        Objects.equals(this.operatorType, reportsv3ReportFilterCondition.operatorType) &&
        Objects.equals(this.parameterType, reportsv3ReportFilterCondition.parameterType) &&
        Objects.equals(this.schemaName, reportsv3ReportFilterCondition.schemaName) &&
        Objects.equals(this.sequence, reportsv3ReportFilterCondition.sequence) &&
        Objects.equals(this.tableName, reportsv3ReportFilterCondition.tableName) &&
        Objects.equals(this.values, reportsv3ReportFilterCondition.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caseInsensitive, fieldNlsTranslationKey, filterId, headerId, headerName, headerType, inReportDateRange, inReportFieldNlsKey, inReportHeaderId, inReportHeaderName, inReportId, inReportName, inReportTableName, operatorType, parameterType, schemaName, sequence, tableName, values);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Reportsv3ReportFilterCondition {\n");
    sb.append("    caseInsensitive: ").append(toIndentedString(caseInsensitive)).append("\n");
    sb.append("    fieldNlsTranslationKey: ").append(toIndentedString(fieldNlsTranslationKey)).append("\n");
    sb.append("    filterId: ").append(toIndentedString(filterId)).append("\n");
    sb.append("    headerId: ").append(toIndentedString(headerId)).append("\n");
    sb.append("    headerName: ").append(toIndentedString(headerName)).append("\n");
    sb.append("    headerType: ").append(toIndentedString(headerType)).append("\n");
    sb.append("    inReportDateRange: ").append(toIndentedString(inReportDateRange)).append("\n");
    sb.append("    inReportFieldNlsKey: ").append(toIndentedString(inReportFieldNlsKey)).append("\n");
    sb.append("    inReportHeaderId: ").append(toIndentedString(inReportHeaderId)).append("\n");
    sb.append("    inReportHeaderName: ").append(toIndentedString(inReportHeaderName)).append("\n");
    sb.append("    inReportId: ").append(toIndentedString(inReportId)).append("\n");
    sb.append("    inReportName: ").append(toIndentedString(inReportName)).append("\n");
    sb.append("    inReportTableName: ").append(toIndentedString(inReportTableName)).append("\n");
    sb.append("    operatorType: ").append(toIndentedString(operatorType)).append("\n");
    sb.append("    parameterType: ").append(toIndentedString(parameterType)).append("\n");
    sb.append("    schemaName: ").append(toIndentedString(schemaName)).append("\n");
    sb.append("    sequence: ").append(toIndentedString(sequence)).append("\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("case_insensitive");
    openapiFields.add("field_nls_translation_key");
    openapiFields.add("filter_id");
    openapiFields.add("header_id");
    openapiFields.add("header_name");
    openapiFields.add("header_type");
    openapiFields.add("in_report_date_range");
    openapiFields.add("in_report_field_nls_key");
    openapiFields.add("in_report_header_id");
    openapiFields.add("in_report_header_name");
    openapiFields.add("in_report_id");
    openapiFields.add("in_report_name");
    openapiFields.add("in_report_table_name");
    openapiFields.add("operator_type");
    openapiFields.add("parameter_type");
    openapiFields.add("schema_name");
    openapiFields.add("sequence");
    openapiFields.add("table_name");
    openapiFields.add("values");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Reportsv3ReportFilterCondition
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Reportsv3ReportFilterCondition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Reportsv3ReportFilterCondition is not found in the empty JSON string", Reportsv3ReportFilterCondition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Reportsv3ReportFilterCondition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Reportsv3ReportFilterCondition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("field_nls_translation_key") != null && !jsonObj.get("field_nls_translation_key").isJsonNull()) && !jsonObj.get("field_nls_translation_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `field_nls_translation_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("field_nls_translation_key").toString()));
      }
      if ((jsonObj.get("header_id") != null && !jsonObj.get("header_id").isJsonNull()) && !jsonObj.get("header_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `header_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("header_id").toString()));
      }
      if ((jsonObj.get("header_name") != null && !jsonObj.get("header_name").isJsonNull()) && !jsonObj.get("header_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `header_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("header_name").toString()));
      }
      // validate the optional field `header_type`
      if (jsonObj.get("header_type") != null && !jsonObj.get("header_type").isJsonNull()) {
        Reportsv3HeaderType.validateJsonElement(jsonObj.get("header_type"));
      }
      // validate the optional field `in_report_date_range`
      if (jsonObj.get("in_report_date_range") != null && !jsonObj.get("in_report_date_range").isJsonNull()) {
        Reportsv3DateRange.validateJsonElement(jsonObj.get("in_report_date_range"));
      }
      if ((jsonObj.get("in_report_field_nls_key") != null && !jsonObj.get("in_report_field_nls_key").isJsonNull()) && !jsonObj.get("in_report_field_nls_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `in_report_field_nls_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("in_report_field_nls_key").toString()));
      }
      if ((jsonObj.get("in_report_header_id") != null && !jsonObj.get("in_report_header_id").isJsonNull()) && !jsonObj.get("in_report_header_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `in_report_header_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("in_report_header_id").toString()));
      }
      if ((jsonObj.get("in_report_header_name") != null && !jsonObj.get("in_report_header_name").isJsonNull()) && !jsonObj.get("in_report_header_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `in_report_header_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("in_report_header_name").toString()));
      }
      if ((jsonObj.get("in_report_id") != null && !jsonObj.get("in_report_id").isJsonNull()) && !jsonObj.get("in_report_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `in_report_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("in_report_id").toString()));
      }
      if ((jsonObj.get("in_report_name") != null && !jsonObj.get("in_report_name").isJsonNull()) && !jsonObj.get("in_report_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `in_report_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("in_report_name").toString()));
      }
      if ((jsonObj.get("in_report_table_name") != null && !jsonObj.get("in_report_table_name").isJsonNull()) && !jsonObj.get("in_report_table_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `in_report_table_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("in_report_table_name").toString()));
      }
      // validate the optional field `operator_type`
      if (jsonObj.get("operator_type") != null && !jsonObj.get("operator_type").isJsonNull()) {
        Reportsv3OperatorType.validateJsonElement(jsonObj.get("operator_type"));
      }
      // validate the optional field `parameter_type`
      if (jsonObj.get("parameter_type") != null && !jsonObj.get("parameter_type").isJsonNull()) {
        Reportsv3ParameterType.validateJsonElement(jsonObj.get("parameter_type"));
      }
      if ((jsonObj.get("schema_name") != null && !jsonObj.get("schema_name").isJsonNull()) && !jsonObj.get("schema_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schema_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schema_name").toString()));
      }
      if ((jsonObj.get("table_name") != null && !jsonObj.get("table_name").isJsonNull()) && !jsonObj.get("table_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `table_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("table_name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("values") != null && !jsonObj.get("values").isJsonNull() && !jsonObj.get("values").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `values` to be an array in the JSON string but got `%s`", jsonObj.get("values").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Reportsv3ReportFilterCondition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Reportsv3ReportFilterCondition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Reportsv3ReportFilterCondition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Reportsv3ReportFilterCondition.class));

       return (TypeAdapter<T>) new TypeAdapter<Reportsv3ReportFilterCondition>() {
           @Override
           public void write(JsonWriter out, Reportsv3ReportFilterCondition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Reportsv3ReportFilterCondition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Reportsv3ReportFilterCondition given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Reportsv3ReportFilterCondition
  * @throws IOException if the JSON string is invalid with respect to Reportsv3ReportFilterCondition
  */
  public static Reportsv3ReportFilterCondition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Reportsv3ReportFilterCondition.class);
  }

 /**
  * Convert an instance of Reportsv3ReportFilterCondition to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

