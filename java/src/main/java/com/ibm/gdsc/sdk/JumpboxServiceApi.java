/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import com.ibm.gdsc.ApiCallback;
import com.ibm.gdsc.ApiClient;
import com.ibm.gdsc.ApiException;
import com.ibm.gdsc.ApiResponse;
import com.ibm.gdsc.Configuration;
import com.ibm.gdsc.Pair;
import com.ibm.gdsc.ProgressRequestBody;
import com.ibm.gdsc.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ibm.gdsc.sdk.Jumpboxv3AuthorizeRequest;
import com.ibm.gdsc.sdk.Jumpboxv3AuthorizeResponse;
import com.ibm.gdsc.sdk.Jumpboxv3GetTenantResponse;
import com.ibm.gdsc.sdk.Jumpboxv3GetTenantsResponse;
import com.ibm.gdsc.sdk.Jumpboxv3PostTenantsRequest;
import com.ibm.gdsc.sdk.Jumpboxv3PostTenantsResponse;
import com.ibm.gdsc.sdk.Jumpboxv3PostUsersBulkRequest;
import com.ibm.gdsc.sdk.Jumpboxv3PostUsersBulkResponse;
import com.ibm.gdsc.sdk.Jumpboxv3SearchUsersRequest;
import com.ibm.gdsc.sdk.Jumpboxv3SearchUsersResponse;
import com.ibm.gdsc.sdk.Jumpboxv3TestUserRequest;
import com.ibm.gdsc.sdk.Jumpboxv3TestUserResponse;
import com.ibm.gdsc.sdk.Jumpboxv3UpdateTenantRequest;
import com.ibm.gdsc.sdk.Jumpboxv3UpdateTenantResponse;
import com.ibm.gdsc.sdk.Jumpboxv3UpdateUsersBulkRequest;
import com.ibm.gdsc.sdk.Jumpboxv3UpdateUsersBulkResponse;
import com.ibm.gdsc.sdk.RuntimeError;
import com.ibm.gdsc.sdk.Tenantuserv3GetUsersResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class JumpboxServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public JumpboxServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public JumpboxServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for jumpboxServiceAuthorize
     * @param jumpboxv3AuthorizeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jumpboxServiceAuthorizeCall(Jumpboxv3AuthorizeRequest jumpboxv3AuthorizeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jumpboxv3AuthorizeRequest;

        // create path and map variables
        String localVarPath = "/api/v3/authorization";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jumpboxServiceAuthorizeValidateBeforeCall(Jumpboxv3AuthorizeRequest jumpboxv3AuthorizeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jumpboxv3AuthorizeRequest' is set
        if (jumpboxv3AuthorizeRequest == null) {
            throw new ApiException("Missing the required parameter 'jumpboxv3AuthorizeRequest' when calling jumpboxServiceAuthorize(Async)");
        }

        return jumpboxServiceAuthorizeCall(jumpboxv3AuthorizeRequest, _callback);

    }

    /**
     * Summary: Authorize Description: Authenticate a user and return a JWT.
     * 
     * @param jumpboxv3AuthorizeRequest  (required)
     * @return Jumpboxv3AuthorizeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Jumpboxv3AuthorizeResponse jumpboxServiceAuthorize(Jumpboxv3AuthorizeRequest jumpboxv3AuthorizeRequest) throws ApiException {
        ApiResponse<Jumpboxv3AuthorizeResponse> localVarResp = jumpboxServiceAuthorizeWithHttpInfo(jumpboxv3AuthorizeRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Authorize Description: Authenticate a user and return a JWT.
     * 
     * @param jumpboxv3AuthorizeRequest  (required)
     * @return ApiResponse&lt;Jumpboxv3AuthorizeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Jumpboxv3AuthorizeResponse> jumpboxServiceAuthorizeWithHttpInfo(Jumpboxv3AuthorizeRequest jumpboxv3AuthorizeRequest) throws ApiException {
        okhttp3.Call localVarCall = jumpboxServiceAuthorizeValidateBeforeCall(jumpboxv3AuthorizeRequest, null);
        Type localVarReturnType = new TypeToken<Jumpboxv3AuthorizeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Authorize Description: Authenticate a user and return a JWT. (asynchronously)
     * 
     * @param jumpboxv3AuthorizeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jumpboxServiceAuthorizeAsync(Jumpboxv3AuthorizeRequest jumpboxv3AuthorizeRequest, final ApiCallback<Jumpboxv3AuthorizeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = jumpboxServiceAuthorizeValidateBeforeCall(jumpboxv3AuthorizeRequest, _callback);
        Type localVarReturnType = new TypeToken<Jumpboxv3AuthorizeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jumpboxServiceDeleteTenant
     * @param tenantId Tenant id. (required)
     * @param isPermanentDelete Delete tenant permanently if true. (optional)
     * @param async Async. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jumpboxServiceDeleteTenantCall(String tenantId, Boolean isPermanentDelete, Boolean async, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/tenants/{tenant_id}"
            .replace("{" + "tenant_id" + "}", localVarApiClient.escapeString(tenantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isPermanentDelete != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is_permanent_delete", isPermanentDelete));
        }

        if (async != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("async", async));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jumpboxServiceDeleteTenantValidateBeforeCall(String tenantId, Boolean isPermanentDelete, Boolean async, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling jumpboxServiceDeleteTenant(Async)");
        }

        return jumpboxServiceDeleteTenantCall(tenantId, isPermanentDelete, async, _callback);

    }

    /**
     * Summary: Delete tenant Description: Delete a tenant.
     * 
     * @param tenantId Tenant id. (required)
     * @param isPermanentDelete Delete tenant permanently if true. (optional)
     * @param async Async. (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Object jumpboxServiceDeleteTenant(String tenantId, Boolean isPermanentDelete, Boolean async) throws ApiException {
        ApiResponse<Object> localVarResp = jumpboxServiceDeleteTenantWithHttpInfo(tenantId, isPermanentDelete, async);
        return localVarResp.getData();
    }

    /**
     * Summary: Delete tenant Description: Delete a tenant.
     * 
     * @param tenantId Tenant id. (required)
     * @param isPermanentDelete Delete tenant permanently if true. (optional)
     * @param async Async. (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> jumpboxServiceDeleteTenantWithHttpInfo(String tenantId, Boolean isPermanentDelete, Boolean async) throws ApiException {
        okhttp3.Call localVarCall = jumpboxServiceDeleteTenantValidateBeforeCall(tenantId, isPermanentDelete, async, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Delete tenant Description: Delete a tenant. (asynchronously)
     * 
     * @param tenantId Tenant id. (required)
     * @param isPermanentDelete Delete tenant permanently if true. (optional)
     * @param async Async. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jumpboxServiceDeleteTenantAsync(String tenantId, Boolean isPermanentDelete, Boolean async, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = jumpboxServiceDeleteTenantValidateBeforeCall(tenantId, isPermanentDelete, async, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jumpboxServiceDeleteUser
     * @param userId The user id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jumpboxServiceDeleteUserCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/users/{user_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jumpboxServiceDeleteUserValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling jumpboxServiceDeleteUser(Async)");
        }

        return jumpboxServiceDeleteUserCall(userId, _callback);

    }

    /**
     * Summary: Delete user Description: Delete the user.
     * 
     * @param userId The user id. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Object jumpboxServiceDeleteUser(String userId) throws ApiException {
        ApiResponse<Object> localVarResp = jumpboxServiceDeleteUserWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Summary: Delete user Description: Delete the user.
     * 
     * @param userId The user id. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> jumpboxServiceDeleteUserWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = jumpboxServiceDeleteUserValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Delete user Description: Delete the user. (asynchronously)
     * 
     * @param userId The user id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jumpboxServiceDeleteUserAsync(String userId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = jumpboxServiceDeleteUserValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jumpboxServiceGetTenant
     * @param tenantId Tenant id. (required)
     * @param includeInactive Include inactive. (optional)
     * @param includeNotReady Include tenants that are not ready(are in state of being created or deleted). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jumpboxServiceGetTenantCall(String tenantId, Boolean includeInactive, Boolean includeNotReady, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/tenants/{tenant_id}"
            .replace("{" + "tenant_id" + "}", localVarApiClient.escapeString(tenantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (includeInactive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_inactive", includeInactive));
        }

        if (includeNotReady != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_not_ready", includeNotReady));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jumpboxServiceGetTenantValidateBeforeCall(String tenantId, Boolean includeInactive, Boolean includeNotReady, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling jumpboxServiceGetTenant(Async)");
        }

        return jumpboxServiceGetTenantCall(tenantId, includeInactive, includeNotReady, _callback);

    }

    /**
     * Summary: Get tenant Description: Get a tenant.
     * 
     * @param tenantId Tenant id. (required)
     * @param includeInactive Include inactive. (optional)
     * @param includeNotReady Include tenants that are not ready(are in state of being created or deleted). (optional)
     * @return Jumpboxv3GetTenantResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Jumpboxv3GetTenantResponse jumpboxServiceGetTenant(String tenantId, Boolean includeInactive, Boolean includeNotReady) throws ApiException {
        ApiResponse<Jumpboxv3GetTenantResponse> localVarResp = jumpboxServiceGetTenantWithHttpInfo(tenantId, includeInactive, includeNotReady);
        return localVarResp.getData();
    }

    /**
     * Summary: Get tenant Description: Get a tenant.
     * 
     * @param tenantId Tenant id. (required)
     * @param includeInactive Include inactive. (optional)
     * @param includeNotReady Include tenants that are not ready(are in state of being created or deleted). (optional)
     * @return ApiResponse&lt;Jumpboxv3GetTenantResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Jumpboxv3GetTenantResponse> jumpboxServiceGetTenantWithHttpInfo(String tenantId, Boolean includeInactive, Boolean includeNotReady) throws ApiException {
        okhttp3.Call localVarCall = jumpboxServiceGetTenantValidateBeforeCall(tenantId, includeInactive, includeNotReady, null);
        Type localVarReturnType = new TypeToken<Jumpboxv3GetTenantResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get tenant Description: Get a tenant. (asynchronously)
     * 
     * @param tenantId Tenant id. (required)
     * @param includeInactive Include inactive. (optional)
     * @param includeNotReady Include tenants that are not ready(are in state of being created or deleted). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jumpboxServiceGetTenantAsync(String tenantId, Boolean includeInactive, Boolean includeNotReady, final ApiCallback<Jumpboxv3GetTenantResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = jumpboxServiceGetTenantValidateBeforeCall(tenantId, includeInactive, includeNotReady, _callback);
        Type localVarReturnType = new TypeToken<Jumpboxv3GetTenantResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jumpboxServiceGetTenants
     * @param uid Email. (optional)
     * @param externalId External id. (optional)
     * @param includeInactive Include inactive. (optional)
     * @param includeNotReady Include tenants that are not ready(are in state of being created or deleted). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jumpboxServiceGetTenantsCall(String uid, String externalId, Boolean includeInactive, Boolean includeNotReady, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/tenants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uid", uid));
        }

        if (externalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("external_id", externalId));
        }

        if (includeInactive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_inactive", includeInactive));
        }

        if (includeNotReady != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_not_ready", includeNotReady));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jumpboxServiceGetTenantsValidateBeforeCall(String uid, String externalId, Boolean includeInactive, Boolean includeNotReady, final ApiCallback _callback) throws ApiException {
        return jumpboxServiceGetTenantsCall(uid, externalId, includeInactive, includeNotReady, _callback);

    }

    /**
     * Summary: Get tenants Description: Get all tenant base on UID.
     * 
     * @param uid Email. (optional)
     * @param externalId External id. (optional)
     * @param includeInactive Include inactive. (optional)
     * @param includeNotReady Include tenants that are not ready(are in state of being created or deleted). (optional)
     * @return Jumpboxv3GetTenantsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Jumpboxv3GetTenantsResponse jumpboxServiceGetTenants(String uid, String externalId, Boolean includeInactive, Boolean includeNotReady) throws ApiException {
        ApiResponse<Jumpboxv3GetTenantsResponse> localVarResp = jumpboxServiceGetTenantsWithHttpInfo(uid, externalId, includeInactive, includeNotReady);
        return localVarResp.getData();
    }

    /**
     * Summary: Get tenants Description: Get all tenant base on UID.
     * 
     * @param uid Email. (optional)
     * @param externalId External id. (optional)
     * @param includeInactive Include inactive. (optional)
     * @param includeNotReady Include tenants that are not ready(are in state of being created or deleted). (optional)
     * @return ApiResponse&lt;Jumpboxv3GetTenantsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Jumpboxv3GetTenantsResponse> jumpboxServiceGetTenantsWithHttpInfo(String uid, String externalId, Boolean includeInactive, Boolean includeNotReady) throws ApiException {
        okhttp3.Call localVarCall = jumpboxServiceGetTenantsValidateBeforeCall(uid, externalId, includeInactive, includeNotReady, null);
        Type localVarReturnType = new TypeToken<Jumpboxv3GetTenantsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get tenants Description: Get all tenant base on UID. (asynchronously)
     * 
     * @param uid Email. (optional)
     * @param externalId External id. (optional)
     * @param includeInactive Include inactive. (optional)
     * @param includeNotReady Include tenants that are not ready(are in state of being created or deleted). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jumpboxServiceGetTenantsAsync(String uid, String externalId, Boolean includeInactive, Boolean includeNotReady, final ApiCallback<Jumpboxv3GetTenantsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = jumpboxServiceGetTenantsValidateBeforeCall(uid, externalId, includeInactive, includeNotReady, _callback);
        Type localVarReturnType = new TypeToken<Jumpboxv3GetTenantsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jumpboxServiceGetUsers
     * @param uid Email. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jumpboxServiceGetUsersCall(String uid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (uid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uid", uid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jumpboxServiceGetUsersValidateBeforeCall(String uid, final ApiCallback _callback) throws ApiException {
        return jumpboxServiceGetUsersCall(uid, _callback);

    }

    /**
     * Summary: Get users Description: Get all users base on a tenantID.
     * 
     * @param uid Email. (optional)
     * @return Tenantuserv3GetUsersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Tenantuserv3GetUsersResponse jumpboxServiceGetUsers(String uid) throws ApiException {
        ApiResponse<Tenantuserv3GetUsersResponse> localVarResp = jumpboxServiceGetUsersWithHttpInfo(uid);
        return localVarResp.getData();
    }

    /**
     * Summary: Get users Description: Get all users base on a tenantID.
     * 
     * @param uid Email. (optional)
     * @return ApiResponse&lt;Tenantuserv3GetUsersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tenantuserv3GetUsersResponse> jumpboxServiceGetUsersWithHttpInfo(String uid) throws ApiException {
        okhttp3.Call localVarCall = jumpboxServiceGetUsersValidateBeforeCall(uid, null);
        Type localVarReturnType = new TypeToken<Tenantuserv3GetUsersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get users Description: Get all users base on a tenantID. (asynchronously)
     * 
     * @param uid Email. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jumpboxServiceGetUsersAsync(String uid, final ApiCallback<Tenantuserv3GetUsersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = jumpboxServiceGetUsersValidateBeforeCall(uid, _callback);
        Type localVarReturnType = new TypeToken<Tenantuserv3GetUsersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jumpboxServicePostTenants
     * @param jumpboxv3PostTenantsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jumpboxServicePostTenantsCall(Jumpboxv3PostTenantsRequest jumpboxv3PostTenantsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jumpboxv3PostTenantsRequest;

        // create path and map variables
        String localVarPath = "/api/v3/tenants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jumpboxServicePostTenantsValidateBeforeCall(Jumpboxv3PostTenantsRequest jumpboxv3PostTenantsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jumpboxv3PostTenantsRequest' is set
        if (jumpboxv3PostTenantsRequest == null) {
            throw new ApiException("Missing the required parameter 'jumpboxv3PostTenantsRequest' when calling jumpboxServicePostTenants(Async)");
        }

        return jumpboxServicePostTenantsCall(jumpboxv3PostTenantsRequest, _callback);

    }

    /**
     * Summary: Post tenants Description: Create a tenant.
     * 
     * @param jumpboxv3PostTenantsRequest  (required)
     * @return Jumpboxv3PostTenantsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Jumpboxv3PostTenantsResponse jumpboxServicePostTenants(Jumpboxv3PostTenantsRequest jumpboxv3PostTenantsRequest) throws ApiException {
        ApiResponse<Jumpboxv3PostTenantsResponse> localVarResp = jumpboxServicePostTenantsWithHttpInfo(jumpboxv3PostTenantsRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Post tenants Description: Create a tenant.
     * 
     * @param jumpboxv3PostTenantsRequest  (required)
     * @return ApiResponse&lt;Jumpboxv3PostTenantsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Jumpboxv3PostTenantsResponse> jumpboxServicePostTenantsWithHttpInfo(Jumpboxv3PostTenantsRequest jumpboxv3PostTenantsRequest) throws ApiException {
        okhttp3.Call localVarCall = jumpboxServicePostTenantsValidateBeforeCall(jumpboxv3PostTenantsRequest, null);
        Type localVarReturnType = new TypeToken<Jumpboxv3PostTenantsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Post tenants Description: Create a tenant. (asynchronously)
     * 
     * @param jumpboxv3PostTenantsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jumpboxServicePostTenantsAsync(Jumpboxv3PostTenantsRequest jumpboxv3PostTenantsRequest, final ApiCallback<Jumpboxv3PostTenantsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = jumpboxServicePostTenantsValidateBeforeCall(jumpboxv3PostTenantsRequest, _callback);
        Type localVarReturnType = new TypeToken<Jumpboxv3PostTenantsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jumpboxServicePostUsers
     * @param jumpboxv3PostUsersBulkRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jumpboxServicePostUsersCall(Jumpboxv3PostUsersBulkRequest jumpboxv3PostUsersBulkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jumpboxv3PostUsersBulkRequest;

        // create path and map variables
        String localVarPath = "/api/v3/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jumpboxServicePostUsersValidateBeforeCall(Jumpboxv3PostUsersBulkRequest jumpboxv3PostUsersBulkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jumpboxv3PostUsersBulkRequest' is set
        if (jumpboxv3PostUsersBulkRequest == null) {
            throw new ApiException("Missing the required parameter 'jumpboxv3PostUsersBulkRequest' when calling jumpboxServicePostUsers(Async)");
        }

        return jumpboxServicePostUsersCall(jumpboxv3PostUsersBulkRequest, _callback);

    }

    /**
     * Summary: Post users Description: Create users.
     * 
     * @param jumpboxv3PostUsersBulkRequest  (required)
     * @return Jumpboxv3PostUsersBulkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Jumpboxv3PostUsersBulkResponse jumpboxServicePostUsers(Jumpboxv3PostUsersBulkRequest jumpboxv3PostUsersBulkRequest) throws ApiException {
        ApiResponse<Jumpboxv3PostUsersBulkResponse> localVarResp = jumpboxServicePostUsersWithHttpInfo(jumpboxv3PostUsersBulkRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Post users Description: Create users.
     * 
     * @param jumpboxv3PostUsersBulkRequest  (required)
     * @return ApiResponse&lt;Jumpboxv3PostUsersBulkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Jumpboxv3PostUsersBulkResponse> jumpboxServicePostUsersWithHttpInfo(Jumpboxv3PostUsersBulkRequest jumpboxv3PostUsersBulkRequest) throws ApiException {
        okhttp3.Call localVarCall = jumpboxServicePostUsersValidateBeforeCall(jumpboxv3PostUsersBulkRequest, null);
        Type localVarReturnType = new TypeToken<Jumpboxv3PostUsersBulkResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Post users Description: Create users. (asynchronously)
     * 
     * @param jumpboxv3PostUsersBulkRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jumpboxServicePostUsersAsync(Jumpboxv3PostUsersBulkRequest jumpboxv3PostUsersBulkRequest, final ApiCallback<Jumpboxv3PostUsersBulkResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = jumpboxServicePostUsersValidateBeforeCall(jumpboxv3PostUsersBulkRequest, _callback);
        Type localVarReturnType = new TypeToken<Jumpboxv3PostUsersBulkResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jumpboxServiceSearchUsers
     * @param jumpboxv3SearchUsersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jumpboxServiceSearchUsersCall(Jumpboxv3SearchUsersRequest jumpboxv3SearchUsersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jumpboxv3SearchUsersRequest;

        // create path and map variables
        String localVarPath = "/api/v3/users/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jumpboxServiceSearchUsersValidateBeforeCall(Jumpboxv3SearchUsersRequest jumpboxv3SearchUsersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jumpboxv3SearchUsersRequest' is set
        if (jumpboxv3SearchUsersRequest == null) {
            throw new ApiException("Missing the required parameter 'jumpboxv3SearchUsersRequest' when calling jumpboxServiceSearchUsers(Async)");
        }

        return jumpboxServiceSearchUsersCall(jumpboxv3SearchUsersRequest, _callback);

    }

    /**
     * Summary: Search users Description: Search for all users matching the provided string.
     * 
     * @param jumpboxv3SearchUsersRequest  (required)
     * @return Jumpboxv3SearchUsersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Jumpboxv3SearchUsersResponse jumpboxServiceSearchUsers(Jumpboxv3SearchUsersRequest jumpboxv3SearchUsersRequest) throws ApiException {
        ApiResponse<Jumpboxv3SearchUsersResponse> localVarResp = jumpboxServiceSearchUsersWithHttpInfo(jumpboxv3SearchUsersRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Search users Description: Search for all users matching the provided string.
     * 
     * @param jumpboxv3SearchUsersRequest  (required)
     * @return ApiResponse&lt;Jumpboxv3SearchUsersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Jumpboxv3SearchUsersResponse> jumpboxServiceSearchUsersWithHttpInfo(Jumpboxv3SearchUsersRequest jumpboxv3SearchUsersRequest) throws ApiException {
        okhttp3.Call localVarCall = jumpboxServiceSearchUsersValidateBeforeCall(jumpboxv3SearchUsersRequest, null);
        Type localVarReturnType = new TypeToken<Jumpboxv3SearchUsersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Search users Description: Search for all users matching the provided string. (asynchronously)
     * 
     * @param jumpboxv3SearchUsersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jumpboxServiceSearchUsersAsync(Jumpboxv3SearchUsersRequest jumpboxv3SearchUsersRequest, final ApiCallback<Jumpboxv3SearchUsersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = jumpboxServiceSearchUsersValidateBeforeCall(jumpboxv3SearchUsersRequest, _callback);
        Type localVarReturnType = new TypeToken<Jumpboxv3SearchUsersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jumpboxServiceTestUser
     * @param jumpboxv3TestUserRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jumpboxServiceTestUserCall(Jumpboxv3TestUserRequest jumpboxv3TestUserRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jumpboxv3TestUserRequest;

        // create path and map variables
        String localVarPath = "/api/v3/users/test";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jumpboxServiceTestUserValidateBeforeCall(Jumpboxv3TestUserRequest jumpboxv3TestUserRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jumpboxv3TestUserRequest' is set
        if (jumpboxv3TestUserRequest == null) {
            throw new ApiException("Missing the required parameter 'jumpboxv3TestUserRequest' when calling jumpboxServiceTestUser(Async)");
        }

        return jumpboxServiceTestUserCall(jumpboxv3TestUserRequest, _callback);

    }

    /**
     * Summary: Test user Description: Test a user lookup to a given LDAP.
     * 
     * @param jumpboxv3TestUserRequest  (required)
     * @return Jumpboxv3TestUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Jumpboxv3TestUserResponse jumpboxServiceTestUser(Jumpboxv3TestUserRequest jumpboxv3TestUserRequest) throws ApiException {
        ApiResponse<Jumpboxv3TestUserResponse> localVarResp = jumpboxServiceTestUserWithHttpInfo(jumpboxv3TestUserRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Test user Description: Test a user lookup to a given LDAP.
     * 
     * @param jumpboxv3TestUserRequest  (required)
     * @return ApiResponse&lt;Jumpboxv3TestUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Jumpboxv3TestUserResponse> jumpboxServiceTestUserWithHttpInfo(Jumpboxv3TestUserRequest jumpboxv3TestUserRequest) throws ApiException {
        okhttp3.Call localVarCall = jumpboxServiceTestUserValidateBeforeCall(jumpboxv3TestUserRequest, null);
        Type localVarReturnType = new TypeToken<Jumpboxv3TestUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Test user Description: Test a user lookup to a given LDAP. (asynchronously)
     * 
     * @param jumpboxv3TestUserRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jumpboxServiceTestUserAsync(Jumpboxv3TestUserRequest jumpboxv3TestUserRequest, final ApiCallback<Jumpboxv3TestUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = jumpboxServiceTestUserValidateBeforeCall(jumpboxv3TestUserRequest, _callback);
        Type localVarReturnType = new TypeToken<Jumpboxv3TestUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jumpboxServiceUpdateTenant
     * @param tenantId Tenant id. (required)
     * @param jumpboxv3UpdateTenantRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jumpboxServiceUpdateTenantCall(String tenantId, Jumpboxv3UpdateTenantRequest jumpboxv3UpdateTenantRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jumpboxv3UpdateTenantRequest;

        // create path and map variables
        String localVarPath = "/api/v3/tenants/{tenant_id}"
            .replace("{" + "tenant_id" + "}", localVarApiClient.escapeString(tenantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jumpboxServiceUpdateTenantValidateBeforeCall(String tenantId, Jumpboxv3UpdateTenantRequest jumpboxv3UpdateTenantRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling jumpboxServiceUpdateTenant(Async)");
        }

        // verify the required parameter 'jumpboxv3UpdateTenantRequest' is set
        if (jumpboxv3UpdateTenantRequest == null) {
            throw new ApiException("Missing the required parameter 'jumpboxv3UpdateTenantRequest' when calling jumpboxServiceUpdateTenant(Async)");
        }

        return jumpboxServiceUpdateTenantCall(tenantId, jumpboxv3UpdateTenantRequest, _callback);

    }

    /**
     * Summary: Update tenant Description: Update a tenant.
     * 
     * @param tenantId Tenant id. (required)
     * @param jumpboxv3UpdateTenantRequest  (required)
     * @return Jumpboxv3UpdateTenantResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Jumpboxv3UpdateTenantResponse jumpboxServiceUpdateTenant(String tenantId, Jumpboxv3UpdateTenantRequest jumpboxv3UpdateTenantRequest) throws ApiException {
        ApiResponse<Jumpboxv3UpdateTenantResponse> localVarResp = jumpboxServiceUpdateTenantWithHttpInfo(tenantId, jumpboxv3UpdateTenantRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Update tenant Description: Update a tenant.
     * 
     * @param tenantId Tenant id. (required)
     * @param jumpboxv3UpdateTenantRequest  (required)
     * @return ApiResponse&lt;Jumpboxv3UpdateTenantResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Jumpboxv3UpdateTenantResponse> jumpboxServiceUpdateTenantWithHttpInfo(String tenantId, Jumpboxv3UpdateTenantRequest jumpboxv3UpdateTenantRequest) throws ApiException {
        okhttp3.Call localVarCall = jumpboxServiceUpdateTenantValidateBeforeCall(tenantId, jumpboxv3UpdateTenantRequest, null);
        Type localVarReturnType = new TypeToken<Jumpboxv3UpdateTenantResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Update tenant Description: Update a tenant. (asynchronously)
     * 
     * @param tenantId Tenant id. (required)
     * @param jumpboxv3UpdateTenantRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jumpboxServiceUpdateTenantAsync(String tenantId, Jumpboxv3UpdateTenantRequest jumpboxv3UpdateTenantRequest, final ApiCallback<Jumpboxv3UpdateTenantResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = jumpboxServiceUpdateTenantValidateBeforeCall(tenantId, jumpboxv3UpdateTenantRequest, _callback);
        Type localVarReturnType = new TypeToken<Jumpboxv3UpdateTenantResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jumpboxServiceUpdateUsers
     * @param jumpboxv3UpdateUsersBulkRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jumpboxServiceUpdateUsersCall(Jumpboxv3UpdateUsersBulkRequest jumpboxv3UpdateUsersBulkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jumpboxv3UpdateUsersBulkRequest;

        // create path and map variables
        String localVarPath = "/api/v3/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jumpboxServiceUpdateUsersValidateBeforeCall(Jumpboxv3UpdateUsersBulkRequest jumpboxv3UpdateUsersBulkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jumpboxv3UpdateUsersBulkRequest' is set
        if (jumpboxv3UpdateUsersBulkRequest == null) {
            throw new ApiException("Missing the required parameter 'jumpboxv3UpdateUsersBulkRequest' when calling jumpboxServiceUpdateUsers(Async)");
        }

        return jumpboxServiceUpdateUsersCall(jumpboxv3UpdateUsersBulkRequest, _callback);

    }

    /**
     * Summary: Update users Description: Update an array of users.
     * 
     * @param jumpboxv3UpdateUsersBulkRequest  (required)
     * @return Jumpboxv3UpdateUsersBulkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Jumpboxv3UpdateUsersBulkResponse jumpboxServiceUpdateUsers(Jumpboxv3UpdateUsersBulkRequest jumpboxv3UpdateUsersBulkRequest) throws ApiException {
        ApiResponse<Jumpboxv3UpdateUsersBulkResponse> localVarResp = jumpboxServiceUpdateUsersWithHttpInfo(jumpboxv3UpdateUsersBulkRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Update users Description: Update an array of users.
     * 
     * @param jumpboxv3UpdateUsersBulkRequest  (required)
     * @return ApiResponse&lt;Jumpboxv3UpdateUsersBulkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Jumpboxv3UpdateUsersBulkResponse> jumpboxServiceUpdateUsersWithHttpInfo(Jumpboxv3UpdateUsersBulkRequest jumpboxv3UpdateUsersBulkRequest) throws ApiException {
        okhttp3.Call localVarCall = jumpboxServiceUpdateUsersValidateBeforeCall(jumpboxv3UpdateUsersBulkRequest, null);
        Type localVarReturnType = new TypeToken<Jumpboxv3UpdateUsersBulkResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Update users Description: Update an array of users. (asynchronously)
     * 
     * @param jumpboxv3UpdateUsersBulkRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jumpboxServiceUpdateUsersAsync(Jumpboxv3UpdateUsersBulkRequest jumpboxv3UpdateUsersBulkRequest, final ApiCallback<Jumpboxv3UpdateUsersBulkResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = jumpboxServiceUpdateUsersValidateBeforeCall(jumpboxv3UpdateUsersBulkRequest, _callback);
        Type localVarReturnType = new TypeToken<Jumpboxv3UpdateUsersBulkResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
