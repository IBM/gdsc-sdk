/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import com.ibm.gdsc.ApiCallback;
import com.ibm.gdsc.ApiClient;
import com.ibm.gdsc.ApiException;
import com.ibm.gdsc.ApiResponse;
import com.ibm.gdsc.Configuration;
import com.ibm.gdsc.Pair;
import com.ibm.gdsc.ProgressRequestBody;
import com.ibm.gdsc.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ibm.gdsc.sdk.Ecosystemv3CreateDatasetRequest;
import com.ibm.gdsc.sdk.Ecosystemv3CreateDatasetResponse;
import com.ibm.gdsc.sdk.Ecosystemv3DataInsertRequest;
import com.ibm.gdsc.sdk.Ecosystemv3DataInsertResponse;
import com.ibm.gdsc.sdk.Ecosystemv3DeleteDatasetsResponse;
import com.ibm.gdsc.sdk.Ecosystemv3GetDatasetDataResponse;
import com.ibm.gdsc.sdk.Ecosystemv3GetDatasetDetailResponse;
import com.ibm.gdsc.sdk.Ecosystemv3GetDatasetsResponse;
import com.ibm.gdsc.sdk.Ecosystemv3GetPurgableRowsRequest;
import com.ibm.gdsc.sdk.Ecosystemv3GetPurgableRowsResponse;
import com.ibm.gdsc.sdk.Ecosystemv3PurgeDataResponse;
import java.time.OffsetDateTime;
import com.ibm.gdsc.sdk.RuntimeError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EcosystemServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EcosystemServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EcosystemServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for ecosystemServiceCreateDataset
     * @param ecosystemv3CreateDatasetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ecosystemServiceCreateDatasetCall(Ecosystemv3CreateDatasetRequest ecosystemv3CreateDatasetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ecosystemv3CreateDatasetRequest;

        // create path and map variables
        String localVarPath = "/api/v3/integrations/datasets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ecosystemServiceCreateDatasetValidateBeforeCall(Ecosystemv3CreateDatasetRequest ecosystemv3CreateDatasetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ecosystemv3CreateDatasetRequest' is set
        if (ecosystemv3CreateDatasetRequest == null) {
            throw new ApiException("Missing the required parameter 'ecosystemv3CreateDatasetRequest' when calling ecosystemServiceCreateDataset(Async)");
        }

        return ecosystemServiceCreateDatasetCall(ecosystemv3CreateDatasetRequest, _callback);

    }

    /**
     * Summary: Create dataset Description: Save a definition in the database.
     * 
     * @param ecosystemv3CreateDatasetRequest  (required)
     * @return Ecosystemv3CreateDatasetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Ecosystemv3CreateDatasetResponse ecosystemServiceCreateDataset(Ecosystemv3CreateDatasetRequest ecosystemv3CreateDatasetRequest) throws ApiException {
        ApiResponse<Ecosystemv3CreateDatasetResponse> localVarResp = ecosystemServiceCreateDatasetWithHttpInfo(ecosystemv3CreateDatasetRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Create dataset Description: Save a definition in the database.
     * 
     * @param ecosystemv3CreateDatasetRequest  (required)
     * @return ApiResponse&lt;Ecosystemv3CreateDatasetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Ecosystemv3CreateDatasetResponse> ecosystemServiceCreateDatasetWithHttpInfo(Ecosystemv3CreateDatasetRequest ecosystemv3CreateDatasetRequest) throws ApiException {
        okhttp3.Call localVarCall = ecosystemServiceCreateDatasetValidateBeforeCall(ecosystemv3CreateDatasetRequest, null);
        Type localVarReturnType = new TypeToken<Ecosystemv3CreateDatasetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Create dataset Description: Save a definition in the database. (asynchronously)
     * 
     * @param ecosystemv3CreateDatasetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ecosystemServiceCreateDatasetAsync(Ecosystemv3CreateDatasetRequest ecosystemv3CreateDatasetRequest, final ApiCallback<Ecosystemv3CreateDatasetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ecosystemServiceCreateDatasetValidateBeforeCall(ecosystemv3CreateDatasetRequest, _callback);
        Type localVarReturnType = new TypeToken<Ecosystemv3CreateDatasetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ecosystemServiceDataInsert
     * @param datasetName Data set target name. (required)
     * @param ecosystemv3DataInsertRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ecosystemServiceDataInsertCall(String datasetName, Ecosystemv3DataInsertRequest ecosystemv3DataInsertRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ecosystemv3DataInsertRequest;

        // create path and map variables
        String localVarPath = "/api/v3/integrations/datasets/{dataset_name}"
            .replace("{" + "dataset_name" + "}", localVarApiClient.escapeString(datasetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ecosystemServiceDataInsertValidateBeforeCall(String datasetName, Ecosystemv3DataInsertRequest ecosystemv3DataInsertRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetName' is set
        if (datasetName == null) {
            throw new ApiException("Missing the required parameter 'datasetName' when calling ecosystemServiceDataInsert(Async)");
        }

        // verify the required parameter 'ecosystemv3DataInsertRequest' is set
        if (ecosystemv3DataInsertRequest == null) {
            throw new ApiException("Missing the required parameter 'ecosystemv3DataInsertRequest' when calling ecosystemServiceDataInsert(Async)");
        }

        return ecosystemServiceDataInsertCall(datasetName, ecosystemv3DataInsertRequest, _callback);

    }

    /**
     * Summary: Data insert Description: Process Data received from webhook API and insert.
     * 
     * @param datasetName Data set target name. (required)
     * @param ecosystemv3DataInsertRequest  (required)
     * @return Ecosystemv3DataInsertResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Ecosystemv3DataInsertResponse ecosystemServiceDataInsert(String datasetName, Ecosystemv3DataInsertRequest ecosystemv3DataInsertRequest) throws ApiException {
        ApiResponse<Ecosystemv3DataInsertResponse> localVarResp = ecosystemServiceDataInsertWithHttpInfo(datasetName, ecosystemv3DataInsertRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Data insert Description: Process Data received from webhook API and insert.
     * 
     * @param datasetName Data set target name. (required)
     * @param ecosystemv3DataInsertRequest  (required)
     * @return ApiResponse&lt;Ecosystemv3DataInsertResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Ecosystemv3DataInsertResponse> ecosystemServiceDataInsertWithHttpInfo(String datasetName, Ecosystemv3DataInsertRequest ecosystemv3DataInsertRequest) throws ApiException {
        okhttp3.Call localVarCall = ecosystemServiceDataInsertValidateBeforeCall(datasetName, ecosystemv3DataInsertRequest, null);
        Type localVarReturnType = new TypeToken<Ecosystemv3DataInsertResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Data insert Description: Process Data received from webhook API and insert. (asynchronously)
     * 
     * @param datasetName Data set target name. (required)
     * @param ecosystemv3DataInsertRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ecosystemServiceDataInsertAsync(String datasetName, Ecosystemv3DataInsertRequest ecosystemv3DataInsertRequest, final ApiCallback<Ecosystemv3DataInsertResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ecosystemServiceDataInsertValidateBeforeCall(datasetName, ecosystemv3DataInsertRequest, _callback);
        Type localVarReturnType = new TypeToken<Ecosystemv3DataInsertResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ecosystemServiceDeleteDatasets
     * @param datasetNames Name of the dataset, required field. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ecosystemServiceDeleteDatasetsCall(List<String> datasetNames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/integrations/datasets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (datasetNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dataset_names", datasetNames));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ecosystemServiceDeleteDatasetsValidateBeforeCall(List<String> datasetNames, final ApiCallback _callback) throws ApiException {
        return ecosystemServiceDeleteDatasetsCall(datasetNames, _callback);

    }

    /**
     * Summary: Delete datasets Description: Delete an array of datasets.
     * 
     * @param datasetNames Name of the dataset, required field. (optional)
     * @return Ecosystemv3DeleteDatasetsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Ecosystemv3DeleteDatasetsResponse ecosystemServiceDeleteDatasets(List<String> datasetNames) throws ApiException {
        ApiResponse<Ecosystemv3DeleteDatasetsResponse> localVarResp = ecosystemServiceDeleteDatasetsWithHttpInfo(datasetNames);
        return localVarResp.getData();
    }

    /**
     * Summary: Delete datasets Description: Delete an array of datasets.
     * 
     * @param datasetNames Name of the dataset, required field. (optional)
     * @return ApiResponse&lt;Ecosystemv3DeleteDatasetsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Ecosystemv3DeleteDatasetsResponse> ecosystemServiceDeleteDatasetsWithHttpInfo(List<String> datasetNames) throws ApiException {
        okhttp3.Call localVarCall = ecosystemServiceDeleteDatasetsValidateBeforeCall(datasetNames, null);
        Type localVarReturnType = new TypeToken<Ecosystemv3DeleteDatasetsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Delete datasets Description: Delete an array of datasets. (asynchronously)
     * 
     * @param datasetNames Name of the dataset, required field. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ecosystemServiceDeleteDatasetsAsync(List<String> datasetNames, final ApiCallback<Ecosystemv3DeleteDatasetsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ecosystemServiceDeleteDatasetsValidateBeforeCall(datasetNames, _callback);
        Type localVarReturnType = new TypeToken<Ecosystemv3DeleteDatasetsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ecosystemServiceGetDatasetData
     * @param datasetName Name of the dataset. (required)
     * @param offset The amount to offset the rows by for pagination. (optional)
     * @param limit The max amount of rows to return for pagination. (optional)
     * @param returnHeader If needs to return header information. It is for pagination. The first page needs header, the rest doesn&#39;t need. (optional)
     * @param field Search field. (optional)
     * @param value Search value. (optional)
     * @param sortField Field to sort. (optional)
     * @param sortOrder Sort order. (optional, default to NONE)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ecosystemServiceGetDatasetDataCall(String datasetName, Long offset, Long limit, Boolean returnHeader, String field, String value, String sortField, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/integrations/datasets/{dataset_name}/data"
            .replace("{" + "dataset_name" + "}", localVarApiClient.escapeString(datasetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (returnHeader != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("return_header", returnHeader));
        }

        if (field != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("field", field));
        }

        if (value != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("value", value));
        }

        if (sortField != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_field", sortField));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_order", sortOrder));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ecosystemServiceGetDatasetDataValidateBeforeCall(String datasetName, Long offset, Long limit, Boolean returnHeader, String field, String value, String sortField, String sortOrder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetName' is set
        if (datasetName == null) {
            throw new ApiException("Missing the required parameter 'datasetName' when calling ecosystemServiceGetDatasetData(Async)");
        }

        return ecosystemServiceGetDatasetDataCall(datasetName, offset, limit, returnHeader, field, value, sortField, sortOrder, _callback);

    }

    /**
     * Summary: Get dataset data Description: Return data report for a given dataset.
     * 
     * @param datasetName Name of the dataset. (required)
     * @param offset The amount to offset the rows by for pagination. (optional)
     * @param limit The max amount of rows to return for pagination. (optional)
     * @param returnHeader If needs to return header information. It is for pagination. The first page needs header, the rest doesn&#39;t need. (optional)
     * @param field Search field. (optional)
     * @param value Search value. (optional)
     * @param sortField Field to sort. (optional)
     * @param sortOrder Sort order. (optional, default to NONE)
     * @return Ecosystemv3GetDatasetDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Ecosystemv3GetDatasetDataResponse ecosystemServiceGetDatasetData(String datasetName, Long offset, Long limit, Boolean returnHeader, String field, String value, String sortField, String sortOrder) throws ApiException {
        ApiResponse<Ecosystemv3GetDatasetDataResponse> localVarResp = ecosystemServiceGetDatasetDataWithHttpInfo(datasetName, offset, limit, returnHeader, field, value, sortField, sortOrder);
        return localVarResp.getData();
    }

    /**
     * Summary: Get dataset data Description: Return data report for a given dataset.
     * 
     * @param datasetName Name of the dataset. (required)
     * @param offset The amount to offset the rows by for pagination. (optional)
     * @param limit The max amount of rows to return for pagination. (optional)
     * @param returnHeader If needs to return header information. It is for pagination. The first page needs header, the rest doesn&#39;t need. (optional)
     * @param field Search field. (optional)
     * @param value Search value. (optional)
     * @param sortField Field to sort. (optional)
     * @param sortOrder Sort order. (optional, default to NONE)
     * @return ApiResponse&lt;Ecosystemv3GetDatasetDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Ecosystemv3GetDatasetDataResponse> ecosystemServiceGetDatasetDataWithHttpInfo(String datasetName, Long offset, Long limit, Boolean returnHeader, String field, String value, String sortField, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = ecosystemServiceGetDatasetDataValidateBeforeCall(datasetName, offset, limit, returnHeader, field, value, sortField, sortOrder, null);
        Type localVarReturnType = new TypeToken<Ecosystemv3GetDatasetDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get dataset data Description: Return data report for a given dataset. (asynchronously)
     * 
     * @param datasetName Name of the dataset. (required)
     * @param offset The amount to offset the rows by for pagination. (optional)
     * @param limit The max amount of rows to return for pagination. (optional)
     * @param returnHeader If needs to return header information. It is for pagination. The first page needs header, the rest doesn&#39;t need. (optional)
     * @param field Search field. (optional)
     * @param value Search value. (optional)
     * @param sortField Field to sort. (optional)
     * @param sortOrder Sort order. (optional, default to NONE)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ecosystemServiceGetDatasetDataAsync(String datasetName, Long offset, Long limit, Boolean returnHeader, String field, String value, String sortField, String sortOrder, final ApiCallback<Ecosystemv3GetDatasetDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ecosystemServiceGetDatasetDataValidateBeforeCall(datasetName, offset, limit, returnHeader, field, value, sortField, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<Ecosystemv3GetDatasetDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ecosystemServiceGetDatasetDetail
     * @param datasetName Name of the dataset. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ecosystemServiceGetDatasetDetailCall(String datasetName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/integrations/datasets/{dataset_name}/details"
            .replace("{" + "dataset_name" + "}", localVarApiClient.escapeString(datasetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ecosystemServiceGetDatasetDetailValidateBeforeCall(String datasetName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'datasetName' is set
        if (datasetName == null) {
            throw new ApiException("Missing the required parameter 'datasetName' when calling ecosystemServiceGetDatasetDetail(Async)");
        }

        return ecosystemServiceGetDatasetDetailCall(datasetName, _callback);

    }

    /**
     * Summary: Get dataset detail Description: Return detail on a dataset definition.
     * 
     * @param datasetName Name of the dataset. (required)
     * @return Ecosystemv3GetDatasetDetailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Ecosystemv3GetDatasetDetailResponse ecosystemServiceGetDatasetDetail(String datasetName) throws ApiException {
        ApiResponse<Ecosystemv3GetDatasetDetailResponse> localVarResp = ecosystemServiceGetDatasetDetailWithHttpInfo(datasetName);
        return localVarResp.getData();
    }

    /**
     * Summary: Get dataset detail Description: Return detail on a dataset definition.
     * 
     * @param datasetName Name of the dataset. (required)
     * @return ApiResponse&lt;Ecosystemv3GetDatasetDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Ecosystemv3GetDatasetDetailResponse> ecosystemServiceGetDatasetDetailWithHttpInfo(String datasetName) throws ApiException {
        okhttp3.Call localVarCall = ecosystemServiceGetDatasetDetailValidateBeforeCall(datasetName, null);
        Type localVarReturnType = new TypeToken<Ecosystemv3GetDatasetDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get dataset detail Description: Return detail on a dataset definition. (asynchronously)
     * 
     * @param datasetName Name of the dataset. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ecosystemServiceGetDatasetDetailAsync(String datasetName, final ApiCallback<Ecosystemv3GetDatasetDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ecosystemServiceGetDatasetDetailValidateBeforeCall(datasetName, _callback);
        Type localVarReturnType = new TypeToken<Ecosystemv3GetDatasetDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ecosystemServiceGetDatasets
     * @param filterStartTime Return datasets created at this time or later (&gt;&#x3D;). (optional)
     * @param filterEndTime Return datasets created before this time (&lt;). (optional)
     * @param filterDatasetNames The state filter groups commonly paired states. Only returns records that include the specified names. (optional)
     * @param offset The amount to offset the rows by for pagination. (optional)
     * @param limit The max amount of rows to return for pagination. (optional)
     * @param includeFilterCounts Computing the filter counts is relatively expensive, only compute when needed. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ecosystemServiceGetDatasetsCall(OffsetDateTime filterStartTime, OffsetDateTime filterEndTime, List<String> filterDatasetNames, Long offset, Long limit, Boolean includeFilterCounts, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/integrations/datasets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterStartTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.start_time", filterStartTime));
        }

        if (filterEndTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter.end_time", filterEndTime));
        }

        if (filterDatasetNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "filter.dataset_names", filterDatasetNames));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (includeFilterCounts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_filter_counts", includeFilterCounts));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ecosystemServiceGetDatasetsValidateBeforeCall(OffsetDateTime filterStartTime, OffsetDateTime filterEndTime, List<String> filterDatasetNames, Long offset, Long limit, Boolean includeFilterCounts, final ApiCallback _callback) throws ApiException {
        return ecosystemServiceGetDatasetsCall(filterStartTime, filterEndTime, filterDatasetNames, offset, limit, includeFilterCounts, _callback);

    }

    /**
     * Summary: Get datasets Description: Return dataset list that matches the specified filter.
     * 
     * @param filterStartTime Return datasets created at this time or later (&gt;&#x3D;). (optional)
     * @param filterEndTime Return datasets created before this time (&lt;). (optional)
     * @param filterDatasetNames The state filter groups commonly paired states. Only returns records that include the specified names. (optional)
     * @param offset The amount to offset the rows by for pagination. (optional)
     * @param limit The max amount of rows to return for pagination. (optional)
     * @param includeFilterCounts Computing the filter counts is relatively expensive, only compute when needed. (optional)
     * @return Ecosystemv3GetDatasetsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Ecosystemv3GetDatasetsResponse ecosystemServiceGetDatasets(OffsetDateTime filterStartTime, OffsetDateTime filterEndTime, List<String> filterDatasetNames, Long offset, Long limit, Boolean includeFilterCounts) throws ApiException {
        ApiResponse<Ecosystemv3GetDatasetsResponse> localVarResp = ecosystemServiceGetDatasetsWithHttpInfo(filterStartTime, filterEndTime, filterDatasetNames, offset, limit, includeFilterCounts);
        return localVarResp.getData();
    }

    /**
     * Summary: Get datasets Description: Return dataset list that matches the specified filter.
     * 
     * @param filterStartTime Return datasets created at this time or later (&gt;&#x3D;). (optional)
     * @param filterEndTime Return datasets created before this time (&lt;). (optional)
     * @param filterDatasetNames The state filter groups commonly paired states. Only returns records that include the specified names. (optional)
     * @param offset The amount to offset the rows by for pagination. (optional)
     * @param limit The max amount of rows to return for pagination. (optional)
     * @param includeFilterCounts Computing the filter counts is relatively expensive, only compute when needed. (optional)
     * @return ApiResponse&lt;Ecosystemv3GetDatasetsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Ecosystemv3GetDatasetsResponse> ecosystemServiceGetDatasetsWithHttpInfo(OffsetDateTime filterStartTime, OffsetDateTime filterEndTime, List<String> filterDatasetNames, Long offset, Long limit, Boolean includeFilterCounts) throws ApiException {
        okhttp3.Call localVarCall = ecosystemServiceGetDatasetsValidateBeforeCall(filterStartTime, filterEndTime, filterDatasetNames, offset, limit, includeFilterCounts, null);
        Type localVarReturnType = new TypeToken<Ecosystemv3GetDatasetsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get datasets Description: Return dataset list that matches the specified filter. (asynchronously)
     * 
     * @param filterStartTime Return datasets created at this time or later (&gt;&#x3D;). (optional)
     * @param filterEndTime Return datasets created before this time (&lt;). (optional)
     * @param filterDatasetNames The state filter groups commonly paired states. Only returns records that include the specified names. (optional)
     * @param offset The amount to offset the rows by for pagination. (optional)
     * @param limit The max amount of rows to return for pagination. (optional)
     * @param includeFilterCounts Computing the filter counts is relatively expensive, only compute when needed. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ecosystemServiceGetDatasetsAsync(OffsetDateTime filterStartTime, OffsetDateTime filterEndTime, List<String> filterDatasetNames, Long offset, Long limit, Boolean includeFilterCounts, final ApiCallback<Ecosystemv3GetDatasetsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ecosystemServiceGetDatasetsValidateBeforeCall(filterStartTime, filterEndTime, filterDatasetNames, offset, limit, includeFilterCounts, _callback);
        Type localVarReturnType = new TypeToken<Ecosystemv3GetDatasetsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ecosystemServiceGetPurgableRows
     * @param ecosystemv3GetPurgableRowsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ecosystemServiceGetPurgableRowsCall(Ecosystemv3GetPurgableRowsRequest ecosystemv3GetPurgableRowsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ecosystemv3GetPurgableRowsRequest;

        // create path and map variables
        String localVarPath = "/api/v3/integrations/purge";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ecosystemServiceGetPurgableRowsValidateBeforeCall(Ecosystemv3GetPurgableRowsRequest ecosystemv3GetPurgableRowsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ecosystemv3GetPurgableRowsRequest' is set
        if (ecosystemv3GetPurgableRowsRequest == null) {
            throw new ApiException("Missing the required parameter 'ecosystemv3GetPurgableRowsRequest' when calling ecosystemServiceGetPurgableRows(Async)");
        }

        return ecosystemServiceGetPurgableRowsCall(ecosystemv3GetPurgableRowsRequest, _callback);

    }

    /**
     * Summary: Get purgable rows Description: Check the number of rows that can be purged.
     * 
     * @param ecosystemv3GetPurgableRowsRequest  (required)
     * @return Ecosystemv3GetPurgableRowsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Ecosystemv3GetPurgableRowsResponse ecosystemServiceGetPurgableRows(Ecosystemv3GetPurgableRowsRequest ecosystemv3GetPurgableRowsRequest) throws ApiException {
        ApiResponse<Ecosystemv3GetPurgableRowsResponse> localVarResp = ecosystemServiceGetPurgableRowsWithHttpInfo(ecosystemv3GetPurgableRowsRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Get purgable rows Description: Check the number of rows that can be purged.
     * 
     * @param ecosystemv3GetPurgableRowsRequest  (required)
     * @return ApiResponse&lt;Ecosystemv3GetPurgableRowsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Ecosystemv3GetPurgableRowsResponse> ecosystemServiceGetPurgableRowsWithHttpInfo(Ecosystemv3GetPurgableRowsRequest ecosystemv3GetPurgableRowsRequest) throws ApiException {
        okhttp3.Call localVarCall = ecosystemServiceGetPurgableRowsValidateBeforeCall(ecosystemv3GetPurgableRowsRequest, null);
        Type localVarReturnType = new TypeToken<Ecosystemv3GetPurgableRowsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get purgable rows Description: Check the number of rows that can be purged. (asynchronously)
     * 
     * @param ecosystemv3GetPurgableRowsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ecosystemServiceGetPurgableRowsAsync(Ecosystemv3GetPurgableRowsRequest ecosystemv3GetPurgableRowsRequest, final ApiCallback<Ecosystemv3GetPurgableRowsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ecosystemServiceGetPurgableRowsValidateBeforeCall(ecosystemv3GetPurgableRowsRequest, _callback);
        Type localVarReturnType = new TypeToken<Ecosystemv3GetPurgableRowsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ecosystemServicePurgeData
     * @param datasetNames Name of the datasets, required field. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ecosystemServicePurgeDataCall(List<String> datasetNames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/integrations/datasets/data";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (datasetNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "dataset_names", datasetNames));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ecosystemServicePurgeDataValidateBeforeCall(List<String> datasetNames, final ApiCallback _callback) throws ApiException {
        return ecosystemServicePurgeDataCall(datasetNames, _callback);

    }

    /**
     * Summary: Purge data Description: Purge data.
     * 
     * @param datasetNames Name of the datasets, required field. (optional)
     * @return Ecosystemv3PurgeDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Ecosystemv3PurgeDataResponse ecosystemServicePurgeData(List<String> datasetNames) throws ApiException {
        ApiResponse<Ecosystemv3PurgeDataResponse> localVarResp = ecosystemServicePurgeDataWithHttpInfo(datasetNames);
        return localVarResp.getData();
    }

    /**
     * Summary: Purge data Description: Purge data.
     * 
     * @param datasetNames Name of the datasets, required field. (optional)
     * @return ApiResponse&lt;Ecosystemv3PurgeDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Ecosystemv3PurgeDataResponse> ecosystemServicePurgeDataWithHttpInfo(List<String> datasetNames) throws ApiException {
        okhttp3.Call localVarCall = ecosystemServicePurgeDataValidateBeforeCall(datasetNames, null);
        Type localVarReturnType = new TypeToken<Ecosystemv3PurgeDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Purge data Description: Purge data. (asynchronously)
     * 
     * @param datasetNames Name of the datasets, required field. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ecosystemServicePurgeDataAsync(List<String> datasetNames, final ApiCallback<Ecosystemv3PurgeDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ecosystemServicePurgeDataValidateBeforeCall(datasetNames, _callback);
        Type localVarReturnType = new TypeToken<Ecosystemv3PurgeDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
