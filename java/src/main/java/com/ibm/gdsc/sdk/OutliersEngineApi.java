/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import com.ibm.gdsc.ApiCallback;
import com.ibm.gdsc.ApiClient;
import com.ibm.gdsc.ApiException;
import com.ibm.gdsc.ApiResponse;
import com.ibm.gdsc.Configuration;
import com.ibm.gdsc.Pair;
import com.ibm.gdsc.ProgressRequestBody;
import com.ibm.gdsc.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ibm.gdsc.sdk.Outliersenginev3GetSourceStatisticsResponse;
import com.ibm.gdsc.sdk.Outliersenginev3GetWorkingHoursPeriodsResponse;
import com.ibm.gdsc.sdk.Outliersenginev3OutlierResponse;
import com.ibm.gdsc.sdk.Outliersenginev3RunSimulatorRequest;
import com.ibm.gdsc.sdk.Outliersenginev3StatisticsResponse;
import com.ibm.gdsc.sdk.Outliersenginev3UpdateWorkingHoursPeriodsRequest;
import com.ibm.gdsc.sdk.RpcStatus;
import com.ibm.gdsc.sdk.RuntimeError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OutliersEngineApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OutliersEngineApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OutliersEngineApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for outliersEngineGetSourceStatistics
     * @param sourceServerIp server ip. (optional)
     * @param sourceDatabaseName database name. (optional)
     * @param sourceDbUser db user name (optional). (optional)
     * @param attributesLimit The number of attributes to return for each SourceAttributeType - optional. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call outliersEngineGetSourceStatisticsCall(String sourceServerIp, String sourceDatabaseName, String sourceDbUser, Integer attributesLimit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/outliers/source/statistics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourceServerIp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source.server_ip", sourceServerIp));
        }

        if (sourceDatabaseName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source.database_name", sourceDatabaseName));
        }

        if (sourceDbUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source.db_user", sourceDbUser));
        }

        if (attributesLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attributes_limit", attributesLimit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call outliersEngineGetSourceStatisticsValidateBeforeCall(String sourceServerIp, String sourceDatabaseName, String sourceDbUser, Integer attributesLimit, final ApiCallback _callback) throws ApiException {
        return outliersEngineGetSourceStatisticsCall(sourceServerIp, sourceDatabaseName, sourceDbUser, attributesLimit, _callback);

    }

    /**
     * Summary: Get source statistics Description: Return statistics regarding the input source, including distribution of verbs, source program, working hours etc.
     * 
     * @param sourceServerIp server ip. (optional)
     * @param sourceDatabaseName database name. (optional)
     * @param sourceDbUser db user name (optional). (optional)
     * @param attributesLimit The number of attributes to return for each SourceAttributeType - optional. (optional)
     * @return Outliersenginev3GetSourceStatisticsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Outliersenginev3GetSourceStatisticsResponse outliersEngineGetSourceStatistics(String sourceServerIp, String sourceDatabaseName, String sourceDbUser, Integer attributesLimit) throws ApiException {
        ApiResponse<Outliersenginev3GetSourceStatisticsResponse> localVarResp = outliersEngineGetSourceStatisticsWithHttpInfo(sourceServerIp, sourceDatabaseName, sourceDbUser, attributesLimit);
        return localVarResp.getData();
    }

    /**
     * Summary: Get source statistics Description: Return statistics regarding the input source, including distribution of verbs, source program, working hours etc.
     * 
     * @param sourceServerIp server ip. (optional)
     * @param sourceDatabaseName database name. (optional)
     * @param sourceDbUser db user name (optional). (optional)
     * @param attributesLimit The number of attributes to return for each SourceAttributeType - optional. (optional)
     * @return ApiResponse&lt;Outliersenginev3GetSourceStatisticsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Outliersenginev3GetSourceStatisticsResponse> outliersEngineGetSourceStatisticsWithHttpInfo(String sourceServerIp, String sourceDatabaseName, String sourceDbUser, Integer attributesLimit) throws ApiException {
        okhttp3.Call localVarCall = outliersEngineGetSourceStatisticsValidateBeforeCall(sourceServerIp, sourceDatabaseName, sourceDbUser, attributesLimit, null);
        Type localVarReturnType = new TypeToken<Outliersenginev3GetSourceStatisticsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get source statistics Description: Return statistics regarding the input source, including distribution of verbs, source program, working hours etc. (asynchronously)
     * 
     * @param sourceServerIp server ip. (optional)
     * @param sourceDatabaseName database name. (optional)
     * @param sourceDbUser db user name (optional). (optional)
     * @param attributesLimit The number of attributes to return for each SourceAttributeType - optional. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call outliersEngineGetSourceStatisticsAsync(String sourceServerIp, String sourceDatabaseName, String sourceDbUser, Integer attributesLimit, final ApiCallback<Outliersenginev3GetSourceStatisticsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = outliersEngineGetSourceStatisticsValidateBeforeCall(sourceServerIp, sourceDatabaseName, sourceDbUser, attributesLimit, _callback);
        Type localVarReturnType = new TypeToken<Outliersenginev3GetSourceStatisticsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for outliersEngineGetStatistics
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call outliersEngineGetStatisticsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/outliers/statistics";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call outliersEngineGetStatisticsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return outliersEngineGetStatisticsCall(_callback);

    }

    /**
     * Summary: Get statistics Description: Return statistics regarding number of outliers, clusters and un/completed periods.
     * 
     * @return Outliersenginev3StatisticsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Outliersenginev3StatisticsResponse outliersEngineGetStatistics() throws ApiException {
        ApiResponse<Outliersenginev3StatisticsResponse> localVarResp = outliersEngineGetStatisticsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Summary: Get statistics Description: Return statistics regarding number of outliers, clusters and un/completed periods.
     * 
     * @return ApiResponse&lt;Outliersenginev3StatisticsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Outliersenginev3StatisticsResponse> outliersEngineGetStatisticsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = outliersEngineGetStatisticsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Outliersenginev3StatisticsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get statistics Description: Return statistics regarding number of outliers, clusters and un/completed periods. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call outliersEngineGetStatisticsAsync(final ApiCallback<Outliersenginev3StatisticsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = outliersEngineGetStatisticsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Outliersenginev3StatisticsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for outliersEngineGetWorkingHoursPeriods
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call outliersEngineGetWorkingHoursPeriodsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/outliers/working_hours_periods";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call outliersEngineGetWorkingHoursPeriodsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return outliersEngineGetWorkingHoursPeriodsCall(_callback);

    }

    /**
     * Summary: Get working hours periods Description: Get a list of the working hours periods.
     * 
     * @return Outliersenginev3GetWorkingHoursPeriodsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Outliersenginev3GetWorkingHoursPeriodsResponse outliersEngineGetWorkingHoursPeriods() throws ApiException {
        ApiResponse<Outliersenginev3GetWorkingHoursPeriodsResponse> localVarResp = outliersEngineGetWorkingHoursPeriodsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Summary: Get working hours periods Description: Get a list of the working hours periods.
     * 
     * @return ApiResponse&lt;Outliersenginev3GetWorkingHoursPeriodsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Outliersenginev3GetWorkingHoursPeriodsResponse> outliersEngineGetWorkingHoursPeriodsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = outliersEngineGetWorkingHoursPeriodsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Outliersenginev3GetWorkingHoursPeriodsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get working hours periods Description: Get a list of the working hours periods. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call outliersEngineGetWorkingHoursPeriodsAsync(final ApiCallback<Outliersenginev3GetWorkingHoursPeriodsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = outliersEngineGetWorkingHoursPeriodsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Outliersenginev3GetWorkingHoursPeriodsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for outliersEngineRunSimulator
     * @param outliersenginev3RunSimulatorRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call outliersEngineRunSimulatorCall(Outliersenginev3RunSimulatorRequest outliersenginev3RunSimulatorRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = outliersenginev3RunSimulatorRequest;

        // create path and map variables
        String localVarPath = "/api/v3/outliers/simulator";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call outliersEngineRunSimulatorValidateBeforeCall(Outliersenginev3RunSimulatorRequest outliersenginev3RunSimulatorRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outliersenginev3RunSimulatorRequest' is set
        if (outliersenginev3RunSimulatorRequest == null) {
            throw new ApiException("Missing the required parameter 'outliersenginev3RunSimulatorRequest' when calling outliersEngineRunSimulator(Async)");
        }

        return outliersEngineRunSimulatorCall(outliersenginev3RunSimulatorRequest, _callback);

    }

    /**
     * Summary: Run simulator Description: Run outlier simulator.
     * 
     * @param outliersenginev3RunSimulatorRequest  (required)
     * @return RpcStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public RpcStatus outliersEngineRunSimulator(Outliersenginev3RunSimulatorRequest outliersenginev3RunSimulatorRequest) throws ApiException {
        ApiResponse<RpcStatus> localVarResp = outliersEngineRunSimulatorWithHttpInfo(outliersenginev3RunSimulatorRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Run simulator Description: Run outlier simulator.
     * 
     * @param outliersenginev3RunSimulatorRequest  (required)
     * @return ApiResponse&lt;RpcStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RpcStatus> outliersEngineRunSimulatorWithHttpInfo(Outliersenginev3RunSimulatorRequest outliersenginev3RunSimulatorRequest) throws ApiException {
        okhttp3.Call localVarCall = outliersEngineRunSimulatorValidateBeforeCall(outliersenginev3RunSimulatorRequest, null);
        Type localVarReturnType = new TypeToken<RpcStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Run simulator Description: Run outlier simulator. (asynchronously)
     * 
     * @param outliersenginev3RunSimulatorRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call outliersEngineRunSimulatorAsync(Outliersenginev3RunSimulatorRequest outliersenginev3RunSimulatorRequest, final ApiCallback<RpcStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = outliersEngineRunSimulatorValidateBeforeCall(outliersenginev3RunSimulatorRequest, _callback);
        Type localVarReturnType = new TypeToken<RpcStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for outliersEngineUpdateWorkingHoursPeriods
     * @param outliersenginev3UpdateWorkingHoursPeriodsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call outliersEngineUpdateWorkingHoursPeriodsCall(Outliersenginev3UpdateWorkingHoursPeriodsRequest outliersenginev3UpdateWorkingHoursPeriodsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = outliersenginev3UpdateWorkingHoursPeriodsRequest;

        // create path and map variables
        String localVarPath = "/api/v3/outliers/working_hours_periods";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call outliersEngineUpdateWorkingHoursPeriodsValidateBeforeCall(Outliersenginev3UpdateWorkingHoursPeriodsRequest outliersenginev3UpdateWorkingHoursPeriodsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'outliersenginev3UpdateWorkingHoursPeriodsRequest' is set
        if (outliersenginev3UpdateWorkingHoursPeriodsRequest == null) {
            throw new ApiException("Missing the required parameter 'outliersenginev3UpdateWorkingHoursPeriodsRequest' when calling outliersEngineUpdateWorkingHoursPeriods(Async)");
        }

        return outliersEngineUpdateWorkingHoursPeriodsCall(outliersenginev3UpdateWorkingHoursPeriodsRequest, _callback);

    }

    /**
     * Summary: Update working hours periods Description: Update the working hours periods values.
     * 
     * @param outliersenginev3UpdateWorkingHoursPeriodsRequest  (required)
     * @return Outliersenginev3OutlierResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Outliersenginev3OutlierResponse outliersEngineUpdateWorkingHoursPeriods(Outliersenginev3UpdateWorkingHoursPeriodsRequest outliersenginev3UpdateWorkingHoursPeriodsRequest) throws ApiException {
        ApiResponse<Outliersenginev3OutlierResponse> localVarResp = outliersEngineUpdateWorkingHoursPeriodsWithHttpInfo(outliersenginev3UpdateWorkingHoursPeriodsRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Update working hours periods Description: Update the working hours periods values.
     * 
     * @param outliersenginev3UpdateWorkingHoursPeriodsRequest  (required)
     * @return ApiResponse&lt;Outliersenginev3OutlierResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Outliersenginev3OutlierResponse> outliersEngineUpdateWorkingHoursPeriodsWithHttpInfo(Outliersenginev3UpdateWorkingHoursPeriodsRequest outliersenginev3UpdateWorkingHoursPeriodsRequest) throws ApiException {
        okhttp3.Call localVarCall = outliersEngineUpdateWorkingHoursPeriodsValidateBeforeCall(outliersenginev3UpdateWorkingHoursPeriodsRequest, null);
        Type localVarReturnType = new TypeToken<Outliersenginev3OutlierResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Update working hours periods Description: Update the working hours periods values. (asynchronously)
     * 
     * @param outliersenginev3UpdateWorkingHoursPeriodsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call outliersEngineUpdateWorkingHoursPeriodsAsync(Outliersenginev3UpdateWorkingHoursPeriodsRequest outliersenginev3UpdateWorkingHoursPeriodsRequest, final ApiCallback<Outliersenginev3OutlierResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = outliersEngineUpdateWorkingHoursPeriodsValidateBeforeCall(outliersenginev3UpdateWorkingHoursPeriodsRequest, _callback);
        Type localVarReturnType = new TypeToken<Outliersenginev3OutlierResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for outliersEngineUploadAndAnalyzePeriod
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call outliersEngineUploadAndAnalyzePeriodCall(Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v3/outliers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call outliersEngineUploadAndAnalyzePeriodValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling outliersEngineUploadAndAnalyzePeriod(Async)");
        }

        return outliersEngineUploadAndAnalyzePeriodCall(body, _callback);

    }

    /**
     * Summary: Upload and analyze period Description: Run outliers detection on ready periods.
     * 
     * @param body  (required)
     * @return RpcStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public RpcStatus outliersEngineUploadAndAnalyzePeriod(Object body) throws ApiException {
        ApiResponse<RpcStatus> localVarResp = outliersEngineUploadAndAnalyzePeriodWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Summary: Upload and analyze period Description: Run outliers detection on ready periods.
     * 
     * @param body  (required)
     * @return ApiResponse&lt;RpcStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RpcStatus> outliersEngineUploadAndAnalyzePeriodWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = outliersEngineUploadAndAnalyzePeriodValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<RpcStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Upload and analyze period Description: Run outliers detection on ready periods. (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call outliersEngineUploadAndAnalyzePeriodAsync(Object body, final ApiCallback<RpcStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = outliersEngineUploadAndAnalyzePeriodValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<RpcStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for outliersEngineUserClustering
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call outliersEngineUserClusteringCall(Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v3/outliers/clusters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call outliersEngineUserClusteringValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling outliersEngineUserClustering(Async)");
        }

        return outliersEngineUserClusteringCall(body, _callback);

    }

    /**
     * Summary: User clustering Description: Run user-clustering on current sources.
     * 
     * @param body  (required)
     * @return RpcStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public RpcStatus outliersEngineUserClustering(Object body) throws ApiException {
        ApiResponse<RpcStatus> localVarResp = outliersEngineUserClusteringWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Summary: User clustering Description: Run user-clustering on current sources.
     * 
     * @param body  (required)
     * @return ApiResponse&lt;RpcStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RpcStatus> outliersEngineUserClusteringWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = outliersEngineUserClusteringValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<RpcStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: User clustering Description: Run user-clustering on current sources. (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call outliersEngineUserClusteringAsync(Object body, final ApiCallback<RpcStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = outliersEngineUserClusteringValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<RpcStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
