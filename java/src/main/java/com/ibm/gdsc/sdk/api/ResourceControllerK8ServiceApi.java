/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk.api;

import com.ibm.gdsc.sdk.ApiCallback;
import com.ibm.gdsc.sdk.ApiClient;
import com.ibm.gdsc.sdk.ApiException;
import com.ibm.gdsc.sdk.ApiResponse;
import com.ibm.gdsc.sdk.Configuration;
import com.ibm.gdsc.sdk.Pair;
import com.ibm.gdsc.sdk.ProgressRequestBody;
import com.ibm.gdsc.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3App;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3Controller;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3ControllerCommand;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3ControllerHeartbeat;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3ControllerStatus;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3CreateControllerRequest;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3CreateHeartBeatExResponse;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3CreateHeartBeatRequest;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3CreateHeartBeatResponse;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3CreateKeypairRequest;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3CreateKeypairResponse;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3DeleteControllerRequest;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3DeleteControllerResponse;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3DeleteEdgeTenantRequestApphost;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3DeleteEdgeTenantResponse;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3DeleteJobRequest;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3DeleteJobResponse;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3DownloadControllerLogsRequest;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3DownloadControllerLogsResponse;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3EdgeResourceResponse;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3EdgeTenantRequest;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3GetControllerAppsResponse;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3GetControllerCommandsResponse;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3GetControllerJobsResponse;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3GetControllersResponse;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3GetControllersWithStatusResponse;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3GetJobExecutionsResponse;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3GetTenantAppsResponse;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3GetTenantJobsResponse;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3Job;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3JobExecution;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3JobStatusDTO;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3QueryControllerLogsRequest;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3QueryControllerLogsResponse;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3UpdateJobExecutionRequest;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3UpdateJobStatusRequest;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3Version;
import com.ibm.gdsc.sdk.models.RuntimeError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ResourceControllerK8ServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ResourceControllerK8ServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ResourceControllerK8ServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for resourceControllerK8ServiceCreateController
     * @param resourcecontrollerk8v3CreateControllerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceCreateControllerCall(Resourcecontrollerk8v3CreateControllerRequest resourcecontrollerk8v3CreateControllerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourcecontrollerk8v3CreateControllerRequest;

        // create path and map variables
        String localVarPath = "/api/v3/app_manager/controllers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceControllerK8ServiceCreateControllerValidateBeforeCall(Resourcecontrollerk8v3CreateControllerRequest resourcecontrollerk8v3CreateControllerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourcecontrollerk8v3CreateControllerRequest' is set
        if (resourcecontrollerk8v3CreateControllerRequest == null) {
            throw new ApiException("Missing the required parameter 'resourcecontrollerk8v3CreateControllerRequest' when calling resourceControllerK8ServiceCreateController(Async)");
        }

        return resourceControllerK8ServiceCreateControllerCall(resourcecontrollerk8v3CreateControllerRequest, _callback);

    }

    /**
     * CreateController - Add a new controller.
     * 
     * @param resourcecontrollerk8v3CreateControllerRequest  (required)
     * @return Resourcecontrollerk8v3Controller
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Resourcecontrollerk8v3Controller resourceControllerK8ServiceCreateController(Resourcecontrollerk8v3CreateControllerRequest resourcecontrollerk8v3CreateControllerRequest) throws ApiException {
        ApiResponse<Resourcecontrollerk8v3Controller> localVarResp = resourceControllerK8ServiceCreateControllerWithHttpInfo(resourcecontrollerk8v3CreateControllerRequest);
        return localVarResp.getData();
    }

    /**
     * CreateController - Add a new controller.
     * 
     * @param resourcecontrollerk8v3CreateControllerRequest  (required)
     * @return ApiResponse&lt;Resourcecontrollerk8v3Controller&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Resourcecontrollerk8v3Controller> resourceControllerK8ServiceCreateControllerWithHttpInfo(Resourcecontrollerk8v3CreateControllerRequest resourcecontrollerk8v3CreateControllerRequest) throws ApiException {
        okhttp3.Call localVarCall = resourceControllerK8ServiceCreateControllerValidateBeforeCall(resourcecontrollerk8v3CreateControllerRequest, null);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3Controller>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * CreateController - Add a new controller. (asynchronously)
     * 
     * @param resourcecontrollerk8v3CreateControllerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceCreateControllerAsync(Resourcecontrollerk8v3CreateControllerRequest resourcecontrollerk8v3CreateControllerRequest, final ApiCallback<Resourcecontrollerk8v3Controller> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceControllerK8ServiceCreateControllerValidateBeforeCall(resourcecontrollerk8v3CreateControllerRequest, _callback);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3Controller>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceControllerK8ServiceCreateHeartBeat
     * @param controllerId The ID of the controller to invoke a heartbeat on. (required)
     * @param resourcecontrollerk8v3CreateHeartBeatRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceCreateHeartBeatCall(String controllerId, Resourcecontrollerk8v3CreateHeartBeatRequest resourcecontrollerk8v3CreateHeartBeatRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourcecontrollerk8v3CreateHeartBeatRequest;

        // create path and map variables
        String localVarPath = "/api/v3/app_manager/controllers/{controller_id}/heartbeat"
            .replace("{" + "controller_id" + "}", localVarApiClient.escapeString(controllerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceControllerK8ServiceCreateHeartBeatValidateBeforeCall(String controllerId, Resourcecontrollerk8v3CreateHeartBeatRequest resourcecontrollerk8v3CreateHeartBeatRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'controllerId' is set
        if (controllerId == null) {
            throw new ApiException("Missing the required parameter 'controllerId' when calling resourceControllerK8ServiceCreateHeartBeat(Async)");
        }

        // verify the required parameter 'resourcecontrollerk8v3CreateHeartBeatRequest' is set
        if (resourcecontrollerk8v3CreateHeartBeatRequest == null) {
            throw new ApiException("Missing the required parameter 'resourcecontrollerk8v3CreateHeartBeatRequest' when calling resourceControllerK8ServiceCreateHeartBeat(Async)");
        }

        return resourceControllerK8ServiceCreateHeartBeatCall(controllerId, resourcecontrollerk8v3CreateHeartBeatRequest, _callback);

    }

    /**
     * CreateHeartBeat - Create a heartbeat for the controller.
     * 
     * @param controllerId The ID of the controller to invoke a heartbeat on. (required)
     * @param resourcecontrollerk8v3CreateHeartBeatRequest  (required)
     * @return Resourcecontrollerk8v3CreateHeartBeatResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Resourcecontrollerk8v3CreateHeartBeatResponse resourceControllerK8ServiceCreateHeartBeat(String controllerId, Resourcecontrollerk8v3CreateHeartBeatRequest resourcecontrollerk8v3CreateHeartBeatRequest) throws ApiException {
        ApiResponse<Resourcecontrollerk8v3CreateHeartBeatResponse> localVarResp = resourceControllerK8ServiceCreateHeartBeatWithHttpInfo(controllerId, resourcecontrollerk8v3CreateHeartBeatRequest);
        return localVarResp.getData();
    }

    /**
     * CreateHeartBeat - Create a heartbeat for the controller.
     * 
     * @param controllerId The ID of the controller to invoke a heartbeat on. (required)
     * @param resourcecontrollerk8v3CreateHeartBeatRequest  (required)
     * @return ApiResponse&lt;Resourcecontrollerk8v3CreateHeartBeatResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Resourcecontrollerk8v3CreateHeartBeatResponse> resourceControllerK8ServiceCreateHeartBeatWithHttpInfo(String controllerId, Resourcecontrollerk8v3CreateHeartBeatRequest resourcecontrollerk8v3CreateHeartBeatRequest) throws ApiException {
        okhttp3.Call localVarCall = resourceControllerK8ServiceCreateHeartBeatValidateBeforeCall(controllerId, resourcecontrollerk8v3CreateHeartBeatRequest, null);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3CreateHeartBeatResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * CreateHeartBeat - Create a heartbeat for the controller. (asynchronously)
     * 
     * @param controllerId The ID of the controller to invoke a heartbeat on. (required)
     * @param resourcecontrollerk8v3CreateHeartBeatRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceCreateHeartBeatAsync(String controllerId, Resourcecontrollerk8v3CreateHeartBeatRequest resourcecontrollerk8v3CreateHeartBeatRequest, final ApiCallback<Resourcecontrollerk8v3CreateHeartBeatResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceControllerK8ServiceCreateHeartBeatValidateBeforeCall(controllerId, resourcecontrollerk8v3CreateHeartBeatRequest, _callback);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3CreateHeartBeatResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceControllerK8ServiceCreateHeartBeatEx
     * @param controllerId Optional: controller id (required)
     * @param resourcecontrollerk8v3ControllerHeartbeat  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceCreateHeartBeatExCall(String controllerId, Resourcecontrollerk8v3ControllerHeartbeat resourcecontrollerk8v3ControllerHeartbeat, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourcecontrollerk8v3ControllerHeartbeat;

        // create path and map variables
        String localVarPath = "/api/v3/app_manager/controllers/{controller_id}/heartbeat_ex"
            .replace("{" + "controller_id" + "}", localVarApiClient.escapeString(controllerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceControllerK8ServiceCreateHeartBeatExValidateBeforeCall(String controllerId, Resourcecontrollerk8v3ControllerHeartbeat resourcecontrollerk8v3ControllerHeartbeat, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'controllerId' is set
        if (controllerId == null) {
            throw new ApiException("Missing the required parameter 'controllerId' when calling resourceControllerK8ServiceCreateHeartBeatEx(Async)");
        }

        // verify the required parameter 'resourcecontrollerk8v3ControllerHeartbeat' is set
        if (resourcecontrollerk8v3ControllerHeartbeat == null) {
            throw new ApiException("Missing the required parameter 'resourcecontrollerk8v3ControllerHeartbeat' when calling resourceControllerK8ServiceCreateHeartBeatEx(Async)");
        }

        return resourceControllerK8ServiceCreateHeartBeatExCall(controllerId, resourcecontrollerk8v3ControllerHeartbeat, _callback);

    }

    /**
     * CreateHeartBeatEx - Create a heartbeat for the controller with extended information.
     * 
     * @param controllerId Optional: controller id (required)
     * @param resourcecontrollerk8v3ControllerHeartbeat  (required)
     * @return Resourcecontrollerk8v3CreateHeartBeatExResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Resourcecontrollerk8v3CreateHeartBeatExResponse resourceControllerK8ServiceCreateHeartBeatEx(String controllerId, Resourcecontrollerk8v3ControllerHeartbeat resourcecontrollerk8v3ControllerHeartbeat) throws ApiException {
        ApiResponse<Resourcecontrollerk8v3CreateHeartBeatExResponse> localVarResp = resourceControllerK8ServiceCreateHeartBeatExWithHttpInfo(controllerId, resourcecontrollerk8v3ControllerHeartbeat);
        return localVarResp.getData();
    }

    /**
     * CreateHeartBeatEx - Create a heartbeat for the controller with extended information.
     * 
     * @param controllerId Optional: controller id (required)
     * @param resourcecontrollerk8v3ControllerHeartbeat  (required)
     * @return ApiResponse&lt;Resourcecontrollerk8v3CreateHeartBeatExResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Resourcecontrollerk8v3CreateHeartBeatExResponse> resourceControllerK8ServiceCreateHeartBeatExWithHttpInfo(String controllerId, Resourcecontrollerk8v3ControllerHeartbeat resourcecontrollerk8v3ControllerHeartbeat) throws ApiException {
        okhttp3.Call localVarCall = resourceControllerK8ServiceCreateHeartBeatExValidateBeforeCall(controllerId, resourcecontrollerk8v3ControllerHeartbeat, null);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3CreateHeartBeatExResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * CreateHeartBeatEx - Create a heartbeat for the controller with extended information. (asynchronously)
     * 
     * @param controllerId Optional: controller id (required)
     * @param resourcecontrollerk8v3ControllerHeartbeat  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceCreateHeartBeatExAsync(String controllerId, Resourcecontrollerk8v3ControllerHeartbeat resourcecontrollerk8v3ControllerHeartbeat, final ApiCallback<Resourcecontrollerk8v3CreateHeartBeatExResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceControllerK8ServiceCreateHeartBeatExValidateBeforeCall(controllerId, resourcecontrollerk8v3ControllerHeartbeat, _callback);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3CreateHeartBeatExResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceControllerK8ServiceCreateJob
     * @param resourcecontrollerk8v3Job  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceCreateJobCall(Resourcecontrollerk8v3Job resourcecontrollerk8v3Job, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourcecontrollerk8v3Job;

        // create path and map variables
        String localVarPath = "/api/v3/app_manager/jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceControllerK8ServiceCreateJobValidateBeforeCall(Resourcecontrollerk8v3Job resourcecontrollerk8v3Job, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourcecontrollerk8v3Job' is set
        if (resourcecontrollerk8v3Job == null) {
            throw new ApiException("Missing the required parameter 'resourcecontrollerk8v3Job' when calling resourceControllerK8ServiceCreateJob(Async)");
        }

        return resourceControllerK8ServiceCreateJobCall(resourcecontrollerk8v3Job, _callback);

    }

    /**
     * //////////////////////////////////////////////////////////////// Interface to the controllers and apps api in the App-Manager microservice CreateJob - Create a job definition. Files and secrets contained within will also be created.
     * 
     * @param resourcecontrollerk8v3Job  (required)
     * @return Resourcecontrollerk8v3Job
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Resourcecontrollerk8v3Job resourceControllerK8ServiceCreateJob(Resourcecontrollerk8v3Job resourcecontrollerk8v3Job) throws ApiException {
        ApiResponse<Resourcecontrollerk8v3Job> localVarResp = resourceControllerK8ServiceCreateJobWithHttpInfo(resourcecontrollerk8v3Job);
        return localVarResp.getData();
    }

    /**
     * //////////////////////////////////////////////////////////////// Interface to the controllers and apps api in the App-Manager microservice CreateJob - Create a job definition. Files and secrets contained within will also be created.
     * 
     * @param resourcecontrollerk8v3Job  (required)
     * @return ApiResponse&lt;Resourcecontrollerk8v3Job&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Resourcecontrollerk8v3Job> resourceControllerK8ServiceCreateJobWithHttpInfo(Resourcecontrollerk8v3Job resourcecontrollerk8v3Job) throws ApiException {
        okhttp3.Call localVarCall = resourceControllerK8ServiceCreateJobValidateBeforeCall(resourcecontrollerk8v3Job, null);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3Job>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * //////////////////////////////////////////////////////////////// Interface to the controllers and apps api in the App-Manager microservice CreateJob - Create a job definition. Files and secrets contained within will also be created. (asynchronously)
     * 
     * @param resourcecontrollerk8v3Job  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceCreateJobAsync(Resourcecontrollerk8v3Job resourcecontrollerk8v3Job, final ApiCallback<Resourcecontrollerk8v3Job> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceControllerK8ServiceCreateJobValidateBeforeCall(resourcecontrollerk8v3Job, _callback);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3Job>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceControllerK8ServiceCreateJobExecution
     * @param resourcecontrollerk8v3JobExecution  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceCreateJobExecutionCall(Resourcecontrollerk8v3JobExecution resourcecontrollerk8v3JobExecution, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourcecontrollerk8v3JobExecution;

        // create path and map variables
        String localVarPath = "/api/v3/app_manager/job_executions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceControllerK8ServiceCreateJobExecutionValidateBeforeCall(Resourcecontrollerk8v3JobExecution resourcecontrollerk8v3JobExecution, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourcecontrollerk8v3JobExecution' is set
        if (resourcecontrollerk8v3JobExecution == null) {
            throw new ApiException("Missing the required parameter 'resourcecontrollerk8v3JobExecution' when calling resourceControllerK8ServiceCreateJobExecution(Async)");
        }

        return resourceControllerK8ServiceCreateJobExecutionCall(resourcecontrollerk8v3JobExecution, _callback);

    }

    /**
     * CreateJobExecution - Create a job execution.
     * 
     * @param resourcecontrollerk8v3JobExecution  (required)
     * @return Resourcecontrollerk8v3JobExecution
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Resourcecontrollerk8v3JobExecution resourceControllerK8ServiceCreateJobExecution(Resourcecontrollerk8v3JobExecution resourcecontrollerk8v3JobExecution) throws ApiException {
        ApiResponse<Resourcecontrollerk8v3JobExecution> localVarResp = resourceControllerK8ServiceCreateJobExecutionWithHttpInfo(resourcecontrollerk8v3JobExecution);
        return localVarResp.getData();
    }

    /**
     * CreateJobExecution - Create a job execution.
     * 
     * @param resourcecontrollerk8v3JobExecution  (required)
     * @return ApiResponse&lt;Resourcecontrollerk8v3JobExecution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Resourcecontrollerk8v3JobExecution> resourceControllerK8ServiceCreateJobExecutionWithHttpInfo(Resourcecontrollerk8v3JobExecution resourcecontrollerk8v3JobExecution) throws ApiException {
        okhttp3.Call localVarCall = resourceControllerK8ServiceCreateJobExecutionValidateBeforeCall(resourcecontrollerk8v3JobExecution, null);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3JobExecution>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * CreateJobExecution - Create a job execution. (asynchronously)
     * 
     * @param resourcecontrollerk8v3JobExecution  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceCreateJobExecutionAsync(Resourcecontrollerk8v3JobExecution resourcecontrollerk8v3JobExecution, final ApiCallback<Resourcecontrollerk8v3JobExecution> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceControllerK8ServiceCreateJobExecutionValidateBeforeCall(resourcecontrollerk8v3JobExecution, _callback);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3JobExecution>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceControllerK8ServiceCreateKeypair
     * @param controllerId The ID of the controller to get app tests for. (required)
     * @param resourcecontrollerk8v3CreateKeypairRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceCreateKeypairCall(String controllerId, Resourcecontrollerk8v3CreateKeypairRequest resourcecontrollerk8v3CreateKeypairRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourcecontrollerk8v3CreateKeypairRequest;

        // create path and map variables
        String localVarPath = "/api/v3/app_manager/controllers/{controller_id}/keypair"
            .replace("{" + "controller_id" + "}", localVarApiClient.escapeString(controllerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceControllerK8ServiceCreateKeypairValidateBeforeCall(String controllerId, Resourcecontrollerk8v3CreateKeypairRequest resourcecontrollerk8v3CreateKeypairRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'controllerId' is set
        if (controllerId == null) {
            throw new ApiException("Missing the required parameter 'controllerId' when calling resourceControllerK8ServiceCreateKeypair(Async)");
        }

        // verify the required parameter 'resourcecontrollerk8v3CreateKeypairRequest' is set
        if (resourcecontrollerk8v3CreateKeypairRequest == null) {
            throw new ApiException("Missing the required parameter 'resourcecontrollerk8v3CreateKeypairRequest' when calling resourceControllerK8ServiceCreateKeypair(Async)");
        }

        return resourceControllerK8ServiceCreateKeypairCall(controllerId, resourcecontrollerk8v3CreateKeypairRequest, _callback);

    }

    /**
     * CreateKeypair - Create a new keypair for the controller.
     * 
     * @param controllerId The ID of the controller to get app tests for. (required)
     * @param resourcecontrollerk8v3CreateKeypairRequest  (required)
     * @return Resourcecontrollerk8v3CreateKeypairResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Resourcecontrollerk8v3CreateKeypairResponse resourceControllerK8ServiceCreateKeypair(String controllerId, Resourcecontrollerk8v3CreateKeypairRequest resourcecontrollerk8v3CreateKeypairRequest) throws ApiException {
        ApiResponse<Resourcecontrollerk8v3CreateKeypairResponse> localVarResp = resourceControllerK8ServiceCreateKeypairWithHttpInfo(controllerId, resourcecontrollerk8v3CreateKeypairRequest);
        return localVarResp.getData();
    }

    /**
     * CreateKeypair - Create a new keypair for the controller.
     * 
     * @param controllerId The ID of the controller to get app tests for. (required)
     * @param resourcecontrollerk8v3CreateKeypairRequest  (required)
     * @return ApiResponse&lt;Resourcecontrollerk8v3CreateKeypairResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Resourcecontrollerk8v3CreateKeypairResponse> resourceControllerK8ServiceCreateKeypairWithHttpInfo(String controllerId, Resourcecontrollerk8v3CreateKeypairRequest resourcecontrollerk8v3CreateKeypairRequest) throws ApiException {
        okhttp3.Call localVarCall = resourceControllerK8ServiceCreateKeypairValidateBeforeCall(controllerId, resourcecontrollerk8v3CreateKeypairRequest, null);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3CreateKeypairResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * CreateKeypair - Create a new keypair for the controller. (asynchronously)
     * 
     * @param controllerId The ID of the controller to get app tests for. (required)
     * @param resourcecontrollerk8v3CreateKeypairRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceCreateKeypairAsync(String controllerId, Resourcecontrollerk8v3CreateKeypairRequest resourcecontrollerk8v3CreateKeypairRequest, final ApiCallback<Resourcecontrollerk8v3CreateKeypairResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceControllerK8ServiceCreateKeypairValidateBeforeCall(controllerId, resourcecontrollerk8v3CreateKeypairRequest, _callback);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3CreateKeypairResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceControllerK8ServiceDeleteController
     * @param controllerId The ID of the controller to get the status. (required)
     * @param resourcecontrollerk8v3DeleteControllerRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceDeleteControllerCall(String controllerId, Resourcecontrollerk8v3DeleteControllerRequest resourcecontrollerk8v3DeleteControllerRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourcecontrollerk8v3DeleteControllerRequest;

        // create path and map variables
        String localVarPath = "/api/v3/app_manager/controllers/{controller_id}"
            .replace("{" + "controller_id" + "}", localVarApiClient.escapeString(controllerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceControllerK8ServiceDeleteControllerValidateBeforeCall(String controllerId, Resourcecontrollerk8v3DeleteControllerRequest resourcecontrollerk8v3DeleteControllerRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'controllerId' is set
        if (controllerId == null) {
            throw new ApiException("Missing the required parameter 'controllerId' when calling resourceControllerK8ServiceDeleteController(Async)");
        }

        // verify the required parameter 'resourcecontrollerk8v3DeleteControllerRequest' is set
        if (resourcecontrollerk8v3DeleteControllerRequest == null) {
            throw new ApiException("Missing the required parameter 'resourcecontrollerk8v3DeleteControllerRequest' when calling resourceControllerK8ServiceDeleteController(Async)");
        }

        return resourceControllerK8ServiceDeleteControllerCall(controllerId, resourcecontrollerk8v3DeleteControllerRequest, _callback);

    }

    /**
     * DeleteController - Delete a controller.
     * 
     * @param controllerId The ID of the controller to get the status. (required)
     * @param resourcecontrollerk8v3DeleteControllerRequest  (required)
     * @return Resourcecontrollerk8v3DeleteControllerResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Resourcecontrollerk8v3DeleteControllerResponse resourceControllerK8ServiceDeleteController(String controllerId, Resourcecontrollerk8v3DeleteControllerRequest resourcecontrollerk8v3DeleteControllerRequest) throws ApiException {
        ApiResponse<Resourcecontrollerk8v3DeleteControllerResponse> localVarResp = resourceControllerK8ServiceDeleteControllerWithHttpInfo(controllerId, resourcecontrollerk8v3DeleteControllerRequest);
        return localVarResp.getData();
    }

    /**
     * DeleteController - Delete a controller.
     * 
     * @param controllerId The ID of the controller to get the status. (required)
     * @param resourcecontrollerk8v3DeleteControllerRequest  (required)
     * @return ApiResponse&lt;Resourcecontrollerk8v3DeleteControllerResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Resourcecontrollerk8v3DeleteControllerResponse> resourceControllerK8ServiceDeleteControllerWithHttpInfo(String controllerId, Resourcecontrollerk8v3DeleteControllerRequest resourcecontrollerk8v3DeleteControllerRequest) throws ApiException {
        okhttp3.Call localVarCall = resourceControllerK8ServiceDeleteControllerValidateBeforeCall(controllerId, resourcecontrollerk8v3DeleteControllerRequest, null);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3DeleteControllerResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DeleteController - Delete a controller. (asynchronously)
     * 
     * @param controllerId The ID of the controller to get the status. (required)
     * @param resourcecontrollerk8v3DeleteControllerRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceDeleteControllerAsync(String controllerId, Resourcecontrollerk8v3DeleteControllerRequest resourcecontrollerk8v3DeleteControllerRequest, final ApiCallback<Resourcecontrollerk8v3DeleteControllerResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceControllerK8ServiceDeleteControllerValidateBeforeCall(controllerId, resourcecontrollerk8v3DeleteControllerRequest, _callback);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3DeleteControllerResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceControllerK8ServiceDeleteEdgeTenant
     * @param tenantId ID of the tenant to delete (required)
     * @param resourcecontrollerk8v3DeleteEdgeTenantRequestApphost  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceDeleteEdgeTenantCall(String tenantId, Resourcecontrollerk8v3DeleteEdgeTenantRequestApphost resourcecontrollerk8v3DeleteEdgeTenantRequestApphost, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourcecontrollerk8v3DeleteEdgeTenantRequestApphost;

        // create path and map variables
        String localVarPath = "/api/v3/app_manager/tenants/{tenant_id}"
            .replace("{" + "tenant_id" + "}", localVarApiClient.escapeString(tenantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceControllerK8ServiceDeleteEdgeTenantValidateBeforeCall(String tenantId, Resourcecontrollerk8v3DeleteEdgeTenantRequestApphost resourcecontrollerk8v3DeleteEdgeTenantRequestApphost, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling resourceControllerK8ServiceDeleteEdgeTenant(Async)");
        }

        // verify the required parameter 'resourcecontrollerk8v3DeleteEdgeTenantRequestApphost' is set
        if (resourcecontrollerk8v3DeleteEdgeTenantRequestApphost == null) {
            throw new ApiException("Missing the required parameter 'resourcecontrollerk8v3DeleteEdgeTenantRequestApphost' when calling resourceControllerK8ServiceDeleteEdgeTenant(Async)");
        }

        return resourceControllerK8ServiceDeleteEdgeTenantCall(tenantId, resourcecontrollerk8v3DeleteEdgeTenantRequestApphost, _callback);

    }

    /**
     * DeleteEdgeTenant - deletes an edge tenant providing edge tenant id
     * 
     * @param tenantId ID of the tenant to delete (required)
     * @param resourcecontrollerk8v3DeleteEdgeTenantRequestApphost  (required)
     * @return Resourcecontrollerk8v3DeleteEdgeTenantResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Resourcecontrollerk8v3DeleteEdgeTenantResponse resourceControllerK8ServiceDeleteEdgeTenant(String tenantId, Resourcecontrollerk8v3DeleteEdgeTenantRequestApphost resourcecontrollerk8v3DeleteEdgeTenantRequestApphost) throws ApiException {
        ApiResponse<Resourcecontrollerk8v3DeleteEdgeTenantResponse> localVarResp = resourceControllerK8ServiceDeleteEdgeTenantWithHttpInfo(tenantId, resourcecontrollerk8v3DeleteEdgeTenantRequestApphost);
        return localVarResp.getData();
    }

    /**
     * DeleteEdgeTenant - deletes an edge tenant providing edge tenant id
     * 
     * @param tenantId ID of the tenant to delete (required)
     * @param resourcecontrollerk8v3DeleteEdgeTenantRequestApphost  (required)
     * @return ApiResponse&lt;Resourcecontrollerk8v3DeleteEdgeTenantResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Resourcecontrollerk8v3DeleteEdgeTenantResponse> resourceControllerK8ServiceDeleteEdgeTenantWithHttpInfo(String tenantId, Resourcecontrollerk8v3DeleteEdgeTenantRequestApphost resourcecontrollerk8v3DeleteEdgeTenantRequestApphost) throws ApiException {
        okhttp3.Call localVarCall = resourceControllerK8ServiceDeleteEdgeTenantValidateBeforeCall(tenantId, resourcecontrollerk8v3DeleteEdgeTenantRequestApphost, null);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3DeleteEdgeTenantResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DeleteEdgeTenant - deletes an edge tenant providing edge tenant id (asynchronously)
     * 
     * @param tenantId ID of the tenant to delete (required)
     * @param resourcecontrollerk8v3DeleteEdgeTenantRequestApphost  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceDeleteEdgeTenantAsync(String tenantId, Resourcecontrollerk8v3DeleteEdgeTenantRequestApphost resourcecontrollerk8v3DeleteEdgeTenantRequestApphost, final ApiCallback<Resourcecontrollerk8v3DeleteEdgeTenantResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceControllerK8ServiceDeleteEdgeTenantValidateBeforeCall(tenantId, resourcecontrollerk8v3DeleteEdgeTenantRequestApphost, _callback);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3DeleteEdgeTenantResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceControllerK8ServiceDeleteEdgeTenantRequest
     * @param tenantId Tenant ID for the redge request (required)
     * @param resourcecontrollerk8v3EdgeTenantRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceDeleteEdgeTenantRequestCall(String tenantId, Resourcecontrollerk8v3EdgeTenantRequest resourcecontrollerk8v3EdgeTenantRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourcecontrollerk8v3EdgeTenantRequest;

        // create path and map variables
        String localVarPath = "/api/v3/edgegateways/{tenant_id}"
            .replace("{" + "tenant_id" + "}", localVarApiClient.escapeString(tenantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceControllerK8ServiceDeleteEdgeTenantRequestValidateBeforeCall(String tenantId, Resourcecontrollerk8v3EdgeTenantRequest resourcecontrollerk8v3EdgeTenantRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling resourceControllerK8ServiceDeleteEdgeTenantRequest(Async)");
        }

        // verify the required parameter 'resourcecontrollerk8v3EdgeTenantRequest' is set
        if (resourcecontrollerk8v3EdgeTenantRequest == null) {
            throw new ApiException("Missing the required parameter 'resourcecontrollerk8v3EdgeTenantRequest' when calling resourceControllerK8ServiceDeleteEdgeTenantRequest(Async)");
        }

        return resourceControllerK8ServiceDeleteEdgeTenantRequestCall(tenantId, resourcecontrollerk8v3EdgeTenantRequest, _callback);

    }

    /**
     * DeleteEdgeTenantRequest to deletes gi and tnt CR on edge
     * 
     * @param tenantId Tenant ID for the redge request (required)
     * @param resourcecontrollerk8v3EdgeTenantRequest  (required)
     * @return Resourcecontrollerk8v3EdgeResourceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Resourcecontrollerk8v3EdgeResourceResponse resourceControllerK8ServiceDeleteEdgeTenantRequest(String tenantId, Resourcecontrollerk8v3EdgeTenantRequest resourcecontrollerk8v3EdgeTenantRequest) throws ApiException {
        ApiResponse<Resourcecontrollerk8v3EdgeResourceResponse> localVarResp = resourceControllerK8ServiceDeleteEdgeTenantRequestWithHttpInfo(tenantId, resourcecontrollerk8v3EdgeTenantRequest);
        return localVarResp.getData();
    }

    /**
     * DeleteEdgeTenantRequest to deletes gi and tnt CR on edge
     * 
     * @param tenantId Tenant ID for the redge request (required)
     * @param resourcecontrollerk8v3EdgeTenantRequest  (required)
     * @return ApiResponse&lt;Resourcecontrollerk8v3EdgeResourceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Resourcecontrollerk8v3EdgeResourceResponse> resourceControllerK8ServiceDeleteEdgeTenantRequestWithHttpInfo(String tenantId, Resourcecontrollerk8v3EdgeTenantRequest resourcecontrollerk8v3EdgeTenantRequest) throws ApiException {
        okhttp3.Call localVarCall = resourceControllerK8ServiceDeleteEdgeTenantRequestValidateBeforeCall(tenantId, resourcecontrollerk8v3EdgeTenantRequest, null);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3EdgeResourceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DeleteEdgeTenantRequest to deletes gi and tnt CR on edge (asynchronously)
     * 
     * @param tenantId Tenant ID for the redge request (required)
     * @param resourcecontrollerk8v3EdgeTenantRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceDeleteEdgeTenantRequestAsync(String tenantId, Resourcecontrollerk8v3EdgeTenantRequest resourcecontrollerk8v3EdgeTenantRequest, final ApiCallback<Resourcecontrollerk8v3EdgeResourceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceControllerK8ServiceDeleteEdgeTenantRequestValidateBeforeCall(tenantId, resourcecontrollerk8v3EdgeTenantRequest, _callback);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3EdgeResourceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceControllerK8ServiceDeleteJob
     * @param jobId ID of the job that needs to be deleted. (required)
     * @param resourcecontrollerk8v3DeleteJobRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceDeleteJobCall(String jobId, Resourcecontrollerk8v3DeleteJobRequest resourcecontrollerk8v3DeleteJobRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourcecontrollerk8v3DeleteJobRequest;

        // create path and map variables
        String localVarPath = "/api/v3/app_manager/jobs/{job_id}"
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceControllerK8ServiceDeleteJobValidateBeforeCall(String jobId, Resourcecontrollerk8v3DeleteJobRequest resourcecontrollerk8v3DeleteJobRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling resourceControllerK8ServiceDeleteJob(Async)");
        }

        // verify the required parameter 'resourcecontrollerk8v3DeleteJobRequest' is set
        if (resourcecontrollerk8v3DeleteJobRequest == null) {
            throw new ApiException("Missing the required parameter 'resourcecontrollerk8v3DeleteJobRequest' when calling resourceControllerK8ServiceDeleteJob(Async)");
        }

        return resourceControllerK8ServiceDeleteJobCall(jobId, resourcecontrollerk8v3DeleteJobRequest, _callback);

    }

    /**
     * DeleteJob - Delete a job.
     * 
     * @param jobId ID of the job that needs to be deleted. (required)
     * @param resourcecontrollerk8v3DeleteJobRequest  (required)
     * @return Resourcecontrollerk8v3DeleteJobResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Resourcecontrollerk8v3DeleteJobResponse resourceControllerK8ServiceDeleteJob(String jobId, Resourcecontrollerk8v3DeleteJobRequest resourcecontrollerk8v3DeleteJobRequest) throws ApiException {
        ApiResponse<Resourcecontrollerk8v3DeleteJobResponse> localVarResp = resourceControllerK8ServiceDeleteJobWithHttpInfo(jobId, resourcecontrollerk8v3DeleteJobRequest);
        return localVarResp.getData();
    }

    /**
     * DeleteJob - Delete a job.
     * 
     * @param jobId ID of the job that needs to be deleted. (required)
     * @param resourcecontrollerk8v3DeleteJobRequest  (required)
     * @return ApiResponse&lt;Resourcecontrollerk8v3DeleteJobResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Resourcecontrollerk8v3DeleteJobResponse> resourceControllerK8ServiceDeleteJobWithHttpInfo(String jobId, Resourcecontrollerk8v3DeleteJobRequest resourcecontrollerk8v3DeleteJobRequest) throws ApiException {
        okhttp3.Call localVarCall = resourceControllerK8ServiceDeleteJobValidateBeforeCall(jobId, resourcecontrollerk8v3DeleteJobRequest, null);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3DeleteJobResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DeleteJob - Delete a job. (asynchronously)
     * 
     * @param jobId ID of the job that needs to be deleted. (required)
     * @param resourcecontrollerk8v3DeleteJobRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceDeleteJobAsync(String jobId, Resourcecontrollerk8v3DeleteJobRequest resourcecontrollerk8v3DeleteJobRequest, final ApiCallback<Resourcecontrollerk8v3DeleteJobResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceControllerK8ServiceDeleteJobValidateBeforeCall(jobId, resourcecontrollerk8v3DeleteJobRequest, _callback);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3DeleteJobResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceControllerK8ServiceDownloadControllerLogs
     * @param controllerId The ID of the controller to download logs for. (required)
     * @param resourcecontrollerk8v3DownloadControllerLogsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceDownloadControllerLogsCall(String controllerId, Resourcecontrollerk8v3DownloadControllerLogsRequest resourcecontrollerk8v3DownloadControllerLogsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourcecontrollerk8v3DownloadControllerLogsRequest;

        // create path and map variables
        String localVarPath = "/api/v3/app_manager/controllers/{controller_id}/logs"
            .replace("{" + "controller_id" + "}", localVarApiClient.escapeString(controllerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceControllerK8ServiceDownloadControllerLogsValidateBeforeCall(String controllerId, Resourcecontrollerk8v3DownloadControllerLogsRequest resourcecontrollerk8v3DownloadControllerLogsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'controllerId' is set
        if (controllerId == null) {
            throw new ApiException("Missing the required parameter 'controllerId' when calling resourceControllerK8ServiceDownloadControllerLogs(Async)");
        }

        // verify the required parameter 'resourcecontrollerk8v3DownloadControllerLogsRequest' is set
        if (resourcecontrollerk8v3DownloadControllerLogsRequest == null) {
            throw new ApiException("Missing the required parameter 'resourcecontrollerk8v3DownloadControllerLogsRequest' when calling resourceControllerK8ServiceDownloadControllerLogs(Async)");
        }

        return resourceControllerK8ServiceDownloadControllerLogsCall(controllerId, resourcecontrollerk8v3DownloadControllerLogsRequest, _callback);

    }

    /**
     * DownloadControllerLogs - Download the controller logs for a running controller.
     * 
     * @param controllerId The ID of the controller to download logs for. (required)
     * @param resourcecontrollerk8v3DownloadControllerLogsRequest  (required)
     * @return Resourcecontrollerk8v3DownloadControllerLogsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Resourcecontrollerk8v3DownloadControllerLogsResponse resourceControllerK8ServiceDownloadControllerLogs(String controllerId, Resourcecontrollerk8v3DownloadControllerLogsRequest resourcecontrollerk8v3DownloadControllerLogsRequest) throws ApiException {
        ApiResponse<Resourcecontrollerk8v3DownloadControllerLogsResponse> localVarResp = resourceControllerK8ServiceDownloadControllerLogsWithHttpInfo(controllerId, resourcecontrollerk8v3DownloadControllerLogsRequest);
        return localVarResp.getData();
    }

    /**
     * DownloadControllerLogs - Download the controller logs for a running controller.
     * 
     * @param controllerId The ID of the controller to download logs for. (required)
     * @param resourcecontrollerk8v3DownloadControllerLogsRequest  (required)
     * @return ApiResponse&lt;Resourcecontrollerk8v3DownloadControllerLogsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Resourcecontrollerk8v3DownloadControllerLogsResponse> resourceControllerK8ServiceDownloadControllerLogsWithHttpInfo(String controllerId, Resourcecontrollerk8v3DownloadControllerLogsRequest resourcecontrollerk8v3DownloadControllerLogsRequest) throws ApiException {
        okhttp3.Call localVarCall = resourceControllerK8ServiceDownloadControllerLogsValidateBeforeCall(controllerId, resourcecontrollerk8v3DownloadControllerLogsRequest, null);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3DownloadControllerLogsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * DownloadControllerLogs - Download the controller logs for a running controller. (asynchronously)
     * 
     * @param controllerId The ID of the controller to download logs for. (required)
     * @param resourcecontrollerk8v3DownloadControllerLogsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceDownloadControllerLogsAsync(String controllerId, Resourcecontrollerk8v3DownloadControllerLogsRequest resourcecontrollerk8v3DownloadControllerLogsRequest, final ApiCallback<Resourcecontrollerk8v3DownloadControllerLogsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceControllerK8ServiceDownloadControllerLogsValidateBeforeCall(controllerId, resourcecontrollerk8v3DownloadControllerLogsRequest, _callback);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3DownloadControllerLogsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceControllerK8ServiceGetControllerApps
     * @param controllerId The ID of the controller to get apps for. (required)
     * @param modifiedSince Only get the apps if any were modified since the given date. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceGetControllerAppsCall(String controllerId, String modifiedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/app_manager/controllers/{controller_id}/apps"
            .replace("{" + "controller_id" + "}", localVarApiClient.escapeString(controllerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (modifiedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_since", modifiedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceControllerK8ServiceGetControllerAppsValidateBeforeCall(String controllerId, String modifiedSince, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'controllerId' is set
        if (controllerId == null) {
            throw new ApiException("Missing the required parameter 'controllerId' when calling resourceControllerK8ServiceGetControllerApps(Async)");
        }

        return resourceControllerK8ServiceGetControllerAppsCall(controllerId, modifiedSince, _callback);

    }

    /**
     * GetControllerApps - Get the apps for the given controller.
     * 
     * @param controllerId The ID of the controller to get apps for. (required)
     * @param modifiedSince Only get the apps if any were modified since the given date. (optional)
     * @return Resourcecontrollerk8v3GetControllerAppsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Resourcecontrollerk8v3GetControllerAppsResponse resourceControllerK8ServiceGetControllerApps(String controllerId, String modifiedSince) throws ApiException {
        ApiResponse<Resourcecontrollerk8v3GetControllerAppsResponse> localVarResp = resourceControllerK8ServiceGetControllerAppsWithHttpInfo(controllerId, modifiedSince);
        return localVarResp.getData();
    }

    /**
     * GetControllerApps - Get the apps for the given controller.
     * 
     * @param controllerId The ID of the controller to get apps for. (required)
     * @param modifiedSince Only get the apps if any were modified since the given date. (optional)
     * @return ApiResponse&lt;Resourcecontrollerk8v3GetControllerAppsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Resourcecontrollerk8v3GetControllerAppsResponse> resourceControllerK8ServiceGetControllerAppsWithHttpInfo(String controllerId, String modifiedSince) throws ApiException {
        okhttp3.Call localVarCall = resourceControllerK8ServiceGetControllerAppsValidateBeforeCall(controllerId, modifiedSince, null);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3GetControllerAppsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetControllerApps - Get the apps for the given controller. (asynchronously)
     * 
     * @param controllerId The ID of the controller to get apps for. (required)
     * @param modifiedSince Only get the apps if any were modified since the given date. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceGetControllerAppsAsync(String controllerId, String modifiedSince, final ApiCallback<Resourcecontrollerk8v3GetControllerAppsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceControllerK8ServiceGetControllerAppsValidateBeforeCall(controllerId, modifiedSince, _callback);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3GetControllerAppsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceControllerK8ServiceGetControllerCommands
     * @param controllerId The ID of the controller to get commands for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceGetControllerCommandsCall(String controllerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/app_manager/controllers/{controller_id}/commands"
            .replace("{" + "controller_id" + "}", localVarApiClient.escapeString(controllerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceControllerK8ServiceGetControllerCommandsValidateBeforeCall(String controllerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'controllerId' is set
        if (controllerId == null) {
            throw new ApiException("Missing the required parameter 'controllerId' when calling resourceControllerK8ServiceGetControllerCommands(Async)");
        }

        return resourceControllerK8ServiceGetControllerCommandsCall(controllerId, _callback);

    }

    /**
     * GetControllerCommands - Get the commands for the controller to execute.
     * 
     * @param controllerId The ID of the controller to get commands for. (required)
     * @return Resourcecontrollerk8v3GetControllerCommandsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Resourcecontrollerk8v3GetControllerCommandsResponse resourceControllerK8ServiceGetControllerCommands(String controllerId) throws ApiException {
        ApiResponse<Resourcecontrollerk8v3GetControllerCommandsResponse> localVarResp = resourceControllerK8ServiceGetControllerCommandsWithHttpInfo(controllerId);
        return localVarResp.getData();
    }

    /**
     * GetControllerCommands - Get the commands for the controller to execute.
     * 
     * @param controllerId The ID of the controller to get commands for. (required)
     * @return ApiResponse&lt;Resourcecontrollerk8v3GetControllerCommandsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Resourcecontrollerk8v3GetControllerCommandsResponse> resourceControllerK8ServiceGetControllerCommandsWithHttpInfo(String controllerId) throws ApiException {
        okhttp3.Call localVarCall = resourceControllerK8ServiceGetControllerCommandsValidateBeforeCall(controllerId, null);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3GetControllerCommandsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetControllerCommands - Get the commands for the controller to execute. (asynchronously)
     * 
     * @param controllerId The ID of the controller to get commands for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceGetControllerCommandsAsync(String controllerId, final ApiCallback<Resourcecontrollerk8v3GetControllerCommandsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceControllerK8ServiceGetControllerCommandsValidateBeforeCall(controllerId, _callback);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3GetControllerCommandsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceControllerK8ServiceGetControllerJobs
     * @param controllerId The ID of the controller to get jobs for. (required)
     * @param modifiedSince Optional: Only get the jobs if any were modified since the given date. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceGetControllerJobsCall(String controllerId, String modifiedSince, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/app_manager/controllers/{controller_id}/jobs"
            .replace("{" + "controller_id" + "}", localVarApiClient.escapeString(controllerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (modifiedSince != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_since", modifiedSince));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceControllerK8ServiceGetControllerJobsValidateBeforeCall(String controllerId, String modifiedSince, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'controllerId' is set
        if (controllerId == null) {
            throw new ApiException("Missing the required parameter 'controllerId' when calling resourceControllerK8ServiceGetControllerJobs(Async)");
        }

        return resourceControllerK8ServiceGetControllerJobsCall(controllerId, modifiedSince, _callback);

    }

    /**
     * GetControllerJobs - Get the jobs for the controller to execute.
     * 
     * @param controllerId The ID of the controller to get jobs for. (required)
     * @param modifiedSince Optional: Only get the jobs if any were modified since the given date. (optional)
     * @return Resourcecontrollerk8v3GetControllerJobsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Resourcecontrollerk8v3GetControllerJobsResponse resourceControllerK8ServiceGetControllerJobs(String controllerId, String modifiedSince) throws ApiException {
        ApiResponse<Resourcecontrollerk8v3GetControllerJobsResponse> localVarResp = resourceControllerK8ServiceGetControllerJobsWithHttpInfo(controllerId, modifiedSince);
        return localVarResp.getData();
    }

    /**
     * GetControllerJobs - Get the jobs for the controller to execute.
     * 
     * @param controllerId The ID of the controller to get jobs for. (required)
     * @param modifiedSince Optional: Only get the jobs if any were modified since the given date. (optional)
     * @return ApiResponse&lt;Resourcecontrollerk8v3GetControllerJobsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Resourcecontrollerk8v3GetControllerJobsResponse> resourceControllerK8ServiceGetControllerJobsWithHttpInfo(String controllerId, String modifiedSince) throws ApiException {
        okhttp3.Call localVarCall = resourceControllerK8ServiceGetControllerJobsValidateBeforeCall(controllerId, modifiedSince, null);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3GetControllerJobsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetControllerJobs - Get the jobs for the controller to execute. (asynchronously)
     * 
     * @param controllerId The ID of the controller to get jobs for. (required)
     * @param modifiedSince Optional: Only get the jobs if any were modified since the given date. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceGetControllerJobsAsync(String controllerId, String modifiedSince, final ApiCallback<Resourcecontrollerk8v3GetControllerJobsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceControllerK8ServiceGetControllerJobsValidateBeforeCall(controllerId, modifiedSince, _callback);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3GetControllerJobsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceControllerK8ServiceGetControllerStatus
     * @param controllerId The ID of the controller to get the status. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceGetControllerStatusCall(String controllerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/app_manager/controllers/{controller_id}/status"
            .replace("{" + "controller_id" + "}", localVarApiClient.escapeString(controllerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceControllerK8ServiceGetControllerStatusValidateBeforeCall(String controllerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'controllerId' is set
        if (controllerId == null) {
            throw new ApiException("Missing the required parameter 'controllerId' when calling resourceControllerK8ServiceGetControllerStatus(Async)");
        }

        return resourceControllerK8ServiceGetControllerStatusCall(controllerId, _callback);

    }

    /**
     * GetControllerStatus - Get the status for the given controller.
     * 
     * @param controllerId The ID of the controller to get the status. (required)
     * @return Resourcecontrollerk8v3ControllerStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Resourcecontrollerk8v3ControllerStatus resourceControllerK8ServiceGetControllerStatus(String controllerId) throws ApiException {
        ApiResponse<Resourcecontrollerk8v3ControllerStatus> localVarResp = resourceControllerK8ServiceGetControllerStatusWithHttpInfo(controllerId);
        return localVarResp.getData();
    }

    /**
     * GetControllerStatus - Get the status for the given controller.
     * 
     * @param controllerId The ID of the controller to get the status. (required)
     * @return ApiResponse&lt;Resourcecontrollerk8v3ControllerStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Resourcecontrollerk8v3ControllerStatus> resourceControllerK8ServiceGetControllerStatusWithHttpInfo(String controllerId) throws ApiException {
        okhttp3.Call localVarCall = resourceControllerK8ServiceGetControllerStatusValidateBeforeCall(controllerId, null);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3ControllerStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetControllerStatus - Get the status for the given controller. (asynchronously)
     * 
     * @param controllerId The ID of the controller to get the status. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceGetControllerStatusAsync(String controllerId, final ApiCallback<Resourcecontrollerk8v3ControllerStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceControllerK8ServiceGetControllerStatusValidateBeforeCall(controllerId, _callback);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3ControllerStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceControllerK8ServiceGetControllers
     * @param tenantId The ID of the tenant to get controllers for. (required)
     * @param wantLocal Used to indicate the caller wants the local controller. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceGetControllersCall(String tenantId, Boolean wantLocal, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/app_manager/tenants/{tenant_id}/controllers"
            .replace("{" + "tenant_id" + "}", localVarApiClient.escapeString(tenantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (wantLocal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("want_local", wantLocal));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceControllerK8ServiceGetControllersValidateBeforeCall(String tenantId, Boolean wantLocal, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling resourceControllerK8ServiceGetControllers(Async)");
        }

        return resourceControllerK8ServiceGetControllersCall(tenantId, wantLocal, _callback);

    }

    /**
     * GetControllers - Get the controllers for the given tenant.
     * 
     * @param tenantId The ID of the tenant to get controllers for. (required)
     * @param wantLocal Used to indicate the caller wants the local controller. (optional)
     * @return Resourcecontrollerk8v3GetControllersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Resourcecontrollerk8v3GetControllersResponse resourceControllerK8ServiceGetControllers(String tenantId, Boolean wantLocal) throws ApiException {
        ApiResponse<Resourcecontrollerk8v3GetControllersResponse> localVarResp = resourceControllerK8ServiceGetControllersWithHttpInfo(tenantId, wantLocal);
        return localVarResp.getData();
    }

    /**
     * GetControllers - Get the controllers for the given tenant.
     * 
     * @param tenantId The ID of the tenant to get controllers for. (required)
     * @param wantLocal Used to indicate the caller wants the local controller. (optional)
     * @return ApiResponse&lt;Resourcecontrollerk8v3GetControllersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Resourcecontrollerk8v3GetControllersResponse> resourceControllerK8ServiceGetControllersWithHttpInfo(String tenantId, Boolean wantLocal) throws ApiException {
        okhttp3.Call localVarCall = resourceControllerK8ServiceGetControllersValidateBeforeCall(tenantId, wantLocal, null);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3GetControllersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetControllers - Get the controllers for the given tenant. (asynchronously)
     * 
     * @param tenantId The ID of the tenant to get controllers for. (required)
     * @param wantLocal Used to indicate the caller wants the local controller. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceGetControllersAsync(String tenantId, Boolean wantLocal, final ApiCallback<Resourcecontrollerk8v3GetControllersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceControllerK8ServiceGetControllersValidateBeforeCall(tenantId, wantLocal, _callback);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3GetControllersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceControllerK8ServiceGetControllersWithStatus
     * @param tenantId The ID of the tenant to get controllers for. (required)
     * @param wantLocal Used to indicate the caller wants the local controller. (optional)
     * @param controllerId \&quot;ALL\&quot;: for getting all controllers; &lt;controller_id&gt;: for getting single controller. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceGetControllersWithStatusCall(String tenantId, Boolean wantLocal, String controllerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/app_manager/tenants/{tenant_id}/controller_status"
            .replace("{" + "tenant_id" + "}", localVarApiClient.escapeString(tenantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (wantLocal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("want_local", wantLocal));
        }

        if (controllerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("controller_id", controllerId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceControllerK8ServiceGetControllersWithStatusValidateBeforeCall(String tenantId, Boolean wantLocal, String controllerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling resourceControllerK8ServiceGetControllersWithStatus(Async)");
        }

        return resourceControllerK8ServiceGetControllersWithStatusCall(tenantId, wantLocal, controllerId, _callback);

    }

    /**
     * GetControllersWithStatus - Get the controllers for the given tenant with computed status.
     * 
     * @param tenantId The ID of the tenant to get controllers for. (required)
     * @param wantLocal Used to indicate the caller wants the local controller. (optional)
     * @param controllerId \&quot;ALL\&quot;: for getting all controllers; &lt;controller_id&gt;: for getting single controller. (optional)
     * @return Resourcecontrollerk8v3GetControllersWithStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Resourcecontrollerk8v3GetControllersWithStatusResponse resourceControllerK8ServiceGetControllersWithStatus(String tenantId, Boolean wantLocal, String controllerId) throws ApiException {
        ApiResponse<Resourcecontrollerk8v3GetControllersWithStatusResponse> localVarResp = resourceControllerK8ServiceGetControllersWithStatusWithHttpInfo(tenantId, wantLocal, controllerId);
        return localVarResp.getData();
    }

    /**
     * GetControllersWithStatus - Get the controllers for the given tenant with computed status.
     * 
     * @param tenantId The ID of the tenant to get controllers for. (required)
     * @param wantLocal Used to indicate the caller wants the local controller. (optional)
     * @param controllerId \&quot;ALL\&quot;: for getting all controllers; &lt;controller_id&gt;: for getting single controller. (optional)
     * @return ApiResponse&lt;Resourcecontrollerk8v3GetControllersWithStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Resourcecontrollerk8v3GetControllersWithStatusResponse> resourceControllerK8ServiceGetControllersWithStatusWithHttpInfo(String tenantId, Boolean wantLocal, String controllerId) throws ApiException {
        okhttp3.Call localVarCall = resourceControllerK8ServiceGetControllersWithStatusValidateBeforeCall(tenantId, wantLocal, controllerId, null);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3GetControllersWithStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetControllersWithStatus - Get the controllers for the given tenant with computed status. (asynchronously)
     * 
     * @param tenantId The ID of the tenant to get controllers for. (required)
     * @param wantLocal Used to indicate the caller wants the local controller. (optional)
     * @param controllerId \&quot;ALL\&quot;: for getting all controllers; &lt;controller_id&gt;: for getting single controller. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceGetControllersWithStatusAsync(String tenantId, Boolean wantLocal, String controllerId, final ApiCallback<Resourcecontrollerk8v3GetControllersWithStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceControllerK8ServiceGetControllersWithStatusValidateBeforeCall(tenantId, wantLocal, controllerId, _callback);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3GetControllersWithStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceControllerK8ServiceGetJob
     * @param jobId The ID of the job to get. (required)
     * @param wantSecretValues Optional: True to return secret values, false otherwise. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceGetJobCall(String jobId, Boolean wantSecretValues, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/app_manager/jobs/{job_id}"
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (wantSecretValues != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("want_secret_values", wantSecretValues));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceControllerK8ServiceGetJobValidateBeforeCall(String jobId, Boolean wantSecretValues, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling resourceControllerK8ServiceGetJob(Async)");
        }

        return resourceControllerK8ServiceGetJobCall(jobId, wantSecretValues, _callback);

    }

    /**
     * GetJob - Get the job.
     * 
     * @param jobId The ID of the job to get. (required)
     * @param wantSecretValues Optional: True to return secret values, false otherwise. (optional)
     * @return Resourcecontrollerk8v3Job
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Resourcecontrollerk8v3Job resourceControllerK8ServiceGetJob(String jobId, Boolean wantSecretValues) throws ApiException {
        ApiResponse<Resourcecontrollerk8v3Job> localVarResp = resourceControllerK8ServiceGetJobWithHttpInfo(jobId, wantSecretValues);
        return localVarResp.getData();
    }

    /**
     * GetJob - Get the job.
     * 
     * @param jobId The ID of the job to get. (required)
     * @param wantSecretValues Optional: True to return secret values, false otherwise. (optional)
     * @return ApiResponse&lt;Resourcecontrollerk8v3Job&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Resourcecontrollerk8v3Job> resourceControllerK8ServiceGetJobWithHttpInfo(String jobId, Boolean wantSecretValues) throws ApiException {
        okhttp3.Call localVarCall = resourceControllerK8ServiceGetJobValidateBeforeCall(jobId, wantSecretValues, null);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3Job>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetJob - Get the job. (asynchronously)
     * 
     * @param jobId The ID of the job to get. (required)
     * @param wantSecretValues Optional: True to return secret values, false otherwise. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceGetJobAsync(String jobId, Boolean wantSecretValues, final ApiCallback<Resourcecontrollerk8v3Job> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceControllerK8ServiceGetJobValidateBeforeCall(jobId, wantSecretValues, _callback);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3Job>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceControllerK8ServiceGetJobExecution
     * @param jobexeId The ID of the job execution to get. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceGetJobExecutionCall(String jobexeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/app_manager/job_executions/{jobexe_id}"
            .replace("{" + "jobexe_id" + "}", localVarApiClient.escapeString(jobexeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceControllerK8ServiceGetJobExecutionValidateBeforeCall(String jobexeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobexeId' is set
        if (jobexeId == null) {
            throw new ApiException("Missing the required parameter 'jobexeId' when calling resourceControllerK8ServiceGetJobExecution(Async)");
        }

        return resourceControllerK8ServiceGetJobExecutionCall(jobexeId, _callback);

    }

    /**
     * GetJobExecution - Get a job execution.
     * 
     * @param jobexeId The ID of the job execution to get. (required)
     * @return Resourcecontrollerk8v3JobExecution
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Resourcecontrollerk8v3JobExecution resourceControllerK8ServiceGetJobExecution(String jobexeId) throws ApiException {
        ApiResponse<Resourcecontrollerk8v3JobExecution> localVarResp = resourceControllerK8ServiceGetJobExecutionWithHttpInfo(jobexeId);
        return localVarResp.getData();
    }

    /**
     * GetJobExecution - Get a job execution.
     * 
     * @param jobexeId The ID of the job execution to get. (required)
     * @return ApiResponse&lt;Resourcecontrollerk8v3JobExecution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Resourcecontrollerk8v3JobExecution> resourceControllerK8ServiceGetJobExecutionWithHttpInfo(String jobexeId) throws ApiException {
        okhttp3.Call localVarCall = resourceControllerK8ServiceGetJobExecutionValidateBeforeCall(jobexeId, null);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3JobExecution>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetJobExecution - Get a job execution. (asynchronously)
     * 
     * @param jobexeId The ID of the job execution to get. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceGetJobExecutionAsync(String jobexeId, final ApiCallback<Resourcecontrollerk8v3JobExecution> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceControllerK8ServiceGetJobExecutionValidateBeforeCall(jobexeId, _callback);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3JobExecution>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceControllerK8ServiceGetJobExecutions
     * @param jobId The ID of the job to get status. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceGetJobExecutionsCall(String jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/app_manager/jobs/{job_id}/executions"
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceControllerK8ServiceGetJobExecutionsValidateBeforeCall(String jobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling resourceControllerK8ServiceGetJobExecutions(Async)");
        }

        return resourceControllerK8ServiceGetJobExecutionsCall(jobId, _callback);

    }

    /**
     * GetJobExecutions - Get the job executions.
     * 
     * @param jobId The ID of the job to get status. (required)
     * @return Resourcecontrollerk8v3GetJobExecutionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Resourcecontrollerk8v3GetJobExecutionsResponse resourceControllerK8ServiceGetJobExecutions(String jobId) throws ApiException {
        ApiResponse<Resourcecontrollerk8v3GetJobExecutionsResponse> localVarResp = resourceControllerK8ServiceGetJobExecutionsWithHttpInfo(jobId);
        return localVarResp.getData();
    }

    /**
     * GetJobExecutions - Get the job executions.
     * 
     * @param jobId The ID of the job to get status. (required)
     * @return ApiResponse&lt;Resourcecontrollerk8v3GetJobExecutionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Resourcecontrollerk8v3GetJobExecutionsResponse> resourceControllerK8ServiceGetJobExecutionsWithHttpInfo(String jobId) throws ApiException {
        okhttp3.Call localVarCall = resourceControllerK8ServiceGetJobExecutionsValidateBeforeCall(jobId, null);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3GetJobExecutionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetJobExecutions - Get the job executions. (asynchronously)
     * 
     * @param jobId The ID of the job to get status. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceGetJobExecutionsAsync(String jobId, final ApiCallback<Resourcecontrollerk8v3GetJobExecutionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceControllerK8ServiceGetJobExecutionsValidateBeforeCall(jobId, _callback);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3GetJobExecutionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceControllerK8ServiceGetJobStatus
     * @param jobId The ID of the job to get status. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceGetJobStatusCall(String jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/app_manager/jobs/{job_id}/status"
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceControllerK8ServiceGetJobStatusValidateBeforeCall(String jobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling resourceControllerK8ServiceGetJobStatus(Async)");
        }

        return resourceControllerK8ServiceGetJobStatusCall(jobId, _callback);

    }

    /**
     * GetJobStatus - Get the job&#39;s status.
     * 
     * @param jobId The ID of the job to get status. (required)
     * @return Resourcecontrollerk8v3JobStatusDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Resourcecontrollerk8v3JobStatusDTO resourceControllerK8ServiceGetJobStatus(String jobId) throws ApiException {
        ApiResponse<Resourcecontrollerk8v3JobStatusDTO> localVarResp = resourceControllerK8ServiceGetJobStatusWithHttpInfo(jobId);
        return localVarResp.getData();
    }

    /**
     * GetJobStatus - Get the job&#39;s status.
     * 
     * @param jobId The ID of the job to get status. (required)
     * @return ApiResponse&lt;Resourcecontrollerk8v3JobStatusDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Resourcecontrollerk8v3JobStatusDTO> resourceControllerK8ServiceGetJobStatusWithHttpInfo(String jobId) throws ApiException {
        okhttp3.Call localVarCall = resourceControllerK8ServiceGetJobStatusValidateBeforeCall(jobId, null);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3JobStatusDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetJobStatus - Get the job&#39;s status. (asynchronously)
     * 
     * @param jobId The ID of the job to get status. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceGetJobStatusAsync(String jobId, final ApiCallback<Resourcecontrollerk8v3JobStatusDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceControllerK8ServiceGetJobStatusValidateBeforeCall(jobId, _callback);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3JobStatusDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceControllerK8ServiceGetTenantApp
     * @param tenantId The ID of the tenant to get apps for. (required)
     * @param appName The name of the app to get. (required)
     * @param returnLevel Optional: specify a return level for the data. This will control the amount of data returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceGetTenantAppCall(String tenantId, String appName, String returnLevel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/app_manager/tenants/{tenant_id}/apps/{app_name}"
            .replace("{" + "tenant_id" + "}", localVarApiClient.escapeString(tenantId.toString()))
            .replace("{" + "app_name" + "}", localVarApiClient.escapeString(appName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (returnLevel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnLevel", returnLevel));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceControllerK8ServiceGetTenantAppValidateBeforeCall(String tenantId, String appName, String returnLevel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling resourceControllerK8ServiceGetTenantApp(Async)");
        }

        // verify the required parameter 'appName' is set
        if (appName == null) {
            throw new ApiException("Missing the required parameter 'appName' when calling resourceControllerK8ServiceGetTenantApp(Async)");
        }

        return resourceControllerK8ServiceGetTenantAppCall(tenantId, appName, returnLevel, _callback);

    }

    /**
     * GetTenantApp - Get a specific app for the given tenant.
     * 
     * @param tenantId The ID of the tenant to get apps for. (required)
     * @param appName The name of the app to get. (required)
     * @param returnLevel Optional: specify a return level for the data. This will control the amount of data returned. (optional)
     * @return Resourcecontrollerk8v3App
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Resourcecontrollerk8v3App resourceControllerK8ServiceGetTenantApp(String tenantId, String appName, String returnLevel) throws ApiException {
        ApiResponse<Resourcecontrollerk8v3App> localVarResp = resourceControllerK8ServiceGetTenantAppWithHttpInfo(tenantId, appName, returnLevel);
        return localVarResp.getData();
    }

    /**
     * GetTenantApp - Get a specific app for the given tenant.
     * 
     * @param tenantId The ID of the tenant to get apps for. (required)
     * @param appName The name of the app to get. (required)
     * @param returnLevel Optional: specify a return level for the data. This will control the amount of data returned. (optional)
     * @return ApiResponse&lt;Resourcecontrollerk8v3App&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Resourcecontrollerk8v3App> resourceControllerK8ServiceGetTenantAppWithHttpInfo(String tenantId, String appName, String returnLevel) throws ApiException {
        okhttp3.Call localVarCall = resourceControllerK8ServiceGetTenantAppValidateBeforeCall(tenantId, appName, returnLevel, null);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3App>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetTenantApp - Get a specific app for the given tenant. (asynchronously)
     * 
     * @param tenantId The ID of the tenant to get apps for. (required)
     * @param appName The name of the app to get. (required)
     * @param returnLevel Optional: specify a return level for the data. This will control the amount of data returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceGetTenantAppAsync(String tenantId, String appName, String returnLevel, final ApiCallback<Resourcecontrollerk8v3App> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceControllerK8ServiceGetTenantAppValidateBeforeCall(tenantId, appName, returnLevel, _callback);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3App>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceControllerK8ServiceGetTenantApps
     * @param tenantId The ID of the tenant to get apps for. (required)
     * @param returnLevel Optional: specify a return level for the data. This will control the amount of data returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceGetTenantAppsCall(String tenantId, String returnLevel, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/app_manager/tenants/{tenant_id}/apps"
            .replace("{" + "tenant_id" + "}", localVarApiClient.escapeString(tenantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (returnLevel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnLevel", returnLevel));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceControllerK8ServiceGetTenantAppsValidateBeforeCall(String tenantId, String returnLevel, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling resourceControllerK8ServiceGetTenantApps(Async)");
        }

        return resourceControllerK8ServiceGetTenantAppsCall(tenantId, returnLevel, _callback);

    }

    /**
     * GetTenantApps - Get the apps for the given tenant.
     * 
     * @param tenantId The ID of the tenant to get apps for. (required)
     * @param returnLevel Optional: specify a return level for the data. This will control the amount of data returned. (optional)
     * @return Resourcecontrollerk8v3GetTenantAppsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Resourcecontrollerk8v3GetTenantAppsResponse resourceControllerK8ServiceGetTenantApps(String tenantId, String returnLevel) throws ApiException {
        ApiResponse<Resourcecontrollerk8v3GetTenantAppsResponse> localVarResp = resourceControllerK8ServiceGetTenantAppsWithHttpInfo(tenantId, returnLevel);
        return localVarResp.getData();
    }

    /**
     * GetTenantApps - Get the apps for the given tenant.
     * 
     * @param tenantId The ID of the tenant to get apps for. (required)
     * @param returnLevel Optional: specify a return level for the data. This will control the amount of data returned. (optional)
     * @return ApiResponse&lt;Resourcecontrollerk8v3GetTenantAppsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Resourcecontrollerk8v3GetTenantAppsResponse> resourceControllerK8ServiceGetTenantAppsWithHttpInfo(String tenantId, String returnLevel) throws ApiException {
        okhttp3.Call localVarCall = resourceControllerK8ServiceGetTenantAppsValidateBeforeCall(tenantId, returnLevel, null);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3GetTenantAppsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetTenantApps - Get the apps for the given tenant. (asynchronously)
     * 
     * @param tenantId The ID of the tenant to get apps for. (required)
     * @param returnLevel Optional: specify a return level for the data. This will control the amount of data returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceGetTenantAppsAsync(String tenantId, String returnLevel, final ApiCallback<Resourcecontrollerk8v3GetTenantAppsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceControllerK8ServiceGetTenantAppsValidateBeforeCall(tenantId, returnLevel, _callback);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3GetTenantAppsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceControllerK8ServiceGetTenantJobs
     * @param tenantId The ID of the tenant to get jobs for. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceGetTenantJobsCall(String tenantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/app_manager/tenants/{tenant_id}/jobs"
            .replace("{" + "tenant_id" + "}", localVarApiClient.escapeString(tenantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceControllerK8ServiceGetTenantJobsValidateBeforeCall(String tenantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling resourceControllerK8ServiceGetTenantJobs(Async)");
        }

        return resourceControllerK8ServiceGetTenantJobsCall(tenantId, _callback);

    }

    /**
     * GetTenantJobs - Get jobs for the given tenant.
     * 
     * @param tenantId The ID of the tenant to get jobs for. (required)
     * @return Resourcecontrollerk8v3GetTenantJobsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Resourcecontrollerk8v3GetTenantJobsResponse resourceControllerK8ServiceGetTenantJobs(String tenantId) throws ApiException {
        ApiResponse<Resourcecontrollerk8v3GetTenantJobsResponse> localVarResp = resourceControllerK8ServiceGetTenantJobsWithHttpInfo(tenantId);
        return localVarResp.getData();
    }

    /**
     * GetTenantJobs - Get jobs for the given tenant.
     * 
     * @param tenantId The ID of the tenant to get jobs for. (required)
     * @return ApiResponse&lt;Resourcecontrollerk8v3GetTenantJobsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Resourcecontrollerk8v3GetTenantJobsResponse> resourceControllerK8ServiceGetTenantJobsWithHttpInfo(String tenantId) throws ApiException {
        okhttp3.Call localVarCall = resourceControllerK8ServiceGetTenantJobsValidateBeforeCall(tenantId, null);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3GetTenantJobsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetTenantJobs - Get jobs for the given tenant. (asynchronously)
     * 
     * @param tenantId The ID of the tenant to get jobs for. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceGetTenantJobsAsync(String tenantId, final ApiCallback<Resourcecontrollerk8v3GetTenantJobsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceControllerK8ServiceGetTenantJobsValidateBeforeCall(tenantId, _callback);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3GetTenantJobsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceControllerK8ServiceGetVersion
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceGetVersionCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/app_manager/system/version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceControllerK8ServiceGetVersionValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return resourceControllerK8ServiceGetVersionCall(_callback);

    }

    /**
     * GetVersion - Get the system version information for the service.
     * 
     * @return Resourcecontrollerk8v3Version
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Resourcecontrollerk8v3Version resourceControllerK8ServiceGetVersion() throws ApiException {
        ApiResponse<Resourcecontrollerk8v3Version> localVarResp = resourceControllerK8ServiceGetVersionWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * GetVersion - Get the system version information for the service.
     * 
     * @return ApiResponse&lt;Resourcecontrollerk8v3Version&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Resourcecontrollerk8v3Version> resourceControllerK8ServiceGetVersionWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = resourceControllerK8ServiceGetVersionValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3Version>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * GetVersion - Get the system version information for the service. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceGetVersionAsync(final ApiCallback<Resourcecontrollerk8v3Version> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceControllerK8ServiceGetVersionValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3Version>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceControllerK8ServiceInstallEdgeTenantRequest
     * @param resourcecontrollerk8v3EdgeTenantRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceInstallEdgeTenantRequestCall(Resourcecontrollerk8v3EdgeTenantRequest resourcecontrollerk8v3EdgeTenantRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourcecontrollerk8v3EdgeTenantRequest;

        // create path and map variables
        String localVarPath = "/api/v3/edgegateways";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceControllerK8ServiceInstallEdgeTenantRequestValidateBeforeCall(Resourcecontrollerk8v3EdgeTenantRequest resourcecontrollerk8v3EdgeTenantRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourcecontrollerk8v3EdgeTenantRequest' is set
        if (resourcecontrollerk8v3EdgeTenantRequest == null) {
            throw new ApiException("Missing the required parameter 'resourcecontrollerk8v3EdgeTenantRequest' when calling resourceControllerK8ServiceInstallEdgeTenantRequest(Async)");
        }

        return resourceControllerK8ServiceInstallEdgeTenantRequestCall(resourcecontrollerk8v3EdgeTenantRequest, _callback);

    }

    /**
     * InstallEdgeTenantRequest to Create/update gi and tnt CRs on edge
     * 
     * @param resourcecontrollerk8v3EdgeTenantRequest  (required)
     * @return Resourcecontrollerk8v3EdgeResourceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Resourcecontrollerk8v3EdgeResourceResponse resourceControllerK8ServiceInstallEdgeTenantRequest(Resourcecontrollerk8v3EdgeTenantRequest resourcecontrollerk8v3EdgeTenantRequest) throws ApiException {
        ApiResponse<Resourcecontrollerk8v3EdgeResourceResponse> localVarResp = resourceControllerK8ServiceInstallEdgeTenantRequestWithHttpInfo(resourcecontrollerk8v3EdgeTenantRequest);
        return localVarResp.getData();
    }

    /**
     * InstallEdgeTenantRequest to Create/update gi and tnt CRs on edge
     * 
     * @param resourcecontrollerk8v3EdgeTenantRequest  (required)
     * @return ApiResponse&lt;Resourcecontrollerk8v3EdgeResourceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Resourcecontrollerk8v3EdgeResourceResponse> resourceControllerK8ServiceInstallEdgeTenantRequestWithHttpInfo(Resourcecontrollerk8v3EdgeTenantRequest resourcecontrollerk8v3EdgeTenantRequest) throws ApiException {
        okhttp3.Call localVarCall = resourceControllerK8ServiceInstallEdgeTenantRequestValidateBeforeCall(resourcecontrollerk8v3EdgeTenantRequest, null);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3EdgeResourceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * InstallEdgeTenantRequest to Create/update gi and tnt CRs on edge (asynchronously)
     * 
     * @param resourcecontrollerk8v3EdgeTenantRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceInstallEdgeTenantRequestAsync(Resourcecontrollerk8v3EdgeTenantRequest resourcecontrollerk8v3EdgeTenantRequest, final ApiCallback<Resourcecontrollerk8v3EdgeResourceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceControllerK8ServiceInstallEdgeTenantRequestValidateBeforeCall(resourcecontrollerk8v3EdgeTenantRequest, _callback);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3EdgeResourceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceControllerK8ServiceQueryControllerLogs
     * @param controllerId The ID of the controller to get logs for. (required)
     * @param resourcecontrollerk8v3QueryControllerLogsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceQueryControllerLogsCall(String controllerId, Resourcecontrollerk8v3QueryControllerLogsRequest resourcecontrollerk8v3QueryControllerLogsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourcecontrollerk8v3QueryControllerLogsRequest;

        // create path and map variables
        String localVarPath = "/api/v3/app_manager/controllers/{controller_id}/logs/query"
            .replace("{" + "controller_id" + "}", localVarApiClient.escapeString(controllerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceControllerK8ServiceQueryControllerLogsValidateBeforeCall(String controllerId, Resourcecontrollerk8v3QueryControllerLogsRequest resourcecontrollerk8v3QueryControllerLogsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'controllerId' is set
        if (controllerId == null) {
            throw new ApiException("Missing the required parameter 'controllerId' when calling resourceControllerK8ServiceQueryControllerLogs(Async)");
        }

        // verify the required parameter 'resourcecontrollerk8v3QueryControllerLogsRequest' is set
        if (resourcecontrollerk8v3QueryControllerLogsRequest == null) {
            throw new ApiException("Missing the required parameter 'resourcecontrollerk8v3QueryControllerLogsRequest' when calling resourceControllerK8ServiceQueryControllerLogs(Async)");
        }

        return resourceControllerK8ServiceQueryControllerLogsCall(controllerId, resourcecontrollerk8v3QueryControllerLogsRequest, _callback);

    }

    /**
     * QueryControllerLogs - Query for the controller logs for a running controller.
     * 
     * @param controllerId The ID of the controller to get logs for. (required)
     * @param resourcecontrollerk8v3QueryControllerLogsRequest  (required)
     * @return Resourcecontrollerk8v3QueryControllerLogsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Resourcecontrollerk8v3QueryControllerLogsResponse resourceControllerK8ServiceQueryControllerLogs(String controllerId, Resourcecontrollerk8v3QueryControllerLogsRequest resourcecontrollerk8v3QueryControllerLogsRequest) throws ApiException {
        ApiResponse<Resourcecontrollerk8v3QueryControllerLogsResponse> localVarResp = resourceControllerK8ServiceQueryControllerLogsWithHttpInfo(controllerId, resourcecontrollerk8v3QueryControllerLogsRequest);
        return localVarResp.getData();
    }

    /**
     * QueryControllerLogs - Query for the controller logs for a running controller.
     * 
     * @param controllerId The ID of the controller to get logs for. (required)
     * @param resourcecontrollerk8v3QueryControllerLogsRequest  (required)
     * @return ApiResponse&lt;Resourcecontrollerk8v3QueryControllerLogsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Resourcecontrollerk8v3QueryControllerLogsResponse> resourceControllerK8ServiceQueryControllerLogsWithHttpInfo(String controllerId, Resourcecontrollerk8v3QueryControllerLogsRequest resourcecontrollerk8v3QueryControllerLogsRequest) throws ApiException {
        okhttp3.Call localVarCall = resourceControllerK8ServiceQueryControllerLogsValidateBeforeCall(controllerId, resourcecontrollerk8v3QueryControllerLogsRequest, null);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3QueryControllerLogsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * QueryControllerLogs - Query for the controller logs for a running controller. (asynchronously)
     * 
     * @param controllerId The ID of the controller to get logs for. (required)
     * @param resourcecontrollerk8v3QueryControllerLogsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceQueryControllerLogsAsync(String controllerId, Resourcecontrollerk8v3QueryControllerLogsRequest resourcecontrollerk8v3QueryControllerLogsRequest, final ApiCallback<Resourcecontrollerk8v3QueryControllerLogsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceControllerK8ServiceQueryControllerLogsValidateBeforeCall(controllerId, resourcecontrollerk8v3QueryControllerLogsRequest, _callback);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3QueryControllerLogsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceControllerK8ServiceUpdateCommand
     * @param id The ID of the command. (required)
     * @param resourcecontrollerk8v3ControllerCommand  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceUpdateCommandCall(String id, Resourcecontrollerk8v3ControllerCommand resourcecontrollerk8v3ControllerCommand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourcecontrollerk8v3ControllerCommand;

        // create path and map variables
        String localVarPath = "/api/v3/app_manager/commands/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceControllerK8ServiceUpdateCommandValidateBeforeCall(String id, Resourcecontrollerk8v3ControllerCommand resourcecontrollerk8v3ControllerCommand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling resourceControllerK8ServiceUpdateCommand(Async)");
        }

        // verify the required parameter 'resourcecontrollerk8v3ControllerCommand' is set
        if (resourcecontrollerk8v3ControllerCommand == null) {
            throw new ApiException("Missing the required parameter 'resourcecontrollerk8v3ControllerCommand' when calling resourceControllerK8ServiceUpdateCommand(Async)");
        }

        return resourceControllerK8ServiceUpdateCommandCall(id, resourcecontrollerk8v3ControllerCommand, _callback);

    }

    /**
     * UpdateCommand - Update the command.
     * 
     * @param id The ID of the command. (required)
     * @param resourcecontrollerk8v3ControllerCommand  (required)
     * @return Resourcecontrollerk8v3ControllerCommand
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Resourcecontrollerk8v3ControllerCommand resourceControllerK8ServiceUpdateCommand(String id, Resourcecontrollerk8v3ControllerCommand resourcecontrollerk8v3ControllerCommand) throws ApiException {
        ApiResponse<Resourcecontrollerk8v3ControllerCommand> localVarResp = resourceControllerK8ServiceUpdateCommandWithHttpInfo(id, resourcecontrollerk8v3ControllerCommand);
        return localVarResp.getData();
    }

    /**
     * UpdateCommand - Update the command.
     * 
     * @param id The ID of the command. (required)
     * @param resourcecontrollerk8v3ControllerCommand  (required)
     * @return ApiResponse&lt;Resourcecontrollerk8v3ControllerCommand&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Resourcecontrollerk8v3ControllerCommand> resourceControllerK8ServiceUpdateCommandWithHttpInfo(String id, Resourcecontrollerk8v3ControllerCommand resourcecontrollerk8v3ControllerCommand) throws ApiException {
        okhttp3.Call localVarCall = resourceControllerK8ServiceUpdateCommandValidateBeforeCall(id, resourcecontrollerk8v3ControllerCommand, null);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3ControllerCommand>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * UpdateCommand - Update the command. (asynchronously)
     * 
     * @param id The ID of the command. (required)
     * @param resourcecontrollerk8v3ControllerCommand  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceUpdateCommandAsync(String id, Resourcecontrollerk8v3ControllerCommand resourcecontrollerk8v3ControllerCommand, final ApiCallback<Resourcecontrollerk8v3ControllerCommand> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceControllerK8ServiceUpdateCommandValidateBeforeCall(id, resourcecontrollerk8v3ControllerCommand, _callback);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3ControllerCommand>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceControllerK8ServiceUpdateController
     * @param id Optional: The internal ID of the controller. (required)
     * @param resourcecontrollerk8v3Controller  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceUpdateControllerCall(String id, Resourcecontrollerk8v3Controller resourcecontrollerk8v3Controller, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourcecontrollerk8v3Controller;

        // create path and map variables
        String localVarPath = "/api/v3/app_manager/controllers/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceControllerK8ServiceUpdateControllerValidateBeforeCall(String id, Resourcecontrollerk8v3Controller resourcecontrollerk8v3Controller, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling resourceControllerK8ServiceUpdateController(Async)");
        }

        // verify the required parameter 'resourcecontrollerk8v3Controller' is set
        if (resourcecontrollerk8v3Controller == null) {
            throw new ApiException("Missing the required parameter 'resourcecontrollerk8v3Controller' when calling resourceControllerK8ServiceUpdateController(Async)");
        }

        return resourceControllerK8ServiceUpdateControllerCall(id, resourcecontrollerk8v3Controller, _callback);

    }

    /**
     * UpdateController - Update an existing controller.
     * 
     * @param id Optional: The internal ID of the controller. (required)
     * @param resourcecontrollerk8v3Controller  (required)
     * @return Resourcecontrollerk8v3Controller
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Resourcecontrollerk8v3Controller resourceControllerK8ServiceUpdateController(String id, Resourcecontrollerk8v3Controller resourcecontrollerk8v3Controller) throws ApiException {
        ApiResponse<Resourcecontrollerk8v3Controller> localVarResp = resourceControllerK8ServiceUpdateControllerWithHttpInfo(id, resourcecontrollerk8v3Controller);
        return localVarResp.getData();
    }

    /**
     * UpdateController - Update an existing controller.
     * 
     * @param id Optional: The internal ID of the controller. (required)
     * @param resourcecontrollerk8v3Controller  (required)
     * @return ApiResponse&lt;Resourcecontrollerk8v3Controller&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Resourcecontrollerk8v3Controller> resourceControllerK8ServiceUpdateControllerWithHttpInfo(String id, Resourcecontrollerk8v3Controller resourcecontrollerk8v3Controller) throws ApiException {
        okhttp3.Call localVarCall = resourceControllerK8ServiceUpdateControllerValidateBeforeCall(id, resourcecontrollerk8v3Controller, null);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3Controller>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * UpdateController - Update an existing controller. (asynchronously)
     * 
     * @param id Optional: The internal ID of the controller. (required)
     * @param resourcecontrollerk8v3Controller  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceUpdateControllerAsync(String id, Resourcecontrollerk8v3Controller resourcecontrollerk8v3Controller, final ApiCallback<Resourcecontrollerk8v3Controller> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceControllerK8ServiceUpdateControllerValidateBeforeCall(id, resourcecontrollerk8v3Controller, _callback);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3Controller>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceControllerK8ServiceUpdateControllerStatus
     * @param id The internal ID of the controller. (required)
     * @param resourcecontrollerk8v3ControllerStatus  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceUpdateControllerStatusCall(String id, Resourcecontrollerk8v3ControllerStatus resourcecontrollerk8v3ControllerStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourcecontrollerk8v3ControllerStatus;

        // create path and map variables
        String localVarPath = "/api/v3/app_manager/controllers/{id}/status"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceControllerK8ServiceUpdateControllerStatusValidateBeforeCall(String id, Resourcecontrollerk8v3ControllerStatus resourcecontrollerk8v3ControllerStatus, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling resourceControllerK8ServiceUpdateControllerStatus(Async)");
        }

        // verify the required parameter 'resourcecontrollerk8v3ControllerStatus' is set
        if (resourcecontrollerk8v3ControllerStatus == null) {
            throw new ApiException("Missing the required parameter 'resourcecontrollerk8v3ControllerStatus' when calling resourceControllerK8ServiceUpdateControllerStatus(Async)");
        }

        return resourceControllerK8ServiceUpdateControllerStatusCall(id, resourcecontrollerk8v3ControllerStatus, _callback);

    }

    /**
     * UpdateControllerStatus - Updates the status for the given controller.
     * 
     * @param id The internal ID of the controller. (required)
     * @param resourcecontrollerk8v3ControllerStatus  (required)
     * @return Resourcecontrollerk8v3ControllerStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Resourcecontrollerk8v3ControllerStatus resourceControllerK8ServiceUpdateControllerStatus(String id, Resourcecontrollerk8v3ControllerStatus resourcecontrollerk8v3ControllerStatus) throws ApiException {
        ApiResponse<Resourcecontrollerk8v3ControllerStatus> localVarResp = resourceControllerK8ServiceUpdateControllerStatusWithHttpInfo(id, resourcecontrollerk8v3ControllerStatus);
        return localVarResp.getData();
    }

    /**
     * UpdateControllerStatus - Updates the status for the given controller.
     * 
     * @param id The internal ID of the controller. (required)
     * @param resourcecontrollerk8v3ControllerStatus  (required)
     * @return ApiResponse&lt;Resourcecontrollerk8v3ControllerStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Resourcecontrollerk8v3ControllerStatus> resourceControllerK8ServiceUpdateControllerStatusWithHttpInfo(String id, Resourcecontrollerk8v3ControllerStatus resourcecontrollerk8v3ControllerStatus) throws ApiException {
        okhttp3.Call localVarCall = resourceControllerK8ServiceUpdateControllerStatusValidateBeforeCall(id, resourcecontrollerk8v3ControllerStatus, null);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3ControllerStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * UpdateControllerStatus - Updates the status for the given controller. (asynchronously)
     * 
     * @param id The internal ID of the controller. (required)
     * @param resourcecontrollerk8v3ControllerStatus  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceUpdateControllerStatusAsync(String id, Resourcecontrollerk8v3ControllerStatus resourcecontrollerk8v3ControllerStatus, final ApiCallback<Resourcecontrollerk8v3ControllerStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceControllerK8ServiceUpdateControllerStatusValidateBeforeCall(id, resourcecontrollerk8v3ControllerStatus, _callback);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3ControllerStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceControllerK8ServiceUpdateJob
     * @param id The ID of the job. (required)
     * @param resourcecontrollerk8v3Job  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceUpdateJobCall(String id, Resourcecontrollerk8v3Job resourcecontrollerk8v3Job, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourcecontrollerk8v3Job;

        // create path and map variables
        String localVarPath = "/api/v3/app_manager/jobs/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceControllerK8ServiceUpdateJobValidateBeforeCall(String id, Resourcecontrollerk8v3Job resourcecontrollerk8v3Job, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling resourceControllerK8ServiceUpdateJob(Async)");
        }

        // verify the required parameter 'resourcecontrollerk8v3Job' is set
        if (resourcecontrollerk8v3Job == null) {
            throw new ApiException("Missing the required parameter 'resourcecontrollerk8v3Job' when calling resourceControllerK8ServiceUpdateJob(Async)");
        }

        return resourceControllerK8ServiceUpdateJobCall(id, resourcecontrollerk8v3Job, _callback);

    }

    /**
     * UpdateJob - Update a job.
     * 
     * @param id The ID of the job. (required)
     * @param resourcecontrollerk8v3Job  (required)
     * @return Resourcecontrollerk8v3Job
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Resourcecontrollerk8v3Job resourceControllerK8ServiceUpdateJob(String id, Resourcecontrollerk8v3Job resourcecontrollerk8v3Job) throws ApiException {
        ApiResponse<Resourcecontrollerk8v3Job> localVarResp = resourceControllerK8ServiceUpdateJobWithHttpInfo(id, resourcecontrollerk8v3Job);
        return localVarResp.getData();
    }

    /**
     * UpdateJob - Update a job.
     * 
     * @param id The ID of the job. (required)
     * @param resourcecontrollerk8v3Job  (required)
     * @return ApiResponse&lt;Resourcecontrollerk8v3Job&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Resourcecontrollerk8v3Job> resourceControllerK8ServiceUpdateJobWithHttpInfo(String id, Resourcecontrollerk8v3Job resourcecontrollerk8v3Job) throws ApiException {
        okhttp3.Call localVarCall = resourceControllerK8ServiceUpdateJobValidateBeforeCall(id, resourcecontrollerk8v3Job, null);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3Job>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * UpdateJob - Update a job. (asynchronously)
     * 
     * @param id The ID of the job. (required)
     * @param resourcecontrollerk8v3Job  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceUpdateJobAsync(String id, Resourcecontrollerk8v3Job resourcecontrollerk8v3Job, final ApiCallback<Resourcecontrollerk8v3Job> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceControllerK8ServiceUpdateJobValidateBeforeCall(id, resourcecontrollerk8v3Job, _callback);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3Job>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceControllerK8ServiceUpdateJobExecution
     * @param id The ID of the job execution to update. (required)
     * @param resourcecontrollerk8v3UpdateJobExecutionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceUpdateJobExecutionCall(String id, Resourcecontrollerk8v3UpdateJobExecutionRequest resourcecontrollerk8v3UpdateJobExecutionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourcecontrollerk8v3UpdateJobExecutionRequest;

        // create path and map variables
        String localVarPath = "/api/v3/app_manager/job_executions/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceControllerK8ServiceUpdateJobExecutionValidateBeforeCall(String id, Resourcecontrollerk8v3UpdateJobExecutionRequest resourcecontrollerk8v3UpdateJobExecutionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling resourceControllerK8ServiceUpdateJobExecution(Async)");
        }

        // verify the required parameter 'resourcecontrollerk8v3UpdateJobExecutionRequest' is set
        if (resourcecontrollerk8v3UpdateJobExecutionRequest == null) {
            throw new ApiException("Missing the required parameter 'resourcecontrollerk8v3UpdateJobExecutionRequest' when calling resourceControllerK8ServiceUpdateJobExecution(Async)");
        }

        return resourceControllerK8ServiceUpdateJobExecutionCall(id, resourcecontrollerk8v3UpdateJobExecutionRequest, _callback);

    }

    /**
     * UpdateJobExecution - Update a job execution.
     * 
     * @param id The ID of the job execution to update. (required)
     * @param resourcecontrollerk8v3UpdateJobExecutionRequest  (required)
     * @return Resourcecontrollerk8v3JobExecution
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Resourcecontrollerk8v3JobExecution resourceControllerK8ServiceUpdateJobExecution(String id, Resourcecontrollerk8v3UpdateJobExecutionRequest resourcecontrollerk8v3UpdateJobExecutionRequest) throws ApiException {
        ApiResponse<Resourcecontrollerk8v3JobExecution> localVarResp = resourceControllerK8ServiceUpdateJobExecutionWithHttpInfo(id, resourcecontrollerk8v3UpdateJobExecutionRequest);
        return localVarResp.getData();
    }

    /**
     * UpdateJobExecution - Update a job execution.
     * 
     * @param id The ID of the job execution to update. (required)
     * @param resourcecontrollerk8v3UpdateJobExecutionRequest  (required)
     * @return ApiResponse&lt;Resourcecontrollerk8v3JobExecution&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Resourcecontrollerk8v3JobExecution> resourceControllerK8ServiceUpdateJobExecutionWithHttpInfo(String id, Resourcecontrollerk8v3UpdateJobExecutionRequest resourcecontrollerk8v3UpdateJobExecutionRequest) throws ApiException {
        okhttp3.Call localVarCall = resourceControllerK8ServiceUpdateJobExecutionValidateBeforeCall(id, resourcecontrollerk8v3UpdateJobExecutionRequest, null);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3JobExecution>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * UpdateJobExecution - Update a job execution. (asynchronously)
     * 
     * @param id The ID of the job execution to update. (required)
     * @param resourcecontrollerk8v3UpdateJobExecutionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceUpdateJobExecutionAsync(String id, Resourcecontrollerk8v3UpdateJobExecutionRequest resourcecontrollerk8v3UpdateJobExecutionRequest, final ApiCallback<Resourcecontrollerk8v3JobExecution> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceControllerK8ServiceUpdateJobExecutionValidateBeforeCall(id, resourcecontrollerk8v3UpdateJobExecutionRequest, _callback);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3JobExecution>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceControllerK8ServiceUpdateJobStatus
     * @param jobId The ID of the job to get status. (required)
     * @param resourcecontrollerk8v3UpdateJobStatusRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceUpdateJobStatusCall(String jobId, Resourcecontrollerk8v3UpdateJobStatusRequest resourcecontrollerk8v3UpdateJobStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourcecontrollerk8v3UpdateJobStatusRequest;

        // create path and map variables
        String localVarPath = "/api/v3/app_manager/jobs/{job_id}/status"
            .replace("{" + "job_id" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceControllerK8ServiceUpdateJobStatusValidateBeforeCall(String jobId, Resourcecontrollerk8v3UpdateJobStatusRequest resourcecontrollerk8v3UpdateJobStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling resourceControllerK8ServiceUpdateJobStatus(Async)");
        }

        // verify the required parameter 'resourcecontrollerk8v3UpdateJobStatusRequest' is set
        if (resourcecontrollerk8v3UpdateJobStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'resourcecontrollerk8v3UpdateJobStatusRequest' when calling resourceControllerK8ServiceUpdateJobStatus(Async)");
        }

        return resourceControllerK8ServiceUpdateJobStatusCall(jobId, resourcecontrollerk8v3UpdateJobStatusRequest, _callback);

    }

    /**
     * UpdateJobStatus - Updates the status for the given Job.
     * 
     * @param jobId The ID of the job to get status. (required)
     * @param resourcecontrollerk8v3UpdateJobStatusRequest  (required)
     * @return Resourcecontrollerk8v3JobStatusDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Resourcecontrollerk8v3JobStatusDTO resourceControllerK8ServiceUpdateJobStatus(String jobId, Resourcecontrollerk8v3UpdateJobStatusRequest resourcecontrollerk8v3UpdateJobStatusRequest) throws ApiException {
        ApiResponse<Resourcecontrollerk8v3JobStatusDTO> localVarResp = resourceControllerK8ServiceUpdateJobStatusWithHttpInfo(jobId, resourcecontrollerk8v3UpdateJobStatusRequest);
        return localVarResp.getData();
    }

    /**
     * UpdateJobStatus - Updates the status for the given Job.
     * 
     * @param jobId The ID of the job to get status. (required)
     * @param resourcecontrollerk8v3UpdateJobStatusRequest  (required)
     * @return ApiResponse&lt;Resourcecontrollerk8v3JobStatusDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Resourcecontrollerk8v3JobStatusDTO> resourceControllerK8ServiceUpdateJobStatusWithHttpInfo(String jobId, Resourcecontrollerk8v3UpdateJobStatusRequest resourcecontrollerk8v3UpdateJobStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = resourceControllerK8ServiceUpdateJobStatusValidateBeforeCall(jobId, resourcecontrollerk8v3UpdateJobStatusRequest, null);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3JobStatusDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * UpdateJobStatus - Updates the status for the given Job. (asynchronously)
     * 
     * @param jobId The ID of the job to get status. (required)
     * @param resourcecontrollerk8v3UpdateJobStatusRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceControllerK8ServiceUpdateJobStatusAsync(String jobId, Resourcecontrollerk8v3UpdateJobStatusRequest resourcecontrollerk8v3UpdateJobStatusRequest, final ApiCallback<Resourcecontrollerk8v3JobStatusDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceControllerK8ServiceUpdateJobStatusValidateBeforeCall(jobId, resourcecontrollerk8v3UpdateJobStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<Resourcecontrollerk8v3JobStatusDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
