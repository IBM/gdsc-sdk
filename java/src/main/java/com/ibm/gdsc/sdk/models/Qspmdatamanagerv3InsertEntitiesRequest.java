/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.sdk.JSON;

/**
 * InsertEntitiesRequest is the request object for InsertAllEntities API.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-07T13:24:05.648078332-08:00[America/Los_Angeles]", comments = "Generator version: 7.6.0")
public class Qspmdatamanagerv3InsertEntitiesRequest {
  public static final String SERIALIZED_NAME_DIMS = "dims";
  @SerializedName(SERIALIZED_NAME_DIMS)
  private List<Object> dims = new ArrayList<>();

  public static final String SERIALIZED_NAME_FACTS = "facts";
  @SerializedName(SERIALIZED_NAME_FACTS)
  private List<Object> facts = new ArrayList<>();

  public static final String SERIALIZED_NAME_POLICYSQLS = "policysqls";
  @SerializedName(SERIALIZED_NAME_POLICYSQLS)
  private List<String> policysqls = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCAN_ID = "scan_id";
  @SerializedName(SERIALIZED_NAME_SCAN_ID)
  private String scanId;

  public Qspmdatamanagerv3InsertEntitiesRequest() {
  }

  public Qspmdatamanagerv3InsertEntitiesRequest dims(List<Object> dims) {
    this.dims = dims;
    return this;
  }

  public Qspmdatamanagerv3InsertEntitiesRequest addDimsItem(Object dimsItem) {
    if (this.dims == null) {
      this.dims = new ArrayList<>();
    }
    this.dims.add(dimsItem);
    return this;
  }

   /**
   * Get dims
   * @return dims
  **/
  @javax.annotation.Nullable
  public List<Object> getDims() {
    return dims;
  }

  public void setDims(List<Object> dims) {
    this.dims = dims;
  }


  public Qspmdatamanagerv3InsertEntitiesRequest facts(List<Object> facts) {
    this.facts = facts;
    return this;
  }

  public Qspmdatamanagerv3InsertEntitiesRequest addFactsItem(Object factsItem) {
    if (this.facts == null) {
      this.facts = new ArrayList<>();
    }
    this.facts.add(factsItem);
    return this;
  }

   /**
   * Get facts
   * @return facts
  **/
  @javax.annotation.Nullable
  public List<Object> getFacts() {
    return facts;
  }

  public void setFacts(List<Object> facts) {
    this.facts = facts;
  }


  public Qspmdatamanagerv3InsertEntitiesRequest policysqls(List<String> policysqls) {
    this.policysqls = policysqls;
    return this;
  }

  public Qspmdatamanagerv3InsertEntitiesRequest addPolicysqlsItem(String policysqlsItem) {
    if (this.policysqls == null) {
      this.policysqls = new ArrayList<>();
    }
    this.policysqls.add(policysqlsItem);
    return this;
  }

   /**
   * Get policysqls
   * @return policysqls
  **/
  @javax.annotation.Nullable
  public List<String> getPolicysqls() {
    return policysqls;
  }

  public void setPolicysqls(List<String> policysqls) {
    this.policysqls = policysqls;
  }


  public Qspmdatamanagerv3InsertEntitiesRequest scanId(String scanId) {
    this.scanId = scanId;
    return this;
  }

   /**
   * Get scanId
   * @return scanId
  **/
  @javax.annotation.Nullable
  public String getScanId() {
    return scanId;
  }

  public void setScanId(String scanId) {
    this.scanId = scanId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Qspmdatamanagerv3InsertEntitiesRequest qspmdatamanagerv3InsertEntitiesRequest = (Qspmdatamanagerv3InsertEntitiesRequest) o;
    return Objects.equals(this.dims, qspmdatamanagerv3InsertEntitiesRequest.dims) &&
        Objects.equals(this.facts, qspmdatamanagerv3InsertEntitiesRequest.facts) &&
        Objects.equals(this.policysqls, qspmdatamanagerv3InsertEntitiesRequest.policysqls) &&
        Objects.equals(this.scanId, qspmdatamanagerv3InsertEntitiesRequest.scanId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dims, facts, policysqls, scanId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Qspmdatamanagerv3InsertEntitiesRequest {\n");
    sb.append("    dims: ").append(toIndentedString(dims)).append("\n");
    sb.append("    facts: ").append(toIndentedString(facts)).append("\n");
    sb.append("    policysqls: ").append(toIndentedString(policysqls)).append("\n");
    sb.append("    scanId: ").append(toIndentedString(scanId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dims");
    openapiFields.add("facts");
    openapiFields.add("policysqls");
    openapiFields.add("scan_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Qspmdatamanagerv3InsertEntitiesRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Qspmdatamanagerv3InsertEntitiesRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Qspmdatamanagerv3InsertEntitiesRequest is not found in the empty JSON string", Qspmdatamanagerv3InsertEntitiesRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Qspmdatamanagerv3InsertEntitiesRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Qspmdatamanagerv3InsertEntitiesRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("dims") != null && !jsonObj.get("dims").isJsonNull() && !jsonObj.get("dims").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dims` to be an array in the JSON string but got `%s`", jsonObj.get("dims").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("facts") != null && !jsonObj.get("facts").isJsonNull() && !jsonObj.get("facts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `facts` to be an array in the JSON string but got `%s`", jsonObj.get("facts").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("policysqls") != null && !jsonObj.get("policysqls").isJsonNull() && !jsonObj.get("policysqls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `policysqls` to be an array in the JSON string but got `%s`", jsonObj.get("policysqls").toString()));
      }
      if ((jsonObj.get("scan_id") != null && !jsonObj.get("scan_id").isJsonNull()) && !jsonObj.get("scan_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scan_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scan_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Qspmdatamanagerv3InsertEntitiesRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Qspmdatamanagerv3InsertEntitiesRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Qspmdatamanagerv3InsertEntitiesRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Qspmdatamanagerv3InsertEntitiesRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<Qspmdatamanagerv3InsertEntitiesRequest>() {
           @Override
           public void write(JsonWriter out, Qspmdatamanagerv3InsertEntitiesRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Qspmdatamanagerv3InsertEntitiesRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Qspmdatamanagerv3InsertEntitiesRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Qspmdatamanagerv3InsertEntitiesRequest
  * @throws IOException if the JSON string is invalid with respect to Qspmdatamanagerv3InsertEntitiesRequest
  */
  public static Qspmdatamanagerv3InsertEntitiesRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Qspmdatamanagerv3InsertEntitiesRequest.class);
  }

 /**
  * Convert an instance of Qspmdatamanagerv3InsertEntitiesRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

