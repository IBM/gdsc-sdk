/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import com.ibm.gdsc.ApiCallback;
import com.ibm.gdsc.ApiClient;
import com.ibm.gdsc.ApiException;
import com.ibm.gdsc.ApiResponse;
import com.ibm.gdsc.Configuration;
import com.ibm.gdsc.Pair;
import com.ibm.gdsc.ProgressRequestBody;
import com.ibm.gdsc.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ibm.gdsc.sdk.Connectionsv3CreateConnectionsAccountsRequest;
import com.ibm.gdsc.sdk.Connectionsv3CreateConnectionsAccountsResponse;
import com.ibm.gdsc.sdk.Connectionsv3CreateConnectionsConfigsRequest;
import com.ibm.gdsc.sdk.Connectionsv3CreateConnectionsConfigsResponse;
import com.ibm.gdsc.sdk.Connectionsv3CreatePluginRequest;
import com.ibm.gdsc.sdk.Connectionsv3CreatePluginResponse;
import com.ibm.gdsc.sdk.Connectionsv3CreateSettingsRequest;
import com.ibm.gdsc.sdk.Connectionsv3DeleteConnectionsAccountsResponse;
import com.ibm.gdsc.sdk.Connectionsv3DeleteConnectionsConfigsResponse;
import com.ibm.gdsc.sdk.Connectionsv3DeletePluginResponse;
import com.ibm.gdsc.sdk.Connectionsv3GetBannerStateResponse;
import com.ibm.gdsc.sdk.Connectionsv3GetConnectionsAccountsResponse;
import com.ibm.gdsc.sdk.Connectionsv3GetConnectionsConfigsResponse;
import com.ibm.gdsc.sdk.Connectionsv3GetConnectionsWithFiltersRequest;
import com.ibm.gdsc.sdk.Connectionsv3GetConnectionsWithFiltersResponse;
import com.ibm.gdsc.sdk.Connectionsv3GetConnectorsSummaryResponse;
import com.ibm.gdsc.sdk.Connectionsv3GetDataSourcesResponse;
import com.ibm.gdsc.sdk.Connectionsv3GetGuardRecordFieldsResponse;
import com.ibm.gdsc.sdk.Connectionsv3GetHeadersResponse;
import com.ibm.gdsc.sdk.Connectionsv3GetPluginsResponse;
import com.ibm.gdsc.sdk.Connectionsv3GetSettingsResponse;
import com.ibm.gdsc.sdk.Connectionsv3PartialUpdateConnectorsRequest;
import com.ibm.gdsc.sdk.Connectionsv3PartialUpdateConnectorsResponse;
import com.ibm.gdsc.sdk.Connectionsv3StapCommandRequest;
import com.ibm.gdsc.sdk.Connectionsv3StatusResponseBase;
import com.ibm.gdsc.sdk.Connectionsv3UpdateBannerStateRequest;
import com.ibm.gdsc.sdk.Connectionsv3UpdateBannerStateResponse;
import com.ibm.gdsc.sdk.Connectionsv3UpdateConnectionsAccountsRequest;
import com.ibm.gdsc.sdk.Connectionsv3UpdateConnectionsAccountsResponse;
import com.ibm.gdsc.sdk.Connectionsv3UpdateConnectionsConfigsRequest;
import com.ibm.gdsc.sdk.Connectionsv3UpdateConnectionsConfigsResponse;
import com.ibm.gdsc.sdk.Connectionsv3UpdateConnectorsRequest;
import com.ibm.gdsc.sdk.Connectionsv3UpdatePluginRequest;
import com.ibm.gdsc.sdk.Connectionsv3UpdatePluginResponse;
import com.ibm.gdsc.sdk.Connectionsv3UpdateSettingsRequest;
import com.ibm.gdsc.sdk.RuntimeError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConnectionsServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConnectionsServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConnectionsServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for connectionsServiceCreateConnectionsAccounts
     * @param connectionsv3CreateConnectionsAccountsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceCreateConnectionsAccountsCall(Connectionsv3CreateConnectionsAccountsRequest connectionsv3CreateConnectionsAccountsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionsv3CreateConnectionsAccountsRequest;

        // create path and map variables
        String localVarPath = "/api/v3/connections/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionsServiceCreateConnectionsAccountsValidateBeforeCall(Connectionsv3CreateConnectionsAccountsRequest connectionsv3CreateConnectionsAccountsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionsv3CreateConnectionsAccountsRequest' is set
        if (connectionsv3CreateConnectionsAccountsRequest == null) {
            throw new ApiException("Missing the required parameter 'connectionsv3CreateConnectionsAccountsRequest' when calling connectionsServiceCreateConnectionsAccounts(Async)");
        }

        return connectionsServiceCreateConnectionsAccountsCall(connectionsv3CreateConnectionsAccountsRequest, _callback);

    }

    /**
     * Summary: Create Connections accounts Description: Create Connections acccounts.
     * 
     * @param connectionsv3CreateConnectionsAccountsRequest  (required)
     * @return Connectionsv3CreateConnectionsAccountsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Connectionsv3CreateConnectionsAccountsResponse connectionsServiceCreateConnectionsAccounts(Connectionsv3CreateConnectionsAccountsRequest connectionsv3CreateConnectionsAccountsRequest) throws ApiException {
        ApiResponse<Connectionsv3CreateConnectionsAccountsResponse> localVarResp = connectionsServiceCreateConnectionsAccountsWithHttpInfo(connectionsv3CreateConnectionsAccountsRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Create Connections accounts Description: Create Connections acccounts.
     * 
     * @param connectionsv3CreateConnectionsAccountsRequest  (required)
     * @return ApiResponse&lt;Connectionsv3CreateConnectionsAccountsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Connectionsv3CreateConnectionsAccountsResponse> connectionsServiceCreateConnectionsAccountsWithHttpInfo(Connectionsv3CreateConnectionsAccountsRequest connectionsv3CreateConnectionsAccountsRequest) throws ApiException {
        okhttp3.Call localVarCall = connectionsServiceCreateConnectionsAccountsValidateBeforeCall(connectionsv3CreateConnectionsAccountsRequest, null);
        Type localVarReturnType = new TypeToken<Connectionsv3CreateConnectionsAccountsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Create Connections accounts Description: Create Connections acccounts. (asynchronously)
     * 
     * @param connectionsv3CreateConnectionsAccountsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceCreateConnectionsAccountsAsync(Connectionsv3CreateConnectionsAccountsRequest connectionsv3CreateConnectionsAccountsRequest, final ApiCallback<Connectionsv3CreateConnectionsAccountsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionsServiceCreateConnectionsAccountsValidateBeforeCall(connectionsv3CreateConnectionsAccountsRequest, _callback);
        Type localVarReturnType = new TypeToken<Connectionsv3CreateConnectionsAccountsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionsServiceCreateConnectionsConfigs
     * @param connectionsv3CreateConnectionsConfigsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceCreateConnectionsConfigsCall(Connectionsv3CreateConnectionsConfigsRequest connectionsv3CreateConnectionsConfigsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionsv3CreateConnectionsConfigsRequest;

        // create path and map variables
        String localVarPath = "/api/v3/connections/configs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionsServiceCreateConnectionsConfigsValidateBeforeCall(Connectionsv3CreateConnectionsConfigsRequest connectionsv3CreateConnectionsConfigsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionsv3CreateConnectionsConfigsRequest' is set
        if (connectionsv3CreateConnectionsConfigsRequest == null) {
            throw new ApiException("Missing the required parameter 'connectionsv3CreateConnectionsConfigsRequest' when calling connectionsServiceCreateConnectionsConfigs(Async)");
        }

        return connectionsServiceCreateConnectionsConfigsCall(connectionsv3CreateConnectionsConfigsRequest, _callback);

    }

    /**
     * Summary: Create connections configs Description: Create Connection config by connection type.
     * 
     * @param connectionsv3CreateConnectionsConfigsRequest  (required)
     * @return Connectionsv3CreateConnectionsConfigsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Connectionsv3CreateConnectionsConfigsResponse connectionsServiceCreateConnectionsConfigs(Connectionsv3CreateConnectionsConfigsRequest connectionsv3CreateConnectionsConfigsRequest) throws ApiException {
        ApiResponse<Connectionsv3CreateConnectionsConfigsResponse> localVarResp = connectionsServiceCreateConnectionsConfigsWithHttpInfo(connectionsv3CreateConnectionsConfigsRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Create connections configs Description: Create Connection config by connection type.
     * 
     * @param connectionsv3CreateConnectionsConfigsRequest  (required)
     * @return ApiResponse&lt;Connectionsv3CreateConnectionsConfigsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Connectionsv3CreateConnectionsConfigsResponse> connectionsServiceCreateConnectionsConfigsWithHttpInfo(Connectionsv3CreateConnectionsConfigsRequest connectionsv3CreateConnectionsConfigsRequest) throws ApiException {
        okhttp3.Call localVarCall = connectionsServiceCreateConnectionsConfigsValidateBeforeCall(connectionsv3CreateConnectionsConfigsRequest, null);
        Type localVarReturnType = new TypeToken<Connectionsv3CreateConnectionsConfigsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Create connections configs Description: Create Connection config by connection type. (asynchronously)
     * 
     * @param connectionsv3CreateConnectionsConfigsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceCreateConnectionsConfigsAsync(Connectionsv3CreateConnectionsConfigsRequest connectionsv3CreateConnectionsConfigsRequest, final ApiCallback<Connectionsv3CreateConnectionsConfigsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionsServiceCreateConnectionsConfigsValidateBeforeCall(connectionsv3CreateConnectionsConfigsRequest, _callback);
        Type localVarReturnType = new TypeToken<Connectionsv3CreateConnectionsConfigsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionsServiceCreatePlugin
     * @param connectionsv3CreatePluginRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceCreatePluginCall(Connectionsv3CreatePluginRequest connectionsv3CreatePluginRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionsv3CreatePluginRequest;

        // create path and map variables
        String localVarPath = "/api/v3/connections/plugins";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionsServiceCreatePluginValidateBeforeCall(Connectionsv3CreatePluginRequest connectionsv3CreatePluginRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionsv3CreatePluginRequest' is set
        if (connectionsv3CreatePluginRequest == null) {
            throw new ApiException("Missing the required parameter 'connectionsv3CreatePluginRequest' when calling connectionsServiceCreatePlugin(Async)");
        }

        return connectionsServiceCreatePluginCall(connectionsv3CreatePluginRequest, _callback);

    }

    /**
     * Summary: Create plugin Description: Create UC generic plugin
     * 
     * @param connectionsv3CreatePluginRequest  (required)
     * @return Connectionsv3CreatePluginResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Connectionsv3CreatePluginResponse connectionsServiceCreatePlugin(Connectionsv3CreatePluginRequest connectionsv3CreatePluginRequest) throws ApiException {
        ApiResponse<Connectionsv3CreatePluginResponse> localVarResp = connectionsServiceCreatePluginWithHttpInfo(connectionsv3CreatePluginRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Create plugin Description: Create UC generic plugin
     * 
     * @param connectionsv3CreatePluginRequest  (required)
     * @return ApiResponse&lt;Connectionsv3CreatePluginResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Connectionsv3CreatePluginResponse> connectionsServiceCreatePluginWithHttpInfo(Connectionsv3CreatePluginRequest connectionsv3CreatePluginRequest) throws ApiException {
        okhttp3.Call localVarCall = connectionsServiceCreatePluginValidateBeforeCall(connectionsv3CreatePluginRequest, null);
        Type localVarReturnType = new TypeToken<Connectionsv3CreatePluginResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Create plugin Description: Create UC generic plugin (asynchronously)
     * 
     * @param connectionsv3CreatePluginRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceCreatePluginAsync(Connectionsv3CreatePluginRequest connectionsv3CreatePluginRequest, final ApiCallback<Connectionsv3CreatePluginResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionsServiceCreatePluginValidateBeforeCall(connectionsv3CreatePluginRequest, _callback);
        Type localVarReturnType = new TypeToken<Connectionsv3CreatePluginResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionsServiceCreateSettings
     * @param connectionsv3CreateSettingsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceCreateSettingsCall(Connectionsv3CreateSettingsRequest connectionsv3CreateSettingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionsv3CreateSettingsRequest;

        // create path and map variables
        String localVarPath = "/api/v3/connections/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionsServiceCreateSettingsValidateBeforeCall(Connectionsv3CreateSettingsRequest connectionsv3CreateSettingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionsv3CreateSettingsRequest' is set
        if (connectionsv3CreateSettingsRequest == null) {
            throw new ApiException("Missing the required parameter 'connectionsv3CreateSettingsRequest' when calling connectionsServiceCreateSettings(Async)");
        }

        return connectionsServiceCreateSettingsCall(connectionsv3CreateSettingsRequest, _callback);

    }

    /**
     * Summary: Create settings Description: Create Settings.
     * 
     * @param connectionsv3CreateSettingsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Object connectionsServiceCreateSettings(Connectionsv3CreateSettingsRequest connectionsv3CreateSettingsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = connectionsServiceCreateSettingsWithHttpInfo(connectionsv3CreateSettingsRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Create settings Description: Create Settings.
     * 
     * @param connectionsv3CreateSettingsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> connectionsServiceCreateSettingsWithHttpInfo(Connectionsv3CreateSettingsRequest connectionsv3CreateSettingsRequest) throws ApiException {
        okhttp3.Call localVarCall = connectionsServiceCreateSettingsValidateBeforeCall(connectionsv3CreateSettingsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Create settings Description: Create Settings. (asynchronously)
     * 
     * @param connectionsv3CreateSettingsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceCreateSettingsAsync(Connectionsv3CreateSettingsRequest connectionsv3CreateSettingsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionsServiceCreateSettingsValidateBeforeCall(connectionsv3CreateSettingsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionsServiceDeleteConnectionsAccounts
     * @param accountId Account id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceDeleteConnectionsAccountsCall(String accountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/connections/accounts/{account_id}"
            .replace("{" + "account_id" + "}", localVarApiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionsServiceDeleteConnectionsAccountsValidateBeforeCall(String accountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling connectionsServiceDeleteConnectionsAccounts(Async)");
        }

        return connectionsServiceDeleteConnectionsAccountsCall(accountId, _callback);

    }

    /**
     * Summary: Delete Connections accounts Description: Delete Connections acccounts.
     * 
     * @param accountId Account id. (required)
     * @return Connectionsv3DeleteConnectionsAccountsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Connectionsv3DeleteConnectionsAccountsResponse connectionsServiceDeleteConnectionsAccounts(String accountId) throws ApiException {
        ApiResponse<Connectionsv3DeleteConnectionsAccountsResponse> localVarResp = connectionsServiceDeleteConnectionsAccountsWithHttpInfo(accountId);
        return localVarResp.getData();
    }

    /**
     * Summary: Delete Connections accounts Description: Delete Connections acccounts.
     * 
     * @param accountId Account id. (required)
     * @return ApiResponse&lt;Connectionsv3DeleteConnectionsAccountsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Connectionsv3DeleteConnectionsAccountsResponse> connectionsServiceDeleteConnectionsAccountsWithHttpInfo(String accountId) throws ApiException {
        okhttp3.Call localVarCall = connectionsServiceDeleteConnectionsAccountsValidateBeforeCall(accountId, null);
        Type localVarReturnType = new TypeToken<Connectionsv3DeleteConnectionsAccountsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Delete Connections accounts Description: Delete Connections acccounts. (asynchronously)
     * 
     * @param accountId Account id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceDeleteConnectionsAccountsAsync(String accountId, final ApiCallback<Connectionsv3DeleteConnectionsAccountsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionsServiceDeleteConnectionsAccountsValidateBeforeCall(accountId, _callback);
        Type localVarReturnType = new TypeToken<Connectionsv3DeleteConnectionsAccountsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionsServiceDeleteConnectionsConfigs
     * @param connectionId Connection id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceDeleteConnectionsConfigsCall(String connectionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/connections/configs/{connection_id}"
            .replace("{" + "connection_id" + "}", localVarApiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionsServiceDeleteConnectionsConfigsValidateBeforeCall(String connectionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling connectionsServiceDeleteConnectionsConfigs(Async)");
        }

        return connectionsServiceDeleteConnectionsConfigsCall(connectionId, _callback);

    }

    /**
     * Summary: Delete connections configs Description: Delete Connection config by connection id.
     * 
     * @param connectionId Connection id. (required)
     * @return Connectionsv3DeleteConnectionsConfigsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Connectionsv3DeleteConnectionsConfigsResponse connectionsServiceDeleteConnectionsConfigs(String connectionId) throws ApiException {
        ApiResponse<Connectionsv3DeleteConnectionsConfigsResponse> localVarResp = connectionsServiceDeleteConnectionsConfigsWithHttpInfo(connectionId);
        return localVarResp.getData();
    }

    /**
     * Summary: Delete connections configs Description: Delete Connection config by connection id.
     * 
     * @param connectionId Connection id. (required)
     * @return ApiResponse&lt;Connectionsv3DeleteConnectionsConfigsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Connectionsv3DeleteConnectionsConfigsResponse> connectionsServiceDeleteConnectionsConfigsWithHttpInfo(String connectionId) throws ApiException {
        okhttp3.Call localVarCall = connectionsServiceDeleteConnectionsConfigsValidateBeforeCall(connectionId, null);
        Type localVarReturnType = new TypeToken<Connectionsv3DeleteConnectionsConfigsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Delete connections configs Description: Delete Connection config by connection id. (asynchronously)
     * 
     * @param connectionId Connection id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceDeleteConnectionsConfigsAsync(String connectionId, final ApiCallback<Connectionsv3DeleteConnectionsConfigsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionsServiceDeleteConnectionsConfigsValidateBeforeCall(connectionId, _callback);
        Type localVarReturnType = new TypeToken<Connectionsv3DeleteConnectionsConfigsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionsServiceDeleteConnector
     * @param connectionId The connection id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceDeleteConnectorCall(String connectionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/connections/{connection_id}"
            .replace("{" + "connection_id" + "}", localVarApiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionsServiceDeleteConnectorValidateBeforeCall(String connectionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling connectionsServiceDeleteConnector(Async)");
        }

        return connectionsServiceDeleteConnectorCall(connectionId, _callback);

    }

    /**
     * Summary: Delete connector Description: Delete a Connection.
     * 
     * @param connectionId The connection id (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Object connectionsServiceDeleteConnector(String connectionId) throws ApiException {
        ApiResponse<Object> localVarResp = connectionsServiceDeleteConnectorWithHttpInfo(connectionId);
        return localVarResp.getData();
    }

    /**
     * Summary: Delete connector Description: Delete a Connection.
     * 
     * @param connectionId The connection id (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> connectionsServiceDeleteConnectorWithHttpInfo(String connectionId) throws ApiException {
        okhttp3.Call localVarCall = connectionsServiceDeleteConnectorValidateBeforeCall(connectionId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Delete connector Description: Delete a Connection. (asynchronously)
     * 
     * @param connectionId The connection id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceDeleteConnectorAsync(String connectionId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionsServiceDeleteConnectorValidateBeforeCall(connectionId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionsServiceDeletePlugin
     * @param id plugin id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceDeletePluginCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/connections/plugins/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionsServiceDeletePluginValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling connectionsServiceDeletePlugin(Async)");
        }

        return connectionsServiceDeletePluginCall(id, _callback);

    }

    /**
     * Summary: Delete plugin. Description: Delete plugin.
     * 
     * @param id plugin id (required)
     * @return Connectionsv3DeletePluginResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Connectionsv3DeletePluginResponse connectionsServiceDeletePlugin(String id) throws ApiException {
        ApiResponse<Connectionsv3DeletePluginResponse> localVarResp = connectionsServiceDeletePluginWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Summary: Delete plugin. Description: Delete plugin.
     * 
     * @param id plugin id (required)
     * @return ApiResponse&lt;Connectionsv3DeletePluginResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Connectionsv3DeletePluginResponse> connectionsServiceDeletePluginWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = connectionsServiceDeletePluginValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Connectionsv3DeletePluginResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Delete plugin. Description: Delete plugin. (asynchronously)
     * 
     * @param id plugin id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceDeletePluginAsync(String id, final ApiCallback<Connectionsv3DeletePluginResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionsServiceDeletePluginValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Connectionsv3DeletePluginResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionsServiceGetBannerState
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceGetBannerStateCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/connections/banner";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionsServiceGetBannerStateValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return connectionsServiceGetBannerStateCall(_callback);

    }

    /**
     * Summary: Get banner state for object verb page.  Description: Get banner state for object verb page.
     * 
     * @return Connectionsv3GetBannerStateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Connectionsv3GetBannerStateResponse connectionsServiceGetBannerState() throws ApiException {
        ApiResponse<Connectionsv3GetBannerStateResponse> localVarResp = connectionsServiceGetBannerStateWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Summary: Get banner state for object verb page.  Description: Get banner state for object verb page.
     * 
     * @return ApiResponse&lt;Connectionsv3GetBannerStateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Connectionsv3GetBannerStateResponse> connectionsServiceGetBannerStateWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = connectionsServiceGetBannerStateValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Connectionsv3GetBannerStateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get banner state for object verb page.  Description: Get banner state for object verb page. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceGetBannerStateAsync(final ApiCallback<Connectionsv3GetBannerStateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionsServiceGetBannerStateValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Connectionsv3GetBannerStateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionsServiceGetConnectionsAccounts
     * @param accountId Optional: account id. (optional)
     * @param accessKey Optional: acccount access key. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceGetConnectionsAccountsCall(String accountId, String accessKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/connections/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("account_id", accountId));
        }

        if (accessKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_key", accessKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionsServiceGetConnectionsAccountsValidateBeforeCall(String accountId, String accessKey, final ApiCallback _callback) throws ApiException {
        return connectionsServiceGetConnectionsAccountsCall(accountId, accessKey, _callback);

    }

    /**
     * Summary: Get Connections accounts Description: Get Connections acccounts.
     * 
     * @param accountId Optional: account id. (optional)
     * @param accessKey Optional: acccount access key. (optional)
     * @return Connectionsv3GetConnectionsAccountsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Connectionsv3GetConnectionsAccountsResponse connectionsServiceGetConnectionsAccounts(String accountId, String accessKey) throws ApiException {
        ApiResponse<Connectionsv3GetConnectionsAccountsResponse> localVarResp = connectionsServiceGetConnectionsAccountsWithHttpInfo(accountId, accessKey);
        return localVarResp.getData();
    }

    /**
     * Summary: Get Connections accounts Description: Get Connections acccounts.
     * 
     * @param accountId Optional: account id. (optional)
     * @param accessKey Optional: acccount access key. (optional)
     * @return ApiResponse&lt;Connectionsv3GetConnectionsAccountsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Connectionsv3GetConnectionsAccountsResponse> connectionsServiceGetConnectionsAccountsWithHttpInfo(String accountId, String accessKey) throws ApiException {
        okhttp3.Call localVarCall = connectionsServiceGetConnectionsAccountsValidateBeforeCall(accountId, accessKey, null);
        Type localVarReturnType = new TypeToken<Connectionsv3GetConnectionsAccountsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get Connections accounts Description: Get Connections acccounts. (asynchronously)
     * 
     * @param accountId Optional: account id. (optional)
     * @param accessKey Optional: acccount access key. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceGetConnectionsAccountsAsync(String accountId, String accessKey, final ApiCallback<Connectionsv3GetConnectionsAccountsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionsServiceGetConnectionsAccountsValidateBeforeCall(accountId, accessKey, _callback);
        Type localVarReturnType = new TypeToken<Connectionsv3GetConnectionsAccountsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionsServiceGetConnectionsConfigs
     * @param type The type of connector. (optional, default to UNDEFINED_TYPE)
     * @param connectionId Optional: if connection id did not provide then return all connections. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceGetConnectionsConfigsCall(String type, String connectionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/connections/configs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (connectionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("connection_id", connectionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionsServiceGetConnectionsConfigsValidateBeforeCall(String type, String connectionId, final ApiCallback _callback) throws ApiException {
        return connectionsServiceGetConnectionsConfigsCall(type, connectionId, _callback);

    }

    /**
     * Summary: Get connections configs Description: Get Connection config by connection type.
     * 
     * @param type The type of connector. (optional, default to UNDEFINED_TYPE)
     * @param connectionId Optional: if connection id did not provide then return all connections. (optional)
     * @return Connectionsv3GetConnectionsConfigsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Connectionsv3GetConnectionsConfigsResponse connectionsServiceGetConnectionsConfigs(String type, String connectionId) throws ApiException {
        ApiResponse<Connectionsv3GetConnectionsConfigsResponse> localVarResp = connectionsServiceGetConnectionsConfigsWithHttpInfo(type, connectionId);
        return localVarResp.getData();
    }

    /**
     * Summary: Get connections configs Description: Get Connection config by connection type.
     * 
     * @param type The type of connector. (optional, default to UNDEFINED_TYPE)
     * @param connectionId Optional: if connection id did not provide then return all connections. (optional)
     * @return ApiResponse&lt;Connectionsv3GetConnectionsConfigsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Connectionsv3GetConnectionsConfigsResponse> connectionsServiceGetConnectionsConfigsWithHttpInfo(String type, String connectionId) throws ApiException {
        okhttp3.Call localVarCall = connectionsServiceGetConnectionsConfigsValidateBeforeCall(type, connectionId, null);
        Type localVarReturnType = new TypeToken<Connectionsv3GetConnectionsConfigsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get connections configs Description: Get Connection config by connection type. (asynchronously)
     * 
     * @param type The type of connector. (optional, default to UNDEFINED_TYPE)
     * @param connectionId Optional: if connection id did not provide then return all connections. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceGetConnectionsConfigsAsync(String type, String connectionId, final ApiCallback<Connectionsv3GetConnectionsConfigsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionsServiceGetConnectionsConfigsValidateBeforeCall(type, connectionId, _callback);
        Type localVarReturnType = new TypeToken<Connectionsv3GetConnectionsConfigsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionsServiceGetConnectionsWithFilters
     * @param connectionsv3GetConnectionsWithFiltersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceGetConnectionsWithFiltersCall(Connectionsv3GetConnectionsWithFiltersRequest connectionsv3GetConnectionsWithFiltersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionsv3GetConnectionsWithFiltersRequest;

        // create path and map variables
        String localVarPath = "/api/v3/connections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionsServiceGetConnectionsWithFiltersValidateBeforeCall(Connectionsv3GetConnectionsWithFiltersRequest connectionsv3GetConnectionsWithFiltersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionsv3GetConnectionsWithFiltersRequest' is set
        if (connectionsv3GetConnectionsWithFiltersRequest == null) {
            throw new ApiException("Missing the required parameter 'connectionsv3GetConnectionsWithFiltersRequest' when calling connectionsServiceGetConnectionsWithFilters(Async)");
        }

        return connectionsServiceGetConnectionsWithFiltersCall(connectionsv3GetConnectionsWithFiltersRequest, _callback);

    }

    /**
     * Summary: Get connections with filters Description: Get connections with filters.
     * 
     * @param connectionsv3GetConnectionsWithFiltersRequest  (required)
     * @return Connectionsv3GetConnectionsWithFiltersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Connectionsv3GetConnectionsWithFiltersResponse connectionsServiceGetConnectionsWithFilters(Connectionsv3GetConnectionsWithFiltersRequest connectionsv3GetConnectionsWithFiltersRequest) throws ApiException {
        ApiResponse<Connectionsv3GetConnectionsWithFiltersResponse> localVarResp = connectionsServiceGetConnectionsWithFiltersWithHttpInfo(connectionsv3GetConnectionsWithFiltersRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Get connections with filters Description: Get connections with filters.
     * 
     * @param connectionsv3GetConnectionsWithFiltersRequest  (required)
     * @return ApiResponse&lt;Connectionsv3GetConnectionsWithFiltersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Connectionsv3GetConnectionsWithFiltersResponse> connectionsServiceGetConnectionsWithFiltersWithHttpInfo(Connectionsv3GetConnectionsWithFiltersRequest connectionsv3GetConnectionsWithFiltersRequest) throws ApiException {
        okhttp3.Call localVarCall = connectionsServiceGetConnectionsWithFiltersValidateBeforeCall(connectionsv3GetConnectionsWithFiltersRequest, null);
        Type localVarReturnType = new TypeToken<Connectionsv3GetConnectionsWithFiltersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get connections with filters Description: Get connections with filters. (asynchronously)
     * 
     * @param connectionsv3GetConnectionsWithFiltersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceGetConnectionsWithFiltersAsync(Connectionsv3GetConnectionsWithFiltersRequest connectionsv3GetConnectionsWithFiltersRequest, final ApiCallback<Connectionsv3GetConnectionsWithFiltersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionsServiceGetConnectionsWithFiltersValidateBeforeCall(connectionsv3GetConnectionsWithFiltersRequest, _callback);
        Type localVarReturnType = new TypeToken<Connectionsv3GetConnectionsWithFiltersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionsServiceGetConnectorsSummary
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceGetConnectorsSummaryCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/connections/summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionsServiceGetConnectorsSummaryValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return connectionsServiceGetConnectorsSummaryCall(_callback);

    }

    /**
     * Summary: Get connectors summary Description: Get a summary of Connectors.
     * 
     * @return Connectionsv3GetConnectorsSummaryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Connectionsv3GetConnectorsSummaryResponse connectionsServiceGetConnectorsSummary() throws ApiException {
        ApiResponse<Connectionsv3GetConnectorsSummaryResponse> localVarResp = connectionsServiceGetConnectorsSummaryWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Summary: Get connectors summary Description: Get a summary of Connectors.
     * 
     * @return ApiResponse&lt;Connectionsv3GetConnectorsSummaryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Connectionsv3GetConnectorsSummaryResponse> connectionsServiceGetConnectorsSummaryWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = connectionsServiceGetConnectorsSummaryValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Connectionsv3GetConnectorsSummaryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get connectors summary Description: Get a summary of Connectors. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceGetConnectorsSummaryAsync(final ApiCallback<Connectionsv3GetConnectorsSummaryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionsServiceGetConnectorsSummaryValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Connectionsv3GetConnectorsSummaryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionsServiceGetDataSources
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceGetDataSourcesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/connections/datasources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionsServiceGetDataSourcesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return connectionsServiceGetDataSourcesCall(_callback);

    }

    /**
     * Summary: Get data sources Description: Get a list of data sources.
     * 
     * @return Connectionsv3GetDataSourcesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Connectionsv3GetDataSourcesResponse connectionsServiceGetDataSources() throws ApiException {
        ApiResponse<Connectionsv3GetDataSourcesResponse> localVarResp = connectionsServiceGetDataSourcesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Summary: Get data sources Description: Get a list of data sources.
     * 
     * @return ApiResponse&lt;Connectionsv3GetDataSourcesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Connectionsv3GetDataSourcesResponse> connectionsServiceGetDataSourcesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = connectionsServiceGetDataSourcesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Connectionsv3GetDataSourcesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get data sources Description: Get a list of data sources. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceGetDataSourcesAsync(final ApiCallback<Connectionsv3GetDataSourcesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionsServiceGetDataSourcesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Connectionsv3GetDataSourcesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionsServiceGetGuardRecordFields
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceGetGuardRecordFieldsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/connections/fields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionsServiceGetGuardRecordFieldsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return connectionsServiceGetGuardRecordFieldsCall(_callback);

    }

    /**
     * Summary: Get list of guard record fields.  Description: Get list of guard record fields.
     * 
     * @return Connectionsv3GetGuardRecordFieldsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Connectionsv3GetGuardRecordFieldsResponse connectionsServiceGetGuardRecordFields() throws ApiException {
        ApiResponse<Connectionsv3GetGuardRecordFieldsResponse> localVarResp = connectionsServiceGetGuardRecordFieldsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Summary: Get list of guard record fields.  Description: Get list of guard record fields.
     * 
     * @return ApiResponse&lt;Connectionsv3GetGuardRecordFieldsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Connectionsv3GetGuardRecordFieldsResponse> connectionsServiceGetGuardRecordFieldsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = connectionsServiceGetGuardRecordFieldsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Connectionsv3GetGuardRecordFieldsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get list of guard record fields.  Description: Get list of guard record fields. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceGetGuardRecordFieldsAsync(final ApiCallback<Connectionsv3GetGuardRecordFieldsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionsServiceGetGuardRecordFieldsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Connectionsv3GetGuardRecordFieldsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionsServiceGetHeaders
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceGetHeadersCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/connections/headers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionsServiceGetHeadersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return connectionsServiceGetHeadersCall(_callback);

    }

    /**
     * Summary: Get headers Description: Get a list of Headers.
     * 
     * @return Connectionsv3GetHeadersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Connectionsv3GetHeadersResponse connectionsServiceGetHeaders() throws ApiException {
        ApiResponse<Connectionsv3GetHeadersResponse> localVarResp = connectionsServiceGetHeadersWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Summary: Get headers Description: Get a list of Headers.
     * 
     * @return ApiResponse&lt;Connectionsv3GetHeadersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Connectionsv3GetHeadersResponse> connectionsServiceGetHeadersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = connectionsServiceGetHeadersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Connectionsv3GetHeadersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get headers Description: Get a list of Headers. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceGetHeadersAsync(final ApiCallback<Connectionsv3GetHeadersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionsServiceGetHeadersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Connectionsv3GetHeadersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionsServiceGetPlugins
     * @param id Optional: if no plug-in id is provided, returns list of all plug-ins. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceGetPluginsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/connections/plugins";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionsServiceGetPluginsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        return connectionsServiceGetPluginsCall(id, _callback);

    }

    /**
     * Summary: Get plugins  Description: Get custom universal connector plugins
     * 
     * @param id Optional: if no plug-in id is provided, returns list of all plug-ins. (optional)
     * @return Connectionsv3GetPluginsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Connectionsv3GetPluginsResponse connectionsServiceGetPlugins(String id) throws ApiException {
        ApiResponse<Connectionsv3GetPluginsResponse> localVarResp = connectionsServiceGetPluginsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Summary: Get plugins  Description: Get custom universal connector plugins
     * 
     * @param id Optional: if no plug-in id is provided, returns list of all plug-ins. (optional)
     * @return ApiResponse&lt;Connectionsv3GetPluginsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Connectionsv3GetPluginsResponse> connectionsServiceGetPluginsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = connectionsServiceGetPluginsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Connectionsv3GetPluginsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get plugins  Description: Get custom universal connector plugins (asynchronously)
     * 
     * @param id Optional: if no plug-in id is provided, returns list of all plug-ins. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceGetPluginsAsync(String id, final ApiCallback<Connectionsv3GetPluginsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionsServiceGetPluginsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Connectionsv3GetPluginsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionsServiceGetSettings
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceGetSettingsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/connections/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionsServiceGetSettingsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return connectionsServiceGetSettingsCall(_callback);

    }

    /**
     * Summary: Get settings Description: Get a list of Settings.
     * 
     * @return Connectionsv3GetSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Connectionsv3GetSettingsResponse connectionsServiceGetSettings() throws ApiException {
        ApiResponse<Connectionsv3GetSettingsResponse> localVarResp = connectionsServiceGetSettingsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Summary: Get settings Description: Get a list of Settings.
     * 
     * @return ApiResponse&lt;Connectionsv3GetSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Connectionsv3GetSettingsResponse> connectionsServiceGetSettingsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = connectionsServiceGetSettingsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Connectionsv3GetSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get settings Description: Get a list of Settings. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceGetSettingsAsync(final ApiCallback<Connectionsv3GetSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionsServiceGetSettingsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Connectionsv3GetSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionsServicePartialUpdateConnectors
     * @param connectionsv3PartialUpdateConnectorsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServicePartialUpdateConnectorsCall(Connectionsv3PartialUpdateConnectorsRequest connectionsv3PartialUpdateConnectorsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionsv3PartialUpdateConnectorsRequest;

        // create path and map variables
        String localVarPath = "/api/v3/connections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionsServicePartialUpdateConnectorsValidateBeforeCall(Connectionsv3PartialUpdateConnectorsRequest connectionsv3PartialUpdateConnectorsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionsv3PartialUpdateConnectorsRequest' is set
        if (connectionsv3PartialUpdateConnectorsRequest == null) {
            throw new ApiException("Missing the required parameter 'connectionsv3PartialUpdateConnectorsRequest' when calling connectionsServicePartialUpdateConnectors(Async)");
        }

        return connectionsServicePartialUpdateConnectorsCall(connectionsv3PartialUpdateConnectorsRequest, _callback);

    }

    /**
     * Summary: Partial update connectors Description: Partial update of Connectors.
     * 
     * @param connectionsv3PartialUpdateConnectorsRequest  (required)
     * @return Connectionsv3PartialUpdateConnectorsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Connectionsv3PartialUpdateConnectorsResponse connectionsServicePartialUpdateConnectors(Connectionsv3PartialUpdateConnectorsRequest connectionsv3PartialUpdateConnectorsRequest) throws ApiException {
        ApiResponse<Connectionsv3PartialUpdateConnectorsResponse> localVarResp = connectionsServicePartialUpdateConnectorsWithHttpInfo(connectionsv3PartialUpdateConnectorsRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Partial update connectors Description: Partial update of Connectors.
     * 
     * @param connectionsv3PartialUpdateConnectorsRequest  (required)
     * @return ApiResponse&lt;Connectionsv3PartialUpdateConnectorsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Connectionsv3PartialUpdateConnectorsResponse> connectionsServicePartialUpdateConnectorsWithHttpInfo(Connectionsv3PartialUpdateConnectorsRequest connectionsv3PartialUpdateConnectorsRequest) throws ApiException {
        okhttp3.Call localVarCall = connectionsServicePartialUpdateConnectorsValidateBeforeCall(connectionsv3PartialUpdateConnectorsRequest, null);
        Type localVarReturnType = new TypeToken<Connectionsv3PartialUpdateConnectorsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Partial update connectors Description: Partial update of Connectors. (asynchronously)
     * 
     * @param connectionsv3PartialUpdateConnectorsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServicePartialUpdateConnectorsAsync(Connectionsv3PartialUpdateConnectorsRequest connectionsv3PartialUpdateConnectorsRequest, final ApiCallback<Connectionsv3PartialUpdateConnectorsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionsServicePartialUpdateConnectorsValidateBeforeCall(connectionsv3PartialUpdateConnectorsRequest, _callback);
        Type localVarReturnType = new TypeToken<Connectionsv3PartialUpdateConnectorsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionsServicePostStapCommand
     * @param connectionsv3StapCommandRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServicePostStapCommandCall(Connectionsv3StapCommandRequest connectionsv3StapCommandRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionsv3StapCommandRequest;

        // create path and map variables
        String localVarPath = "/api/v3/stap/commands";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionsServicePostStapCommandValidateBeforeCall(Connectionsv3StapCommandRequest connectionsv3StapCommandRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionsv3StapCommandRequest' is set
        if (connectionsv3StapCommandRequest == null) {
            throw new ApiException("Missing the required parameter 'connectionsv3StapCommandRequest' when calling connectionsServicePostStapCommand(Async)");
        }

        return connectionsServicePostStapCommandCall(connectionsv3StapCommandRequest, _callback);

    }

    /**
     * Summary: Post stap command Description: Send a STAP command down to kafka for snif-assist.
     * 
     * @param connectionsv3StapCommandRequest  (required)
     * @return Connectionsv3StatusResponseBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Connectionsv3StatusResponseBase connectionsServicePostStapCommand(Connectionsv3StapCommandRequest connectionsv3StapCommandRequest) throws ApiException {
        ApiResponse<Connectionsv3StatusResponseBase> localVarResp = connectionsServicePostStapCommandWithHttpInfo(connectionsv3StapCommandRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Post stap command Description: Send a STAP command down to kafka for snif-assist.
     * 
     * @param connectionsv3StapCommandRequest  (required)
     * @return ApiResponse&lt;Connectionsv3StatusResponseBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Connectionsv3StatusResponseBase> connectionsServicePostStapCommandWithHttpInfo(Connectionsv3StapCommandRequest connectionsv3StapCommandRequest) throws ApiException {
        okhttp3.Call localVarCall = connectionsServicePostStapCommandValidateBeforeCall(connectionsv3StapCommandRequest, null);
        Type localVarReturnType = new TypeToken<Connectionsv3StatusResponseBase>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Post stap command Description: Send a STAP command down to kafka for snif-assist. (asynchronously)
     * 
     * @param connectionsv3StapCommandRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServicePostStapCommandAsync(Connectionsv3StapCommandRequest connectionsv3StapCommandRequest, final ApiCallback<Connectionsv3StatusResponseBase> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionsServicePostStapCommandValidateBeforeCall(connectionsv3StapCommandRequest, _callback);
        Type localVarReturnType = new TypeToken<Connectionsv3StatusResponseBase>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionsServiceUpdateBannerState
     * @param connectionsv3UpdateBannerStateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceUpdateBannerStateCall(Connectionsv3UpdateBannerStateRequest connectionsv3UpdateBannerStateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionsv3UpdateBannerStateRequest;

        // create path and map variables
        String localVarPath = "/api/v3/connections/banner";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionsServiceUpdateBannerStateValidateBeforeCall(Connectionsv3UpdateBannerStateRequest connectionsv3UpdateBannerStateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionsv3UpdateBannerStateRequest' is set
        if (connectionsv3UpdateBannerStateRequest == null) {
            throw new ApiException("Missing the required parameter 'connectionsv3UpdateBannerStateRequest' when calling connectionsServiceUpdateBannerState(Async)");
        }

        return connectionsServiceUpdateBannerStateCall(connectionsv3UpdateBannerStateRequest, _callback);

    }

    /**
     * Summary: Update banner state for object verb page.  Description: Update banner state for object verb page.
     * 
     * @param connectionsv3UpdateBannerStateRequest  (required)
     * @return Connectionsv3UpdateBannerStateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Connectionsv3UpdateBannerStateResponse connectionsServiceUpdateBannerState(Connectionsv3UpdateBannerStateRequest connectionsv3UpdateBannerStateRequest) throws ApiException {
        ApiResponse<Connectionsv3UpdateBannerStateResponse> localVarResp = connectionsServiceUpdateBannerStateWithHttpInfo(connectionsv3UpdateBannerStateRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Update banner state for object verb page.  Description: Update banner state for object verb page.
     * 
     * @param connectionsv3UpdateBannerStateRequest  (required)
     * @return ApiResponse&lt;Connectionsv3UpdateBannerStateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Connectionsv3UpdateBannerStateResponse> connectionsServiceUpdateBannerStateWithHttpInfo(Connectionsv3UpdateBannerStateRequest connectionsv3UpdateBannerStateRequest) throws ApiException {
        okhttp3.Call localVarCall = connectionsServiceUpdateBannerStateValidateBeforeCall(connectionsv3UpdateBannerStateRequest, null);
        Type localVarReturnType = new TypeToken<Connectionsv3UpdateBannerStateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Update banner state for object verb page.  Description: Update banner state for object verb page. (asynchronously)
     * 
     * @param connectionsv3UpdateBannerStateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceUpdateBannerStateAsync(Connectionsv3UpdateBannerStateRequest connectionsv3UpdateBannerStateRequest, final ApiCallback<Connectionsv3UpdateBannerStateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionsServiceUpdateBannerStateValidateBeforeCall(connectionsv3UpdateBannerStateRequest, _callback);
        Type localVarReturnType = new TypeToken<Connectionsv3UpdateBannerStateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionsServiceUpdateConnectionsAccounts
     * @param connectionsv3UpdateConnectionsAccountsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceUpdateConnectionsAccountsCall(Connectionsv3UpdateConnectionsAccountsRequest connectionsv3UpdateConnectionsAccountsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionsv3UpdateConnectionsAccountsRequest;

        // create path and map variables
        String localVarPath = "/api/v3/connections/accounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionsServiceUpdateConnectionsAccountsValidateBeforeCall(Connectionsv3UpdateConnectionsAccountsRequest connectionsv3UpdateConnectionsAccountsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionsv3UpdateConnectionsAccountsRequest' is set
        if (connectionsv3UpdateConnectionsAccountsRequest == null) {
            throw new ApiException("Missing the required parameter 'connectionsv3UpdateConnectionsAccountsRequest' when calling connectionsServiceUpdateConnectionsAccounts(Async)");
        }

        return connectionsServiceUpdateConnectionsAccountsCall(connectionsv3UpdateConnectionsAccountsRequest, _callback);

    }

    /**
     * Summary: Update Connections accounts Description: Update Connections acccounts.
     * 
     * @param connectionsv3UpdateConnectionsAccountsRequest  (required)
     * @return Connectionsv3UpdateConnectionsAccountsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Connectionsv3UpdateConnectionsAccountsResponse connectionsServiceUpdateConnectionsAccounts(Connectionsv3UpdateConnectionsAccountsRequest connectionsv3UpdateConnectionsAccountsRequest) throws ApiException {
        ApiResponse<Connectionsv3UpdateConnectionsAccountsResponse> localVarResp = connectionsServiceUpdateConnectionsAccountsWithHttpInfo(connectionsv3UpdateConnectionsAccountsRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Update Connections accounts Description: Update Connections acccounts.
     * 
     * @param connectionsv3UpdateConnectionsAccountsRequest  (required)
     * @return ApiResponse&lt;Connectionsv3UpdateConnectionsAccountsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Connectionsv3UpdateConnectionsAccountsResponse> connectionsServiceUpdateConnectionsAccountsWithHttpInfo(Connectionsv3UpdateConnectionsAccountsRequest connectionsv3UpdateConnectionsAccountsRequest) throws ApiException {
        okhttp3.Call localVarCall = connectionsServiceUpdateConnectionsAccountsValidateBeforeCall(connectionsv3UpdateConnectionsAccountsRequest, null);
        Type localVarReturnType = new TypeToken<Connectionsv3UpdateConnectionsAccountsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Update Connections accounts Description: Update Connections acccounts. (asynchronously)
     * 
     * @param connectionsv3UpdateConnectionsAccountsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceUpdateConnectionsAccountsAsync(Connectionsv3UpdateConnectionsAccountsRequest connectionsv3UpdateConnectionsAccountsRequest, final ApiCallback<Connectionsv3UpdateConnectionsAccountsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionsServiceUpdateConnectionsAccountsValidateBeforeCall(connectionsv3UpdateConnectionsAccountsRequest, _callback);
        Type localVarReturnType = new TypeToken<Connectionsv3UpdateConnectionsAccountsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionsServiceUpdateConnectionsConfigs
     * @param connectionsv3UpdateConnectionsConfigsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceUpdateConnectionsConfigsCall(Connectionsv3UpdateConnectionsConfigsRequest connectionsv3UpdateConnectionsConfigsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionsv3UpdateConnectionsConfigsRequest;

        // create path and map variables
        String localVarPath = "/api/v3/connections/configs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionsServiceUpdateConnectionsConfigsValidateBeforeCall(Connectionsv3UpdateConnectionsConfigsRequest connectionsv3UpdateConnectionsConfigsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionsv3UpdateConnectionsConfigsRequest' is set
        if (connectionsv3UpdateConnectionsConfigsRequest == null) {
            throw new ApiException("Missing the required parameter 'connectionsv3UpdateConnectionsConfigsRequest' when calling connectionsServiceUpdateConnectionsConfigs(Async)");
        }

        return connectionsServiceUpdateConnectionsConfigsCall(connectionsv3UpdateConnectionsConfigsRequest, _callback);

    }

    /**
     * Summary: Update connections configs Description: Update Connection config by connection id.
     * 
     * @param connectionsv3UpdateConnectionsConfigsRequest  (required)
     * @return Connectionsv3UpdateConnectionsConfigsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Connectionsv3UpdateConnectionsConfigsResponse connectionsServiceUpdateConnectionsConfigs(Connectionsv3UpdateConnectionsConfigsRequest connectionsv3UpdateConnectionsConfigsRequest) throws ApiException {
        ApiResponse<Connectionsv3UpdateConnectionsConfigsResponse> localVarResp = connectionsServiceUpdateConnectionsConfigsWithHttpInfo(connectionsv3UpdateConnectionsConfigsRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Update connections configs Description: Update Connection config by connection id.
     * 
     * @param connectionsv3UpdateConnectionsConfigsRequest  (required)
     * @return ApiResponse&lt;Connectionsv3UpdateConnectionsConfigsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Connectionsv3UpdateConnectionsConfigsResponse> connectionsServiceUpdateConnectionsConfigsWithHttpInfo(Connectionsv3UpdateConnectionsConfigsRequest connectionsv3UpdateConnectionsConfigsRequest) throws ApiException {
        okhttp3.Call localVarCall = connectionsServiceUpdateConnectionsConfigsValidateBeforeCall(connectionsv3UpdateConnectionsConfigsRequest, null);
        Type localVarReturnType = new TypeToken<Connectionsv3UpdateConnectionsConfigsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Update connections configs Description: Update Connection config by connection id. (asynchronously)
     * 
     * @param connectionsv3UpdateConnectionsConfigsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceUpdateConnectionsConfigsAsync(Connectionsv3UpdateConnectionsConfigsRequest connectionsv3UpdateConnectionsConfigsRequest, final ApiCallback<Connectionsv3UpdateConnectionsConfigsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionsServiceUpdateConnectionsConfigsValidateBeforeCall(connectionsv3UpdateConnectionsConfigsRequest, _callback);
        Type localVarReturnType = new TypeToken<Connectionsv3UpdateConnectionsConfigsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionsServiceUpdateConnectors
     * @param connectionsv3UpdateConnectorsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceUpdateConnectorsCall(Connectionsv3UpdateConnectorsRequest connectionsv3UpdateConnectorsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionsv3UpdateConnectorsRequest;

        // create path and map variables
        String localVarPath = "/api/v3/connections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionsServiceUpdateConnectorsValidateBeforeCall(Connectionsv3UpdateConnectorsRequest connectionsv3UpdateConnectorsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionsv3UpdateConnectorsRequest' is set
        if (connectionsv3UpdateConnectorsRequest == null) {
            throw new ApiException("Missing the required parameter 'connectionsv3UpdateConnectorsRequest' when calling connectionsServiceUpdateConnectors(Async)");
        }

        return connectionsServiceUpdateConnectorsCall(connectionsv3UpdateConnectorsRequest, _callback);

    }

    /**
     * Summary: Update connectors Description: Update a list of Connectors.
     * 
     * @param connectionsv3UpdateConnectorsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Object connectionsServiceUpdateConnectors(Connectionsv3UpdateConnectorsRequest connectionsv3UpdateConnectorsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = connectionsServiceUpdateConnectorsWithHttpInfo(connectionsv3UpdateConnectorsRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Update connectors Description: Update a list of Connectors.
     * 
     * @param connectionsv3UpdateConnectorsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> connectionsServiceUpdateConnectorsWithHttpInfo(Connectionsv3UpdateConnectorsRequest connectionsv3UpdateConnectorsRequest) throws ApiException {
        okhttp3.Call localVarCall = connectionsServiceUpdateConnectorsValidateBeforeCall(connectionsv3UpdateConnectorsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Update connectors Description: Update a list of Connectors. (asynchronously)
     * 
     * @param connectionsv3UpdateConnectorsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceUpdateConnectorsAsync(Connectionsv3UpdateConnectorsRequest connectionsv3UpdateConnectorsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionsServiceUpdateConnectorsValidateBeforeCall(connectionsv3UpdateConnectorsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionsServiceUpdatePlugin
     * @param id id (required)
     * @param connectionsv3UpdatePluginRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceUpdatePluginCall(String id, Connectionsv3UpdatePluginRequest connectionsv3UpdatePluginRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionsv3UpdatePluginRequest;

        // create path and map variables
        String localVarPath = "/api/v3/connections/plugins/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionsServiceUpdatePluginValidateBeforeCall(String id, Connectionsv3UpdatePluginRequest connectionsv3UpdatePluginRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling connectionsServiceUpdatePlugin(Async)");
        }

        // verify the required parameter 'connectionsv3UpdatePluginRequest' is set
        if (connectionsv3UpdatePluginRequest == null) {
            throw new ApiException("Missing the required parameter 'connectionsv3UpdatePluginRequest' when calling connectionsServiceUpdatePlugin(Async)");
        }

        return connectionsServiceUpdatePluginCall(id, connectionsv3UpdatePluginRequest, _callback);

    }

    /**
     * Summary: Update plugin. Description: Update plugin.
     * 
     * @param id id (required)
     * @param connectionsv3UpdatePluginRequest  (required)
     * @return Connectionsv3UpdatePluginResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Connectionsv3UpdatePluginResponse connectionsServiceUpdatePlugin(String id, Connectionsv3UpdatePluginRequest connectionsv3UpdatePluginRequest) throws ApiException {
        ApiResponse<Connectionsv3UpdatePluginResponse> localVarResp = connectionsServiceUpdatePluginWithHttpInfo(id, connectionsv3UpdatePluginRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Update plugin. Description: Update plugin.
     * 
     * @param id id (required)
     * @param connectionsv3UpdatePluginRequest  (required)
     * @return ApiResponse&lt;Connectionsv3UpdatePluginResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Connectionsv3UpdatePluginResponse> connectionsServiceUpdatePluginWithHttpInfo(String id, Connectionsv3UpdatePluginRequest connectionsv3UpdatePluginRequest) throws ApiException {
        okhttp3.Call localVarCall = connectionsServiceUpdatePluginValidateBeforeCall(id, connectionsv3UpdatePluginRequest, null);
        Type localVarReturnType = new TypeToken<Connectionsv3UpdatePluginResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Update plugin. Description: Update plugin. (asynchronously)
     * 
     * @param id id (required)
     * @param connectionsv3UpdatePluginRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceUpdatePluginAsync(String id, Connectionsv3UpdatePluginRequest connectionsv3UpdatePluginRequest, final ApiCallback<Connectionsv3UpdatePluginResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionsServiceUpdatePluginValidateBeforeCall(id, connectionsv3UpdatePluginRequest, _callback);
        Type localVarReturnType = new TypeToken<Connectionsv3UpdatePluginResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for connectionsServiceUpdateSettings
     * @param connectionsv3UpdateSettingsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceUpdateSettingsCall(Connectionsv3UpdateSettingsRequest connectionsv3UpdateSettingsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = connectionsv3UpdateSettingsRequest;

        // create path and map variables
        String localVarPath = "/api/v3/connections/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call connectionsServiceUpdateSettingsValidateBeforeCall(Connectionsv3UpdateSettingsRequest connectionsv3UpdateSettingsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionsv3UpdateSettingsRequest' is set
        if (connectionsv3UpdateSettingsRequest == null) {
            throw new ApiException("Missing the required parameter 'connectionsv3UpdateSettingsRequest' when calling connectionsServiceUpdateSettings(Async)");
        }

        return connectionsServiceUpdateSettingsCall(connectionsv3UpdateSettingsRequest, _callback);

    }

    /**
     * Summary: Update settings Description: Update Settings.
     * 
     * @param connectionsv3UpdateSettingsRequest  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Object connectionsServiceUpdateSettings(Connectionsv3UpdateSettingsRequest connectionsv3UpdateSettingsRequest) throws ApiException {
        ApiResponse<Object> localVarResp = connectionsServiceUpdateSettingsWithHttpInfo(connectionsv3UpdateSettingsRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Update settings Description: Update Settings.
     * 
     * @param connectionsv3UpdateSettingsRequest  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> connectionsServiceUpdateSettingsWithHttpInfo(Connectionsv3UpdateSettingsRequest connectionsv3UpdateSettingsRequest) throws ApiException {
        okhttp3.Call localVarCall = connectionsServiceUpdateSettingsValidateBeforeCall(connectionsv3UpdateSettingsRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Update settings Description: Update Settings. (asynchronously)
     * 
     * @param connectionsv3UpdateSettingsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call connectionsServiceUpdateSettingsAsync(Connectionsv3UpdateSettingsRequest connectionsv3UpdateSettingsRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = connectionsServiceUpdateSettingsValidateBeforeCall(connectionsv3UpdateSettingsRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
