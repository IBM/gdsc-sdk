/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import com.ibm.gdsc.ApiCallback;
import com.ibm.gdsc.ApiClient;
import com.ibm.gdsc.ApiException;
import com.ibm.gdsc.ApiResponse;
import com.ibm.gdsc.Configuration;
import com.ibm.gdsc.Pair;
import com.ibm.gdsc.ProgressRequestBody;
import com.ibm.gdsc.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ibm.gdsc.sdk.Riskanalyticsenginev3GetLeadGeneratorConfigResponse;
import com.ibm.gdsc.sdk.Riskanalyticsenginev3UpdateLeadGeneratorConfigRequest;
import com.ibm.gdsc.sdk.Riskanalyticsenginev3UpdateLeadGeneratorConfigResponse;
import com.ibm.gdsc.sdk.RuntimeError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RiskAnalyticsEngineApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RiskAnalyticsEngineApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RiskAnalyticsEngineApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for riskAnalyticsEngineGetLeadGeneratorConfig
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskAnalyticsEngineGetLeadGeneratorConfigCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/risk/lead_generator";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call riskAnalyticsEngineGetLeadGeneratorConfigValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return riskAnalyticsEngineGetLeadGeneratorConfigCall(_callback);

    }

    /**
     * Summary: Get lead generator config Description: Retrieve the configuration of a lead generator.
     * 
     * @return Riskanalyticsenginev3GetLeadGeneratorConfigResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Riskanalyticsenginev3GetLeadGeneratorConfigResponse riskAnalyticsEngineGetLeadGeneratorConfig() throws ApiException {
        ApiResponse<Riskanalyticsenginev3GetLeadGeneratorConfigResponse> localVarResp = riskAnalyticsEngineGetLeadGeneratorConfigWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Summary: Get lead generator config Description: Retrieve the configuration of a lead generator.
     * 
     * @return ApiResponse&lt;Riskanalyticsenginev3GetLeadGeneratorConfigResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Riskanalyticsenginev3GetLeadGeneratorConfigResponse> riskAnalyticsEngineGetLeadGeneratorConfigWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = riskAnalyticsEngineGetLeadGeneratorConfigValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Riskanalyticsenginev3GetLeadGeneratorConfigResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get lead generator config Description: Retrieve the configuration of a lead generator. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskAnalyticsEngineGetLeadGeneratorConfigAsync(final ApiCallback<Riskanalyticsenginev3GetLeadGeneratorConfigResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = riskAnalyticsEngineGetLeadGeneratorConfigValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Riskanalyticsenginev3GetLeadGeneratorConfigResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for riskAnalyticsEngineUpdateLeadGeneratorConfig
     * @param riskanalyticsenginev3UpdateLeadGeneratorConfigRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskAnalyticsEngineUpdateLeadGeneratorConfigCall(Riskanalyticsenginev3UpdateLeadGeneratorConfigRequest riskanalyticsenginev3UpdateLeadGeneratorConfigRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = riskanalyticsenginev3UpdateLeadGeneratorConfigRequest;

        // create path and map variables
        String localVarPath = "/api/v3/risk/lead_generator";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call riskAnalyticsEngineUpdateLeadGeneratorConfigValidateBeforeCall(Riskanalyticsenginev3UpdateLeadGeneratorConfigRequest riskanalyticsenginev3UpdateLeadGeneratorConfigRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'riskanalyticsenginev3UpdateLeadGeneratorConfigRequest' is set
        if (riskanalyticsenginev3UpdateLeadGeneratorConfigRequest == null) {
            throw new ApiException("Missing the required parameter 'riskanalyticsenginev3UpdateLeadGeneratorConfigRequest' when calling riskAnalyticsEngineUpdateLeadGeneratorConfig(Async)");
        }

        return riskAnalyticsEngineUpdateLeadGeneratorConfigCall(riskanalyticsenginev3UpdateLeadGeneratorConfigRequest, _callback);

    }

    /**
     * Summary: Update lead generator config Description: Update the configuration of a leads generator.
     * 
     * @param riskanalyticsenginev3UpdateLeadGeneratorConfigRequest  (required)
     * @return Riskanalyticsenginev3UpdateLeadGeneratorConfigResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Riskanalyticsenginev3UpdateLeadGeneratorConfigResponse riskAnalyticsEngineUpdateLeadGeneratorConfig(Riskanalyticsenginev3UpdateLeadGeneratorConfigRequest riskanalyticsenginev3UpdateLeadGeneratorConfigRequest) throws ApiException {
        ApiResponse<Riskanalyticsenginev3UpdateLeadGeneratorConfigResponse> localVarResp = riskAnalyticsEngineUpdateLeadGeneratorConfigWithHttpInfo(riskanalyticsenginev3UpdateLeadGeneratorConfigRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Update lead generator config Description: Update the configuration of a leads generator.
     * 
     * @param riskanalyticsenginev3UpdateLeadGeneratorConfigRequest  (required)
     * @return ApiResponse&lt;Riskanalyticsenginev3UpdateLeadGeneratorConfigResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Riskanalyticsenginev3UpdateLeadGeneratorConfigResponse> riskAnalyticsEngineUpdateLeadGeneratorConfigWithHttpInfo(Riskanalyticsenginev3UpdateLeadGeneratorConfigRequest riskanalyticsenginev3UpdateLeadGeneratorConfigRequest) throws ApiException {
        okhttp3.Call localVarCall = riskAnalyticsEngineUpdateLeadGeneratorConfigValidateBeforeCall(riskanalyticsenginev3UpdateLeadGeneratorConfigRequest, null);
        Type localVarReturnType = new TypeToken<Riskanalyticsenginev3UpdateLeadGeneratorConfigResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Update lead generator config Description: Update the configuration of a leads generator. (asynchronously)
     * 
     * @param riskanalyticsenginev3UpdateLeadGeneratorConfigRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call riskAnalyticsEngineUpdateLeadGeneratorConfigAsync(Riskanalyticsenginev3UpdateLeadGeneratorConfigRequest riskanalyticsenginev3UpdateLeadGeneratorConfigRequest, final ApiCallback<Riskanalyticsenginev3UpdateLeadGeneratorConfigResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = riskAnalyticsEngineUpdateLeadGeneratorConfigValidateBeforeCall(riskanalyticsenginev3UpdateLeadGeneratorConfigRequest, _callback);
        Type localVarReturnType = new TypeToken<Riskanalyticsenginev3UpdateLeadGeneratorConfigResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
