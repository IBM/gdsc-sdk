/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3Job;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.sdk.JSON;

/**
 * Resourcecontrollerk8v3GetTenantJobsResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-07T13:24:05.648078332-08:00[America/Los_Angeles]", comments = "Generator version: 7.6.0")
public class Resourcecontrollerk8v3GetTenantJobsResponse {
  public static final String SERIALIZED_NAME_JOBS = "jobs";
  @SerializedName(SERIALIZED_NAME_JOBS)
  private List<Resourcecontrollerk8v3Job> jobs = new ArrayList<>();

  public static final String SERIALIZED_NAME_TENANT_ID = "tenant_id";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public static final String SERIALIZED_NAME_TENANT_UUID = "tenant_uuid";
  @SerializedName(SERIALIZED_NAME_TENANT_UUID)
  private String tenantUuid;

  public Resourcecontrollerk8v3GetTenantJobsResponse() {
  }

  public Resourcecontrollerk8v3GetTenantJobsResponse jobs(List<Resourcecontrollerk8v3Job> jobs) {
    this.jobs = jobs;
    return this;
  }

  public Resourcecontrollerk8v3GetTenantJobsResponse addJobsItem(Resourcecontrollerk8v3Job jobsItem) {
    if (this.jobs == null) {
      this.jobs = new ArrayList<>();
    }
    this.jobs.add(jobsItem);
    return this;
  }

   /**
   * The controllers for the tenant.
   * @return jobs
  **/
  @javax.annotation.Nullable
  public List<Resourcecontrollerk8v3Job> getJobs() {
    return jobs;
  }

  public void setJobs(List<Resourcecontrollerk8v3Job> jobs) {
    this.jobs = jobs;
  }


  public Resourcecontrollerk8v3GetTenantJobsResponse tenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

   /**
   * The ID of the tenant to get jobs for.
   * @return tenantId
  **/
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }


  public Resourcecontrollerk8v3GetTenantJobsResponse tenantUuid(String tenantUuid) {
    this.tenantUuid = tenantUuid;
    return this;
  }

   /**
   * The uuid of the tenant to get jobs for.
   * @return tenantUuid
  **/
  @javax.annotation.Nullable
  public String getTenantUuid() {
    return tenantUuid;
  }

  public void setTenantUuid(String tenantUuid) {
    this.tenantUuid = tenantUuid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Resourcecontrollerk8v3GetTenantJobsResponse resourcecontrollerk8v3GetTenantJobsResponse = (Resourcecontrollerk8v3GetTenantJobsResponse) o;
    return Objects.equals(this.jobs, resourcecontrollerk8v3GetTenantJobsResponse.jobs) &&
        Objects.equals(this.tenantId, resourcecontrollerk8v3GetTenantJobsResponse.tenantId) &&
        Objects.equals(this.tenantUuid, resourcecontrollerk8v3GetTenantJobsResponse.tenantUuid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobs, tenantId, tenantUuid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Resourcecontrollerk8v3GetTenantJobsResponse {\n");
    sb.append("    jobs: ").append(toIndentedString(jobs)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    tenantUuid: ").append(toIndentedString(tenantUuid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("jobs");
    openapiFields.add("tenant_id");
    openapiFields.add("tenant_uuid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Resourcecontrollerk8v3GetTenantJobsResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Resourcecontrollerk8v3GetTenantJobsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Resourcecontrollerk8v3GetTenantJobsResponse is not found in the empty JSON string", Resourcecontrollerk8v3GetTenantJobsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Resourcecontrollerk8v3GetTenantJobsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Resourcecontrollerk8v3GetTenantJobsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("jobs") != null && !jsonObj.get("jobs").isJsonNull()) {
        JsonArray jsonArrayjobs = jsonObj.getAsJsonArray("jobs");
        if (jsonArrayjobs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("jobs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `jobs` to be an array in the JSON string but got `%s`", jsonObj.get("jobs").toString()));
          }

          // validate the optional field `jobs` (array)
          for (int i = 0; i < jsonArrayjobs.size(); i++) {
            Resourcecontrollerk8v3Job.validateJsonElement(jsonArrayjobs.get(i));
          };
        }
      }
      if ((jsonObj.get("tenant_id") != null && !jsonObj.get("tenant_id").isJsonNull()) && !jsonObj.get("tenant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenant_id").toString()));
      }
      if ((jsonObj.get("tenant_uuid") != null && !jsonObj.get("tenant_uuid").isJsonNull()) && !jsonObj.get("tenant_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenant_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenant_uuid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Resourcecontrollerk8v3GetTenantJobsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Resourcecontrollerk8v3GetTenantJobsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Resourcecontrollerk8v3GetTenantJobsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Resourcecontrollerk8v3GetTenantJobsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<Resourcecontrollerk8v3GetTenantJobsResponse>() {
           @Override
           public void write(JsonWriter out, Resourcecontrollerk8v3GetTenantJobsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Resourcecontrollerk8v3GetTenantJobsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Resourcecontrollerk8v3GetTenantJobsResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Resourcecontrollerk8v3GetTenantJobsResponse
  * @throws IOException if the JSON string is invalid with respect to Resourcecontrollerk8v3GetTenantJobsResponse
  */
  public static Resourcecontrollerk8v3GetTenantJobsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Resourcecontrollerk8v3GetTenantJobsResponse.class);
  }

 /**
  * Convert an instance of Resourcecontrollerk8v3GetTenantJobsResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

