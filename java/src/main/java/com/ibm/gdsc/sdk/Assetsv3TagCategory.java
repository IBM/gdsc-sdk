/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.gdsc.sdk.Assetsv3Tag;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.JSON;

/**
 * Base tag domain object which is used in get and list APIs.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-15T03:58:58.617687Z[UTC]", comments = "Generator version: 7.6.0")
public class Assetsv3TagCategory {
  public static final String SERIALIZED_NAME_CREATION_TIME = "creation_time";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_CREATION_TIME_UTC = "creation_time_utc";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME_UTC)
  private OffsetDateTime creationTimeUtc;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_GROUPER = "grouper";
  @SerializedName(SERIALIZED_NAME_GROUPER)
  private String grouper;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_DELETE = "is_delete";
  @SerializedName(SERIALIZED_NAME_IS_DELETE)
  private Boolean isDelete;

  public static final String SERIALIZED_NAME_MAPPED_ENTITY_NAME = "mapped_entity_name";
  @SerializedName(SERIALIZED_NAME_MAPPED_ENTITY_NAME)
  private String mappedEntityName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private String properties;

  public static final String SERIALIZED_NAME_PURPOSE = "purpose";
  @SerializedName(SERIALIZED_NAME_PURPOSE)
  private String purpose;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Assetsv3Tag> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATED_TIME = "updated_time";
  @SerializedName(SERIALIZED_NAME_UPDATED_TIME)
  private OffsetDateTime updatedTime;

  public static final String SERIALIZED_NAME_UTC_OFFSET = "utc_offset";
  @SerializedName(SERIALIZED_NAME_UTC_OFFSET)
  private Integer utcOffset;

  public Assetsv3TagCategory() {
  }

  public Assetsv3TagCategory creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

   /**
   * Get creationTime
   * @return creationTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public Assetsv3TagCategory creationTimeUtc(OffsetDateTime creationTimeUtc) {
    this.creationTimeUtc = creationTimeUtc;
    return this;
  }

   /**
   * Get creationTimeUtc
   * @return creationTimeUtc
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTimeUtc() {
    return creationTimeUtc;
  }

  public void setCreationTimeUtc(OffsetDateTime creationTimeUtc) {
    this.creationTimeUtc = creationTimeUtc;
  }


  public Assetsv3TagCategory description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Description of Tag Domain.
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Assetsv3TagCategory grouper(String grouper) {
    this.grouper = grouper;
    return this;
  }

   /**
   * Get grouper
   * @return grouper
  **/
  @javax.annotation.Nullable
  public String getGrouper() {
    return grouper;
  }

  public void setGrouper(String grouper) {
    this.grouper = grouper;
  }


  public Assetsv3TagCategory id(String id) {
    this.id = id;
    return this;
  }

   /**
   * id of  Domain.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Assetsv3TagCategory isDelete(Boolean isDelete) {
    this.isDelete = isDelete;
    return this;
  }

   /**
   * Get isDelete
   * @return isDelete
  **/
  @javax.annotation.Nullable
  public Boolean getIsDelete() {
    return isDelete;
  }

  public void setIsDelete(Boolean isDelete) {
    this.isDelete = isDelete;
  }


  public Assetsv3TagCategory mappedEntityName(String mappedEntityName) {
    this.mappedEntityName = mappedEntityName;
    return this;
  }

   /**
   * Get mappedEntityName
   * @return mappedEntityName
  **/
  @javax.annotation.Nullable
  public String getMappedEntityName() {
    return mappedEntityName;
  }

  public void setMappedEntityName(String mappedEntityName) {
    this.mappedEntityName = mappedEntityName;
  }


  public Assetsv3TagCategory name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of Tag Domain.
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Assetsv3TagCategory properties(String properties) {
    this.properties = properties;
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @javax.annotation.Nullable
  public String getProperties() {
    return properties;
  }

  public void setProperties(String properties) {
    this.properties = properties;
  }


  public Assetsv3TagCategory purpose(String purpose) {
    this.purpose = purpose;
    return this;
  }

   /**
   * Purpose of  Domain.
   * @return purpose
  **/
  @javax.annotation.Nullable
  public String getPurpose() {
    return purpose;
  }

  public void setPurpose(String purpose) {
    this.purpose = purpose;
  }


  public Assetsv3TagCategory tags(List<Assetsv3Tag> tags) {
    this.tags = tags;
    return this;
  }

  public Assetsv3TagCategory addTagsItem(Assetsv3Tag tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  public List<Assetsv3Tag> getTags() {
    return tags;
  }

  public void setTags(List<Assetsv3Tag> tags) {
    this.tags = tags;
  }


  public Assetsv3TagCategory updatedTime(OffsetDateTime updatedTime) {
    this.updatedTime = updatedTime;
    return this;
  }

   /**
   * Get updatedTime
   * @return updatedTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedTime() {
    return updatedTime;
  }

  public void setUpdatedTime(OffsetDateTime updatedTime) {
    this.updatedTime = updatedTime;
  }


  public Assetsv3TagCategory utcOffset(Integer utcOffset) {
    this.utcOffset = utcOffset;
    return this;
  }

   /**
   * Get utcOffset
   * @return utcOffset
  **/
  @javax.annotation.Nullable
  public Integer getUtcOffset() {
    return utcOffset;
  }

  public void setUtcOffset(Integer utcOffset) {
    this.utcOffset = utcOffset;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Assetsv3TagCategory assetsv3TagCategory = (Assetsv3TagCategory) o;
    return Objects.equals(this.creationTime, assetsv3TagCategory.creationTime) &&
        Objects.equals(this.creationTimeUtc, assetsv3TagCategory.creationTimeUtc) &&
        Objects.equals(this.description, assetsv3TagCategory.description) &&
        Objects.equals(this.grouper, assetsv3TagCategory.grouper) &&
        Objects.equals(this.id, assetsv3TagCategory.id) &&
        Objects.equals(this.isDelete, assetsv3TagCategory.isDelete) &&
        Objects.equals(this.mappedEntityName, assetsv3TagCategory.mappedEntityName) &&
        Objects.equals(this.name, assetsv3TagCategory.name) &&
        Objects.equals(this.properties, assetsv3TagCategory.properties) &&
        Objects.equals(this.purpose, assetsv3TagCategory.purpose) &&
        Objects.equals(this.tags, assetsv3TagCategory.tags) &&
        Objects.equals(this.updatedTime, assetsv3TagCategory.updatedTime) &&
        Objects.equals(this.utcOffset, assetsv3TagCategory.utcOffset);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationTime, creationTimeUtc, description, grouper, id, isDelete, mappedEntityName, name, properties, purpose, tags, updatedTime, utcOffset);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Assetsv3TagCategory {\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    creationTimeUtc: ").append(toIndentedString(creationTimeUtc)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    grouper: ").append(toIndentedString(grouper)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isDelete: ").append(toIndentedString(isDelete)).append("\n");
    sb.append("    mappedEntityName: ").append(toIndentedString(mappedEntityName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    purpose: ").append(toIndentedString(purpose)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    updatedTime: ").append(toIndentedString(updatedTime)).append("\n");
    sb.append("    utcOffset: ").append(toIndentedString(utcOffset)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creation_time");
    openapiFields.add("creation_time_utc");
    openapiFields.add("description");
    openapiFields.add("grouper");
    openapiFields.add("id");
    openapiFields.add("is_delete");
    openapiFields.add("mapped_entity_name");
    openapiFields.add("name");
    openapiFields.add("properties");
    openapiFields.add("purpose");
    openapiFields.add("tags");
    openapiFields.add("updated_time");
    openapiFields.add("utc_offset");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Assetsv3TagCategory
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Assetsv3TagCategory.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Assetsv3TagCategory is not found in the empty JSON string", Assetsv3TagCategory.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Assetsv3TagCategory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Assetsv3TagCategory` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("grouper") != null && !jsonObj.get("grouper").isJsonNull()) && !jsonObj.get("grouper").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `grouper` to be a primitive type in the JSON string but got `%s`", jsonObj.get("grouper").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("mapped_entity_name") != null && !jsonObj.get("mapped_entity_name").isJsonNull()) && !jsonObj.get("mapped_entity_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mapped_entity_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mapped_entity_name").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("properties") != null && !jsonObj.get("properties").isJsonNull()) && !jsonObj.get("properties").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `properties` to be a primitive type in the JSON string but got `%s`", jsonObj.get("properties").toString()));
      }
      if ((jsonObj.get("purpose") != null && !jsonObj.get("purpose").isJsonNull()) && !jsonObj.get("purpose").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purpose` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purpose").toString()));
      }
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull()) {
        JsonArray jsonArraytags = jsonObj.getAsJsonArray("tags");
        if (jsonArraytags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
          }

          // validate the optional field `tags` (array)
          for (int i = 0; i < jsonArraytags.size(); i++) {
            Assetsv3Tag.validateJsonElement(jsonArraytags.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Assetsv3TagCategory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Assetsv3TagCategory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Assetsv3TagCategory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Assetsv3TagCategory.class));

       return (TypeAdapter<T>) new TypeAdapter<Assetsv3TagCategory>() {
           @Override
           public void write(JsonWriter out, Assetsv3TagCategory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Assetsv3TagCategory read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Assetsv3TagCategory given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Assetsv3TagCategory
  * @throws IOException if the JSON string is invalid with respect to Assetsv3TagCategory
  */
  public static Assetsv3TagCategory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Assetsv3TagCategory.class);
  }

 /**
  * Convert an instance of Assetsv3TagCategory to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

