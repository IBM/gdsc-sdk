/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.gdsc.sdk.Assetsv3AssetsWithOpenVulnerabilities;
import com.ibm.gdsc.sdk.Assetsv3ClassificationScanStatus;
import com.ibm.gdsc.sdk.Assetsv3FilterCatagory;
import com.ibm.gdsc.sdk.Assetsv3HighestAssetTagCounts;
import com.ibm.gdsc.sdk.Assetsv3TagCategoriesData;
import com.ibm.gdsc.sdk.Assetsv3TagsFilterData;
import com.ibm.gdsc.sdk.Assetsv3VulnerabilityScanStatus;
import com.ibm.gdsc.sdk.Assetsv3VulnerabilityTrend;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.JSON;

/**
 * Assetsv3FetchAssetDashboardResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-15T03:58:58.617687Z[UTC]", comments = "Generator version: 7.6.0")
public class Assetsv3FetchAssetDashboardResponse {
  public static final String SERIALIZED_NAME_ASSETS_WITH_OPEN_VULNERABILITIES = "assets_with_open_vulnerabilities";
  @SerializedName(SERIALIZED_NAME_ASSETS_WITH_OPEN_VULNERABILITIES)
  private List<Assetsv3AssetsWithOpenVulnerabilities> assetsWithOpenVulnerabilities = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLASSIFICATION_SCAN_STATUS = "classification_scan_status";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION_SCAN_STATUS)
  private List<Assetsv3ClassificationScanStatus> classificationScanStatus = new ArrayList<>();

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private String count;

  public static final String SERIALIZED_NAME_HIGHEST_ASSET_TAG_COUNTS = "highest_asset_tag_counts";
  @SerializedName(SERIALIZED_NAME_HIGHEST_ASSET_TAG_COUNTS)
  private List<Assetsv3HighestAssetTagCounts> highestAssetTagCounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_SELECTED_FILTERS = "selected_filters";
  @SerializedName(SERIALIZED_NAME_SELECTED_FILTERS)
  private List<Assetsv3FilterCatagory> selectedFilters = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAG_CATEGORIES_DATA = "tag_categories_data";
  @SerializedName(SERIALIZED_NAME_TAG_CATEGORIES_DATA)
  private List<Assetsv3TagCategoriesData> tagCategoriesData = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS_FILTER_DATA = "tags_filter_data";
  @SerializedName(SERIALIZED_NAME_TAGS_FILTER_DATA)
  private List<Assetsv3TagsFilterData> tagsFilterData = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEMPLATE_ID = "template_id";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_ID)
  private String templateId;

  public static final String SERIALIZED_NAME_VULNERABILITY_SCAN_STATUS = "vulnerability_scan_status";
  @SerializedName(SERIALIZED_NAME_VULNERABILITY_SCAN_STATUS)
  private List<Assetsv3VulnerabilityScanStatus> vulnerabilityScanStatus = new ArrayList<>();

  public static final String SERIALIZED_NAME_VULNERABILITY_TREND = "vulnerability_trend";
  @SerializedName(SERIALIZED_NAME_VULNERABILITY_TREND)
  private List<Assetsv3VulnerabilityTrend> vulnerabilityTrend = new ArrayList<>();

  public Assetsv3FetchAssetDashboardResponse() {
  }

  public Assetsv3FetchAssetDashboardResponse assetsWithOpenVulnerabilities(List<Assetsv3AssetsWithOpenVulnerabilities> assetsWithOpenVulnerabilities) {
    this.assetsWithOpenVulnerabilities = assetsWithOpenVulnerabilities;
    return this;
  }

  public Assetsv3FetchAssetDashboardResponse addAssetsWithOpenVulnerabilitiesItem(Assetsv3AssetsWithOpenVulnerabilities assetsWithOpenVulnerabilitiesItem) {
    if (this.assetsWithOpenVulnerabilities == null) {
      this.assetsWithOpenVulnerabilities = new ArrayList<>();
    }
    this.assetsWithOpenVulnerabilities.add(assetsWithOpenVulnerabilitiesItem);
    return this;
  }

   /**
   * Get assetsWithOpenVulnerabilities
   * @return assetsWithOpenVulnerabilities
  **/
  @javax.annotation.Nullable
  public List<Assetsv3AssetsWithOpenVulnerabilities> getAssetsWithOpenVulnerabilities() {
    return assetsWithOpenVulnerabilities;
  }

  public void setAssetsWithOpenVulnerabilities(List<Assetsv3AssetsWithOpenVulnerabilities> assetsWithOpenVulnerabilities) {
    this.assetsWithOpenVulnerabilities = assetsWithOpenVulnerabilities;
  }


  public Assetsv3FetchAssetDashboardResponse classificationScanStatus(List<Assetsv3ClassificationScanStatus> classificationScanStatus) {
    this.classificationScanStatus = classificationScanStatus;
    return this;
  }

  public Assetsv3FetchAssetDashboardResponse addClassificationScanStatusItem(Assetsv3ClassificationScanStatus classificationScanStatusItem) {
    if (this.classificationScanStatus == null) {
      this.classificationScanStatus = new ArrayList<>();
    }
    this.classificationScanStatus.add(classificationScanStatusItem);
    return this;
  }

   /**
   * Get classificationScanStatus
   * @return classificationScanStatus
  **/
  @javax.annotation.Nullable
  public List<Assetsv3ClassificationScanStatus> getClassificationScanStatus() {
    return classificationScanStatus;
  }

  public void setClassificationScanStatus(List<Assetsv3ClassificationScanStatus> classificationScanStatus) {
    this.classificationScanStatus = classificationScanStatus;
  }


  public Assetsv3FetchAssetDashboardResponse count(String count) {
    this.count = count;
    return this;
  }

   /**
   * Get count
   * @return count
  **/
  @javax.annotation.Nullable
  public String getCount() {
    return count;
  }

  public void setCount(String count) {
    this.count = count;
  }


  public Assetsv3FetchAssetDashboardResponse highestAssetTagCounts(List<Assetsv3HighestAssetTagCounts> highestAssetTagCounts) {
    this.highestAssetTagCounts = highestAssetTagCounts;
    return this;
  }

  public Assetsv3FetchAssetDashboardResponse addHighestAssetTagCountsItem(Assetsv3HighestAssetTagCounts highestAssetTagCountsItem) {
    if (this.highestAssetTagCounts == null) {
      this.highestAssetTagCounts = new ArrayList<>();
    }
    this.highestAssetTagCounts.add(highestAssetTagCountsItem);
    return this;
  }

   /**
   * Get highestAssetTagCounts
   * @return highestAssetTagCounts
  **/
  @javax.annotation.Nullable
  public List<Assetsv3HighestAssetTagCounts> getHighestAssetTagCounts() {
    return highestAssetTagCounts;
  }

  public void setHighestAssetTagCounts(List<Assetsv3HighestAssetTagCounts> highestAssetTagCounts) {
    this.highestAssetTagCounts = highestAssetTagCounts;
  }


  public Assetsv3FetchAssetDashboardResponse selectedFilters(List<Assetsv3FilterCatagory> selectedFilters) {
    this.selectedFilters = selectedFilters;
    return this;
  }

  public Assetsv3FetchAssetDashboardResponse addSelectedFiltersItem(Assetsv3FilterCatagory selectedFiltersItem) {
    if (this.selectedFilters == null) {
      this.selectedFilters = new ArrayList<>();
    }
    this.selectedFilters.add(selectedFiltersItem);
    return this;
  }

   /**
   * Get selectedFilters
   * @return selectedFilters
  **/
  @javax.annotation.Nullable
  public List<Assetsv3FilterCatagory> getSelectedFilters() {
    return selectedFilters;
  }

  public void setSelectedFilters(List<Assetsv3FilterCatagory> selectedFilters) {
    this.selectedFilters = selectedFilters;
  }


  public Assetsv3FetchAssetDashboardResponse tagCategoriesData(List<Assetsv3TagCategoriesData> tagCategoriesData) {
    this.tagCategoriesData = tagCategoriesData;
    return this;
  }

  public Assetsv3FetchAssetDashboardResponse addTagCategoriesDataItem(Assetsv3TagCategoriesData tagCategoriesDataItem) {
    if (this.tagCategoriesData == null) {
      this.tagCategoriesData = new ArrayList<>();
    }
    this.tagCategoriesData.add(tagCategoriesDataItem);
    return this;
  }

   /**
   * Get tagCategoriesData
   * @return tagCategoriesData
  **/
  @javax.annotation.Nullable
  public List<Assetsv3TagCategoriesData> getTagCategoriesData() {
    return tagCategoriesData;
  }

  public void setTagCategoriesData(List<Assetsv3TagCategoriesData> tagCategoriesData) {
    this.tagCategoriesData = tagCategoriesData;
  }


  public Assetsv3FetchAssetDashboardResponse tagsFilterData(List<Assetsv3TagsFilterData> tagsFilterData) {
    this.tagsFilterData = tagsFilterData;
    return this;
  }

  public Assetsv3FetchAssetDashboardResponse addTagsFilterDataItem(Assetsv3TagsFilterData tagsFilterDataItem) {
    if (this.tagsFilterData == null) {
      this.tagsFilterData = new ArrayList<>();
    }
    this.tagsFilterData.add(tagsFilterDataItem);
    return this;
  }

   /**
   * Get tagsFilterData
   * @return tagsFilterData
  **/
  @javax.annotation.Nullable
  public List<Assetsv3TagsFilterData> getTagsFilterData() {
    return tagsFilterData;
  }

  public void setTagsFilterData(List<Assetsv3TagsFilterData> tagsFilterData) {
    this.tagsFilterData = tagsFilterData;
  }


  public Assetsv3FetchAssetDashboardResponse templateId(String templateId) {
    this.templateId = templateId;
    return this;
  }

   /**
   * Get templateId
   * @return templateId
  **/
  @javax.annotation.Nullable
  public String getTemplateId() {
    return templateId;
  }

  public void setTemplateId(String templateId) {
    this.templateId = templateId;
  }


  public Assetsv3FetchAssetDashboardResponse vulnerabilityScanStatus(List<Assetsv3VulnerabilityScanStatus> vulnerabilityScanStatus) {
    this.vulnerabilityScanStatus = vulnerabilityScanStatus;
    return this;
  }

  public Assetsv3FetchAssetDashboardResponse addVulnerabilityScanStatusItem(Assetsv3VulnerabilityScanStatus vulnerabilityScanStatusItem) {
    if (this.vulnerabilityScanStatus == null) {
      this.vulnerabilityScanStatus = new ArrayList<>();
    }
    this.vulnerabilityScanStatus.add(vulnerabilityScanStatusItem);
    return this;
  }

   /**
   * Get vulnerabilityScanStatus
   * @return vulnerabilityScanStatus
  **/
  @javax.annotation.Nullable
  public List<Assetsv3VulnerabilityScanStatus> getVulnerabilityScanStatus() {
    return vulnerabilityScanStatus;
  }

  public void setVulnerabilityScanStatus(List<Assetsv3VulnerabilityScanStatus> vulnerabilityScanStatus) {
    this.vulnerabilityScanStatus = vulnerabilityScanStatus;
  }


  public Assetsv3FetchAssetDashboardResponse vulnerabilityTrend(List<Assetsv3VulnerabilityTrend> vulnerabilityTrend) {
    this.vulnerabilityTrend = vulnerabilityTrend;
    return this;
  }

  public Assetsv3FetchAssetDashboardResponse addVulnerabilityTrendItem(Assetsv3VulnerabilityTrend vulnerabilityTrendItem) {
    if (this.vulnerabilityTrend == null) {
      this.vulnerabilityTrend = new ArrayList<>();
    }
    this.vulnerabilityTrend.add(vulnerabilityTrendItem);
    return this;
  }

   /**
   * Get vulnerabilityTrend
   * @return vulnerabilityTrend
  **/
  @javax.annotation.Nullable
  public List<Assetsv3VulnerabilityTrend> getVulnerabilityTrend() {
    return vulnerabilityTrend;
  }

  public void setVulnerabilityTrend(List<Assetsv3VulnerabilityTrend> vulnerabilityTrend) {
    this.vulnerabilityTrend = vulnerabilityTrend;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Assetsv3FetchAssetDashboardResponse assetsv3FetchAssetDashboardResponse = (Assetsv3FetchAssetDashboardResponse) o;
    return Objects.equals(this.assetsWithOpenVulnerabilities, assetsv3FetchAssetDashboardResponse.assetsWithOpenVulnerabilities) &&
        Objects.equals(this.classificationScanStatus, assetsv3FetchAssetDashboardResponse.classificationScanStatus) &&
        Objects.equals(this.count, assetsv3FetchAssetDashboardResponse.count) &&
        Objects.equals(this.highestAssetTagCounts, assetsv3FetchAssetDashboardResponse.highestAssetTagCounts) &&
        Objects.equals(this.selectedFilters, assetsv3FetchAssetDashboardResponse.selectedFilters) &&
        Objects.equals(this.tagCategoriesData, assetsv3FetchAssetDashboardResponse.tagCategoriesData) &&
        Objects.equals(this.tagsFilterData, assetsv3FetchAssetDashboardResponse.tagsFilterData) &&
        Objects.equals(this.templateId, assetsv3FetchAssetDashboardResponse.templateId) &&
        Objects.equals(this.vulnerabilityScanStatus, assetsv3FetchAssetDashboardResponse.vulnerabilityScanStatus) &&
        Objects.equals(this.vulnerabilityTrend, assetsv3FetchAssetDashboardResponse.vulnerabilityTrend);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assetsWithOpenVulnerabilities, classificationScanStatus, count, highestAssetTagCounts, selectedFilters, tagCategoriesData, tagsFilterData, templateId, vulnerabilityScanStatus, vulnerabilityTrend);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Assetsv3FetchAssetDashboardResponse {\n");
    sb.append("    assetsWithOpenVulnerabilities: ").append(toIndentedString(assetsWithOpenVulnerabilities)).append("\n");
    sb.append("    classificationScanStatus: ").append(toIndentedString(classificationScanStatus)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    highestAssetTagCounts: ").append(toIndentedString(highestAssetTagCounts)).append("\n");
    sb.append("    selectedFilters: ").append(toIndentedString(selectedFilters)).append("\n");
    sb.append("    tagCategoriesData: ").append(toIndentedString(tagCategoriesData)).append("\n");
    sb.append("    tagsFilterData: ").append(toIndentedString(tagsFilterData)).append("\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    vulnerabilityScanStatus: ").append(toIndentedString(vulnerabilityScanStatus)).append("\n");
    sb.append("    vulnerabilityTrend: ").append(toIndentedString(vulnerabilityTrend)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assets_with_open_vulnerabilities");
    openapiFields.add("classification_scan_status");
    openapiFields.add("count");
    openapiFields.add("highest_asset_tag_counts");
    openapiFields.add("selected_filters");
    openapiFields.add("tag_categories_data");
    openapiFields.add("tags_filter_data");
    openapiFields.add("template_id");
    openapiFields.add("vulnerability_scan_status");
    openapiFields.add("vulnerability_trend");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Assetsv3FetchAssetDashboardResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Assetsv3FetchAssetDashboardResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Assetsv3FetchAssetDashboardResponse is not found in the empty JSON string", Assetsv3FetchAssetDashboardResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Assetsv3FetchAssetDashboardResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Assetsv3FetchAssetDashboardResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("assets_with_open_vulnerabilities") != null && !jsonObj.get("assets_with_open_vulnerabilities").isJsonNull()) {
        JsonArray jsonArrayassetsWithOpenVulnerabilities = jsonObj.getAsJsonArray("assets_with_open_vulnerabilities");
        if (jsonArrayassetsWithOpenVulnerabilities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("assets_with_open_vulnerabilities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `assets_with_open_vulnerabilities` to be an array in the JSON string but got `%s`", jsonObj.get("assets_with_open_vulnerabilities").toString()));
          }

          // validate the optional field `assets_with_open_vulnerabilities` (array)
          for (int i = 0; i < jsonArrayassetsWithOpenVulnerabilities.size(); i++) {
            Assetsv3AssetsWithOpenVulnerabilities.validateJsonElement(jsonArrayassetsWithOpenVulnerabilities.get(i));
          };
        }
      }
      if (jsonObj.get("classification_scan_status") != null && !jsonObj.get("classification_scan_status").isJsonNull()) {
        JsonArray jsonArrayclassificationScanStatus = jsonObj.getAsJsonArray("classification_scan_status");
        if (jsonArrayclassificationScanStatus != null) {
          // ensure the json data is an array
          if (!jsonObj.get("classification_scan_status").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `classification_scan_status` to be an array in the JSON string but got `%s`", jsonObj.get("classification_scan_status").toString()));
          }

          // validate the optional field `classification_scan_status` (array)
          for (int i = 0; i < jsonArrayclassificationScanStatus.size(); i++) {
            Assetsv3ClassificationScanStatus.validateJsonElement(jsonArrayclassificationScanStatus.get(i));
          };
        }
      }
      if ((jsonObj.get("count") != null && !jsonObj.get("count").isJsonNull()) && !jsonObj.get("count").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `count` to be a primitive type in the JSON string but got `%s`", jsonObj.get("count").toString()));
      }
      if (jsonObj.get("highest_asset_tag_counts") != null && !jsonObj.get("highest_asset_tag_counts").isJsonNull()) {
        JsonArray jsonArrayhighestAssetTagCounts = jsonObj.getAsJsonArray("highest_asset_tag_counts");
        if (jsonArrayhighestAssetTagCounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("highest_asset_tag_counts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `highest_asset_tag_counts` to be an array in the JSON string but got `%s`", jsonObj.get("highest_asset_tag_counts").toString()));
          }

          // validate the optional field `highest_asset_tag_counts` (array)
          for (int i = 0; i < jsonArrayhighestAssetTagCounts.size(); i++) {
            Assetsv3HighestAssetTagCounts.validateJsonElement(jsonArrayhighestAssetTagCounts.get(i));
          };
        }
      }
      if (jsonObj.get("selected_filters") != null && !jsonObj.get("selected_filters").isJsonNull()) {
        JsonArray jsonArrayselectedFilters = jsonObj.getAsJsonArray("selected_filters");
        if (jsonArrayselectedFilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("selected_filters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `selected_filters` to be an array in the JSON string but got `%s`", jsonObj.get("selected_filters").toString()));
          }

          // validate the optional field `selected_filters` (array)
          for (int i = 0; i < jsonArrayselectedFilters.size(); i++) {
            Assetsv3FilterCatagory.validateJsonElement(jsonArrayselectedFilters.get(i));
          };
        }
      }
      if (jsonObj.get("tag_categories_data") != null && !jsonObj.get("tag_categories_data").isJsonNull()) {
        JsonArray jsonArraytagCategoriesData = jsonObj.getAsJsonArray("tag_categories_data");
        if (jsonArraytagCategoriesData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tag_categories_data").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tag_categories_data` to be an array in the JSON string but got `%s`", jsonObj.get("tag_categories_data").toString()));
          }

          // validate the optional field `tag_categories_data` (array)
          for (int i = 0; i < jsonArraytagCategoriesData.size(); i++) {
            Assetsv3TagCategoriesData.validateJsonElement(jsonArraytagCategoriesData.get(i));
          };
        }
      }
      if (jsonObj.get("tags_filter_data") != null && !jsonObj.get("tags_filter_data").isJsonNull()) {
        JsonArray jsonArraytagsFilterData = jsonObj.getAsJsonArray("tags_filter_data");
        if (jsonArraytagsFilterData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tags_filter_data").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tags_filter_data` to be an array in the JSON string but got `%s`", jsonObj.get("tags_filter_data").toString()));
          }

          // validate the optional field `tags_filter_data` (array)
          for (int i = 0; i < jsonArraytagsFilterData.size(); i++) {
            Assetsv3TagsFilterData.validateJsonElement(jsonArraytagsFilterData.get(i));
          };
        }
      }
      if ((jsonObj.get("template_id") != null && !jsonObj.get("template_id").isJsonNull()) && !jsonObj.get("template_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template_id").toString()));
      }
      if (jsonObj.get("vulnerability_scan_status") != null && !jsonObj.get("vulnerability_scan_status").isJsonNull()) {
        JsonArray jsonArrayvulnerabilityScanStatus = jsonObj.getAsJsonArray("vulnerability_scan_status");
        if (jsonArrayvulnerabilityScanStatus != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vulnerability_scan_status").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vulnerability_scan_status` to be an array in the JSON string but got `%s`", jsonObj.get("vulnerability_scan_status").toString()));
          }

          // validate the optional field `vulnerability_scan_status` (array)
          for (int i = 0; i < jsonArrayvulnerabilityScanStatus.size(); i++) {
            Assetsv3VulnerabilityScanStatus.validateJsonElement(jsonArrayvulnerabilityScanStatus.get(i));
          };
        }
      }
      if (jsonObj.get("vulnerability_trend") != null && !jsonObj.get("vulnerability_trend").isJsonNull()) {
        JsonArray jsonArrayvulnerabilityTrend = jsonObj.getAsJsonArray("vulnerability_trend");
        if (jsonArrayvulnerabilityTrend != null) {
          // ensure the json data is an array
          if (!jsonObj.get("vulnerability_trend").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `vulnerability_trend` to be an array in the JSON string but got `%s`", jsonObj.get("vulnerability_trend").toString()));
          }

          // validate the optional field `vulnerability_trend` (array)
          for (int i = 0; i < jsonArrayvulnerabilityTrend.size(); i++) {
            Assetsv3VulnerabilityTrend.validateJsonElement(jsonArrayvulnerabilityTrend.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Assetsv3FetchAssetDashboardResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Assetsv3FetchAssetDashboardResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Assetsv3FetchAssetDashboardResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Assetsv3FetchAssetDashboardResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<Assetsv3FetchAssetDashboardResponse>() {
           @Override
           public void write(JsonWriter out, Assetsv3FetchAssetDashboardResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Assetsv3FetchAssetDashboardResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Assetsv3FetchAssetDashboardResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Assetsv3FetchAssetDashboardResponse
  * @throws IOException if the JSON string is invalid with respect to Assetsv3FetchAssetDashboardResponse
  */
  public static Assetsv3FetchAssetDashboardResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Assetsv3FetchAssetDashboardResponse.class);
  }

 /**
  * Convert an instance of Assetsv3FetchAssetDashboardResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

