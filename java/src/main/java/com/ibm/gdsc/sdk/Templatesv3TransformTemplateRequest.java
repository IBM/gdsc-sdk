/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.gdsc.sdk.Templatesv3Integration;
import com.ibm.gdsc.sdk.Templatesv3MIMEType;
import com.ibm.gdsc.sdk.Templatesv3Origin;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.JSON;

/**
 * Transforms a template into a fully resolved version with data substitution.  The template is defined by the specified  template id or is dynamically located base on the supplied Integration, Origin and MIMEType.  The data supplied  must match the substitution fields associated with the evaluated template.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-15T03:58:58.617687Z[UTC]", comments = "Generator version: 7.6.0")
public class Templatesv3TransformTemplateRequest {
  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Map<String, String> data = new HashMap<>();

  public static final String SERIALIZED_NAME_INTEGRATION = "integration";
  @SerializedName(SERIALIZED_NAME_INTEGRATION)
  private Templatesv3Integration integration = Templatesv3Integration.UNDEFINED_INTEGRATION;

  public static final String SERIALIZED_NAME_MIME_TYPE = "mime_type";
  @SerializedName(SERIALIZED_NAME_MIME_TYPE)
  private Templatesv3MIMEType mimeType = Templatesv3MIMEType.PLAIN_TEXT;

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private Templatesv3Origin origin = Templatesv3Origin.UNDEFINED_ORIGIN;

  public static final String SERIALIZED_NAME_TEMPLATE_ID = "template_id";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_ID)
  private String templateId;

  public Templatesv3TransformTemplateRequest() {
  }

  public Templatesv3TransformTemplateRequest data(Map<String, String> data) {
    this.data = data;
    return this;
  }

  public Templatesv3TransformTemplateRequest putDataItem(String key, String dataItem) {
    if (this.data == null) {
      this.data = new HashMap<>();
    }
    this.data.put(key, dataItem);
    return this;
  }

   /**
   * Data used to transform the template.
   * @return data
  **/
  @javax.annotation.Nullable
  public Map<String, String> getData() {
    return data;
  }

  public void setData(Map<String, String> data) {
    this.data = data;
  }


  public Templatesv3TransformTemplateRequest integration(Templatesv3Integration integration) {
    this.integration = integration;
    return this;
  }

   /**
   * Get integration
   * @return integration
  **/
  @javax.annotation.Nullable
  public Templatesv3Integration getIntegration() {
    return integration;
  }

  public void setIntegration(Templatesv3Integration integration) {
    this.integration = integration;
  }


  public Templatesv3TransformTemplateRequest mimeType(Templatesv3MIMEType mimeType) {
    this.mimeType = mimeType;
    return this;
  }

   /**
   * Get mimeType
   * @return mimeType
  **/
  @javax.annotation.Nullable
  public Templatesv3MIMEType getMimeType() {
    return mimeType;
  }

  public void setMimeType(Templatesv3MIMEType mimeType) {
    this.mimeType = mimeType;
  }


  public Templatesv3TransformTemplateRequest origin(Templatesv3Origin origin) {
    this.origin = origin;
    return this;
  }

   /**
   * Get origin
   * @return origin
  **/
  @javax.annotation.Nullable
  public Templatesv3Origin getOrigin() {
    return origin;
  }

  public void setOrigin(Templatesv3Origin origin) {
    this.origin = origin;
  }


  public Templatesv3TransformTemplateRequest templateId(String templateId) {
    this.templateId = templateId;
    return this;
  }

   /**
   * The ID of the template to be transformed.
   * @return templateId
  **/
  @javax.annotation.Nullable
  public String getTemplateId() {
    return templateId;
  }

  public void setTemplateId(String templateId) {
    this.templateId = templateId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Templatesv3TransformTemplateRequest templatesv3TransformTemplateRequest = (Templatesv3TransformTemplateRequest) o;
    return Objects.equals(this.data, templatesv3TransformTemplateRequest.data) &&
        Objects.equals(this.integration, templatesv3TransformTemplateRequest.integration) &&
        Objects.equals(this.mimeType, templatesv3TransformTemplateRequest.mimeType) &&
        Objects.equals(this.origin, templatesv3TransformTemplateRequest.origin) &&
        Objects.equals(this.templateId, templatesv3TransformTemplateRequest.templateId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(data, integration, mimeType, origin, templateId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Templatesv3TransformTemplateRequest {\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    integration: ").append(toIndentedString(integration)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("data");
    openapiFields.add("integration");
    openapiFields.add("mime_type");
    openapiFields.add("origin");
    openapiFields.add("template_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Templatesv3TransformTemplateRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Templatesv3TransformTemplateRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Templatesv3TransformTemplateRequest is not found in the empty JSON string", Templatesv3TransformTemplateRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Templatesv3TransformTemplateRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Templatesv3TransformTemplateRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `integration`
      if (jsonObj.get("integration") != null && !jsonObj.get("integration").isJsonNull()) {
        Templatesv3Integration.validateJsonElement(jsonObj.get("integration"));
      }
      // validate the optional field `mime_type`
      if (jsonObj.get("mime_type") != null && !jsonObj.get("mime_type").isJsonNull()) {
        Templatesv3MIMEType.validateJsonElement(jsonObj.get("mime_type"));
      }
      // validate the optional field `origin`
      if (jsonObj.get("origin") != null && !jsonObj.get("origin").isJsonNull()) {
        Templatesv3Origin.validateJsonElement(jsonObj.get("origin"));
      }
      if ((jsonObj.get("template_id") != null && !jsonObj.get("template_id").isJsonNull()) && !jsonObj.get("template_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Templatesv3TransformTemplateRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Templatesv3TransformTemplateRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Templatesv3TransformTemplateRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Templatesv3TransformTemplateRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<Templatesv3TransformTemplateRequest>() {
           @Override
           public void write(JsonWriter out, Templatesv3TransformTemplateRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Templatesv3TransformTemplateRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Templatesv3TransformTemplateRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Templatesv3TransformTemplateRequest
  * @throws IOException if the JSON string is invalid with respect to Templatesv3TransformTemplateRequest
  */
  public static Templatesv3TransformTemplateRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Templatesv3TransformTemplateRequest.class);
  }

 /**
  * Convert an instance of Templatesv3TransformTemplateRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

