/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.gdsc.sdk.models.Policybuilderv3ImportIssue;
import com.ibm.gdsc.sdk.models.Policybuilderv3ImportState;
import com.ibm.gdsc.sdk.models.Policybuilderv3SyncStatusType;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.sdk.JSON;

/**
 * Policybuilderv3GdpPolicySyncRes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-07T13:24:05.648078332-08:00[America/Los_Angeles]", comments = "Generator version: 7.6.0")
public class Policybuilderv3GdpPolicySyncRes {
  public static final String SERIALIZED_NAME_CENTRAL_MANAGER = "central_manager";
  @SerializedName(SERIALIZED_NAME_CENTRAL_MANAGER)
  private String centralManager;

  public static final String SERIALIZED_NAME_CREATED_POLICY_ID = "created_policy_id";
  @SerializedName(SERIALIZED_NAME_CREATED_POLICY_ID)
  private String createdPolicyId;

  public static final String SERIALIZED_NAME_GDP_SYNCED_ID = "gdp_synced_id";
  @SerializedName(SERIALIZED_NAME_GDP_SYNCED_ID)
  private String gdpSyncedId;

  public static final String SERIALIZED_NAME_IMPORT_NAME = "import_name";
  @SerializedName(SERIALIZED_NAME_IMPORT_NAME)
  private String importName;

  public static final String SERIALIZED_NAME_LAST_STATE_CHANGE = "last_state_change";
  @SerializedName(SERIALIZED_NAME_LAST_STATE_CHANGE)
  private String lastStateChange;

  public static final String SERIALIZED_NAME_POLICY_IMPORT_ISSUE = "policy_import_issue";
  @SerializedName(SERIALIZED_NAME_POLICY_IMPORT_ISSUE)
  private Policybuilderv3ImportIssue policyImportIssue = Policybuilderv3ImportIssue.NO_IMPORT_ISSUE;

  public static final String SERIALIZED_NAME_POLICY_IMPORT_STATE = "policy_import_state";
  @SerializedName(SERIALIZED_NAME_POLICY_IMPORT_STATE)
  private Policybuilderv3ImportState policyImportState = Policybuilderv3ImportState.NO_IMPORT_STATUS;

  public static final String SERIALIZED_NAME_POLICY_NAME = "policy_name";
  @SerializedName(SERIALIZED_NAME_POLICY_NAME)
  private String policyName;

  public static final String SERIALIZED_NAME_SYNC_STATUS = "sync_status";
  @SerializedName(SERIALIZED_NAME_SYNC_STATUS)
  private Policybuilderv3SyncStatusType syncStatus = Policybuilderv3SyncStatusType.NO_SYNC_STATUS;

  public Policybuilderv3GdpPolicySyncRes() {
  }

  public Policybuilderv3GdpPolicySyncRes centralManager(String centralManager) {
    this.centralManager = centralManager;
    return this;
  }

   /**
   * Get centralManager
   * @return centralManager
  **/
  @javax.annotation.Nullable
  public String getCentralManager() {
    return centralManager;
  }

  public void setCentralManager(String centralManager) {
    this.centralManager = centralManager;
  }


  public Policybuilderv3GdpPolicySyncRes createdPolicyId(String createdPolicyId) {
    this.createdPolicyId = createdPolicyId;
    return this;
  }

   /**
   * Get createdPolicyId
   * @return createdPolicyId
  **/
  @javax.annotation.Nullable
  public String getCreatedPolicyId() {
    return createdPolicyId;
  }

  public void setCreatedPolicyId(String createdPolicyId) {
    this.createdPolicyId = createdPolicyId;
  }


  public Policybuilderv3GdpPolicySyncRes gdpSyncedId(String gdpSyncedId) {
    this.gdpSyncedId = gdpSyncedId;
    return this;
  }

   /**
   * Sync id of the created or updated sync policy.
   * @return gdpSyncedId
  **/
  @javax.annotation.Nullable
  public String getGdpSyncedId() {
    return gdpSyncedId;
  }

  public void setGdpSyncedId(String gdpSyncedId) {
    this.gdpSyncedId = gdpSyncedId;
  }


  public Policybuilderv3GdpPolicySyncRes importName(String importName) {
    this.importName = importName;
    return this;
  }

   /**
   * Name for imported gdp policy.
   * @return importName
  **/
  @javax.annotation.Nullable
  public String getImportName() {
    return importName;
  }

  public void setImportName(String importName) {
    this.importName = importName;
  }


  public Policybuilderv3GdpPolicySyncRes lastStateChange(String lastStateChange) {
    this.lastStateChange = lastStateChange;
    return this;
  }

   /**
   * Get lastStateChange
   * @return lastStateChange
  **/
  @javax.annotation.Nullable
  public String getLastStateChange() {
    return lastStateChange;
  }

  public void setLastStateChange(String lastStateChange) {
    this.lastStateChange = lastStateChange;
  }


  public Policybuilderv3GdpPolicySyncRes policyImportIssue(Policybuilderv3ImportIssue policyImportIssue) {
    this.policyImportIssue = policyImportIssue;
    return this;
  }

   /**
   * Get policyImportIssue
   * @return policyImportIssue
  **/
  @javax.annotation.Nullable
  public Policybuilderv3ImportIssue getPolicyImportIssue() {
    return policyImportIssue;
  }

  public void setPolicyImportIssue(Policybuilderv3ImportIssue policyImportIssue) {
    this.policyImportIssue = policyImportIssue;
  }


  public Policybuilderv3GdpPolicySyncRes policyImportState(Policybuilderv3ImportState policyImportState) {
    this.policyImportState = policyImportState;
    return this;
  }

   /**
   * Get policyImportState
   * @return policyImportState
  **/
  @javax.annotation.Nullable
  public Policybuilderv3ImportState getPolicyImportState() {
    return policyImportState;
  }

  public void setPolicyImportState(Policybuilderv3ImportState policyImportState) {
    this.policyImportState = policyImportState;
  }


  public Policybuilderv3GdpPolicySyncRes policyName(String policyName) {
    this.policyName = policyName;
    return this;
  }

   /**
   * Policy Name for the created or updated sync policy.
   * @return policyName
  **/
  @javax.annotation.Nullable
  public String getPolicyName() {
    return policyName;
  }

  public void setPolicyName(String policyName) {
    this.policyName = policyName;
  }


  public Policybuilderv3GdpPolicySyncRes syncStatus(Policybuilderv3SyncStatusType syncStatus) {
    this.syncStatus = syncStatus;
    return this;
  }

   /**
   * Get syncStatus
   * @return syncStatus
  **/
  @javax.annotation.Nullable
  public Policybuilderv3SyncStatusType getSyncStatus() {
    return syncStatus;
  }

  public void setSyncStatus(Policybuilderv3SyncStatusType syncStatus) {
    this.syncStatus = syncStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Policybuilderv3GdpPolicySyncRes policybuilderv3GdpPolicySyncRes = (Policybuilderv3GdpPolicySyncRes) o;
    return Objects.equals(this.centralManager, policybuilderv3GdpPolicySyncRes.centralManager) &&
        Objects.equals(this.createdPolicyId, policybuilderv3GdpPolicySyncRes.createdPolicyId) &&
        Objects.equals(this.gdpSyncedId, policybuilderv3GdpPolicySyncRes.gdpSyncedId) &&
        Objects.equals(this.importName, policybuilderv3GdpPolicySyncRes.importName) &&
        Objects.equals(this.lastStateChange, policybuilderv3GdpPolicySyncRes.lastStateChange) &&
        Objects.equals(this.policyImportIssue, policybuilderv3GdpPolicySyncRes.policyImportIssue) &&
        Objects.equals(this.policyImportState, policybuilderv3GdpPolicySyncRes.policyImportState) &&
        Objects.equals(this.policyName, policybuilderv3GdpPolicySyncRes.policyName) &&
        Objects.equals(this.syncStatus, policybuilderv3GdpPolicySyncRes.syncStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(centralManager, createdPolicyId, gdpSyncedId, importName, lastStateChange, policyImportIssue, policyImportState, policyName, syncStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Policybuilderv3GdpPolicySyncRes {\n");
    sb.append("    centralManager: ").append(toIndentedString(centralManager)).append("\n");
    sb.append("    createdPolicyId: ").append(toIndentedString(createdPolicyId)).append("\n");
    sb.append("    gdpSyncedId: ").append(toIndentedString(gdpSyncedId)).append("\n");
    sb.append("    importName: ").append(toIndentedString(importName)).append("\n");
    sb.append("    lastStateChange: ").append(toIndentedString(lastStateChange)).append("\n");
    sb.append("    policyImportIssue: ").append(toIndentedString(policyImportIssue)).append("\n");
    sb.append("    policyImportState: ").append(toIndentedString(policyImportState)).append("\n");
    sb.append("    policyName: ").append(toIndentedString(policyName)).append("\n");
    sb.append("    syncStatus: ").append(toIndentedString(syncStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("central_manager");
    openapiFields.add("created_policy_id");
    openapiFields.add("gdp_synced_id");
    openapiFields.add("import_name");
    openapiFields.add("last_state_change");
    openapiFields.add("policy_import_issue");
    openapiFields.add("policy_import_state");
    openapiFields.add("policy_name");
    openapiFields.add("sync_status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Policybuilderv3GdpPolicySyncRes
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Policybuilderv3GdpPolicySyncRes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Policybuilderv3GdpPolicySyncRes is not found in the empty JSON string", Policybuilderv3GdpPolicySyncRes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Policybuilderv3GdpPolicySyncRes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Policybuilderv3GdpPolicySyncRes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("central_manager") != null && !jsonObj.get("central_manager").isJsonNull()) && !jsonObj.get("central_manager").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `central_manager` to be a primitive type in the JSON string but got `%s`", jsonObj.get("central_manager").toString()));
      }
      if ((jsonObj.get("created_policy_id") != null && !jsonObj.get("created_policy_id").isJsonNull()) && !jsonObj.get("created_policy_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_policy_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_policy_id").toString()));
      }
      if ((jsonObj.get("gdp_synced_id") != null && !jsonObj.get("gdp_synced_id").isJsonNull()) && !jsonObj.get("gdp_synced_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gdp_synced_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gdp_synced_id").toString()));
      }
      if ((jsonObj.get("import_name") != null && !jsonObj.get("import_name").isJsonNull()) && !jsonObj.get("import_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `import_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("import_name").toString()));
      }
      if ((jsonObj.get("last_state_change") != null && !jsonObj.get("last_state_change").isJsonNull()) && !jsonObj.get("last_state_change").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_state_change` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_state_change").toString()));
      }
      // validate the optional field `policy_import_issue`
      if (jsonObj.get("policy_import_issue") != null && !jsonObj.get("policy_import_issue").isJsonNull()) {
        Policybuilderv3ImportIssue.validateJsonElement(jsonObj.get("policy_import_issue"));
      }
      // validate the optional field `policy_import_state`
      if (jsonObj.get("policy_import_state") != null && !jsonObj.get("policy_import_state").isJsonNull()) {
        Policybuilderv3ImportState.validateJsonElement(jsonObj.get("policy_import_state"));
      }
      if ((jsonObj.get("policy_name") != null && !jsonObj.get("policy_name").isJsonNull()) && !jsonObj.get("policy_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policy_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policy_name").toString()));
      }
      // validate the optional field `sync_status`
      if (jsonObj.get("sync_status") != null && !jsonObj.get("sync_status").isJsonNull()) {
        Policybuilderv3SyncStatusType.validateJsonElement(jsonObj.get("sync_status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Policybuilderv3GdpPolicySyncRes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Policybuilderv3GdpPolicySyncRes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Policybuilderv3GdpPolicySyncRes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Policybuilderv3GdpPolicySyncRes.class));

       return (TypeAdapter<T>) new TypeAdapter<Policybuilderv3GdpPolicySyncRes>() {
           @Override
           public void write(JsonWriter out, Policybuilderv3GdpPolicySyncRes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Policybuilderv3GdpPolicySyncRes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Policybuilderv3GdpPolicySyncRes given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Policybuilderv3GdpPolicySyncRes
  * @throws IOException if the JSON string is invalid with respect to Policybuilderv3GdpPolicySyncRes
  */
  public static Policybuilderv3GdpPolicySyncRes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Policybuilderv3GdpPolicySyncRes.class);
  }

 /**
  * Convert an instance of Policybuilderv3GdpPolicySyncRes to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

