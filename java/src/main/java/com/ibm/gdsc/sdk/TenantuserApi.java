/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import com.ibm.gdsc.ApiCallback;
import com.ibm.gdsc.ApiClient;
import com.ibm.gdsc.ApiException;
import com.ibm.gdsc.ApiResponse;
import com.ibm.gdsc.Configuration;
import com.ibm.gdsc.Pair;
import com.ibm.gdsc.ProgressRequestBody;
import com.ibm.gdsc.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ibm.gdsc.sdk.RuntimeError;
import com.ibm.gdsc.sdk.Tenantuserv3CreateApiKeyRequest;
import com.ibm.gdsc.sdk.Tenantuserv3CreateApiKeyResponse;
import com.ibm.gdsc.sdk.Tenantuserv3GetApiKeysResponse;
import com.ibm.gdsc.sdk.Tenantuserv3GetCurrentUserResponse;
import com.ibm.gdsc.sdk.Tenantuserv3GetPrivilegeResponse;
import com.ibm.gdsc.sdk.Tenantuserv3GetPrivilegesResponse;
import com.ibm.gdsc.sdk.Tenantuserv3GetRolesResponse;
import com.ibm.gdsc.sdk.Tenantuserv3GetUserNamesRequest;
import com.ibm.gdsc.sdk.Tenantuserv3GetUserNamesResponse;
import com.ibm.gdsc.sdk.Tenantuserv3GetUserResponse;
import com.ibm.gdsc.sdk.Tenantuserv3GetUserTenantResponse;
import com.ibm.gdsc.sdk.Tenantuserv3PostPrivilegesBulkRequest;
import com.ibm.gdsc.sdk.Tenantuserv3PostPrivilegesBulkResponse;
import com.ibm.gdsc.sdk.Tenantuserv3PostRoleRequest;
import com.ibm.gdsc.sdk.Tenantuserv3PostRoleResponse;
import com.ibm.gdsc.sdk.Tenantuserv3Role;
import com.ibm.gdsc.sdk.Tenantuserv3UpdatePrivilegeRequest;
import com.ibm.gdsc.sdk.Tenantuserv3UpdatePrivilegeResponse;
import com.ibm.gdsc.sdk.Tenantuserv3UpdatePrivilegesBulkRequest;
import com.ibm.gdsc.sdk.Tenantuserv3UpdatePrivilegesBulkResponse;
import com.ibm.gdsc.sdk.Tenantuserv3UpdateRoleRequest;
import com.ibm.gdsc.sdk.Tenantuserv3UpdateRoleResponse;
import com.ibm.gdsc.sdk.Tenantuserv3UpdateUserRoleBulkRequest;
import com.ibm.gdsc.sdk.Tenantuserv3UpdateUserRoleBulkResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TenantuserApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TenantuserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TenantuserApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for tenantuserCreateAPIKey
     * @param tenantuserv3CreateApiKeyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantuserCreateAPIKeyCall(Tenantuserv3CreateApiKeyRequest tenantuserv3CreateApiKeyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tenantuserv3CreateApiKeyRequest;

        // create path and map variables
        String localVarPath = "/api/v3/apikeys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenantuserCreateAPIKeyValidateBeforeCall(Tenantuserv3CreateApiKeyRequest tenantuserv3CreateApiKeyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantuserv3CreateApiKeyRequest' is set
        if (tenantuserv3CreateApiKeyRequest == null) {
            throw new ApiException("Missing the required parameter 'tenantuserv3CreateApiKeyRequest' when calling tenantuserCreateAPIKey(Async)");
        }

        return tenantuserCreateAPIKeyCall(tenantuserv3CreateApiKeyRequest, _callback);

    }

    /**
     * Summary: Create API key Description: Create API Key.
     * 
     * @param tenantuserv3CreateApiKeyRequest  (required)
     * @return Tenantuserv3CreateApiKeyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Tenantuserv3CreateApiKeyResponse tenantuserCreateAPIKey(Tenantuserv3CreateApiKeyRequest tenantuserv3CreateApiKeyRequest) throws ApiException {
        ApiResponse<Tenantuserv3CreateApiKeyResponse> localVarResp = tenantuserCreateAPIKeyWithHttpInfo(tenantuserv3CreateApiKeyRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Create API key Description: Create API Key.
     * 
     * @param tenantuserv3CreateApiKeyRequest  (required)
     * @return ApiResponse&lt;Tenantuserv3CreateApiKeyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tenantuserv3CreateApiKeyResponse> tenantuserCreateAPIKeyWithHttpInfo(Tenantuserv3CreateApiKeyRequest tenantuserv3CreateApiKeyRequest) throws ApiException {
        okhttp3.Call localVarCall = tenantuserCreateAPIKeyValidateBeforeCall(tenantuserv3CreateApiKeyRequest, null);
        Type localVarReturnType = new TypeToken<Tenantuserv3CreateApiKeyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Create API key Description: Create API Key. (asynchronously)
     * 
     * @param tenantuserv3CreateApiKeyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantuserCreateAPIKeyAsync(Tenantuserv3CreateApiKeyRequest tenantuserv3CreateApiKeyRequest, final ApiCallback<Tenantuserv3CreateApiKeyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = tenantuserCreateAPIKeyValidateBeforeCall(tenantuserv3CreateApiKeyRequest, _callback);
        Type localVarReturnType = new TypeToken<Tenantuserv3CreateApiKeyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tenantuserDeleteAPIKey
     * @param id Apikey id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantuserDeleteAPIKeyCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/apikeys/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenantuserDeleteAPIKeyValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tenantuserDeleteAPIKey(Async)");
        }

        return tenantuserDeleteAPIKeyCall(id, _callback);

    }

    /**
     * Summary: Delete API key Description: Delete APIKey Document based on the document id.
     * 
     * @param id Apikey id. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Object tenantuserDeleteAPIKey(String id) throws ApiException {
        ApiResponse<Object> localVarResp = tenantuserDeleteAPIKeyWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Summary: Delete API key Description: Delete APIKey Document based on the document id.
     * 
     * @param id Apikey id. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> tenantuserDeleteAPIKeyWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = tenantuserDeleteAPIKeyValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Delete API key Description: Delete APIKey Document based on the document id. (asynchronously)
     * 
     * @param id Apikey id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantuserDeleteAPIKeyAsync(String id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = tenantuserDeleteAPIKeyValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tenantuserDeleteRole
     * @param roleId ID or role deleted. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantuserDeleteRoleCall(String roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/roles/{role_id}"
            .replace("{" + "role_id" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenantuserDeleteRoleValidateBeforeCall(String roleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling tenantuserDeleteRole(Async)");
        }

        return tenantuserDeleteRoleCall(roleId, _callback);

    }

    /**
     * Summary: Delete role Description: Delete a role.
     * 
     * @param roleId ID or role deleted. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Object tenantuserDeleteRole(String roleId) throws ApiException {
        ApiResponse<Object> localVarResp = tenantuserDeleteRoleWithHttpInfo(roleId);
        return localVarResp.getData();
    }

    /**
     * Summary: Delete role Description: Delete a role.
     * 
     * @param roleId ID or role deleted. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> tenantuserDeleteRoleWithHttpInfo(String roleId) throws ApiException {
        okhttp3.Call localVarCall = tenantuserDeleteRoleValidateBeforeCall(roleId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Delete role Description: Delete a role. (asynchronously)
     * 
     * @param roleId ID or role deleted. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantuserDeleteRoleAsync(String roleId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = tenantuserDeleteRoleValidateBeforeCall(roleId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tenantuserGetAPIKeys
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantuserGetAPIKeysCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/apikeys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenantuserGetAPIKeysValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return tenantuserGetAPIKeysCall(_callback);

    }

    /**
     * Summary: Get API keys Description: Get all APIKeys base on a tenant ID.
     * 
     * @return Tenantuserv3GetApiKeysResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Tenantuserv3GetApiKeysResponse tenantuserGetAPIKeys() throws ApiException {
        ApiResponse<Tenantuserv3GetApiKeysResponse> localVarResp = tenantuserGetAPIKeysWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Summary: Get API keys Description: Get all APIKeys base on a tenant ID.
     * 
     * @return ApiResponse&lt;Tenantuserv3GetApiKeysResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tenantuserv3GetApiKeysResponse> tenantuserGetAPIKeysWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = tenantuserGetAPIKeysValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Tenantuserv3GetApiKeysResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get API keys Description: Get all APIKeys base on a tenant ID. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantuserGetAPIKeysAsync(final ApiCallback<Tenantuserv3GetApiKeysResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = tenantuserGetAPIKeysValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Tenantuserv3GetApiKeysResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tenantuserGetCurrentUser
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantuserGetCurrentUserCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/currentuser";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenantuserGetCurrentUserValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return tenantuserGetCurrentUserCall(_callback);

    }

    /**
     * Summary: Get current user Description: Return the currently authenticated user.
     * 
     * @return Tenantuserv3GetCurrentUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Tenantuserv3GetCurrentUserResponse tenantuserGetCurrentUser() throws ApiException {
        ApiResponse<Tenantuserv3GetCurrentUserResponse> localVarResp = tenantuserGetCurrentUserWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Summary: Get current user Description: Return the currently authenticated user.
     * 
     * @return ApiResponse&lt;Tenantuserv3GetCurrentUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tenantuserv3GetCurrentUserResponse> tenantuserGetCurrentUserWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = tenantuserGetCurrentUserValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Tenantuserv3GetCurrentUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get current user Description: Return the currently authenticated user. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantuserGetCurrentUserAsync(final ApiCallback<Tenantuserv3GetCurrentUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = tenantuserGetCurrentUserValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Tenantuserv3GetCurrentUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tenantuserGetPrivilege
     * @param privilegePrivilegeId Privilege ID. (required)
     * @param privilegeType Privilege Type - a report, group, and datasource may have the same ID. By passing type, the artifact can be uniquely determined. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantuserGetPrivilegeCall(String privilegePrivilegeId, String privilegeType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/privileges/{privilege.privilege_id}"
            .replace("{" + "privilege.privilege_id" + "}", localVarApiClient.escapeString(privilegePrivilegeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (privilegeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("privilege.type", privilegeType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenantuserGetPrivilegeValidateBeforeCall(String privilegePrivilegeId, String privilegeType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'privilegePrivilegeId' is set
        if (privilegePrivilegeId == null) {
            throw new ApiException("Missing the required parameter 'privilegePrivilegeId' when calling tenantuserGetPrivilege(Async)");
        }

        return tenantuserGetPrivilegeCall(privilegePrivilegeId, privilegeType, _callback);

    }

    /**
     * Summary: Get privilege Description: Return privilege.
     * 
     * @param privilegePrivilegeId Privilege ID. (required)
     * @param privilegeType Privilege Type - a report, group, and datasource may have the same ID. By passing type, the artifact can be uniquely determined. (optional)
     * @return Tenantuserv3GetPrivilegeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Tenantuserv3GetPrivilegeResponse tenantuserGetPrivilege(String privilegePrivilegeId, String privilegeType) throws ApiException {
        ApiResponse<Tenantuserv3GetPrivilegeResponse> localVarResp = tenantuserGetPrivilegeWithHttpInfo(privilegePrivilegeId, privilegeType);
        return localVarResp.getData();
    }

    /**
     * Summary: Get privilege Description: Return privilege.
     * 
     * @param privilegePrivilegeId Privilege ID. (required)
     * @param privilegeType Privilege Type - a report, group, and datasource may have the same ID. By passing type, the artifact can be uniquely determined. (optional)
     * @return ApiResponse&lt;Tenantuserv3GetPrivilegeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tenantuserv3GetPrivilegeResponse> tenantuserGetPrivilegeWithHttpInfo(String privilegePrivilegeId, String privilegeType) throws ApiException {
        okhttp3.Call localVarCall = tenantuserGetPrivilegeValidateBeforeCall(privilegePrivilegeId, privilegeType, null);
        Type localVarReturnType = new TypeToken<Tenantuserv3GetPrivilegeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get privilege Description: Return privilege. (asynchronously)
     * 
     * @param privilegePrivilegeId Privilege ID. (required)
     * @param privilegeType Privilege Type - a report, group, and datasource may have the same ID. By passing type, the artifact can be uniquely determined. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantuserGetPrivilegeAsync(String privilegePrivilegeId, String privilegeType, final ApiCallback<Tenantuserv3GetPrivilegeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = tenantuserGetPrivilegeValidateBeforeCall(privilegePrivilegeId, privilegeType, _callback);
        Type localVarReturnType = new TypeToken<Tenantuserv3GetPrivilegeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tenantuserGetPrivileges
     * @param roles If empty, will return all privileges. (optional)
     * @param type Type of privilege to return: group, page, permission, report, restapi, etc. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantuserGetPrivilegesCall(List<String> roles, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/privileges";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (roles != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "roles", roles));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenantuserGetPrivilegesValidateBeforeCall(List<String> roles, String type, final ApiCallback _callback) throws ApiException {
        return tenantuserGetPrivilegesCall(roles, type, _callback);

    }

    /**
     * Summary: Get privileges Description: Return all available privileges (pages, restapi, reports, etc) if no roles are specified If roles are specified, returns cumulative privileges for the list of roles.
     * 
     * @param roles If empty, will return all privileges. (optional)
     * @param type Type of privilege to return: group, page, permission, report, restapi, etc. (optional)
     * @return Tenantuserv3GetPrivilegesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Tenantuserv3GetPrivilegesResponse tenantuserGetPrivileges(List<String> roles, String type) throws ApiException {
        ApiResponse<Tenantuserv3GetPrivilegesResponse> localVarResp = tenantuserGetPrivilegesWithHttpInfo(roles, type);
        return localVarResp.getData();
    }

    /**
     * Summary: Get privileges Description: Return all available privileges (pages, restapi, reports, etc) if no roles are specified If roles are specified, returns cumulative privileges for the list of roles.
     * 
     * @param roles If empty, will return all privileges. (optional)
     * @param type Type of privilege to return: group, page, permission, report, restapi, etc. (optional)
     * @return ApiResponse&lt;Tenantuserv3GetPrivilegesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tenantuserv3GetPrivilegesResponse> tenantuserGetPrivilegesWithHttpInfo(List<String> roles, String type) throws ApiException {
        okhttp3.Call localVarCall = tenantuserGetPrivilegesValidateBeforeCall(roles, type, null);
        Type localVarReturnType = new TypeToken<Tenantuserv3GetPrivilegesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get privileges Description: Return all available privileges (pages, restapi, reports, etc) if no roles are specified If roles are specified, returns cumulative privileges for the list of roles. (asynchronously)
     * 
     * @param roles If empty, will return all privileges. (optional)
     * @param type Type of privilege to return: group, page, permission, report, restapi, etc. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantuserGetPrivilegesAsync(List<String> roles, String type, final ApiCallback<Tenantuserv3GetPrivilegesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = tenantuserGetPrivilegesValidateBeforeCall(roles, type, _callback);
        Type localVarReturnType = new TypeToken<Tenantuserv3GetPrivilegesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tenantuserGetRole
     * @param roleId ID of role to be returned. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantuserGetRoleCall(String roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/roles/{role_id}"
            .replace("{" + "role_id" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenantuserGetRoleValidateBeforeCall(String roleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling tenantuserGetRole(Async)");
        }

        return tenantuserGetRoleCall(roleId, _callback);

    }

    /**
     * Summary: Get role Description: Return single role.
     * 
     * @param roleId ID of role to be returned. (required)
     * @return Tenantuserv3Role
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Tenantuserv3Role tenantuserGetRole(String roleId) throws ApiException {
        ApiResponse<Tenantuserv3Role> localVarResp = tenantuserGetRoleWithHttpInfo(roleId);
        return localVarResp.getData();
    }

    /**
     * Summary: Get role Description: Return single role.
     * 
     * @param roleId ID of role to be returned. (required)
     * @return ApiResponse&lt;Tenantuserv3Role&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tenantuserv3Role> tenantuserGetRoleWithHttpInfo(String roleId) throws ApiException {
        okhttp3.Call localVarCall = tenantuserGetRoleValidateBeforeCall(roleId, null);
        Type localVarReturnType = new TypeToken<Tenantuserv3Role>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get role Description: Return single role. (asynchronously)
     * 
     * @param roleId ID of role to be returned. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantuserGetRoleAsync(String roleId, final ApiCallback<Tenantuserv3Role> _callback) throws ApiException {

        okhttp3.Call localVarCall = tenantuserGetRoleValidateBeforeCall(roleId, _callback);
        Type localVarReturnType = new TypeToken<Tenantuserv3Role>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tenantuserGetRoles
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantuserGetRolesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenantuserGetRolesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return tenantuserGetRolesCall(_callback);

    }

    /**
     * Summary: Get roles Description: Return all roles without privileges.
     * 
     * @return Tenantuserv3GetRolesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Tenantuserv3GetRolesResponse tenantuserGetRoles() throws ApiException {
        ApiResponse<Tenantuserv3GetRolesResponse> localVarResp = tenantuserGetRolesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Summary: Get roles Description: Return all roles without privileges.
     * 
     * @return ApiResponse&lt;Tenantuserv3GetRolesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tenantuserv3GetRolesResponse> tenantuserGetRolesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = tenantuserGetRolesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Tenantuserv3GetRolesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get roles Description: Return all roles without privileges. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantuserGetRolesAsync(final ApiCallback<Tenantuserv3GetRolesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = tenantuserGetRolesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Tenantuserv3GetRolesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tenantuserGetUser
     * @param userId User id defaults to the current user or specify \&quot;current\&quot; or an actual user id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantuserGetUserCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/users/user/{user_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenantuserGetUserValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling tenantuserGetUser(Async)");
        }

        return tenantuserGetUserCall(userId, _callback);

    }

    /**
     * Summary: Get user Description: Return full user for specified user_id.
     * 
     * @param userId User id defaults to the current user or specify \&quot;current\&quot; or an actual user id. (required)
     * @return Tenantuserv3GetUserResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Tenantuserv3GetUserResponse tenantuserGetUser(String userId) throws ApiException {
        ApiResponse<Tenantuserv3GetUserResponse> localVarResp = tenantuserGetUserWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Summary: Get user Description: Return full user for specified user_id.
     * 
     * @param userId User id defaults to the current user or specify \&quot;current\&quot; or an actual user id. (required)
     * @return ApiResponse&lt;Tenantuserv3GetUserResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tenantuserv3GetUserResponse> tenantuserGetUserWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = tenantuserGetUserValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<Tenantuserv3GetUserResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get user Description: Return full user for specified user_id. (asynchronously)
     * 
     * @param userId User id defaults to the current user or specify \&quot;current\&quot; or an actual user id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantuserGetUserAsync(String userId, final ApiCallback<Tenantuserv3GetUserResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = tenantuserGetUserValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<Tenantuserv3GetUserResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tenantuserGetUserNames
     * @param tenantuserv3GetUserNamesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantuserGetUserNamesCall(Tenantuserv3GetUserNamesRequest tenantuserv3GetUserNamesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tenantuserv3GetUserNamesRequest;

        // create path and map variables
        String localVarPath = "/api/v3/users/names";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenantuserGetUserNamesValidateBeforeCall(Tenantuserv3GetUserNamesRequest tenantuserv3GetUserNamesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantuserv3GetUserNamesRequest' is set
        if (tenantuserv3GetUserNamesRequest == null) {
            throw new ApiException("Missing the required parameter 'tenantuserv3GetUserNamesRequest' when calling tenantuserGetUserNames(Async)");
        }

        return tenantuserGetUserNamesCall(tenantuserv3GetUserNamesRequest, _callback);

    }

    /**
     * Summary: Get user names Description: Get user names.
     * 
     * @param tenantuserv3GetUserNamesRequest  (required)
     * @return Tenantuserv3GetUserNamesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Tenantuserv3GetUserNamesResponse tenantuserGetUserNames(Tenantuserv3GetUserNamesRequest tenantuserv3GetUserNamesRequest) throws ApiException {
        ApiResponse<Tenantuserv3GetUserNamesResponse> localVarResp = tenantuserGetUserNamesWithHttpInfo(tenantuserv3GetUserNamesRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Get user names Description: Get user names.
     * 
     * @param tenantuserv3GetUserNamesRequest  (required)
     * @return ApiResponse&lt;Tenantuserv3GetUserNamesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tenantuserv3GetUserNamesResponse> tenantuserGetUserNamesWithHttpInfo(Tenantuserv3GetUserNamesRequest tenantuserv3GetUserNamesRequest) throws ApiException {
        okhttp3.Call localVarCall = tenantuserGetUserNamesValidateBeforeCall(tenantuserv3GetUserNamesRequest, null);
        Type localVarReturnType = new TypeToken<Tenantuserv3GetUserNamesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get user names Description: Get user names. (asynchronously)
     * 
     * @param tenantuserv3GetUserNamesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantuserGetUserNamesAsync(Tenantuserv3GetUserNamesRequest tenantuserv3GetUserNamesRequest, final ApiCallback<Tenantuserv3GetUserNamesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = tenantuserGetUserNamesValidateBeforeCall(tenantuserv3GetUserNamesRequest, _callback);
        Type localVarReturnType = new TypeToken<Tenantuserv3GetUserNamesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tenantuserGetUserTenant
     * @param userId User id defaults to the current user or specify \&quot;current\&quot; or an actual user id. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantuserGetUserTenantCall(String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/users/tenant/{user_id}"
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenantuserGetUserTenantValidateBeforeCall(String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling tenantuserGetUserTenant(Async)");
        }

        return tenantuserGetUserTenantCall(userId, _callback);

    }

    /**
     * Summary: Get user tenant Description: Return the user plus tenant information.
     * 
     * @param userId User id defaults to the current user or specify \&quot;current\&quot; or an actual user id. (required)
     * @return Tenantuserv3GetUserTenantResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Tenantuserv3GetUserTenantResponse tenantuserGetUserTenant(String userId) throws ApiException {
        ApiResponse<Tenantuserv3GetUserTenantResponse> localVarResp = tenantuserGetUserTenantWithHttpInfo(userId);
        return localVarResp.getData();
    }

    /**
     * Summary: Get user tenant Description: Return the user plus tenant information.
     * 
     * @param userId User id defaults to the current user or specify \&quot;current\&quot; or an actual user id. (required)
     * @return ApiResponse&lt;Tenantuserv3GetUserTenantResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tenantuserv3GetUserTenantResponse> tenantuserGetUserTenantWithHttpInfo(String userId) throws ApiException {
        okhttp3.Call localVarCall = tenantuserGetUserTenantValidateBeforeCall(userId, null);
        Type localVarReturnType = new TypeToken<Tenantuserv3GetUserTenantResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get user tenant Description: Return the user plus tenant information. (asynchronously)
     * 
     * @param userId User id defaults to the current user or specify \&quot;current\&quot; or an actual user id. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantuserGetUserTenantAsync(String userId, final ApiCallback<Tenantuserv3GetUserTenantResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = tenantuserGetUserTenantValidateBeforeCall(userId, _callback);
        Type localVarReturnType = new TypeToken<Tenantuserv3GetUserTenantResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tenantuserPostPrivilegesBulk
     * @param tenantuserv3PostPrivilegesBulkRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantuserPostPrivilegesBulkCall(Tenantuserv3PostPrivilegesBulkRequest tenantuserv3PostPrivilegesBulkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tenantuserv3PostPrivilegesBulkRequest;

        // create path and map variables
        String localVarPath = "/api/v3/privileges";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenantuserPostPrivilegesBulkValidateBeforeCall(Tenantuserv3PostPrivilegesBulkRequest tenantuserv3PostPrivilegesBulkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantuserv3PostPrivilegesBulkRequest' is set
        if (tenantuserv3PostPrivilegesBulkRequest == null) {
            throw new ApiException("Missing the required parameter 'tenantuserv3PostPrivilegesBulkRequest' when calling tenantuserPostPrivilegesBulk(Async)");
        }

        return tenantuserPostPrivilegesBulkCall(tenantuserv3PostPrivilegesBulkRequest, _callback);

    }

    /**
     * Summary: Post privileges bulk Description: Perform bulk user add preivilege.
     * 
     * @param tenantuserv3PostPrivilegesBulkRequest  (required)
     * @return Tenantuserv3PostPrivilegesBulkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Tenantuserv3PostPrivilegesBulkResponse tenantuserPostPrivilegesBulk(Tenantuserv3PostPrivilegesBulkRequest tenantuserv3PostPrivilegesBulkRequest) throws ApiException {
        ApiResponse<Tenantuserv3PostPrivilegesBulkResponse> localVarResp = tenantuserPostPrivilegesBulkWithHttpInfo(tenantuserv3PostPrivilegesBulkRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Post privileges bulk Description: Perform bulk user add preivilege.
     * 
     * @param tenantuserv3PostPrivilegesBulkRequest  (required)
     * @return ApiResponse&lt;Tenantuserv3PostPrivilegesBulkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tenantuserv3PostPrivilegesBulkResponse> tenantuserPostPrivilegesBulkWithHttpInfo(Tenantuserv3PostPrivilegesBulkRequest tenantuserv3PostPrivilegesBulkRequest) throws ApiException {
        okhttp3.Call localVarCall = tenantuserPostPrivilegesBulkValidateBeforeCall(tenantuserv3PostPrivilegesBulkRequest, null);
        Type localVarReturnType = new TypeToken<Tenantuserv3PostPrivilegesBulkResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Post privileges bulk Description: Perform bulk user add preivilege. (asynchronously)
     * 
     * @param tenantuserv3PostPrivilegesBulkRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantuserPostPrivilegesBulkAsync(Tenantuserv3PostPrivilegesBulkRequest tenantuserv3PostPrivilegesBulkRequest, final ApiCallback<Tenantuserv3PostPrivilegesBulkResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = tenantuserPostPrivilegesBulkValidateBeforeCall(tenantuserv3PostPrivilegesBulkRequest, _callback);
        Type localVarReturnType = new TypeToken<Tenantuserv3PostPrivilegesBulkResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tenantuserPostRole
     * @param tenantuserv3PostRoleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantuserPostRoleCall(Tenantuserv3PostRoleRequest tenantuserv3PostRoleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tenantuserv3PostRoleRequest;

        // create path and map variables
        String localVarPath = "/api/v3/roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenantuserPostRoleValidateBeforeCall(Tenantuserv3PostRoleRequest tenantuserv3PostRoleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantuserv3PostRoleRequest' is set
        if (tenantuserv3PostRoleRequest == null) {
            throw new ApiException("Missing the required parameter 'tenantuserv3PostRoleRequest' when calling tenantuserPostRole(Async)");
        }

        return tenantuserPostRoleCall(tenantuserv3PostRoleRequest, _callback);

    }

    /**
     * Summary: Post role Description: Create a new role.
     * 
     * @param tenantuserv3PostRoleRequest  (required)
     * @return Tenantuserv3PostRoleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Tenantuserv3PostRoleResponse tenantuserPostRole(Tenantuserv3PostRoleRequest tenantuserv3PostRoleRequest) throws ApiException {
        ApiResponse<Tenantuserv3PostRoleResponse> localVarResp = tenantuserPostRoleWithHttpInfo(tenantuserv3PostRoleRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Post role Description: Create a new role.
     * 
     * @param tenantuserv3PostRoleRequest  (required)
     * @return ApiResponse&lt;Tenantuserv3PostRoleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tenantuserv3PostRoleResponse> tenantuserPostRoleWithHttpInfo(Tenantuserv3PostRoleRequest tenantuserv3PostRoleRequest) throws ApiException {
        okhttp3.Call localVarCall = tenantuserPostRoleValidateBeforeCall(tenantuserv3PostRoleRequest, null);
        Type localVarReturnType = new TypeToken<Tenantuserv3PostRoleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Post role Description: Create a new role. (asynchronously)
     * 
     * @param tenantuserv3PostRoleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantuserPostRoleAsync(Tenantuserv3PostRoleRequest tenantuserv3PostRoleRequest, final ApiCallback<Tenantuserv3PostRoleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = tenantuserPostRoleValidateBeforeCall(tenantuserv3PostRoleRequest, _callback);
        Type localVarReturnType = new TypeToken<Tenantuserv3PostRoleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tenantuserUpdatePrivilege
     * @param privilegeId Permanent id of the privilege to be updated or created. (required)
     * @param tenantuserv3UpdatePrivilegeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantuserUpdatePrivilegeCall(String privilegeId, Tenantuserv3UpdatePrivilegeRequest tenantuserv3UpdatePrivilegeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tenantuserv3UpdatePrivilegeRequest;

        // create path and map variables
        String localVarPath = "/api/v3/privileges/{privilege_id}"
            .replace("{" + "privilege_id" + "}", localVarApiClient.escapeString(privilegeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenantuserUpdatePrivilegeValidateBeforeCall(String privilegeId, Tenantuserv3UpdatePrivilegeRequest tenantuserv3UpdatePrivilegeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'privilegeId' is set
        if (privilegeId == null) {
            throw new ApiException("Missing the required parameter 'privilegeId' when calling tenantuserUpdatePrivilege(Async)");
        }

        // verify the required parameter 'tenantuserv3UpdatePrivilegeRequest' is set
        if (tenantuserv3UpdatePrivilegeRequest == null) {
            throw new ApiException("Missing the required parameter 'tenantuserv3UpdatePrivilegeRequest' when calling tenantuserUpdatePrivilege(Async)");
        }

        return tenantuserUpdatePrivilegeCall(privilegeId, tenantuserv3UpdatePrivilegeRequest, _callback);

    }

    /**
     * Summary: Update privilege Description: Update privilege.
     * 
     * @param privilegeId Permanent id of the privilege to be updated or created. (required)
     * @param tenantuserv3UpdatePrivilegeRequest  (required)
     * @return Tenantuserv3UpdatePrivilegeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Tenantuserv3UpdatePrivilegeResponse tenantuserUpdatePrivilege(String privilegeId, Tenantuserv3UpdatePrivilegeRequest tenantuserv3UpdatePrivilegeRequest) throws ApiException {
        ApiResponse<Tenantuserv3UpdatePrivilegeResponse> localVarResp = tenantuserUpdatePrivilegeWithHttpInfo(privilegeId, tenantuserv3UpdatePrivilegeRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Update privilege Description: Update privilege.
     * 
     * @param privilegeId Permanent id of the privilege to be updated or created. (required)
     * @param tenantuserv3UpdatePrivilegeRequest  (required)
     * @return ApiResponse&lt;Tenantuserv3UpdatePrivilegeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tenantuserv3UpdatePrivilegeResponse> tenantuserUpdatePrivilegeWithHttpInfo(String privilegeId, Tenantuserv3UpdatePrivilegeRequest tenantuserv3UpdatePrivilegeRequest) throws ApiException {
        okhttp3.Call localVarCall = tenantuserUpdatePrivilegeValidateBeforeCall(privilegeId, tenantuserv3UpdatePrivilegeRequest, null);
        Type localVarReturnType = new TypeToken<Tenantuserv3UpdatePrivilegeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Update privilege Description: Update privilege. (asynchronously)
     * 
     * @param privilegeId Permanent id of the privilege to be updated or created. (required)
     * @param tenantuserv3UpdatePrivilegeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantuserUpdatePrivilegeAsync(String privilegeId, Tenantuserv3UpdatePrivilegeRequest tenantuserv3UpdatePrivilegeRequest, final ApiCallback<Tenantuserv3UpdatePrivilegeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = tenantuserUpdatePrivilegeValidateBeforeCall(privilegeId, tenantuserv3UpdatePrivilegeRequest, _callback);
        Type localVarReturnType = new TypeToken<Tenantuserv3UpdatePrivilegeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tenantuserUpdatePrivilegesRoleBulk
     * @param tenantuserv3UpdatePrivilegesBulkRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantuserUpdatePrivilegesRoleBulkCall(Tenantuserv3UpdatePrivilegesBulkRequest tenantuserv3UpdatePrivilegesBulkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tenantuserv3UpdatePrivilegesBulkRequest;

        // create path and map variables
        String localVarPath = "/api/v3/privileges";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenantuserUpdatePrivilegesRoleBulkValidateBeforeCall(Tenantuserv3UpdatePrivilegesBulkRequest tenantuserv3UpdatePrivilegesBulkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantuserv3UpdatePrivilegesBulkRequest' is set
        if (tenantuserv3UpdatePrivilegesBulkRequest == null) {
            throw new ApiException("Missing the required parameter 'tenantuserv3UpdatePrivilegesBulkRequest' when calling tenantuserUpdatePrivilegesRoleBulk(Async)");
        }

        return tenantuserUpdatePrivilegesRoleBulkCall(tenantuserv3UpdatePrivilegesBulkRequest, _callback);

    }

    /**
     * Summary: Update privileges role bulk Description: Perform bulk user update role.
     * 
     * @param tenantuserv3UpdatePrivilegesBulkRequest  (required)
     * @return Tenantuserv3UpdatePrivilegesBulkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Tenantuserv3UpdatePrivilegesBulkResponse tenantuserUpdatePrivilegesRoleBulk(Tenantuserv3UpdatePrivilegesBulkRequest tenantuserv3UpdatePrivilegesBulkRequest) throws ApiException {
        ApiResponse<Tenantuserv3UpdatePrivilegesBulkResponse> localVarResp = tenantuserUpdatePrivilegesRoleBulkWithHttpInfo(tenantuserv3UpdatePrivilegesBulkRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Update privileges role bulk Description: Perform bulk user update role.
     * 
     * @param tenantuserv3UpdatePrivilegesBulkRequest  (required)
     * @return ApiResponse&lt;Tenantuserv3UpdatePrivilegesBulkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tenantuserv3UpdatePrivilegesBulkResponse> tenantuserUpdatePrivilegesRoleBulkWithHttpInfo(Tenantuserv3UpdatePrivilegesBulkRequest tenantuserv3UpdatePrivilegesBulkRequest) throws ApiException {
        okhttp3.Call localVarCall = tenantuserUpdatePrivilegesRoleBulkValidateBeforeCall(tenantuserv3UpdatePrivilegesBulkRequest, null);
        Type localVarReturnType = new TypeToken<Tenantuserv3UpdatePrivilegesBulkResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Update privileges role bulk Description: Perform bulk user update role. (asynchronously)
     * 
     * @param tenantuserv3UpdatePrivilegesBulkRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantuserUpdatePrivilegesRoleBulkAsync(Tenantuserv3UpdatePrivilegesBulkRequest tenantuserv3UpdatePrivilegesBulkRequest, final ApiCallback<Tenantuserv3UpdatePrivilegesBulkResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = tenantuserUpdatePrivilegesRoleBulkValidateBeforeCall(tenantuserv3UpdatePrivilegesBulkRequest, _callback);
        Type localVarReturnType = new TypeToken<Tenantuserv3UpdatePrivilegesBulkResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tenantuserUpdateRole
     * @param roleId Permanent id of the role. (required)
     * @param tenantuserv3UpdateRoleRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantuserUpdateRoleCall(String roleId, Tenantuserv3UpdateRoleRequest tenantuserv3UpdateRoleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tenantuserv3UpdateRoleRequest;

        // create path and map variables
        String localVarPath = "/api/v3/roles/{role_id}"
            .replace("{" + "role_id" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenantuserUpdateRoleValidateBeforeCall(String roleId, Tenantuserv3UpdateRoleRequest tenantuserv3UpdateRoleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling tenantuserUpdateRole(Async)");
        }

        // verify the required parameter 'tenantuserv3UpdateRoleRequest' is set
        if (tenantuserv3UpdateRoleRequest == null) {
            throw new ApiException("Missing the required parameter 'tenantuserv3UpdateRoleRequest' when calling tenantuserUpdateRole(Async)");
        }

        return tenantuserUpdateRoleCall(roleId, tenantuserv3UpdateRoleRequest, _callback);

    }

    /**
     * Summary: Update role Description: Update single role.
     * 
     * @param roleId Permanent id of the role. (required)
     * @param tenantuserv3UpdateRoleRequest  (required)
     * @return Tenantuserv3UpdateRoleResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Tenantuserv3UpdateRoleResponse tenantuserUpdateRole(String roleId, Tenantuserv3UpdateRoleRequest tenantuserv3UpdateRoleRequest) throws ApiException {
        ApiResponse<Tenantuserv3UpdateRoleResponse> localVarResp = tenantuserUpdateRoleWithHttpInfo(roleId, tenantuserv3UpdateRoleRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Update role Description: Update single role.
     * 
     * @param roleId Permanent id of the role. (required)
     * @param tenantuserv3UpdateRoleRequest  (required)
     * @return ApiResponse&lt;Tenantuserv3UpdateRoleResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tenantuserv3UpdateRoleResponse> tenantuserUpdateRoleWithHttpInfo(String roleId, Tenantuserv3UpdateRoleRequest tenantuserv3UpdateRoleRequest) throws ApiException {
        okhttp3.Call localVarCall = tenantuserUpdateRoleValidateBeforeCall(roleId, tenantuserv3UpdateRoleRequest, null);
        Type localVarReturnType = new TypeToken<Tenantuserv3UpdateRoleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Update role Description: Update single role. (asynchronously)
     * 
     * @param roleId Permanent id of the role. (required)
     * @param tenantuserv3UpdateRoleRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantuserUpdateRoleAsync(String roleId, Tenantuserv3UpdateRoleRequest tenantuserv3UpdateRoleRequest, final ApiCallback<Tenantuserv3UpdateRoleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = tenantuserUpdateRoleValidateBeforeCall(roleId, tenantuserv3UpdateRoleRequest, _callback);
        Type localVarReturnType = new TypeToken<Tenantuserv3UpdateRoleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tenantuserUpdateUserRoleBulk
     * @param tenantuserv3UpdateUserRoleBulkRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantuserUpdateUserRoleBulkCall(Tenantuserv3UpdateUserRoleBulkRequest tenantuserv3UpdateUserRoleBulkRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tenantuserv3UpdateUserRoleBulkRequest;

        // create path and map variables
        String localVarPath = "/api/v3/users/role";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenantuserUpdateUserRoleBulkValidateBeforeCall(Tenantuserv3UpdateUserRoleBulkRequest tenantuserv3UpdateUserRoleBulkRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantuserv3UpdateUserRoleBulkRequest' is set
        if (tenantuserv3UpdateUserRoleBulkRequest == null) {
            throw new ApiException("Missing the required parameter 'tenantuserv3UpdateUserRoleBulkRequest' when calling tenantuserUpdateUserRoleBulk(Async)");
        }

        return tenantuserUpdateUserRoleBulkCall(tenantuserv3UpdateUserRoleBulkRequest, _callback);

    }

    /**
     * Summary: Update user role bulk Description: Perform bulk user add or remove role.
     * 
     * @param tenantuserv3UpdateUserRoleBulkRequest  (required)
     * @return Tenantuserv3UpdateUserRoleBulkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Tenantuserv3UpdateUserRoleBulkResponse tenantuserUpdateUserRoleBulk(Tenantuserv3UpdateUserRoleBulkRequest tenantuserv3UpdateUserRoleBulkRequest) throws ApiException {
        ApiResponse<Tenantuserv3UpdateUserRoleBulkResponse> localVarResp = tenantuserUpdateUserRoleBulkWithHttpInfo(tenantuserv3UpdateUserRoleBulkRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Update user role bulk Description: Perform bulk user add or remove role.
     * 
     * @param tenantuserv3UpdateUserRoleBulkRequest  (required)
     * @return ApiResponse&lt;Tenantuserv3UpdateUserRoleBulkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Tenantuserv3UpdateUserRoleBulkResponse> tenantuserUpdateUserRoleBulkWithHttpInfo(Tenantuserv3UpdateUserRoleBulkRequest tenantuserv3UpdateUserRoleBulkRequest) throws ApiException {
        okhttp3.Call localVarCall = tenantuserUpdateUserRoleBulkValidateBeforeCall(tenantuserv3UpdateUserRoleBulkRequest, null);
        Type localVarReturnType = new TypeToken<Tenantuserv3UpdateUserRoleBulkResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Update user role bulk Description: Perform bulk user add or remove role. (asynchronously)
     * 
     * @param tenantuserv3UpdateUserRoleBulkRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantuserUpdateUserRoleBulkAsync(Tenantuserv3UpdateUserRoleBulkRequest tenantuserv3UpdateUserRoleBulkRequest, final ApiCallback<Tenantuserv3UpdateUserRoleBulkResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = tenantuserUpdateUserRoleBulkValidateBeforeCall(tenantuserv3UpdateUserRoleBulkRequest, _callback);
        Type localVarReturnType = new TypeToken<Tenantuserv3UpdateUserRoleBulkResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
