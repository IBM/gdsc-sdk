/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import com.ibm.gdsc.ApiCallback;
import com.ibm.gdsc.ApiClient;
import com.ibm.gdsc.ApiException;
import com.ibm.gdsc.ApiResponse;
import com.ibm.gdsc.Configuration;
import com.ibm.gdsc.Pair;
import com.ibm.gdsc.ProgressRequestBody;
import com.ibm.gdsc.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ibm.gdsc.sdk.ActualFlow;
import com.ibm.gdsc.sdk.ActualFlowsSummary;
import com.ibm.gdsc.sdk.Authenticate400Response;
import java.math.BigDecimal;
import com.ibm.gdsc.sdk.ListActualFlowPaths200Response;
import com.ibm.gdsc.sdk.ListActualFlowPathsFilterParameter;
import com.ibm.gdsc.sdk.ListActualFlowPathsSortParameter;
import com.ibm.gdsc.sdk.ListActualFlows200Response;
import com.ibm.gdsc.sdk.ListActualFlowsFilterParameter;
import com.ibm.gdsc.sdk.ListActualFlowsSortParameter;
import com.ibm.gdsc.sdk.ListPotentialFlows200Response;
import com.ibm.gdsc.sdk.ListPotentialFlowsPaths200Response;
import com.ibm.gdsc.sdk.PotentialFlow;
import com.ibm.gdsc.sdk.PotentialFlowPath;
import com.ibm.gdsc.sdk.PotentialFlowsFilterOptions;
import com.ibm.gdsc.sdk.PotentialFlowsPathsFilterOptions;
import com.ibm.gdsc.sdk.PotentialFlowsSummary;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DataMovementsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DataMovementsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DataMovementsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getActualFlow
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getActualFlowCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/dspm/dataMovements/actualFlows/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getActualFlowValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getActualFlow(Async)");
        }

        return getActualFlowCall(id, _callback);

    }

    /**
     * Get actual flow by providing its ID
     * Get a detailed information about an actual flow by providing its ID.
     * @param id  (required)
     * @return ActualFlow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public ActualFlow getActualFlow(String id) throws ApiException {
        ApiResponse<ActualFlow> localVarResp = getActualFlowWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get actual flow by providing its ID
     * Get a detailed information about an actual flow by providing its ID.
     * @param id  (required)
     * @return ApiResponse&lt;ActualFlow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<ActualFlow> getActualFlowWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getActualFlowValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ActualFlow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get actual flow by providing its ID (asynchronously)
     * Get a detailed information about an actual flow by providing its ID.
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getActualFlowAsync(String id, final ApiCallback<ActualFlow> _callback) throws ApiException {

        okhttp3.Call localVarCall = getActualFlowValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ActualFlow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getActualFlowsSummary
     * @param filter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getActualFlowsSummaryCall(ListActualFlowsFilterParameter filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/dspm/dataMovements/actualFlows/summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getActualFlowsSummaryValidateBeforeCall(ListActualFlowsFilterParameter filter, final ApiCallback _callback) throws ApiException {
        return getActualFlowsSummaryCall(filter, _callback);

    }

    /**
     * Get summary of actual flows
     * Get a summary of all the actual flows discovered by Guardium DSPM, that is, details about source and destination, and other information.
     * @param filter  (optional)
     * @return ActualFlowsSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public ActualFlowsSummary getActualFlowsSummary(ListActualFlowsFilterParameter filter) throws ApiException {
        ApiResponse<ActualFlowsSummary> localVarResp = getActualFlowsSummaryWithHttpInfo(filter);
        return localVarResp.getData();
    }

    /**
     * Get summary of actual flows
     * Get a summary of all the actual flows discovered by Guardium DSPM, that is, details about source and destination, and other information.
     * @param filter  (optional)
     * @return ApiResponse&lt;ActualFlowsSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<ActualFlowsSummary> getActualFlowsSummaryWithHttpInfo(ListActualFlowsFilterParameter filter) throws ApiException {
        okhttp3.Call localVarCall = getActualFlowsSummaryValidateBeforeCall(filter, null);
        Type localVarReturnType = new TypeToken<ActualFlowsSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get summary of actual flows (asynchronously)
     * Get a summary of all the actual flows discovered by Guardium DSPM, that is, details about source and destination, and other information.
     * @param filter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getActualFlowsSummaryAsync(ListActualFlowsFilterParameter filter, final ApiCallback<ActualFlowsSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = getActualFlowsSummaryValidateBeforeCall(filter, _callback);
        Type localVarReturnType = new TypeToken<ActualFlowsSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPotentialFlow
     * @param flowId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> potential flow not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPotentialFlowCall(String flowId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/dspm/dataMovements/potentialFlows/{flowId}"
            .replace("{" + "flowId" + "}", localVarApiClient.escapeString(flowId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPotentialFlowValidateBeforeCall(String flowId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'flowId' is set
        if (flowId == null) {
            throw new ApiException("Missing the required parameter 'flowId' when calling getPotentialFlow(Async)");
        }

        return getPotentialFlowCall(flowId, _callback);

    }

    /**
     * Get potential flow by providing its ID
     * Get a detailed information about a potential flow by providing the flow ID.
     * @param flowId  (required)
     * @return PotentialFlow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> potential flow not found </td><td>  -  </td></tr>
     </table>
     */
    public PotentialFlow getPotentialFlow(String flowId) throws ApiException {
        ApiResponse<PotentialFlow> localVarResp = getPotentialFlowWithHttpInfo(flowId);
        return localVarResp.getData();
    }

    /**
     * Get potential flow by providing its ID
     * Get a detailed information about a potential flow by providing the flow ID.
     * @param flowId  (required)
     * @return ApiResponse&lt;PotentialFlow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> potential flow not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PotentialFlow> getPotentialFlowWithHttpInfo(String flowId) throws ApiException {
        okhttp3.Call localVarCall = getPotentialFlowValidateBeforeCall(flowId, null);
        Type localVarReturnType = new TypeToken<PotentialFlow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get potential flow by providing its ID (asynchronously)
     * Get a detailed information about a potential flow by providing the flow ID.
     * @param flowId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> potential flow not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPotentialFlowAsync(String flowId, final ApiCallback<PotentialFlow> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPotentialFlowValidateBeforeCall(flowId, _callback);
        Type localVarReturnType = new TypeToken<PotentialFlow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPotentialFlowPath
     * @param flowPathId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> potential flow path not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPotentialFlowPathCall(String flowPathId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/dspm/dataMovements/potentialFlows/paths/{flowPathId}"
            .replace("{" + "flowPathId" + "}", localVarApiClient.escapeString(flowPathId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPotentialFlowPathValidateBeforeCall(String flowPathId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'flowPathId' is set
        if (flowPathId == null) {
            throw new ApiException("Missing the required parameter 'flowPathId' when calling getPotentialFlowPath(Async)");
        }

        return getPotentialFlowPathCall(flowPathId, _callback);

    }

    /**
     * Get potential flow path by providing its ID
     * Get details of a specific potential flow of data by providing its ID.
     * @param flowPathId  (required)
     * @return PotentialFlowPath
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> potential flow path not found </td><td>  -  </td></tr>
     </table>
     */
    public PotentialFlowPath getPotentialFlowPath(String flowPathId) throws ApiException {
        ApiResponse<PotentialFlowPath> localVarResp = getPotentialFlowPathWithHttpInfo(flowPathId);
        return localVarResp.getData();
    }

    /**
     * Get potential flow path by providing its ID
     * Get details of a specific potential flow of data by providing its ID.
     * @param flowPathId  (required)
     * @return ApiResponse&lt;PotentialFlowPath&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> potential flow path not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PotentialFlowPath> getPotentialFlowPathWithHttpInfo(String flowPathId) throws ApiException {
        okhttp3.Call localVarCall = getPotentialFlowPathValidateBeforeCall(flowPathId, null);
        Type localVarReturnType = new TypeToken<PotentialFlowPath>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get potential flow path by providing its ID (asynchronously)
     * Get details of a specific potential flow of data by providing its ID.
     * @param flowPathId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> potential flow path not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPotentialFlowPathAsync(String flowPathId, final ApiCallback<PotentialFlowPath> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPotentialFlowPathValidateBeforeCall(flowPathId, _callback);
        Type localVarReturnType = new TypeToken<PotentialFlowPath>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPotentialFlowsSummary
     * @param filter  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getPotentialFlowsSummaryCall(PotentialFlowsFilterOptions filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/dspm/dataMovements/potentialFlows/summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPotentialFlowsSummaryValidateBeforeCall(PotentialFlowsFilterOptions filter, final ApiCallback _callback) throws ApiException {
        return getPotentialFlowsSummaryCall(filter, _callback);

    }

    /**
     * Get summary of potential flows according to the filter applied
     * Get a summary of all the potential flows based on a filter applied.
     * @param filter  (optional)
     * @return PotentialFlowsSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public PotentialFlowsSummary getPotentialFlowsSummary(PotentialFlowsFilterOptions filter) throws ApiException {
        ApiResponse<PotentialFlowsSummary> localVarResp = getPotentialFlowsSummaryWithHttpInfo(filter);
        return localVarResp.getData();
    }

    /**
     * Get summary of potential flows according to the filter applied
     * Get a summary of all the potential flows based on a filter applied.
     * @param filter  (optional)
     * @return ApiResponse&lt;PotentialFlowsSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<PotentialFlowsSummary> getPotentialFlowsSummaryWithHttpInfo(PotentialFlowsFilterOptions filter) throws ApiException {
        okhttp3.Call localVarCall = getPotentialFlowsSummaryValidateBeforeCall(filter, null);
        Type localVarReturnType = new TypeToken<PotentialFlowsSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get summary of potential flows according to the filter applied (asynchronously)
     * Get a summary of all the potential flows based on a filter applied.
     * @param filter  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getPotentialFlowsSummaryAsync(PotentialFlowsFilterOptions filter, final ApiCallback<PotentialFlowsSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPotentialFlowsSummaryValidateBeforeCall(filter, _callback);
        Type localVarReturnType = new TypeToken<PotentialFlowsSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listActualFlowPaths
     * @param sort  (optional)
     * @param filter  (optional)
     * @param pageSize  (optional)
     * @param nextToken  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call listActualFlowPathsCall(ListActualFlowPathsSortParameter sort, ListActualFlowPathsFilterParameter filter, BigDecimal pageSize, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/dspm/dataMovements/actualFlowPaths";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listActualFlowPathsValidateBeforeCall(ListActualFlowPathsSortParameter sort, ListActualFlowPathsFilterParameter filter, BigDecimal pageSize, String nextToken, final ApiCallback _callback) throws ApiException {
        return listActualFlowPathsCall(sort, filter, pageSize, nextToken, _callback);

    }

    /**
     * Get summary of actual flows according to the filter applied
     * Get detailed information about the actual flows according to the filter applied.
     * @param sort  (optional)
     * @param filter  (optional)
     * @param pageSize  (optional)
     * @param nextToken  (optional)
     * @return ListActualFlowPaths200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public ListActualFlowPaths200Response listActualFlowPaths(ListActualFlowPathsSortParameter sort, ListActualFlowPathsFilterParameter filter, BigDecimal pageSize, String nextToken) throws ApiException {
        ApiResponse<ListActualFlowPaths200Response> localVarResp = listActualFlowPathsWithHttpInfo(sort, filter, pageSize, nextToken);
        return localVarResp.getData();
    }

    /**
     * Get summary of actual flows according to the filter applied
     * Get detailed information about the actual flows according to the filter applied.
     * @param sort  (optional)
     * @param filter  (optional)
     * @param pageSize  (optional)
     * @param nextToken  (optional)
     * @return ApiResponse&lt;ListActualFlowPaths200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<ListActualFlowPaths200Response> listActualFlowPathsWithHttpInfo(ListActualFlowPathsSortParameter sort, ListActualFlowPathsFilterParameter filter, BigDecimal pageSize, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listActualFlowPathsValidateBeforeCall(sort, filter, pageSize, nextToken, null);
        Type localVarReturnType = new TypeToken<ListActualFlowPaths200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get summary of actual flows according to the filter applied (asynchronously)
     * Get detailed information about the actual flows according to the filter applied.
     * @param sort  (optional)
     * @param filter  (optional)
     * @param pageSize  (optional)
     * @param nextToken  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call listActualFlowPathsAsync(ListActualFlowPathsSortParameter sort, ListActualFlowPathsFilterParameter filter, BigDecimal pageSize, String nextToken, final ApiCallback<ListActualFlowPaths200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listActualFlowPathsValidateBeforeCall(sort, filter, pageSize, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListActualFlowPaths200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listActualFlows
     * @param sort  (optional)
     * @param filter  (optional)
     * @param pageSize  (optional)
     * @param nextToken  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call listActualFlowsCall(ListActualFlowsSortParameter sort, ListActualFlowsFilterParameter filter, BigDecimal pageSize, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/dspm/dataMovements/actualFlows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listActualFlowsValidateBeforeCall(ListActualFlowsSortParameter sort, ListActualFlowsFilterParameter filter, BigDecimal pageSize, String nextToken, final ApiCallback _callback) throws ApiException {
        return listActualFlowsCall(sort, filter, pageSize, nextToken, _callback);

    }

    /**
     * List actual flows
     * List all the actual flows (based on logs) of users and services across your entire cloud accounts and SasS applications.
     * @param sort  (optional)
     * @param filter  (optional)
     * @param pageSize  (optional)
     * @param nextToken  (optional)
     * @return ListActualFlows200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public ListActualFlows200Response listActualFlows(ListActualFlowsSortParameter sort, ListActualFlowsFilterParameter filter, BigDecimal pageSize, String nextToken) throws ApiException {
        ApiResponse<ListActualFlows200Response> localVarResp = listActualFlowsWithHttpInfo(sort, filter, pageSize, nextToken);
        return localVarResp.getData();
    }

    /**
     * List actual flows
     * List all the actual flows (based on logs) of users and services across your entire cloud accounts and SasS applications.
     * @param sort  (optional)
     * @param filter  (optional)
     * @param pageSize  (optional)
     * @param nextToken  (optional)
     * @return ApiResponse&lt;ListActualFlows200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<ListActualFlows200Response> listActualFlowsWithHttpInfo(ListActualFlowsSortParameter sort, ListActualFlowsFilterParameter filter, BigDecimal pageSize, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listActualFlowsValidateBeforeCall(sort, filter, pageSize, nextToken, null);
        Type localVarReturnType = new TypeToken<ListActualFlows200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List actual flows (asynchronously)
     * List all the actual flows (based on logs) of users and services across your entire cloud accounts and SasS applications.
     * @param sort  (optional)
     * @param filter  (optional)
     * @param pageSize  (optional)
     * @param nextToken  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call listActualFlowsAsync(ListActualFlowsSortParameter sort, ListActualFlowsFilterParameter filter, BigDecimal pageSize, String nextToken, final ApiCallback<ListActualFlows200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listActualFlowsValidateBeforeCall(sort, filter, pageSize, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListActualFlows200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPotentialFlows
     * @param filter  (optional)
     * @param pageSize  (optional)
     * @param nextToken  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call listPotentialFlowsCall(PotentialFlowsFilterOptions filter, BigDecimal pageSize, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/dspm/dataMovements/potentialFlows";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPotentialFlowsValidateBeforeCall(PotentialFlowsFilterOptions filter, BigDecimal pageSize, String nextToken, final ApiCallback _callback) throws ApiException {
        return listPotentialFlowsCall(filter, pageSize, nextToken, _callback);

    }

    /**
     * List potential flows
     * List all the potential flows of users and services across your entire cloud accounts and SaaS applications.
     * @param filter  (optional)
     * @param pageSize  (optional)
     * @param nextToken  (optional)
     * @return ListPotentialFlows200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public ListPotentialFlows200Response listPotentialFlows(PotentialFlowsFilterOptions filter, BigDecimal pageSize, String nextToken) throws ApiException {
        ApiResponse<ListPotentialFlows200Response> localVarResp = listPotentialFlowsWithHttpInfo(filter, pageSize, nextToken);
        return localVarResp.getData();
    }

    /**
     * List potential flows
     * List all the potential flows of users and services across your entire cloud accounts and SaaS applications.
     * @param filter  (optional)
     * @param pageSize  (optional)
     * @param nextToken  (optional)
     * @return ApiResponse&lt;ListPotentialFlows200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<ListPotentialFlows200Response> listPotentialFlowsWithHttpInfo(PotentialFlowsFilterOptions filter, BigDecimal pageSize, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listPotentialFlowsValidateBeforeCall(filter, pageSize, nextToken, null);
        Type localVarReturnType = new TypeToken<ListPotentialFlows200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List potential flows (asynchronously)
     * List all the potential flows of users and services across your entire cloud accounts and SaaS applications.
     * @param filter  (optional)
     * @param pageSize  (optional)
     * @param nextToken  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call listPotentialFlowsAsync(PotentialFlowsFilterOptions filter, BigDecimal pageSize, String nextToken, final ApiCallback<ListPotentialFlows200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPotentialFlowsValidateBeforeCall(filter, pageSize, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListPotentialFlows200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPotentialFlowsPaths
     * @param filter  (optional)
     * @param pageSize  (optional)
     * @param nextToken  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call listPotentialFlowsPathsCall(PotentialFlowsPathsFilterOptions filter, BigDecimal pageSize, String nextToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/dspm/dataMovements/potentialFlows/paths";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (nextToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextToken", nextToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPotentialFlowsPathsValidateBeforeCall(PotentialFlowsPathsFilterOptions filter, BigDecimal pageSize, String nextToken, final ApiCallback _callback) throws ApiException {
        return listPotentialFlowsPathsCall(filter, pageSize, nextToken, _callback);

    }

    /**
     * List potential flow paths
     * List all the potential flow paths based on an applied filter.
     * @param filter  (optional)
     * @param pageSize  (optional)
     * @param nextToken  (optional)
     * @return ListPotentialFlowsPaths200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public ListPotentialFlowsPaths200Response listPotentialFlowsPaths(PotentialFlowsPathsFilterOptions filter, BigDecimal pageSize, String nextToken) throws ApiException {
        ApiResponse<ListPotentialFlowsPaths200Response> localVarResp = listPotentialFlowsPathsWithHttpInfo(filter, pageSize, nextToken);
        return localVarResp.getData();
    }

    /**
     * List potential flow paths
     * List all the potential flow paths based on an applied filter.
     * @param filter  (optional)
     * @param pageSize  (optional)
     * @param nextToken  (optional)
     * @return ApiResponse&lt;ListPotentialFlowsPaths200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<ListPotentialFlowsPaths200Response> listPotentialFlowsPathsWithHttpInfo(PotentialFlowsPathsFilterOptions filter, BigDecimal pageSize, String nextToken) throws ApiException {
        okhttp3.Call localVarCall = listPotentialFlowsPathsValidateBeforeCall(filter, pageSize, nextToken, null);
        Type localVarReturnType = new TypeToken<ListPotentialFlowsPaths200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List potential flow paths (asynchronously)
     * List all the potential flow paths based on an applied filter.
     * @param filter  (optional)
     * @param pageSize  (optional)
     * @param nextToken  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  * Access-Control-Allow-Origin -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Headers -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call listPotentialFlowsPathsAsync(PotentialFlowsPathsFilterOptions filter, BigDecimal pageSize, String nextToken, final ApiCallback<ListPotentialFlowsPaths200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPotentialFlowsPathsValidateBeforeCall(filter, pageSize, nextToken, _callback);
        Type localVarReturnType = new TypeToken<ListPotentialFlowsPaths200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
