/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.gdsc.sdk.Workflowv3TaskEdit;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.JSON;

/**
 * Update existing tasks.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-15T03:58:58.617687Z[UTC]", comments = "Generator version: 7.6.0")
public class Workflowv3UpdateTasksRequest {
  public static final String SERIALIZED_NAME_CASE_ID = "case_id";
  @SerializedName(SERIALIZED_NAME_CASE_ID)
  private String caseId;

  public static final String SERIALIZED_NAME_TASKS = "tasks";
  @SerializedName(SERIALIZED_NAME_TASKS)
  private List<Workflowv3TaskEdit> tasks = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATE_FIELDS = "update_fields";
  @SerializedName(SERIALIZED_NAME_UPDATE_FIELDS)
  private List<String> updateFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_WORKFLOW_ID = "workflow_id";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_ID)
  private String workflowId;

  public Workflowv3UpdateTasksRequest() {
  }

  public Workflowv3UpdateTasksRequest caseId(String caseId) {
    this.caseId = caseId;
    return this;
  }

   /**
   * Update tasks belonging to common parent.
   * @return caseId
  **/
  @javax.annotation.Nullable
  public String getCaseId() {
    return caseId;
  }

  public void setCaseId(String caseId) {
    this.caseId = caseId;
  }


  public Workflowv3UpdateTasksRequest tasks(List<Workflowv3TaskEdit> tasks) {
    this.tasks = tasks;
    return this;
  }

  public Workflowv3UpdateTasksRequest addTasksItem(Workflowv3TaskEdit tasksItem) {
    if (this.tasks == null) {
      this.tasks = new ArrayList<>();
    }
    this.tasks.add(tasksItem);
    return this;
  }

   /**
   * Update multiple tasks in one request.
   * @return tasks
  **/
  @javax.annotation.Nullable
  public List<Workflowv3TaskEdit> getTasks() {
    return tasks;
  }

  public void setTasks(List<Workflowv3TaskEdit> tasks) {
    this.tasks = tasks;
  }


  public Workflowv3UpdateTasksRequest updateFields(List<String> updateFields) {
    this.updateFields = updateFields;
    return this;
  }

  public Workflowv3UpdateTasksRequest addUpdateFieldsItem(String updateFieldsItem) {
    if (this.updateFields == null) {
      this.updateFields = new ArrayList<>();
    }
    this.updateFields.add(updateFieldsItem);
    return this;
  }

   /**
   * Only update these fields in the backend records.
   * @return updateFields
  **/
  @javax.annotation.Nullable
  public List<String> getUpdateFields() {
    return updateFields;
  }

  public void setUpdateFields(List<String> updateFields) {
    this.updateFields = updateFields;
  }


  public Workflowv3UpdateTasksRequest workflowId(String workflowId) {
    this.workflowId = workflowId;
    return this;
  }

   /**
   * Get workflowId
   * @return workflowId
  **/
  @javax.annotation.Nullable
  public String getWorkflowId() {
    return workflowId;
  }

  public void setWorkflowId(String workflowId) {
    this.workflowId = workflowId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Workflowv3UpdateTasksRequest workflowv3UpdateTasksRequest = (Workflowv3UpdateTasksRequest) o;
    return Objects.equals(this.caseId, workflowv3UpdateTasksRequest.caseId) &&
        Objects.equals(this.tasks, workflowv3UpdateTasksRequest.tasks) &&
        Objects.equals(this.updateFields, workflowv3UpdateTasksRequest.updateFields) &&
        Objects.equals(this.workflowId, workflowv3UpdateTasksRequest.workflowId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caseId, tasks, updateFields, workflowId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Workflowv3UpdateTasksRequest {\n");
    sb.append("    caseId: ").append(toIndentedString(caseId)).append("\n");
    sb.append("    tasks: ").append(toIndentedString(tasks)).append("\n");
    sb.append("    updateFields: ").append(toIndentedString(updateFields)).append("\n");
    sb.append("    workflowId: ").append(toIndentedString(workflowId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("case_id");
    openapiFields.add("tasks");
    openapiFields.add("update_fields");
    openapiFields.add("workflow_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Workflowv3UpdateTasksRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Workflowv3UpdateTasksRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Workflowv3UpdateTasksRequest is not found in the empty JSON string", Workflowv3UpdateTasksRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Workflowv3UpdateTasksRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Workflowv3UpdateTasksRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("case_id") != null && !jsonObj.get("case_id").isJsonNull()) && !jsonObj.get("case_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `case_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("case_id").toString()));
      }
      if (jsonObj.get("tasks") != null && !jsonObj.get("tasks").isJsonNull()) {
        JsonArray jsonArraytasks = jsonObj.getAsJsonArray("tasks");
        if (jsonArraytasks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tasks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tasks` to be an array in the JSON string but got `%s`", jsonObj.get("tasks").toString()));
          }

          // validate the optional field `tasks` (array)
          for (int i = 0; i < jsonArraytasks.size(); i++) {
            Workflowv3TaskEdit.validateJsonElement(jsonArraytasks.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("update_fields") != null && !jsonObj.get("update_fields").isJsonNull() && !jsonObj.get("update_fields").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `update_fields` to be an array in the JSON string but got `%s`", jsonObj.get("update_fields").toString()));
      }
      if ((jsonObj.get("workflow_id") != null && !jsonObj.get("workflow_id").isJsonNull()) && !jsonObj.get("workflow_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workflow_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workflow_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Workflowv3UpdateTasksRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Workflowv3UpdateTasksRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Workflowv3UpdateTasksRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Workflowv3UpdateTasksRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<Workflowv3UpdateTasksRequest>() {
           @Override
           public void write(JsonWriter out, Workflowv3UpdateTasksRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Workflowv3UpdateTasksRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Workflowv3UpdateTasksRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Workflowv3UpdateTasksRequest
  * @throws IOException if the JSON string is invalid with respect to Workflowv3UpdateTasksRequest
  */
  public static Workflowv3UpdateTasksRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Workflowv3UpdateTasksRequest.class);
  }

 /**
  * Convert an instance of Workflowv3UpdateTasksRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

