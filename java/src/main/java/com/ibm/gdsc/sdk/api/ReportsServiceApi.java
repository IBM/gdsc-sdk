/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk.api;

import com.ibm.gdsc.sdk.ApiCallback;
import com.ibm.gdsc.sdk.ApiClient;
import com.ibm.gdsc.sdk.ApiException;
import com.ibm.gdsc.sdk.ApiResponse;
import com.ibm.gdsc.sdk.Configuration;
import com.ibm.gdsc.sdk.Pair;
import com.ibm.gdsc.sdk.ProgressRequestBody;
import com.ibm.gdsc.sdk.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ibm.gdsc.sdk.models.Reportsv3CreateCategoryRequest;
import com.ibm.gdsc.sdk.models.Reportsv3CreateCategoryResponse;
import com.ibm.gdsc.sdk.models.Reportsv3CreateChartRequest;
import com.ibm.gdsc.sdk.models.Reportsv3CreateChartResponse;
import com.ibm.gdsc.sdk.models.Reportsv3CreateChartTemplatev2Request;
import com.ibm.gdsc.sdk.models.Reportsv3CreateChartTemplatev2Response;
import com.ibm.gdsc.sdk.models.Reportsv3CreateChartv2Request;
import com.ibm.gdsc.sdk.models.Reportsv3CreateChartv2Response;
import com.ibm.gdsc.sdk.models.Reportsv3CreateFieldsByCategoryRequest;
import com.ibm.gdsc.sdk.models.Reportsv3CreateFieldsByCategoryResponse;
import com.ibm.gdsc.sdk.models.Reportsv3CreateJoinRequest;
import com.ibm.gdsc.sdk.models.Reportsv3CreateJoinResponse;
import com.ibm.gdsc.sdk.models.Reportsv3CreateReportRequest;
import com.ibm.gdsc.sdk.models.Reportsv3CreateReportResponse;
import com.ibm.gdsc.sdk.models.Reportsv3CreateVariantRequest;
import com.ibm.gdsc.sdk.models.Reportsv3CreateVariantResponse;
import com.ibm.gdsc.sdk.models.Reportsv3DeleteCategoryResponse;
import com.ibm.gdsc.sdk.models.Reportsv3DeleteChartResponse;
import com.ibm.gdsc.sdk.models.Reportsv3DeleteChartTemplatev2Response;
import com.ibm.gdsc.sdk.models.Reportsv3DeleteChartv2Response;
import com.ibm.gdsc.sdk.models.Reportsv3DeleteFieldsByCategoryResponse;
import com.ibm.gdsc.sdk.models.Reportsv3DeleteJoinResponse;
import com.ibm.gdsc.sdk.models.Reportsv3DeleteReportResponse;
import com.ibm.gdsc.sdk.models.Reportsv3DeleteVariantResponse;
import com.ibm.gdsc.sdk.models.Reportsv3GetCategoriesResponse;
import com.ibm.gdsc.sdk.models.Reportsv3GetChartSettingsResponse;
import com.ibm.gdsc.sdk.models.Reportsv3GetChartSettingsv2Response;
import com.ibm.gdsc.sdk.models.Reportsv3GetChartTemplatesv2Response;
import com.ibm.gdsc.sdk.models.Reportsv3GetFieldsByCategoriesResponse;
import com.ibm.gdsc.sdk.models.Reportsv3GetFieldsByCategoryResponse;
import com.ibm.gdsc.sdk.models.Reportsv3GetJoinsResponse;
import com.ibm.gdsc.sdk.models.Reportsv3GetQueryByReportDefinitionRequest;
import com.ibm.gdsc.sdk.models.Reportsv3GetQueryByReportIDRequest;
import com.ibm.gdsc.sdk.models.Reportsv3GetReportDefinitionResponse;
import com.ibm.gdsc.sdk.models.Reportsv3GetReportGroupsResponse;
import com.ibm.gdsc.sdk.models.Reportsv3GetReportQueryResponse;
import com.ibm.gdsc.sdk.models.Reportsv3GetReportSynopsisResponse;
import com.ibm.gdsc.sdk.models.Reportsv3GetReportTimestampHeaderResponse;
import com.ibm.gdsc.sdk.models.Reportsv3GetReportsForJoinResponse;
import com.ibm.gdsc.sdk.models.Reportsv3GetReportsResponse;
import com.ibm.gdsc.sdk.models.Reportsv3GetReportsTagsResponse;
import com.ibm.gdsc.sdk.models.Reportsv3GetVariantResponse;
import com.ibm.gdsc.sdk.models.Reportsv3GetVariantsResponse;
import com.ibm.gdsc.sdk.models.Reportsv3PartialChartUpdateRequest;
import com.ibm.gdsc.sdk.models.Reportsv3PartialChartUpdateResponse;
import com.ibm.gdsc.sdk.models.Reportsv3PartialReportUpdateRequest;
import com.ibm.gdsc.sdk.models.Reportsv3PartialReportUpdateResponse;
import com.ibm.gdsc.sdk.models.Reportsv3RunReportResponse;
import com.ibm.gdsc.sdk.models.Reportsv3RunVariantOperationRequest;
import com.ibm.gdsc.sdk.models.Reportsv3RunVariantOperationResponse;
import com.ibm.gdsc.sdk.models.Reportsv3TransposeRequest;
import com.ibm.gdsc.sdk.models.Reportsv3UpdateChartRequest;
import com.ibm.gdsc.sdk.models.Reportsv3UpdateChartResponse;
import com.ibm.gdsc.sdk.models.Reportsv3UpdateChartv2Request;
import com.ibm.gdsc.sdk.models.Reportsv3UpdateChartv2Response;
import com.ibm.gdsc.sdk.models.Reportsv3UpdateJoinRequest;
import com.ibm.gdsc.sdk.models.Reportsv3UpdateJoinResponse;
import com.ibm.gdsc.sdk.models.Reportsv3UpdateReportRequest;
import com.ibm.gdsc.sdk.models.Reportsv3UpdateReportResponse;
import com.ibm.gdsc.sdk.models.Reportsv3UpdateVariantOverrideRequest;
import com.ibm.gdsc.sdk.models.Reportsv3UpdateVariantOverrideResponse;
import com.ibm.gdsc.sdk.models.RuntimeError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReportsServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReportsServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReportsServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for reportsServiceCreateCategory
     * @param reportsv3CreateCategoryRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceCreateCategoryCall(Reportsv3CreateCategoryRequest reportsv3CreateCategoryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportsv3CreateCategoryRequest;

        // create path and map variables
        String localVarPath = "/api/v3/reports/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceCreateCategoryValidateBeforeCall(Reportsv3CreateCategoryRequest reportsv3CreateCategoryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportsv3CreateCategoryRequest' is set
        if (reportsv3CreateCategoryRequest == null) {
            throw new ApiException("Missing the required parameter 'reportsv3CreateCategoryRequest' when calling reportsServiceCreateCategory(Async)");
        }

        return reportsServiceCreateCategoryCall(reportsv3CreateCategoryRequest, _callback);

    }

    /**
     * Summary: Create a category Description: Create a report category
     * 
     * @param reportsv3CreateCategoryRequest  (required)
     * @return Reportsv3CreateCategoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3CreateCategoryResponse reportsServiceCreateCategory(Reportsv3CreateCategoryRequest reportsv3CreateCategoryRequest) throws ApiException {
        ApiResponse<Reportsv3CreateCategoryResponse> localVarResp = reportsServiceCreateCategoryWithHttpInfo(reportsv3CreateCategoryRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Create a category Description: Create a report category
     * 
     * @param reportsv3CreateCategoryRequest  (required)
     * @return ApiResponse&lt;Reportsv3CreateCategoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3CreateCategoryResponse> reportsServiceCreateCategoryWithHttpInfo(Reportsv3CreateCategoryRequest reportsv3CreateCategoryRequest) throws ApiException {
        okhttp3.Call localVarCall = reportsServiceCreateCategoryValidateBeforeCall(reportsv3CreateCategoryRequest, null);
        Type localVarReturnType = new TypeToken<Reportsv3CreateCategoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Create a category Description: Create a report category (asynchronously)
     * 
     * @param reportsv3CreateCategoryRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceCreateCategoryAsync(Reportsv3CreateCategoryRequest reportsv3CreateCategoryRequest, final ApiCallback<Reportsv3CreateCategoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceCreateCategoryValidateBeforeCall(reportsv3CreateCategoryRequest, _callback);
        Type localVarReturnType = new TypeToken<Reportsv3CreateCategoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServiceCreateChart
     * @param reportsv3CreateChartRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceCreateChartCall(Reportsv3CreateChartRequest reportsv3CreateChartRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportsv3CreateChartRequest;

        // create path and map variables
        String localVarPath = "/api/v3/charts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceCreateChartValidateBeforeCall(Reportsv3CreateChartRequest reportsv3CreateChartRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportsv3CreateChartRequest' is set
        if (reportsv3CreateChartRequest == null) {
            throw new ApiException("Missing the required parameter 'reportsv3CreateChartRequest' when calling reportsServiceCreateChart(Async)");
        }

        return reportsServiceCreateChartCall(reportsv3CreateChartRequest, _callback);

    }

    /**
     * Summary: Create chart Description: Create custom chart based on provided properties.
     * 
     * @param reportsv3CreateChartRequest  (required)
     * @return Reportsv3CreateChartResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3CreateChartResponse reportsServiceCreateChart(Reportsv3CreateChartRequest reportsv3CreateChartRequest) throws ApiException {
        ApiResponse<Reportsv3CreateChartResponse> localVarResp = reportsServiceCreateChartWithHttpInfo(reportsv3CreateChartRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Create chart Description: Create custom chart based on provided properties.
     * 
     * @param reportsv3CreateChartRequest  (required)
     * @return ApiResponse&lt;Reportsv3CreateChartResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3CreateChartResponse> reportsServiceCreateChartWithHttpInfo(Reportsv3CreateChartRequest reportsv3CreateChartRequest) throws ApiException {
        okhttp3.Call localVarCall = reportsServiceCreateChartValidateBeforeCall(reportsv3CreateChartRequest, null);
        Type localVarReturnType = new TypeToken<Reportsv3CreateChartResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Create chart Description: Create custom chart based on provided properties. (asynchronously)
     * 
     * @param reportsv3CreateChartRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceCreateChartAsync(Reportsv3CreateChartRequest reportsv3CreateChartRequest, final ApiCallback<Reportsv3CreateChartResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceCreateChartValidateBeforeCall(reportsv3CreateChartRequest, _callback);
        Type localVarReturnType = new TypeToken<Reportsv3CreateChartResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServiceCreateChartTemplatev2
     * @param reportsv3CreateChartTemplatev2Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceCreateChartTemplatev2Call(Reportsv3CreateChartTemplatev2Request reportsv3CreateChartTemplatev2Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportsv3CreateChartTemplatev2Request;

        // create path and map variables
        String localVarPath = "/api/v3/flex-charts/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceCreateChartTemplatev2ValidateBeforeCall(Reportsv3CreateChartTemplatev2Request reportsv3CreateChartTemplatev2Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportsv3CreateChartTemplatev2Request' is set
        if (reportsv3CreateChartTemplatev2Request == null) {
            throw new ApiException("Missing the required parameter 'reportsv3CreateChartTemplatev2Request' when calling reportsServiceCreateChartTemplatev2(Async)");
        }

        return reportsServiceCreateChartTemplatev2Call(reportsv3CreateChartTemplatev2Request, _callback);

    }

    /**
     * Summary: Create chart template v2 Description: Create custom VEGA chart template.
     * 
     * @param reportsv3CreateChartTemplatev2Request  (required)
     * @return Reportsv3CreateChartTemplatev2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3CreateChartTemplatev2Response reportsServiceCreateChartTemplatev2(Reportsv3CreateChartTemplatev2Request reportsv3CreateChartTemplatev2Request) throws ApiException {
        ApiResponse<Reportsv3CreateChartTemplatev2Response> localVarResp = reportsServiceCreateChartTemplatev2WithHttpInfo(reportsv3CreateChartTemplatev2Request);
        return localVarResp.getData();
    }

    /**
     * Summary: Create chart template v2 Description: Create custom VEGA chart template.
     * 
     * @param reportsv3CreateChartTemplatev2Request  (required)
     * @return ApiResponse&lt;Reportsv3CreateChartTemplatev2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3CreateChartTemplatev2Response> reportsServiceCreateChartTemplatev2WithHttpInfo(Reportsv3CreateChartTemplatev2Request reportsv3CreateChartTemplatev2Request) throws ApiException {
        okhttp3.Call localVarCall = reportsServiceCreateChartTemplatev2ValidateBeforeCall(reportsv3CreateChartTemplatev2Request, null);
        Type localVarReturnType = new TypeToken<Reportsv3CreateChartTemplatev2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Create chart template v2 Description: Create custom VEGA chart template. (asynchronously)
     * 
     * @param reportsv3CreateChartTemplatev2Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceCreateChartTemplatev2Async(Reportsv3CreateChartTemplatev2Request reportsv3CreateChartTemplatev2Request, final ApiCallback<Reportsv3CreateChartTemplatev2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceCreateChartTemplatev2ValidateBeforeCall(reportsv3CreateChartTemplatev2Request, _callback);
        Type localVarReturnType = new TypeToken<Reportsv3CreateChartTemplatev2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServiceCreateChartv2
     * @param reportsv3CreateChartv2Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceCreateChartv2Call(Reportsv3CreateChartv2Request reportsv3CreateChartv2Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportsv3CreateChartv2Request;

        // create path and map variables
        String localVarPath = "/api/v3/flex-charts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceCreateChartv2ValidateBeforeCall(Reportsv3CreateChartv2Request reportsv3CreateChartv2Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportsv3CreateChartv2Request' is set
        if (reportsv3CreateChartv2Request == null) {
            throw new ApiException("Missing the required parameter 'reportsv3CreateChartv2Request' when calling reportsServiceCreateChartv2(Async)");
        }

        return reportsServiceCreateChartv2Call(reportsv3CreateChartv2Request, _callback);

    }

    /**
     * Summary: Create chart v2 Description: Create custom VEGA chart based on provided properties.
     * 
     * @param reportsv3CreateChartv2Request  (required)
     * @return Reportsv3CreateChartv2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3CreateChartv2Response reportsServiceCreateChartv2(Reportsv3CreateChartv2Request reportsv3CreateChartv2Request) throws ApiException {
        ApiResponse<Reportsv3CreateChartv2Response> localVarResp = reportsServiceCreateChartv2WithHttpInfo(reportsv3CreateChartv2Request);
        return localVarResp.getData();
    }

    /**
     * Summary: Create chart v2 Description: Create custom VEGA chart based on provided properties.
     * 
     * @param reportsv3CreateChartv2Request  (required)
     * @return ApiResponse&lt;Reportsv3CreateChartv2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3CreateChartv2Response> reportsServiceCreateChartv2WithHttpInfo(Reportsv3CreateChartv2Request reportsv3CreateChartv2Request) throws ApiException {
        okhttp3.Call localVarCall = reportsServiceCreateChartv2ValidateBeforeCall(reportsv3CreateChartv2Request, null);
        Type localVarReturnType = new TypeToken<Reportsv3CreateChartv2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Create chart v2 Description: Create custom VEGA chart based on provided properties. (asynchronously)
     * 
     * @param reportsv3CreateChartv2Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceCreateChartv2Async(Reportsv3CreateChartv2Request reportsv3CreateChartv2Request, final ApiCallback<Reportsv3CreateChartv2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceCreateChartv2ValidateBeforeCall(reportsv3CreateChartv2Request, _callback);
        Type localVarReturnType = new TypeToken<Reportsv3CreateChartv2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServiceCreateFieldsByCategory
     * @param reportsv3CreateFieldsByCategoryRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceCreateFieldsByCategoryCall(Reportsv3CreateFieldsByCategoryRequest reportsv3CreateFieldsByCategoryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportsv3CreateFieldsByCategoryRequest;

        // create path and map variables
        String localVarPath = "/api/v3/reports/fields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceCreateFieldsByCategoryValidateBeforeCall(Reportsv3CreateFieldsByCategoryRequest reportsv3CreateFieldsByCategoryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportsv3CreateFieldsByCategoryRequest' is set
        if (reportsv3CreateFieldsByCategoryRequest == null) {
            throw new ApiException("Missing the required parameter 'reportsv3CreateFieldsByCategoryRequest' when calling reportsServiceCreateFieldsByCategory(Async)");
        }

        return reportsServiceCreateFieldsByCategoryCall(reportsv3CreateFieldsByCategoryRequest, _callback);

    }

    /**
     * Summary - Create fields by category Description: Cteate category fields based on provided properties.
     * 
     * @param reportsv3CreateFieldsByCategoryRequest  (required)
     * @return Reportsv3CreateFieldsByCategoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3CreateFieldsByCategoryResponse reportsServiceCreateFieldsByCategory(Reportsv3CreateFieldsByCategoryRequest reportsv3CreateFieldsByCategoryRequest) throws ApiException {
        ApiResponse<Reportsv3CreateFieldsByCategoryResponse> localVarResp = reportsServiceCreateFieldsByCategoryWithHttpInfo(reportsv3CreateFieldsByCategoryRequest);
        return localVarResp.getData();
    }

    /**
     * Summary - Create fields by category Description: Cteate category fields based on provided properties.
     * 
     * @param reportsv3CreateFieldsByCategoryRequest  (required)
     * @return ApiResponse&lt;Reportsv3CreateFieldsByCategoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3CreateFieldsByCategoryResponse> reportsServiceCreateFieldsByCategoryWithHttpInfo(Reportsv3CreateFieldsByCategoryRequest reportsv3CreateFieldsByCategoryRequest) throws ApiException {
        okhttp3.Call localVarCall = reportsServiceCreateFieldsByCategoryValidateBeforeCall(reportsv3CreateFieldsByCategoryRequest, null);
        Type localVarReturnType = new TypeToken<Reportsv3CreateFieldsByCategoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary - Create fields by category Description: Cteate category fields based on provided properties. (asynchronously)
     * 
     * @param reportsv3CreateFieldsByCategoryRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceCreateFieldsByCategoryAsync(Reportsv3CreateFieldsByCategoryRequest reportsv3CreateFieldsByCategoryRequest, final ApiCallback<Reportsv3CreateFieldsByCategoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceCreateFieldsByCategoryValidateBeforeCall(reportsv3CreateFieldsByCategoryRequest, _callback);
        Type localVarReturnType = new TypeToken<Reportsv3CreateFieldsByCategoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServiceCreateJoin
     * @param reportsv3CreateJoinRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceCreateJoinCall(Reportsv3CreateJoinRequest reportsv3CreateJoinRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportsv3CreateJoinRequest;

        // create path and map variables
        String localVarPath = "/api/v3/reports/categories/joins";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceCreateJoinValidateBeforeCall(Reportsv3CreateJoinRequest reportsv3CreateJoinRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportsv3CreateJoinRequest' is set
        if (reportsv3CreateJoinRequest == null) {
            throw new ApiException("Missing the required parameter 'reportsv3CreateJoinRequest' when calling reportsServiceCreateJoin(Async)");
        }

        return reportsServiceCreateJoinCall(reportsv3CreateJoinRequest, _callback);

    }

    /**
     * Summary: Create a join Description: Create a custom report join
     * 
     * @param reportsv3CreateJoinRequest  (required)
     * @return Reportsv3CreateJoinResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3CreateJoinResponse reportsServiceCreateJoin(Reportsv3CreateJoinRequest reportsv3CreateJoinRequest) throws ApiException {
        ApiResponse<Reportsv3CreateJoinResponse> localVarResp = reportsServiceCreateJoinWithHttpInfo(reportsv3CreateJoinRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Create a join Description: Create a custom report join
     * 
     * @param reportsv3CreateJoinRequest  (required)
     * @return ApiResponse&lt;Reportsv3CreateJoinResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3CreateJoinResponse> reportsServiceCreateJoinWithHttpInfo(Reportsv3CreateJoinRequest reportsv3CreateJoinRequest) throws ApiException {
        okhttp3.Call localVarCall = reportsServiceCreateJoinValidateBeforeCall(reportsv3CreateJoinRequest, null);
        Type localVarReturnType = new TypeToken<Reportsv3CreateJoinResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Create a join Description: Create a custom report join (asynchronously)
     * 
     * @param reportsv3CreateJoinRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceCreateJoinAsync(Reportsv3CreateJoinRequest reportsv3CreateJoinRequest, final ApiCallback<Reportsv3CreateJoinResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceCreateJoinValidateBeforeCall(reportsv3CreateJoinRequest, _callback);
        Type localVarReturnType = new TypeToken<Reportsv3CreateJoinResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServiceCreateReport
     * @param reportsv3CreateReportRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceCreateReportCall(Reportsv3CreateReportRequest reportsv3CreateReportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportsv3CreateReportRequest;

        // create path and map variables
        String localVarPath = "/api/v3/reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceCreateReportValidateBeforeCall(Reportsv3CreateReportRequest reportsv3CreateReportRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportsv3CreateReportRequest' is set
        if (reportsv3CreateReportRequest == null) {
            throw new ApiException("Missing the required parameter 'reportsv3CreateReportRequest' when calling reportsServiceCreateReport(Async)");
        }

        return reportsServiceCreateReportCall(reportsv3CreateReportRequest, _callback);

    }

    /**
     * Summary: Create report Description: Create custom report based on provided properties.
     * 
     * @param reportsv3CreateReportRequest  (required)
     * @return Reportsv3CreateReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3CreateReportResponse reportsServiceCreateReport(Reportsv3CreateReportRequest reportsv3CreateReportRequest) throws ApiException {
        ApiResponse<Reportsv3CreateReportResponse> localVarResp = reportsServiceCreateReportWithHttpInfo(reportsv3CreateReportRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Create report Description: Create custom report based on provided properties.
     * 
     * @param reportsv3CreateReportRequest  (required)
     * @return ApiResponse&lt;Reportsv3CreateReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3CreateReportResponse> reportsServiceCreateReportWithHttpInfo(Reportsv3CreateReportRequest reportsv3CreateReportRequest) throws ApiException {
        okhttp3.Call localVarCall = reportsServiceCreateReportValidateBeforeCall(reportsv3CreateReportRequest, null);
        Type localVarReturnType = new TypeToken<Reportsv3CreateReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Create report Description: Create custom report based on provided properties. (asynchronously)
     * 
     * @param reportsv3CreateReportRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceCreateReportAsync(Reportsv3CreateReportRequest reportsv3CreateReportRequest, final ApiCallback<Reportsv3CreateReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceCreateReportValidateBeforeCall(reportsv3CreateReportRequest, _callback);
        Type localVarReturnType = new TypeToken<Reportsv3CreateReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServiceCreateVariant
     * @param reportsv3CreateVariantRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceCreateVariantCall(Reportsv3CreateVariantRequest reportsv3CreateVariantRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportsv3CreateVariantRequest;

        // create path and map variables
        String localVarPath = "/api/v3/reports/variants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceCreateVariantValidateBeforeCall(Reportsv3CreateVariantRequest reportsv3CreateVariantRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportsv3CreateVariantRequest' is set
        if (reportsv3CreateVariantRequest == null) {
            throw new ApiException("Missing the required parameter 'reportsv3CreateVariantRequest' when calling reportsServiceCreateVariant(Async)");
        }

        return reportsServiceCreateVariantCall(reportsv3CreateVariantRequest, _callback);

    }

    /**
     * Summary: Create a variant Description: Create a variant for reports
     * 
     * @param reportsv3CreateVariantRequest  (required)
     * @return Reportsv3CreateVariantResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3CreateVariantResponse reportsServiceCreateVariant(Reportsv3CreateVariantRequest reportsv3CreateVariantRequest) throws ApiException {
        ApiResponse<Reportsv3CreateVariantResponse> localVarResp = reportsServiceCreateVariantWithHttpInfo(reportsv3CreateVariantRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Create a variant Description: Create a variant for reports
     * 
     * @param reportsv3CreateVariantRequest  (required)
     * @return ApiResponse&lt;Reportsv3CreateVariantResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3CreateVariantResponse> reportsServiceCreateVariantWithHttpInfo(Reportsv3CreateVariantRequest reportsv3CreateVariantRequest) throws ApiException {
        okhttp3.Call localVarCall = reportsServiceCreateVariantValidateBeforeCall(reportsv3CreateVariantRequest, null);
        Type localVarReturnType = new TypeToken<Reportsv3CreateVariantResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Create a variant Description: Create a variant for reports (asynchronously)
     * 
     * @param reportsv3CreateVariantRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceCreateVariantAsync(Reportsv3CreateVariantRequest reportsv3CreateVariantRequest, final ApiCallback<Reportsv3CreateVariantResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceCreateVariantValidateBeforeCall(reportsv3CreateVariantRequest, _callback);
        Type localVarReturnType = new TypeToken<Reportsv3CreateVariantResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServiceDeleteCategory
     * @param categoryId category id. (optional)
     * @param tableName table name. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceDeleteCategoryCall(String categoryId, String tableName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/reports/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (categoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category_id", categoryId));
        }

        if (tableName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("table_name", tableName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceDeleteCategoryValidateBeforeCall(String categoryId, String tableName, final ApiCallback _callback) throws ApiException {
        return reportsServiceDeleteCategoryCall(categoryId, tableName, _callback);

    }

    /**
     * Summary: Delete a category Description: Delete a report category
     * 
     * @param categoryId category id. (optional)
     * @param tableName table name. (optional)
     * @return Reportsv3DeleteCategoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3DeleteCategoryResponse reportsServiceDeleteCategory(String categoryId, String tableName) throws ApiException {
        ApiResponse<Reportsv3DeleteCategoryResponse> localVarResp = reportsServiceDeleteCategoryWithHttpInfo(categoryId, tableName);
        return localVarResp.getData();
    }

    /**
     * Summary: Delete a category Description: Delete a report category
     * 
     * @param categoryId category id. (optional)
     * @param tableName table name. (optional)
     * @return ApiResponse&lt;Reportsv3DeleteCategoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3DeleteCategoryResponse> reportsServiceDeleteCategoryWithHttpInfo(String categoryId, String tableName) throws ApiException {
        okhttp3.Call localVarCall = reportsServiceDeleteCategoryValidateBeforeCall(categoryId, tableName, null);
        Type localVarReturnType = new TypeToken<Reportsv3DeleteCategoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Delete a category Description: Delete a report category (asynchronously)
     * 
     * @param categoryId category id. (optional)
     * @param tableName table name. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceDeleteCategoryAsync(String categoryId, String tableName, final ApiCallback<Reportsv3DeleteCategoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceDeleteCategoryValidateBeforeCall(categoryId, tableName, _callback);
        Type localVarReturnType = new TypeToken<Reportsv3DeleteCategoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServiceDeleteChart
     * @param chartId The id of the chart to be deleted. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceDeleteChartCall(String chartId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/charts/{chart_id}"
            .replace("{" + "chart_id" + "}", localVarApiClient.escapeString(chartId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceDeleteChartValidateBeforeCall(String chartId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chartId' is set
        if (chartId == null) {
            throw new ApiException("Missing the required parameter 'chartId' when calling reportsServiceDeleteChart(Async)");
        }

        return reportsServiceDeleteChartCall(chartId, _callback);

    }

    /**
     * Summary: Delete chart Description: Delete a custom chart.
     * 
     * @param chartId The id of the chart to be deleted. (required)
     * @return Reportsv3DeleteChartResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3DeleteChartResponse reportsServiceDeleteChart(String chartId) throws ApiException {
        ApiResponse<Reportsv3DeleteChartResponse> localVarResp = reportsServiceDeleteChartWithHttpInfo(chartId);
        return localVarResp.getData();
    }

    /**
     * Summary: Delete chart Description: Delete a custom chart.
     * 
     * @param chartId The id of the chart to be deleted. (required)
     * @return ApiResponse&lt;Reportsv3DeleteChartResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3DeleteChartResponse> reportsServiceDeleteChartWithHttpInfo(String chartId) throws ApiException {
        okhttp3.Call localVarCall = reportsServiceDeleteChartValidateBeforeCall(chartId, null);
        Type localVarReturnType = new TypeToken<Reportsv3DeleteChartResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Delete chart Description: Delete a custom chart. (asynchronously)
     * 
     * @param chartId The id of the chart to be deleted. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceDeleteChartAsync(String chartId, final ApiCallback<Reportsv3DeleteChartResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceDeleteChartValidateBeforeCall(chartId, _callback);
        Type localVarReturnType = new TypeToken<Reportsv3DeleteChartResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServiceDeleteChartTemplatev2
     * @param templateId Unique template ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceDeleteChartTemplatev2Call(String templateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/flex-charts/templates/{template_id}"
            .replace("{" + "template_id" + "}", localVarApiClient.escapeString(templateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceDeleteChartTemplatev2ValidateBeforeCall(String templateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'templateId' is set
        if (templateId == null) {
            throw new ApiException("Missing the required parameter 'templateId' when calling reportsServiceDeleteChartTemplatev2(Async)");
        }

        return reportsServiceDeleteChartTemplatev2Call(templateId, _callback);

    }

    /**
     * Summary: Delete chart template v2 Description: Delete a custom VEGA chart template.
     * 
     * @param templateId Unique template ID. (required)
     * @return Reportsv3DeleteChartTemplatev2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3DeleteChartTemplatev2Response reportsServiceDeleteChartTemplatev2(String templateId) throws ApiException {
        ApiResponse<Reportsv3DeleteChartTemplatev2Response> localVarResp = reportsServiceDeleteChartTemplatev2WithHttpInfo(templateId);
        return localVarResp.getData();
    }

    /**
     * Summary: Delete chart template v2 Description: Delete a custom VEGA chart template.
     * 
     * @param templateId Unique template ID. (required)
     * @return ApiResponse&lt;Reportsv3DeleteChartTemplatev2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3DeleteChartTemplatev2Response> reportsServiceDeleteChartTemplatev2WithHttpInfo(String templateId) throws ApiException {
        okhttp3.Call localVarCall = reportsServiceDeleteChartTemplatev2ValidateBeforeCall(templateId, null);
        Type localVarReturnType = new TypeToken<Reportsv3DeleteChartTemplatev2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Delete chart template v2 Description: Delete a custom VEGA chart template. (asynchronously)
     * 
     * @param templateId Unique template ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceDeleteChartTemplatev2Async(String templateId, final ApiCallback<Reportsv3DeleteChartTemplatev2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceDeleteChartTemplatev2ValidateBeforeCall(templateId, _callback);
        Type localVarReturnType = new TypeToken<Reportsv3DeleteChartTemplatev2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServiceDeleteChartv2
     * @param chartId The ID of the chart for deletion. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceDeleteChartv2Call(String chartId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/flex-charts/{chart_id}"
            .replace("{" + "chart_id" + "}", localVarApiClient.escapeString(chartId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceDeleteChartv2ValidateBeforeCall(String chartId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chartId' is set
        if (chartId == null) {
            throw new ApiException("Missing the required parameter 'chartId' when calling reportsServiceDeleteChartv2(Async)");
        }

        return reportsServiceDeleteChartv2Call(chartId, _callback);

    }

    /**
     * Summary: Delete chart v2 Description: Delete a custom VEGA chart.
     * 
     * @param chartId The ID of the chart for deletion. (required)
     * @return Reportsv3DeleteChartv2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3DeleteChartv2Response reportsServiceDeleteChartv2(String chartId) throws ApiException {
        ApiResponse<Reportsv3DeleteChartv2Response> localVarResp = reportsServiceDeleteChartv2WithHttpInfo(chartId);
        return localVarResp.getData();
    }

    /**
     * Summary: Delete chart v2 Description: Delete a custom VEGA chart.
     * 
     * @param chartId The ID of the chart for deletion. (required)
     * @return ApiResponse&lt;Reportsv3DeleteChartv2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3DeleteChartv2Response> reportsServiceDeleteChartv2WithHttpInfo(String chartId) throws ApiException {
        okhttp3.Call localVarCall = reportsServiceDeleteChartv2ValidateBeforeCall(chartId, null);
        Type localVarReturnType = new TypeToken<Reportsv3DeleteChartv2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Delete chart v2 Description: Delete a custom VEGA chart. (asynchronously)
     * 
     * @param chartId The ID of the chart for deletion. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceDeleteChartv2Async(String chartId, final ApiCallback<Reportsv3DeleteChartv2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceDeleteChartv2ValidateBeforeCall(chartId, _callback);
        Type localVarReturnType = new TypeToken<Reportsv3DeleteChartv2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServiceDeleteFieldsByCategory
     * @param headerIds Header ids. (optional)
     * @param tableName table name. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceDeleteFieldsByCategoryCall(List<String> headerIds, String tableName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/reports/fields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (headerIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "header_ids", headerIds));
        }

        if (tableName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("table_name", tableName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceDeleteFieldsByCategoryValidateBeforeCall(List<String> headerIds, String tableName, final ApiCallback _callback) throws ApiException {
        return reportsServiceDeleteFieldsByCategoryCall(headerIds, tableName, _callback);

    }

    /**
     * Summary - Delete fields by category Description: Delete category fields based on provided properties.
     * 
     * @param headerIds Header ids. (optional)
     * @param tableName table name. (optional)
     * @return Reportsv3DeleteFieldsByCategoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3DeleteFieldsByCategoryResponse reportsServiceDeleteFieldsByCategory(List<String> headerIds, String tableName) throws ApiException {
        ApiResponse<Reportsv3DeleteFieldsByCategoryResponse> localVarResp = reportsServiceDeleteFieldsByCategoryWithHttpInfo(headerIds, tableName);
        return localVarResp.getData();
    }

    /**
     * Summary - Delete fields by category Description: Delete category fields based on provided properties.
     * 
     * @param headerIds Header ids. (optional)
     * @param tableName table name. (optional)
     * @return ApiResponse&lt;Reportsv3DeleteFieldsByCategoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3DeleteFieldsByCategoryResponse> reportsServiceDeleteFieldsByCategoryWithHttpInfo(List<String> headerIds, String tableName) throws ApiException {
        okhttp3.Call localVarCall = reportsServiceDeleteFieldsByCategoryValidateBeforeCall(headerIds, tableName, null);
        Type localVarReturnType = new TypeToken<Reportsv3DeleteFieldsByCategoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary - Delete fields by category Description: Delete category fields based on provided properties. (asynchronously)
     * 
     * @param headerIds Header ids. (optional)
     * @param tableName table name. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceDeleteFieldsByCategoryAsync(List<String> headerIds, String tableName, final ApiCallback<Reportsv3DeleteFieldsByCategoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceDeleteFieldsByCategoryValidateBeforeCall(headerIds, tableName, _callback);
        Type localVarReturnType = new TypeToken<Reportsv3DeleteFieldsByCategoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServiceDeleteJoin
     * @param joinId The id of the join to be deleted. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceDeleteJoinCall(String joinId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/reports/categories/joins/{join_id}"
            .replace("{" + "join_id" + "}", localVarApiClient.escapeString(joinId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceDeleteJoinValidateBeforeCall(String joinId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'joinId' is set
        if (joinId == null) {
            throw new ApiException("Missing the required parameter 'joinId' when calling reportsServiceDeleteJoin(Async)");
        }

        return reportsServiceDeleteJoinCall(joinId, _callback);

    }

    /**
     * Summary: Delete a join Description: Delete a custom join
     * 
     * @param joinId The id of the join to be deleted. (required)
     * @return Reportsv3DeleteJoinResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3DeleteJoinResponse reportsServiceDeleteJoin(String joinId) throws ApiException {
        ApiResponse<Reportsv3DeleteJoinResponse> localVarResp = reportsServiceDeleteJoinWithHttpInfo(joinId);
        return localVarResp.getData();
    }

    /**
     * Summary: Delete a join Description: Delete a custom join
     * 
     * @param joinId The id of the join to be deleted. (required)
     * @return ApiResponse&lt;Reportsv3DeleteJoinResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3DeleteJoinResponse> reportsServiceDeleteJoinWithHttpInfo(String joinId) throws ApiException {
        okhttp3.Call localVarCall = reportsServiceDeleteJoinValidateBeforeCall(joinId, null);
        Type localVarReturnType = new TypeToken<Reportsv3DeleteJoinResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Delete a join Description: Delete a custom join (asynchronously)
     * 
     * @param joinId The id of the join to be deleted. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceDeleteJoinAsync(String joinId, final ApiCallback<Reportsv3DeleteJoinResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceDeleteJoinValidateBeforeCall(joinId, _callback);
        Type localVarReturnType = new TypeToken<Reportsv3DeleteJoinResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServiceDeleteReport
     * @param reportId The id of the Report to be deleted. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceDeleteReportCall(String reportId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/reports/{report_id}"
            .replace("{" + "report_id" + "}", localVarApiClient.escapeString(reportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceDeleteReportValidateBeforeCall(String reportId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling reportsServiceDeleteReport(Async)");
        }

        return reportsServiceDeleteReportCall(reportId, _callback);

    }

    /**
     * Summary: Delete report Description: Delete a custom report.
     * 
     * @param reportId The id of the Report to be deleted. (required)
     * @return Reportsv3DeleteReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3DeleteReportResponse reportsServiceDeleteReport(String reportId) throws ApiException {
        ApiResponse<Reportsv3DeleteReportResponse> localVarResp = reportsServiceDeleteReportWithHttpInfo(reportId);
        return localVarResp.getData();
    }

    /**
     * Summary: Delete report Description: Delete a custom report.
     * 
     * @param reportId The id of the Report to be deleted. (required)
     * @return ApiResponse&lt;Reportsv3DeleteReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3DeleteReportResponse> reportsServiceDeleteReportWithHttpInfo(String reportId) throws ApiException {
        okhttp3.Call localVarCall = reportsServiceDeleteReportValidateBeforeCall(reportId, null);
        Type localVarReturnType = new TypeToken<Reportsv3DeleteReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Delete report Description: Delete a custom report. (asynchronously)
     * 
     * @param reportId The id of the Report to be deleted. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceDeleteReportAsync(String reportId, final ApiCallback<Reportsv3DeleteReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceDeleteReportValidateBeforeCall(reportId, _callback);
        Type localVarReturnType = new TypeToken<Reportsv3DeleteReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServiceDeleteVariant
     * @param variantId The id of the variant to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceDeleteVariantCall(String variantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/reports/variants/{variant_id}"
            .replace("{" + "variant_id" + "}", localVarApiClient.escapeString(variantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceDeleteVariantValidateBeforeCall(String variantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'variantId' is set
        if (variantId == null) {
            throw new ApiException("Missing the required parameter 'variantId' when calling reportsServiceDeleteVariant(Async)");
        }

        return reportsServiceDeleteVariantCall(variantId, _callback);

    }

    /**
     * Summary: Delete a variant Description: Delete a variant
     * 
     * @param variantId The id of the variant to delete (required)
     * @return Reportsv3DeleteVariantResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3DeleteVariantResponse reportsServiceDeleteVariant(String variantId) throws ApiException {
        ApiResponse<Reportsv3DeleteVariantResponse> localVarResp = reportsServiceDeleteVariantWithHttpInfo(variantId);
        return localVarResp.getData();
    }

    /**
     * Summary: Delete a variant Description: Delete a variant
     * 
     * @param variantId The id of the variant to delete (required)
     * @return ApiResponse&lt;Reportsv3DeleteVariantResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3DeleteVariantResponse> reportsServiceDeleteVariantWithHttpInfo(String variantId) throws ApiException {
        okhttp3.Call localVarCall = reportsServiceDeleteVariantValidateBeforeCall(variantId, null);
        Type localVarReturnType = new TypeToken<Reportsv3DeleteVariantResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Delete a variant Description: Delete a variant (asynchronously)
     * 
     * @param variantId The id of the variant to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceDeleteVariantAsync(String variantId, final ApiCallback<Reportsv3DeleteVariantResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceDeleteVariantValidateBeforeCall(variantId, _callback);
        Type localVarReturnType = new TypeToken<Reportsv3DeleteVariantResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServiceGetCategories
     * @param reportId Report ID. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceGetCategoriesCall(String reportId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/reports/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reportId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("report_id", reportId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceGetCategoriesValidateBeforeCall(String reportId, final ApiCallback _callback) throws ApiException {
        return reportsServiceGetCategoriesCall(reportId, _callback);

    }

    /**
     * Summary:  Get all available report categories. Description: Get all category related fields or all possible fields.
     * 
     * @param reportId Report ID. (optional)
     * @return Reportsv3GetCategoriesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3GetCategoriesResponse reportsServiceGetCategories(String reportId) throws ApiException {
        ApiResponse<Reportsv3GetCategoriesResponse> localVarResp = reportsServiceGetCategoriesWithHttpInfo(reportId);
        return localVarResp.getData();
    }

    /**
     * Summary:  Get all available report categories. Description: Get all category related fields or all possible fields.
     * 
     * @param reportId Report ID. (optional)
     * @return ApiResponse&lt;Reportsv3GetCategoriesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3GetCategoriesResponse> reportsServiceGetCategoriesWithHttpInfo(String reportId) throws ApiException {
        okhttp3.Call localVarCall = reportsServiceGetCategoriesValidateBeforeCall(reportId, null);
        Type localVarReturnType = new TypeToken<Reportsv3GetCategoriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary:  Get all available report categories. Description: Get all category related fields or all possible fields. (asynchronously)
     * 
     * @param reportId Report ID. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceGetCategoriesAsync(String reportId, final ApiCallback<Reportsv3GetCategoriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceGetCategoriesValidateBeforeCall(reportId, _callback);
        Type localVarReturnType = new TypeToken<Reportsv3GetCategoriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServiceGetChartSettings
     * @param chartId Unique Chart ID. (optional)
     * @param reportId Unique Report ID. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceGetChartSettingsCall(String chartId, String reportId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/charts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (chartId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chart_id", chartId));
        }

        if (reportId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("report_id", reportId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceGetChartSettingsValidateBeforeCall(String chartId, String reportId, final ApiCallback _callback) throws ApiException {
        return reportsServiceGetChartSettingsCall(chartId, reportId, _callback);

    }

    /**
     * Summary: Get chart settings Description: Get a custom chart based on provided report id.
     * 
     * @param chartId Unique Chart ID. (optional)
     * @param reportId Unique Report ID. (optional)
     * @return Reportsv3GetChartSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3GetChartSettingsResponse reportsServiceGetChartSettings(String chartId, String reportId) throws ApiException {
        ApiResponse<Reportsv3GetChartSettingsResponse> localVarResp = reportsServiceGetChartSettingsWithHttpInfo(chartId, reportId);
        return localVarResp.getData();
    }

    /**
     * Summary: Get chart settings Description: Get a custom chart based on provided report id.
     * 
     * @param chartId Unique Chart ID. (optional)
     * @param reportId Unique Report ID. (optional)
     * @return ApiResponse&lt;Reportsv3GetChartSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3GetChartSettingsResponse> reportsServiceGetChartSettingsWithHttpInfo(String chartId, String reportId) throws ApiException {
        okhttp3.Call localVarCall = reportsServiceGetChartSettingsValidateBeforeCall(chartId, reportId, null);
        Type localVarReturnType = new TypeToken<Reportsv3GetChartSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get chart settings Description: Get a custom chart based on provided report id. (asynchronously)
     * 
     * @param chartId Unique Chart ID. (optional)
     * @param reportId Unique Report ID. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceGetChartSettingsAsync(String chartId, String reportId, final ApiCallback<Reportsv3GetChartSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceGetChartSettingsValidateBeforeCall(chartId, reportId, _callback);
        Type localVarReturnType = new TypeToken<Reportsv3GetChartSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServiceGetChartSettingsv2
     * @param chartId Unique Chart ID. (optional)
     * @param reportId Unique Report ID. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceGetChartSettingsv2Call(String chartId, String reportId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/flex-charts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (chartId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chart_id", chartId));
        }

        if (reportId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("report_id", reportId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceGetChartSettingsv2ValidateBeforeCall(String chartId, String reportId, final ApiCallback _callback) throws ApiException {
        return reportsServiceGetChartSettingsv2Call(chartId, reportId, _callback);

    }

    /**
     * Summary: Get chart settings v2 Description: Get a custom VEGA chart based on provided report id.
     * 
     * @param chartId Unique Chart ID. (optional)
     * @param reportId Unique Report ID. (optional)
     * @return Reportsv3GetChartSettingsv2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3GetChartSettingsv2Response reportsServiceGetChartSettingsv2(String chartId, String reportId) throws ApiException {
        ApiResponse<Reportsv3GetChartSettingsv2Response> localVarResp = reportsServiceGetChartSettingsv2WithHttpInfo(chartId, reportId);
        return localVarResp.getData();
    }

    /**
     * Summary: Get chart settings v2 Description: Get a custom VEGA chart based on provided report id.
     * 
     * @param chartId Unique Chart ID. (optional)
     * @param reportId Unique Report ID. (optional)
     * @return ApiResponse&lt;Reportsv3GetChartSettingsv2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3GetChartSettingsv2Response> reportsServiceGetChartSettingsv2WithHttpInfo(String chartId, String reportId) throws ApiException {
        okhttp3.Call localVarCall = reportsServiceGetChartSettingsv2ValidateBeforeCall(chartId, reportId, null);
        Type localVarReturnType = new TypeToken<Reportsv3GetChartSettingsv2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get chart settings v2 Description: Get a custom VEGA chart based on provided report id. (asynchronously)
     * 
     * @param chartId Unique Chart ID. (optional)
     * @param reportId Unique Report ID. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceGetChartSettingsv2Async(String chartId, String reportId, final ApiCallback<Reportsv3GetChartSettingsv2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceGetChartSettingsv2ValidateBeforeCall(chartId, reportId, _callback);
        Type localVarReturnType = new TypeToken<Reportsv3GetChartSettingsv2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServiceGetChartTemplatesv2
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceGetChartTemplatesv2Call(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/flex-charts/templates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceGetChartTemplatesv2ValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return reportsServiceGetChartTemplatesv2Call(_callback);

    }

    /**
     * Summary: Get chart template v2 Description: Get all custom VEGA chart templates.
     * 
     * @return Reportsv3GetChartTemplatesv2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3GetChartTemplatesv2Response reportsServiceGetChartTemplatesv2() throws ApiException {
        ApiResponse<Reportsv3GetChartTemplatesv2Response> localVarResp = reportsServiceGetChartTemplatesv2WithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Summary: Get chart template v2 Description: Get all custom VEGA chart templates.
     * 
     * @return ApiResponse&lt;Reportsv3GetChartTemplatesv2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3GetChartTemplatesv2Response> reportsServiceGetChartTemplatesv2WithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = reportsServiceGetChartTemplatesv2ValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Reportsv3GetChartTemplatesv2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get chart template v2 Description: Get all custom VEGA chart templates. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceGetChartTemplatesv2Async(final ApiCallback<Reportsv3GetChartTemplatesv2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceGetChartTemplatesv2ValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Reportsv3GetChartTemplatesv2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServiceGetFieldsByCategories
     * @param categoryIds Category IDs. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceGetFieldsByCategoriesCall(List<String> categoryIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/reports/fields/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (categoryIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "category_ids", categoryIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceGetFieldsByCategoriesValidateBeforeCall(List<String> categoryIds, final ApiCallback _callback) throws ApiException {
        return reportsServiceGetFieldsByCategoriesCall(categoryIds, _callback);

    }

    /**
     * Summary: Get fields by categories Description: Get all category related fields or all possible fields based on a list of categories.
     * 
     * @param categoryIds Category IDs. (optional)
     * @return Reportsv3GetFieldsByCategoriesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3GetFieldsByCategoriesResponse reportsServiceGetFieldsByCategories(List<String> categoryIds) throws ApiException {
        ApiResponse<Reportsv3GetFieldsByCategoriesResponse> localVarResp = reportsServiceGetFieldsByCategoriesWithHttpInfo(categoryIds);
        return localVarResp.getData();
    }

    /**
     * Summary: Get fields by categories Description: Get all category related fields or all possible fields based on a list of categories.
     * 
     * @param categoryIds Category IDs. (optional)
     * @return ApiResponse&lt;Reportsv3GetFieldsByCategoriesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3GetFieldsByCategoriesResponse> reportsServiceGetFieldsByCategoriesWithHttpInfo(List<String> categoryIds) throws ApiException {
        okhttp3.Call localVarCall = reportsServiceGetFieldsByCategoriesValidateBeforeCall(categoryIds, null);
        Type localVarReturnType = new TypeToken<Reportsv3GetFieldsByCategoriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get fields by categories Description: Get all category related fields or all possible fields based on a list of categories. (asynchronously)
     * 
     * @param categoryIds Category IDs. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceGetFieldsByCategoriesAsync(List<String> categoryIds, final ApiCallback<Reportsv3GetFieldsByCategoriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceGetFieldsByCategoriesValidateBeforeCall(categoryIds, _callback);
        Type localVarReturnType = new TypeToken<Reportsv3GetFieldsByCategoriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServiceGetFieldsByCategory
     * @param categoryId Category ID. (optional)
     * @param reportId Report ID. (optional)
     * @param tableName optional table name parameter. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceGetFieldsByCategoryCall(String categoryId, String reportId, String tableName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/reports/fields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (categoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category_id", categoryId));
        }

        if (reportId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("report_id", reportId));
        }

        if (tableName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("table_name", tableName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceGetFieldsByCategoryValidateBeforeCall(String categoryId, String reportId, String tableName, final ApiCallback _callback) throws ApiException {
        return reportsServiceGetFieldsByCategoryCall(categoryId, reportId, tableName, _callback);

    }

    /**
     * Summary: Get fields by category Description: Get all category related fields or all possible fields.
     * 
     * @param categoryId Category ID. (optional)
     * @param reportId Report ID. (optional)
     * @param tableName optional table name parameter. (optional)
     * @return Reportsv3GetFieldsByCategoryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3GetFieldsByCategoryResponse reportsServiceGetFieldsByCategory(String categoryId, String reportId, String tableName) throws ApiException {
        ApiResponse<Reportsv3GetFieldsByCategoryResponse> localVarResp = reportsServiceGetFieldsByCategoryWithHttpInfo(categoryId, reportId, tableName);
        return localVarResp.getData();
    }

    /**
     * Summary: Get fields by category Description: Get all category related fields or all possible fields.
     * 
     * @param categoryId Category ID. (optional)
     * @param reportId Report ID. (optional)
     * @param tableName optional table name parameter. (optional)
     * @return ApiResponse&lt;Reportsv3GetFieldsByCategoryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3GetFieldsByCategoryResponse> reportsServiceGetFieldsByCategoryWithHttpInfo(String categoryId, String reportId, String tableName) throws ApiException {
        okhttp3.Call localVarCall = reportsServiceGetFieldsByCategoryValidateBeforeCall(categoryId, reportId, tableName, null);
        Type localVarReturnType = new TypeToken<Reportsv3GetFieldsByCategoryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get fields by category Description: Get all category related fields or all possible fields. (asynchronously)
     * 
     * @param categoryId Category ID. (optional)
     * @param reportId Report ID. (optional)
     * @param tableName optional table name parameter. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceGetFieldsByCategoryAsync(String categoryId, String reportId, String tableName, final ApiCallback<Reportsv3GetFieldsByCategoryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceGetFieldsByCategoryValidateBeforeCall(categoryId, reportId, tableName, _callback);
        Type localVarReturnType = new TypeToken<Reportsv3GetFieldsByCategoryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServiceGetJoins
     * @param categoryId Category ID (Optional). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceGetJoinsCall(String categoryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/reports/categories/joins";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (categoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category_id", categoryId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceGetJoinsValidateBeforeCall(String categoryId, final ApiCallback _callback) throws ApiException {
        return reportsServiceGetJoinsCall(categoryId, _callback);

    }

    /**
     * Summary: Get all joins Description: Get all custom joins.
     * 
     * @param categoryId Category ID (Optional). (optional)
     * @return Reportsv3GetJoinsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3GetJoinsResponse reportsServiceGetJoins(String categoryId) throws ApiException {
        ApiResponse<Reportsv3GetJoinsResponse> localVarResp = reportsServiceGetJoinsWithHttpInfo(categoryId);
        return localVarResp.getData();
    }

    /**
     * Summary: Get all joins Description: Get all custom joins.
     * 
     * @param categoryId Category ID (Optional). (optional)
     * @return ApiResponse&lt;Reportsv3GetJoinsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3GetJoinsResponse> reportsServiceGetJoinsWithHttpInfo(String categoryId) throws ApiException {
        okhttp3.Call localVarCall = reportsServiceGetJoinsValidateBeforeCall(categoryId, null);
        Type localVarReturnType = new TypeToken<Reportsv3GetJoinsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get all joins Description: Get all custom joins. (asynchronously)
     * 
     * @param categoryId Category ID (Optional). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceGetJoinsAsync(String categoryId, final ApiCallback<Reportsv3GetJoinsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceGetJoinsValidateBeforeCall(categoryId, _callback);
        Type localVarReturnType = new TypeToken<Reportsv3GetJoinsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServiceGetQueryByReportDefinition
     * @param reportsv3GetQueryByReportDefinitionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceGetQueryByReportDefinitionCall(Reportsv3GetQueryByReportDefinitionRequest reportsv3GetQueryByReportDefinitionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportsv3GetQueryByReportDefinitionRequest;

        // create path and map variables
        String localVarPath = "/api/v3/reports/query/definition";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceGetQueryByReportDefinitionValidateBeforeCall(Reportsv3GetQueryByReportDefinitionRequest reportsv3GetQueryByReportDefinitionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportsv3GetQueryByReportDefinitionRequest' is set
        if (reportsv3GetQueryByReportDefinitionRequest == null) {
            throw new ApiException("Missing the required parameter 'reportsv3GetQueryByReportDefinitionRequest' when calling reportsServiceGetQueryByReportDefinition(Async)");
        }

        return reportsServiceGetQueryByReportDefinitionCall(reportsv3GetQueryByReportDefinitionRequest, _callback);

    }

    /**
     * Summary: Get query by report definition Description: Get query by report definition.
     * 
     * @param reportsv3GetQueryByReportDefinitionRequest  (required)
     * @return Reportsv3GetReportQueryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3GetReportQueryResponse reportsServiceGetQueryByReportDefinition(Reportsv3GetQueryByReportDefinitionRequest reportsv3GetQueryByReportDefinitionRequest) throws ApiException {
        ApiResponse<Reportsv3GetReportQueryResponse> localVarResp = reportsServiceGetQueryByReportDefinitionWithHttpInfo(reportsv3GetQueryByReportDefinitionRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Get query by report definition Description: Get query by report definition.
     * 
     * @param reportsv3GetQueryByReportDefinitionRequest  (required)
     * @return ApiResponse&lt;Reportsv3GetReportQueryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3GetReportQueryResponse> reportsServiceGetQueryByReportDefinitionWithHttpInfo(Reportsv3GetQueryByReportDefinitionRequest reportsv3GetQueryByReportDefinitionRequest) throws ApiException {
        okhttp3.Call localVarCall = reportsServiceGetQueryByReportDefinitionValidateBeforeCall(reportsv3GetQueryByReportDefinitionRequest, null);
        Type localVarReturnType = new TypeToken<Reportsv3GetReportQueryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get query by report definition Description: Get query by report definition. (asynchronously)
     * 
     * @param reportsv3GetQueryByReportDefinitionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceGetQueryByReportDefinitionAsync(Reportsv3GetQueryByReportDefinitionRequest reportsv3GetQueryByReportDefinitionRequest, final ApiCallback<Reportsv3GetReportQueryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceGetQueryByReportDefinitionValidateBeforeCall(reportsv3GetQueryByReportDefinitionRequest, _callback);
        Type localVarReturnType = new TypeToken<Reportsv3GetReportQueryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServiceGetQueryByReportID
     * @param reportsv3GetQueryByReportIDRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceGetQueryByReportIDCall(Reportsv3GetQueryByReportIDRequest reportsv3GetQueryByReportIDRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportsv3GetQueryByReportIDRequest;

        // create path and map variables
        String localVarPath = "/api/v3/reports/query/id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceGetQueryByReportIDValidateBeforeCall(Reportsv3GetQueryByReportIDRequest reportsv3GetQueryByReportIDRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportsv3GetQueryByReportIDRequest' is set
        if (reportsv3GetQueryByReportIDRequest == null) {
            throw new ApiException("Missing the required parameter 'reportsv3GetQueryByReportIDRequest' when calling reportsServiceGetQueryByReportID(Async)");
        }

        return reportsServiceGetQueryByReportIDCall(reportsv3GetQueryByReportIDRequest, _callback);

    }

    /**
     * Summary: Get query by report ID Description: Get query by report ID.
     * 
     * @param reportsv3GetQueryByReportIDRequest  (required)
     * @return Reportsv3GetReportQueryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3GetReportQueryResponse reportsServiceGetQueryByReportID(Reportsv3GetQueryByReportIDRequest reportsv3GetQueryByReportIDRequest) throws ApiException {
        ApiResponse<Reportsv3GetReportQueryResponse> localVarResp = reportsServiceGetQueryByReportIDWithHttpInfo(reportsv3GetQueryByReportIDRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Get query by report ID Description: Get query by report ID.
     * 
     * @param reportsv3GetQueryByReportIDRequest  (required)
     * @return ApiResponse&lt;Reportsv3GetReportQueryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3GetReportQueryResponse> reportsServiceGetQueryByReportIDWithHttpInfo(Reportsv3GetQueryByReportIDRequest reportsv3GetQueryByReportIDRequest) throws ApiException {
        okhttp3.Call localVarCall = reportsServiceGetQueryByReportIDValidateBeforeCall(reportsv3GetQueryByReportIDRequest, null);
        Type localVarReturnType = new TypeToken<Reportsv3GetReportQueryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get query by report ID Description: Get query by report ID. (asynchronously)
     * 
     * @param reportsv3GetQueryByReportIDRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceGetQueryByReportIDAsync(Reportsv3GetQueryByReportIDRequest reportsv3GetQueryByReportIDRequest, final ApiCallback<Reportsv3GetReportQueryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceGetQueryByReportIDValidateBeforeCall(reportsv3GetQueryByReportIDRequest, _callback);
        Type localVarReturnType = new TypeToken<Reportsv3GetReportQueryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServiceGetReportDefinition
     * @param reportId Unique Report ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceGetReportDefinitionCall(String reportId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/reports/{report_id}/definition"
            .replace("{" + "report_id" + "}", localVarApiClient.escapeString(reportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceGetReportDefinitionValidateBeforeCall(String reportId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling reportsServiceGetReportDefinition(Async)");
        }

        return reportsServiceGetReportDefinitionCall(reportId, _callback);

    }

    /**
     * Summary: Get report definition Description: Get report definition.
     * 
     * @param reportId Unique Report ID. (required)
     * @return Reportsv3GetReportDefinitionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3GetReportDefinitionResponse reportsServiceGetReportDefinition(String reportId) throws ApiException {
        ApiResponse<Reportsv3GetReportDefinitionResponse> localVarResp = reportsServiceGetReportDefinitionWithHttpInfo(reportId);
        return localVarResp.getData();
    }

    /**
     * Summary: Get report definition Description: Get report definition.
     * 
     * @param reportId Unique Report ID. (required)
     * @return ApiResponse&lt;Reportsv3GetReportDefinitionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3GetReportDefinitionResponse> reportsServiceGetReportDefinitionWithHttpInfo(String reportId) throws ApiException {
        okhttp3.Call localVarCall = reportsServiceGetReportDefinitionValidateBeforeCall(reportId, null);
        Type localVarReturnType = new TypeToken<Reportsv3GetReportDefinitionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get report definition Description: Get report definition. (asynchronously)
     * 
     * @param reportId Unique Report ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceGetReportDefinitionAsync(String reportId, final ApiCallback<Reportsv3GetReportDefinitionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceGetReportDefinitionValidateBeforeCall(reportId, _callback);
        Type localVarReturnType = new TypeToken<Reportsv3GetReportDefinitionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServiceGetReportGroups
     * @param groups List of group IDs that should be checked for usage in each report. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceGetReportGroupsCall(List<String> groups, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/reports_groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groups != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "groups", groups));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceGetReportGroupsValidateBeforeCall(List<String> groups, final ApiCallback _callback) throws ApiException {
        return reportsServiceGetReportGroupsCall(groups, _callback);

    }

    /**
     * Summary: Get report groups Description: Get reports used by the provided groups.
     * 
     * @param groups List of group IDs that should be checked for usage in each report. (optional)
     * @return Reportsv3GetReportGroupsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3GetReportGroupsResponse reportsServiceGetReportGroups(List<String> groups) throws ApiException {
        ApiResponse<Reportsv3GetReportGroupsResponse> localVarResp = reportsServiceGetReportGroupsWithHttpInfo(groups);
        return localVarResp.getData();
    }

    /**
     * Summary: Get report groups Description: Get reports used by the provided groups.
     * 
     * @param groups List of group IDs that should be checked for usage in each report. (optional)
     * @return ApiResponse&lt;Reportsv3GetReportGroupsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3GetReportGroupsResponse> reportsServiceGetReportGroupsWithHttpInfo(List<String> groups) throws ApiException {
        okhttp3.Call localVarCall = reportsServiceGetReportGroupsValidateBeforeCall(groups, null);
        Type localVarReturnType = new TypeToken<Reportsv3GetReportGroupsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get report groups Description: Get reports used by the provided groups. (asynchronously)
     * 
     * @param groups List of group IDs that should be checked for usage in each report. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceGetReportGroupsAsync(List<String> groups, final ApiCallback<Reportsv3GetReportGroupsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceGetReportGroupsValidateBeforeCall(groups, _callback);
        Type localVarReturnType = new TypeToken<Reportsv3GetReportGroupsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServiceGetReportSynopsis
     * @param reportId Unique Report ID. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceGetReportSynopsisCall(String reportId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/reports/{report_id}/synopsis"
            .replace("{" + "report_id" + "}", localVarApiClient.escapeString(reportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceGetReportSynopsisValidateBeforeCall(String reportId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling reportsServiceGetReportSynopsis(Async)");
        }

        return reportsServiceGetReportSynopsisCall(reportId, _callback);

    }

    /**
     * Summary: Get report synopsis Description: Return BriefReport.
     * 
     * @param reportId Unique Report ID. (required)
     * @return Reportsv3GetReportSynopsisResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3GetReportSynopsisResponse reportsServiceGetReportSynopsis(String reportId) throws ApiException {
        ApiResponse<Reportsv3GetReportSynopsisResponse> localVarResp = reportsServiceGetReportSynopsisWithHttpInfo(reportId);
        return localVarResp.getData();
    }

    /**
     * Summary: Get report synopsis Description: Return BriefReport.
     * 
     * @param reportId Unique Report ID. (required)
     * @return ApiResponse&lt;Reportsv3GetReportSynopsisResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3GetReportSynopsisResponse> reportsServiceGetReportSynopsisWithHttpInfo(String reportId) throws ApiException {
        okhttp3.Call localVarCall = reportsServiceGetReportSynopsisValidateBeforeCall(reportId, null);
        Type localVarReturnType = new TypeToken<Reportsv3GetReportSynopsisResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get report synopsis Description: Return BriefReport. (asynchronously)
     * 
     * @param reportId Unique Report ID. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceGetReportSynopsisAsync(String reportId, final ApiCallback<Reportsv3GetReportSynopsisResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceGetReportSynopsisValidateBeforeCall(reportId, _callback);
        Type localVarReturnType = new TypeToken<Reportsv3GetReportSynopsisResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServiceGetReportTimestampHeader
     * @param categoryId Category ID parameter. (optional)
     * @param tableNames List of all header tables. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceGetReportTimestampHeaderCall(String categoryId, List<String> tableNames, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/reports/headers/timestamp/default";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (categoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category_id", categoryId));
        }

        if (tableNames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "table_names", tableNames));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceGetReportTimestampHeaderValidateBeforeCall(String categoryId, List<String> tableNames, final ApiCallback _callback) throws ApiException {
        return reportsServiceGetReportTimestampHeaderCall(categoryId, tableNames, _callback);

    }

    /**
     * Summary: Get report timestamp header Description: Get where to take a report timestamp given an entity.
     * 
     * @param categoryId Category ID parameter. (optional)
     * @param tableNames List of all header tables. (optional)
     * @return Reportsv3GetReportTimestampHeaderResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3GetReportTimestampHeaderResponse reportsServiceGetReportTimestampHeader(String categoryId, List<String> tableNames) throws ApiException {
        ApiResponse<Reportsv3GetReportTimestampHeaderResponse> localVarResp = reportsServiceGetReportTimestampHeaderWithHttpInfo(categoryId, tableNames);
        return localVarResp.getData();
    }

    /**
     * Summary: Get report timestamp header Description: Get where to take a report timestamp given an entity.
     * 
     * @param categoryId Category ID parameter. (optional)
     * @param tableNames List of all header tables. (optional)
     * @return ApiResponse&lt;Reportsv3GetReportTimestampHeaderResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3GetReportTimestampHeaderResponse> reportsServiceGetReportTimestampHeaderWithHttpInfo(String categoryId, List<String> tableNames) throws ApiException {
        okhttp3.Call localVarCall = reportsServiceGetReportTimestampHeaderValidateBeforeCall(categoryId, tableNames, null);
        Type localVarReturnType = new TypeToken<Reportsv3GetReportTimestampHeaderResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get report timestamp header Description: Get where to take a report timestamp given an entity. (asynchronously)
     * 
     * @param categoryId Category ID parameter. (optional)
     * @param tableNames List of all header tables. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceGetReportTimestampHeaderAsync(String categoryId, List<String> tableNames, final ApiCallback<Reportsv3GetReportTimestampHeaderResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceGetReportTimestampHeaderValidateBeforeCall(categoryId, tableNames, _callback);
        Type localVarReturnType = new TypeToken<Reportsv3GetReportTimestampHeaderResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServiceGetReports
     * @param categoryId Optional Category ID parameter. (optional)
     * @param tableName Optional table name parameter. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceGetReportsCall(String categoryId, String tableName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/reports";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (categoryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category_id", categoryId));
        }

        if (tableName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("table_name", tableName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceGetReportsValidateBeforeCall(String categoryId, String tableName, final ApiCallback _callback) throws ApiException {
        return reportsServiceGetReportsCall(categoryId, tableName, _callback);

    }

    /**
     * Summary: Get reports Description: Get reports list.
     * 
     * @param categoryId Optional Category ID parameter. (optional)
     * @param tableName Optional table name parameter. (optional)
     * @return Reportsv3GetReportsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3GetReportsResponse reportsServiceGetReports(String categoryId, String tableName) throws ApiException {
        ApiResponse<Reportsv3GetReportsResponse> localVarResp = reportsServiceGetReportsWithHttpInfo(categoryId, tableName);
        return localVarResp.getData();
    }

    /**
     * Summary: Get reports Description: Get reports list.
     * 
     * @param categoryId Optional Category ID parameter. (optional)
     * @param tableName Optional table name parameter. (optional)
     * @return ApiResponse&lt;Reportsv3GetReportsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3GetReportsResponse> reportsServiceGetReportsWithHttpInfo(String categoryId, String tableName) throws ApiException {
        okhttp3.Call localVarCall = reportsServiceGetReportsValidateBeforeCall(categoryId, tableName, null);
        Type localVarReturnType = new TypeToken<Reportsv3GetReportsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get reports Description: Get reports list. (asynchronously)
     * 
     * @param categoryId Optional Category ID parameter. (optional)
     * @param tableName Optional table name parameter. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceGetReportsAsync(String categoryId, String tableName, final ApiCallback<Reportsv3GetReportsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceGetReportsValidateBeforeCall(categoryId, tableName, _callback);
        Type localVarReturnType = new TypeToken<Reportsv3GetReportsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServiceGetReportsForJoin
     * @param joinId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceGetReportsForJoinCall(String joinId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/reports/categories/joins/{join_id}/reports"
            .replace("{" + "join_id" + "}", localVarApiClient.escapeString(joinId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceGetReportsForJoinValidateBeforeCall(String joinId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'joinId' is set
        if (joinId == null) {
            throw new ApiException("Missing the required parameter 'joinId' when calling reportsServiceGetReportsForJoin(Async)");
        }

        return reportsServiceGetReportsForJoinCall(joinId, _callback);

    }

    /**
     * Summary: Get the reports that use a join Description: Get the reports that use a join and the headers that are imported by the reports using the join
     * 
     * @param joinId  (required)
     * @return Reportsv3GetReportsForJoinResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3GetReportsForJoinResponse reportsServiceGetReportsForJoin(String joinId) throws ApiException {
        ApiResponse<Reportsv3GetReportsForJoinResponse> localVarResp = reportsServiceGetReportsForJoinWithHttpInfo(joinId);
        return localVarResp.getData();
    }

    /**
     * Summary: Get the reports that use a join Description: Get the reports that use a join and the headers that are imported by the reports using the join
     * 
     * @param joinId  (required)
     * @return ApiResponse&lt;Reportsv3GetReportsForJoinResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3GetReportsForJoinResponse> reportsServiceGetReportsForJoinWithHttpInfo(String joinId) throws ApiException {
        okhttp3.Call localVarCall = reportsServiceGetReportsForJoinValidateBeforeCall(joinId, null);
        Type localVarReturnType = new TypeToken<Reportsv3GetReportsForJoinResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get the reports that use a join Description: Get the reports that use a join and the headers that are imported by the reports using the join (asynchronously)
     * 
     * @param joinId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceGetReportsForJoinAsync(String joinId, final ApiCallback<Reportsv3GetReportsForJoinResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceGetReportsForJoinValidateBeforeCall(joinId, _callback);
        Type localVarReturnType = new TypeToken<Reportsv3GetReportsForJoinResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServiceGetReportsTags
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceGetReportsTagsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/reports/tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceGetReportsTagsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return reportsServiceGetReportsTagsCall(_callback);

    }

    /**
     * Summary: Get reports tags Description: Get all report distinct tags.
     * 
     * @return Reportsv3GetReportsTagsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3GetReportsTagsResponse reportsServiceGetReportsTags() throws ApiException {
        ApiResponse<Reportsv3GetReportsTagsResponse> localVarResp = reportsServiceGetReportsTagsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Summary: Get reports tags Description: Get all report distinct tags.
     * 
     * @return ApiResponse&lt;Reportsv3GetReportsTagsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3GetReportsTagsResponse> reportsServiceGetReportsTagsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = reportsServiceGetReportsTagsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Reportsv3GetReportsTagsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get reports tags Description: Get all report distinct tags. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceGetReportsTagsAsync(final ApiCallback<Reportsv3GetReportsTagsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceGetReportsTagsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Reportsv3GetReportsTagsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServiceGetVariant
     * @param variantId The variant id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceGetVariantCall(String variantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/reports/variants/{variant_id}"
            .replace("{" + "variant_id" + "}", localVarApiClient.escapeString(variantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceGetVariantValidateBeforeCall(String variantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'variantId' is set
        if (variantId == null) {
            throw new ApiException("Missing the required parameter 'variantId' when calling reportsServiceGetVariant(Async)");
        }

        return reportsServiceGetVariantCall(variantId, _callback);

    }

    /**
     * Summary: Get a variant Description: Get a given variant
     * 
     * @param variantId The variant id (required)
     * @return Reportsv3GetVariantResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3GetVariantResponse reportsServiceGetVariant(String variantId) throws ApiException {
        ApiResponse<Reportsv3GetVariantResponse> localVarResp = reportsServiceGetVariantWithHttpInfo(variantId);
        return localVarResp.getData();
    }

    /**
     * Summary: Get a variant Description: Get a given variant
     * 
     * @param variantId The variant id (required)
     * @return ApiResponse&lt;Reportsv3GetVariantResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3GetVariantResponse> reportsServiceGetVariantWithHttpInfo(String variantId) throws ApiException {
        okhttp3.Call localVarCall = reportsServiceGetVariantValidateBeforeCall(variantId, null);
        Type localVarReturnType = new TypeToken<Reportsv3GetVariantResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get a variant Description: Get a given variant (asynchronously)
     * 
     * @param variantId The variant id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceGetVariantAsync(String variantId, final ApiCallback<Reportsv3GetVariantResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceGetVariantValidateBeforeCall(variantId, _callback);
        Type localVarReturnType = new TypeToken<Reportsv3GetVariantResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServiceGetVariants
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceGetVariantsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/reports/variants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceGetVariantsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return reportsServiceGetVariantsCall(_callback);

    }

    /**
     * Summary: Get all variants Description: Get all variants in reports
     * 
     * @return Reportsv3GetVariantsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3GetVariantsResponse reportsServiceGetVariants() throws ApiException {
        ApiResponse<Reportsv3GetVariantsResponse> localVarResp = reportsServiceGetVariantsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Summary: Get all variants Description: Get all variants in reports
     * 
     * @return ApiResponse&lt;Reportsv3GetVariantsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3GetVariantsResponse> reportsServiceGetVariantsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = reportsServiceGetVariantsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Reportsv3GetVariantsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get all variants Description: Get all variants in reports (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceGetVariantsAsync(final ApiCallback<Reportsv3GetVariantsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceGetVariantsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Reportsv3GetVariantsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServicePartialChartUpdate
     * @param chartId Unique chart ID. (required)
     * @param reportsv3PartialChartUpdateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServicePartialChartUpdateCall(String chartId, Reportsv3PartialChartUpdateRequest reportsv3PartialChartUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportsv3PartialChartUpdateRequest;

        // create path and map variables
        String localVarPath = "/api/v3/charts/{chart_id}"
            .replace("{" + "chart_id" + "}", localVarApiClient.escapeString(chartId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServicePartialChartUpdateValidateBeforeCall(String chartId, Reportsv3PartialChartUpdateRequest reportsv3PartialChartUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chartId' is set
        if (chartId == null) {
            throw new ApiException("Missing the required parameter 'chartId' when calling reportsServicePartialChartUpdate(Async)");
        }

        // verify the required parameter 'reportsv3PartialChartUpdateRequest' is set
        if (reportsv3PartialChartUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'reportsv3PartialChartUpdateRequest' when calling reportsServicePartialChartUpdate(Async)");
        }

        return reportsServicePartialChartUpdateCall(chartId, reportsv3PartialChartUpdateRequest, _callback);

    }

    /**
     * Summary: Partial chart update Description: Update a custom chart with partial information.
     * 
     * @param chartId Unique chart ID. (required)
     * @param reportsv3PartialChartUpdateRequest  (required)
     * @return Reportsv3PartialChartUpdateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3PartialChartUpdateResponse reportsServicePartialChartUpdate(String chartId, Reportsv3PartialChartUpdateRequest reportsv3PartialChartUpdateRequest) throws ApiException {
        ApiResponse<Reportsv3PartialChartUpdateResponse> localVarResp = reportsServicePartialChartUpdateWithHttpInfo(chartId, reportsv3PartialChartUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Partial chart update Description: Update a custom chart with partial information.
     * 
     * @param chartId Unique chart ID. (required)
     * @param reportsv3PartialChartUpdateRequest  (required)
     * @return ApiResponse&lt;Reportsv3PartialChartUpdateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3PartialChartUpdateResponse> reportsServicePartialChartUpdateWithHttpInfo(String chartId, Reportsv3PartialChartUpdateRequest reportsv3PartialChartUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = reportsServicePartialChartUpdateValidateBeforeCall(chartId, reportsv3PartialChartUpdateRequest, null);
        Type localVarReturnType = new TypeToken<Reportsv3PartialChartUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Partial chart update Description: Update a custom chart with partial information. (asynchronously)
     * 
     * @param chartId Unique chart ID. (required)
     * @param reportsv3PartialChartUpdateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServicePartialChartUpdateAsync(String chartId, Reportsv3PartialChartUpdateRequest reportsv3PartialChartUpdateRequest, final ApiCallback<Reportsv3PartialChartUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServicePartialChartUpdateValidateBeforeCall(chartId, reportsv3PartialChartUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<Reportsv3PartialChartUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServicePartialReportUpdate
     * @param reportId Unique Report ID. (required)
     * @param reportsv3PartialReportUpdateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServicePartialReportUpdateCall(String reportId, Reportsv3PartialReportUpdateRequest reportsv3PartialReportUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportsv3PartialReportUpdateRequest;

        // create path and map variables
        String localVarPath = "/api/v3/reports/{report_id}"
            .replace("{" + "report_id" + "}", localVarApiClient.escapeString(reportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServicePartialReportUpdateValidateBeforeCall(String reportId, Reportsv3PartialReportUpdateRequest reportsv3PartialReportUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling reportsServicePartialReportUpdate(Async)");
        }

        // verify the required parameter 'reportsv3PartialReportUpdateRequest' is set
        if (reportsv3PartialReportUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'reportsv3PartialReportUpdateRequest' when calling reportsServicePartialReportUpdate(Async)");
        }

        return reportsServicePartialReportUpdateCall(reportId, reportsv3PartialReportUpdateRequest, _callback);

    }

    /**
     * Summary: Partial report update Description: Update a custom report with partial information.
     * 
     * @param reportId Unique Report ID. (required)
     * @param reportsv3PartialReportUpdateRequest  (required)
     * @return Reportsv3PartialReportUpdateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3PartialReportUpdateResponse reportsServicePartialReportUpdate(String reportId, Reportsv3PartialReportUpdateRequest reportsv3PartialReportUpdateRequest) throws ApiException {
        ApiResponse<Reportsv3PartialReportUpdateResponse> localVarResp = reportsServicePartialReportUpdateWithHttpInfo(reportId, reportsv3PartialReportUpdateRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Partial report update Description: Update a custom report with partial information.
     * 
     * @param reportId Unique Report ID. (required)
     * @param reportsv3PartialReportUpdateRequest  (required)
     * @return ApiResponse&lt;Reportsv3PartialReportUpdateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3PartialReportUpdateResponse> reportsServicePartialReportUpdateWithHttpInfo(String reportId, Reportsv3PartialReportUpdateRequest reportsv3PartialReportUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = reportsServicePartialReportUpdateValidateBeforeCall(reportId, reportsv3PartialReportUpdateRequest, null);
        Type localVarReturnType = new TypeToken<Reportsv3PartialReportUpdateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Partial report update Description: Update a custom report with partial information. (asynchronously)
     * 
     * @param reportId Unique Report ID. (required)
     * @param reportsv3PartialReportUpdateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServicePartialReportUpdateAsync(String reportId, Reportsv3PartialReportUpdateRequest reportsv3PartialReportUpdateRequest, final ApiCallback<Reportsv3PartialReportUpdateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServicePartialReportUpdateValidateBeforeCall(reportId, reportsv3PartialReportUpdateRequest, _callback);
        Type localVarReturnType = new TypeToken<Reportsv3PartialReportUpdateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServiceRunVariantOperation
     * @param reportsv3RunVariantOperationRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceRunVariantOperationCall(Reportsv3RunVariantOperationRequest reportsv3RunVariantOperationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportsv3RunVariantOperationRequest;

        // create path and map variables
        String localVarPath = "/api/v3/reports/variants/run";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceRunVariantOperationValidateBeforeCall(Reportsv3RunVariantOperationRequest reportsv3RunVariantOperationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportsv3RunVariantOperationRequest' is set
        if (reportsv3RunVariantOperationRequest == null) {
            throw new ApiException("Missing the required parameter 'reportsv3RunVariantOperationRequest' when calling reportsServiceRunVariantOperation(Async)");
        }

        return reportsServiceRunVariantOperationCall(reportsv3RunVariantOperationRequest, _callback);

    }

    /**
     * Summary: Run a variant Description: Run the operations in a variant
     * 
     * @param reportsv3RunVariantOperationRequest  (required)
     * @return Reportsv3RunVariantOperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3RunVariantOperationResponse reportsServiceRunVariantOperation(Reportsv3RunVariantOperationRequest reportsv3RunVariantOperationRequest) throws ApiException {
        ApiResponse<Reportsv3RunVariantOperationResponse> localVarResp = reportsServiceRunVariantOperationWithHttpInfo(reportsv3RunVariantOperationRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Run a variant Description: Run the operations in a variant
     * 
     * @param reportsv3RunVariantOperationRequest  (required)
     * @return ApiResponse&lt;Reportsv3RunVariantOperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3RunVariantOperationResponse> reportsServiceRunVariantOperationWithHttpInfo(Reportsv3RunVariantOperationRequest reportsv3RunVariantOperationRequest) throws ApiException {
        okhttp3.Call localVarCall = reportsServiceRunVariantOperationValidateBeforeCall(reportsv3RunVariantOperationRequest, null);
        Type localVarReturnType = new TypeToken<Reportsv3RunVariantOperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Run a variant Description: Run the operations in a variant (asynchronously)
     * 
     * @param reportsv3RunVariantOperationRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceRunVariantOperationAsync(Reportsv3RunVariantOperationRequest reportsv3RunVariantOperationRequest, final ApiCallback<Reportsv3RunVariantOperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceRunVariantOperationValidateBeforeCall(reportsv3RunVariantOperationRequest, _callback);
        Type localVarReturnType = new TypeToken<Reportsv3RunVariantOperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServiceTranspose
     * @param reportsv3TransposeRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceTransposeCall(Reportsv3TransposeRequest reportsv3TransposeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportsv3TransposeRequest;

        // create path and map variables
        String localVarPath = "/api/v3/reports/transpose";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceTransposeValidateBeforeCall(Reportsv3TransposeRequest reportsv3TransposeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportsv3TransposeRequest' is set
        if (reportsv3TransposeRequest == null) {
            throw new ApiException("Missing the required parameter 'reportsv3TransposeRequest' when calling reportsServiceTranspose(Async)");
        }

        return reportsServiceTransposeCall(reportsv3TransposeRequest, _callback);

    }

    /**
     * Summary: Transpose Description: Return the corresponding full sql data.
     * 
     * @param reportsv3TransposeRequest  (required)
     * @return Reportsv3RunReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3RunReportResponse reportsServiceTranspose(Reportsv3TransposeRequest reportsv3TransposeRequest) throws ApiException {
        ApiResponse<Reportsv3RunReportResponse> localVarResp = reportsServiceTransposeWithHttpInfo(reportsv3TransposeRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Transpose Description: Return the corresponding full sql data.
     * 
     * @param reportsv3TransposeRequest  (required)
     * @return ApiResponse&lt;Reportsv3RunReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3RunReportResponse> reportsServiceTransposeWithHttpInfo(Reportsv3TransposeRequest reportsv3TransposeRequest) throws ApiException {
        okhttp3.Call localVarCall = reportsServiceTransposeValidateBeforeCall(reportsv3TransposeRequest, null);
        Type localVarReturnType = new TypeToken<Reportsv3RunReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Transpose Description: Return the corresponding full sql data. (asynchronously)
     * 
     * @param reportsv3TransposeRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceTransposeAsync(Reportsv3TransposeRequest reportsv3TransposeRequest, final ApiCallback<Reportsv3RunReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceTransposeValidateBeforeCall(reportsv3TransposeRequest, _callback);
        Type localVarReturnType = new TypeToken<Reportsv3RunReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServiceUpdateChart
     * @param chartId Unique chart ID. (required)
     * @param reportsv3UpdateChartRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceUpdateChartCall(String chartId, Reportsv3UpdateChartRequest reportsv3UpdateChartRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportsv3UpdateChartRequest;

        // create path and map variables
        String localVarPath = "/api/v3/charts/{chart_id}"
            .replace("{" + "chart_id" + "}", localVarApiClient.escapeString(chartId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceUpdateChartValidateBeforeCall(String chartId, Reportsv3UpdateChartRequest reportsv3UpdateChartRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chartId' is set
        if (chartId == null) {
            throw new ApiException("Missing the required parameter 'chartId' when calling reportsServiceUpdateChart(Async)");
        }

        // verify the required parameter 'reportsv3UpdateChartRequest' is set
        if (reportsv3UpdateChartRequest == null) {
            throw new ApiException("Missing the required parameter 'reportsv3UpdateChartRequest' when calling reportsServiceUpdateChart(Async)");
        }

        return reportsServiceUpdateChartCall(chartId, reportsv3UpdateChartRequest, _callback);

    }

    /**
     * Summary: Update chart Description: Update a custom chart.
     * 
     * @param chartId Unique chart ID. (required)
     * @param reportsv3UpdateChartRequest  (required)
     * @return Reportsv3UpdateChartResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3UpdateChartResponse reportsServiceUpdateChart(String chartId, Reportsv3UpdateChartRequest reportsv3UpdateChartRequest) throws ApiException {
        ApiResponse<Reportsv3UpdateChartResponse> localVarResp = reportsServiceUpdateChartWithHttpInfo(chartId, reportsv3UpdateChartRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Update chart Description: Update a custom chart.
     * 
     * @param chartId Unique chart ID. (required)
     * @param reportsv3UpdateChartRequest  (required)
     * @return ApiResponse&lt;Reportsv3UpdateChartResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3UpdateChartResponse> reportsServiceUpdateChartWithHttpInfo(String chartId, Reportsv3UpdateChartRequest reportsv3UpdateChartRequest) throws ApiException {
        okhttp3.Call localVarCall = reportsServiceUpdateChartValidateBeforeCall(chartId, reportsv3UpdateChartRequest, null);
        Type localVarReturnType = new TypeToken<Reportsv3UpdateChartResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Update chart Description: Update a custom chart. (asynchronously)
     * 
     * @param chartId Unique chart ID. (required)
     * @param reportsv3UpdateChartRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceUpdateChartAsync(String chartId, Reportsv3UpdateChartRequest reportsv3UpdateChartRequest, final ApiCallback<Reportsv3UpdateChartResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceUpdateChartValidateBeforeCall(chartId, reportsv3UpdateChartRequest, _callback);
        Type localVarReturnType = new TypeToken<Reportsv3UpdateChartResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServiceUpdateChartv2
     * @param chartId Unique chart ID. (required)
     * @param reportsv3UpdateChartv2Request  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceUpdateChartv2Call(String chartId, Reportsv3UpdateChartv2Request reportsv3UpdateChartv2Request, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportsv3UpdateChartv2Request;

        // create path and map variables
        String localVarPath = "/api/v3/flex-charts/{chart_id}"
            .replace("{" + "chart_id" + "}", localVarApiClient.escapeString(chartId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceUpdateChartv2ValidateBeforeCall(String chartId, Reportsv3UpdateChartv2Request reportsv3UpdateChartv2Request, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chartId' is set
        if (chartId == null) {
            throw new ApiException("Missing the required parameter 'chartId' when calling reportsServiceUpdateChartv2(Async)");
        }

        // verify the required parameter 'reportsv3UpdateChartv2Request' is set
        if (reportsv3UpdateChartv2Request == null) {
            throw new ApiException("Missing the required parameter 'reportsv3UpdateChartv2Request' when calling reportsServiceUpdateChartv2(Async)");
        }

        return reportsServiceUpdateChartv2Call(chartId, reportsv3UpdateChartv2Request, _callback);

    }

    /**
     * Summary: Update chart v2 Description: Update a custom VEGA chart.
     * 
     * @param chartId Unique chart ID. (required)
     * @param reportsv3UpdateChartv2Request  (required)
     * @return Reportsv3UpdateChartv2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3UpdateChartv2Response reportsServiceUpdateChartv2(String chartId, Reportsv3UpdateChartv2Request reportsv3UpdateChartv2Request) throws ApiException {
        ApiResponse<Reportsv3UpdateChartv2Response> localVarResp = reportsServiceUpdateChartv2WithHttpInfo(chartId, reportsv3UpdateChartv2Request);
        return localVarResp.getData();
    }

    /**
     * Summary: Update chart v2 Description: Update a custom VEGA chart.
     * 
     * @param chartId Unique chart ID. (required)
     * @param reportsv3UpdateChartv2Request  (required)
     * @return ApiResponse&lt;Reportsv3UpdateChartv2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3UpdateChartv2Response> reportsServiceUpdateChartv2WithHttpInfo(String chartId, Reportsv3UpdateChartv2Request reportsv3UpdateChartv2Request) throws ApiException {
        okhttp3.Call localVarCall = reportsServiceUpdateChartv2ValidateBeforeCall(chartId, reportsv3UpdateChartv2Request, null);
        Type localVarReturnType = new TypeToken<Reportsv3UpdateChartv2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Update chart v2 Description: Update a custom VEGA chart. (asynchronously)
     * 
     * @param chartId Unique chart ID. (required)
     * @param reportsv3UpdateChartv2Request  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceUpdateChartv2Async(String chartId, Reportsv3UpdateChartv2Request reportsv3UpdateChartv2Request, final ApiCallback<Reportsv3UpdateChartv2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceUpdateChartv2ValidateBeforeCall(chartId, reportsv3UpdateChartv2Request, _callback);
        Type localVarReturnType = new TypeToken<Reportsv3UpdateChartv2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServiceUpdateJoin
     * @param joinId Unique join ID. (required)
     * @param reportsv3UpdateJoinRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceUpdateJoinCall(String joinId, Reportsv3UpdateJoinRequest reportsv3UpdateJoinRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportsv3UpdateJoinRequest;

        // create path and map variables
        String localVarPath = "/api/v3/reports/categories/joins/{join_id}"
            .replace("{" + "join_id" + "}", localVarApiClient.escapeString(joinId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceUpdateJoinValidateBeforeCall(String joinId, Reportsv3UpdateJoinRequest reportsv3UpdateJoinRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'joinId' is set
        if (joinId == null) {
            throw new ApiException("Missing the required parameter 'joinId' when calling reportsServiceUpdateJoin(Async)");
        }

        // verify the required parameter 'reportsv3UpdateJoinRequest' is set
        if (reportsv3UpdateJoinRequest == null) {
            throw new ApiException("Missing the required parameter 'reportsv3UpdateJoinRequest' when calling reportsServiceUpdateJoin(Async)");
        }

        return reportsServiceUpdateJoinCall(joinId, reportsv3UpdateJoinRequest, _callback);

    }

    /**
     * Summary: Update a join Description: Update a custom join
     * 
     * @param joinId Unique join ID. (required)
     * @param reportsv3UpdateJoinRequest  (required)
     * @return Reportsv3UpdateJoinResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3UpdateJoinResponse reportsServiceUpdateJoin(String joinId, Reportsv3UpdateJoinRequest reportsv3UpdateJoinRequest) throws ApiException {
        ApiResponse<Reportsv3UpdateJoinResponse> localVarResp = reportsServiceUpdateJoinWithHttpInfo(joinId, reportsv3UpdateJoinRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Update a join Description: Update a custom join
     * 
     * @param joinId Unique join ID. (required)
     * @param reportsv3UpdateJoinRequest  (required)
     * @return ApiResponse&lt;Reportsv3UpdateJoinResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3UpdateJoinResponse> reportsServiceUpdateJoinWithHttpInfo(String joinId, Reportsv3UpdateJoinRequest reportsv3UpdateJoinRequest) throws ApiException {
        okhttp3.Call localVarCall = reportsServiceUpdateJoinValidateBeforeCall(joinId, reportsv3UpdateJoinRequest, null);
        Type localVarReturnType = new TypeToken<Reportsv3UpdateJoinResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Update a join Description: Update a custom join (asynchronously)
     * 
     * @param joinId Unique join ID. (required)
     * @param reportsv3UpdateJoinRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceUpdateJoinAsync(String joinId, Reportsv3UpdateJoinRequest reportsv3UpdateJoinRequest, final ApiCallback<Reportsv3UpdateJoinResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceUpdateJoinValidateBeforeCall(joinId, reportsv3UpdateJoinRequest, _callback);
        Type localVarReturnType = new TypeToken<Reportsv3UpdateJoinResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServiceUpdateReport
     * @param reportId Unique Report ID. (required)
     * @param reportsv3UpdateReportRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceUpdateReportCall(String reportId, Reportsv3UpdateReportRequest reportsv3UpdateReportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportsv3UpdateReportRequest;

        // create path and map variables
        String localVarPath = "/api/v3/reports/{report_id}"
            .replace("{" + "report_id" + "}", localVarApiClient.escapeString(reportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceUpdateReportValidateBeforeCall(String reportId, Reportsv3UpdateReportRequest reportsv3UpdateReportRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling reportsServiceUpdateReport(Async)");
        }

        // verify the required parameter 'reportsv3UpdateReportRequest' is set
        if (reportsv3UpdateReportRequest == null) {
            throw new ApiException("Missing the required parameter 'reportsv3UpdateReportRequest' when calling reportsServiceUpdateReport(Async)");
        }

        return reportsServiceUpdateReportCall(reportId, reportsv3UpdateReportRequest, _callback);

    }

    /**
     * Summary: Update report Description: Update a custom report.
     * 
     * @param reportId Unique Report ID. (required)
     * @param reportsv3UpdateReportRequest  (required)
     * @return Reportsv3UpdateReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3UpdateReportResponse reportsServiceUpdateReport(String reportId, Reportsv3UpdateReportRequest reportsv3UpdateReportRequest) throws ApiException {
        ApiResponse<Reportsv3UpdateReportResponse> localVarResp = reportsServiceUpdateReportWithHttpInfo(reportId, reportsv3UpdateReportRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Update report Description: Update a custom report.
     * 
     * @param reportId Unique Report ID. (required)
     * @param reportsv3UpdateReportRequest  (required)
     * @return ApiResponse&lt;Reportsv3UpdateReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3UpdateReportResponse> reportsServiceUpdateReportWithHttpInfo(String reportId, Reportsv3UpdateReportRequest reportsv3UpdateReportRequest) throws ApiException {
        okhttp3.Call localVarCall = reportsServiceUpdateReportValidateBeforeCall(reportId, reportsv3UpdateReportRequest, null);
        Type localVarReturnType = new TypeToken<Reportsv3UpdateReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Update report Description: Update a custom report. (asynchronously)
     * 
     * @param reportId Unique Report ID. (required)
     * @param reportsv3UpdateReportRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceUpdateReportAsync(String reportId, Reportsv3UpdateReportRequest reportsv3UpdateReportRequest, final ApiCallback<Reportsv3UpdateReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceUpdateReportValidateBeforeCall(reportId, reportsv3UpdateReportRequest, _callback);
        Type localVarReturnType = new TypeToken<Reportsv3UpdateReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsServiceUpdateVariantOverride
     * @param variantId The variant id (required)
     * @param reportsv3UpdateVariantOverrideRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceUpdateVariantOverrideCall(String variantId, Reportsv3UpdateVariantOverrideRequest reportsv3UpdateVariantOverrideRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportsv3UpdateVariantOverrideRequest;

        // create path and map variables
        String localVarPath = "/api/v3/reports/variants/{variant_id}"
            .replace("{" + "variant_id" + "}", localVarApiClient.escapeString(variantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsServiceUpdateVariantOverrideValidateBeforeCall(String variantId, Reportsv3UpdateVariantOverrideRequest reportsv3UpdateVariantOverrideRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'variantId' is set
        if (variantId == null) {
            throw new ApiException("Missing the required parameter 'variantId' when calling reportsServiceUpdateVariantOverride(Async)");
        }

        // verify the required parameter 'reportsv3UpdateVariantOverrideRequest' is set
        if (reportsv3UpdateVariantOverrideRequest == null) {
            throw new ApiException("Missing the required parameter 'reportsv3UpdateVariantOverrideRequest' when calling reportsServiceUpdateVariantOverride(Async)");
        }

        return reportsServiceUpdateVariantOverrideCall(variantId, reportsv3UpdateVariantOverrideRequest, _callback);

    }

    /**
     * Summary: Update a variant Description: Update a variant with a custom override
     * 
     * @param variantId The variant id (required)
     * @param reportsv3UpdateVariantOverrideRequest  (required)
     * @return Reportsv3UpdateVariantOverrideResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsv3UpdateVariantOverrideResponse reportsServiceUpdateVariantOverride(String variantId, Reportsv3UpdateVariantOverrideRequest reportsv3UpdateVariantOverrideRequest) throws ApiException {
        ApiResponse<Reportsv3UpdateVariantOverrideResponse> localVarResp = reportsServiceUpdateVariantOverrideWithHttpInfo(variantId, reportsv3UpdateVariantOverrideRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Update a variant Description: Update a variant with a custom override
     * 
     * @param variantId The variant id (required)
     * @param reportsv3UpdateVariantOverrideRequest  (required)
     * @return ApiResponse&lt;Reportsv3UpdateVariantOverrideResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsv3UpdateVariantOverrideResponse> reportsServiceUpdateVariantOverrideWithHttpInfo(String variantId, Reportsv3UpdateVariantOverrideRequest reportsv3UpdateVariantOverrideRequest) throws ApiException {
        okhttp3.Call localVarCall = reportsServiceUpdateVariantOverrideValidateBeforeCall(variantId, reportsv3UpdateVariantOverrideRequest, null);
        Type localVarReturnType = new TypeToken<Reportsv3UpdateVariantOverrideResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Update a variant Description: Update a variant with a custom override (asynchronously)
     * 
     * @param variantId The variant id (required)
     * @param reportsv3UpdateVariantOverrideRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsServiceUpdateVariantOverrideAsync(String variantId, Reportsv3UpdateVariantOverrideRequest reportsv3UpdateVariantOverrideRequest, final ApiCallback<Reportsv3UpdateVariantOverrideResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsServiceUpdateVariantOverrideValidateBeforeCall(variantId, reportsv3UpdateVariantOverrideRequest, _callback);
        Type localVarReturnType = new TypeToken<Reportsv3UpdateVariantOverrideResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
