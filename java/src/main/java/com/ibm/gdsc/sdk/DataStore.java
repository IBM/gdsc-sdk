/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.gdsc.sdk.ClassificationStatus;
import com.ibm.gdsc.sdk.CloudAccountDetails;
import com.ibm.gdsc.sdk.DataStoreEncryptionStatus;
import com.ibm.gdsc.sdk.DataStoreSource;
import com.ibm.gdsc.sdk.DataStoreStats;
import com.ibm.gdsc.sdk.StringKeyValue;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.JSON;

/**
 * DataStore
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-18T20:02:04.461512Z[UTC]", comments = "Generator version: 7.6.0")
public class DataStore {
  public static final String SERIALIZED_NAME_DATA_STORE_ID = "dataStoreId";
  @SerializedName(SERIALIZED_NAME_DATA_STORE_ID)
  private String dataStoreId;

  public static final String SERIALIZED_NAME_DATA_STORE_TYPE = "dataStoreType";
  @SerializedName(SERIALIZED_NAME_DATA_STORE_TYPE)
  private String dataStoreType;

  public static final String SERIALIZED_NAME_DATA_STORE_NAME = "dataStoreName";
  @SerializedName(SERIALIZED_NAME_DATA_STORE_NAME)
  private String dataStoreName;

  public static final String SERIALIZED_NAME_CLOUD_ACCOUNT_DETAILS = "cloudAccountDetails";
  @SerializedName(SERIALIZED_NAME_CLOUD_ACCOUNT_DETAILS)
  private CloudAccountDetails cloudAccountDetails;

  public static final String SERIALIZED_NAME_CLOUD_REGION = "cloudRegion";
  @SerializedName(SERIALIZED_NAME_CLOUD_REGION)
  private String cloudRegion;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_CLASSIFICATION_STATUS = "classificationStatus";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION_STATUS)
  private ClassificationStatus classificationStatus;

  public static final String SERIALIZED_NAME_ENCRYPTION_STATUS = "encryptionStatus";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_STATUS)
  private DataStoreEncryptionStatus encryptionStatus;

  public static final String SERIALIZED_NAME_CUSTOM_DATA = "customData";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DATA)
  private List<StringKeyValue> customData = new ArrayList<>();

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_DATA_CUSTODIAN = "dataCustodian";
  @SerializedName(SERIALIZED_NAME_DATA_CUSTODIAN)
  private String dataCustodian;

  public static final String SERIALIZED_NAME_CLOUD_TAGS = "cloudTags";
  @SerializedName(SERIALIZED_NAME_CLOUD_TAGS)
  private List<StringKeyValue> cloudTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_BACKED_UP = "isBackedUp";
  @SerializedName(SERIALIZED_NAME_IS_BACKED_UP)
  private Boolean isBackedUp;

  public static final String SERIALIZED_NAME_MANAGED = "managed";
  @SerializedName(SERIALIZED_NAME_MANAGED)
  private Boolean managed;

  public static final String SERIALIZED_NAME_VPC_ID = "vpcId";
  @SerializedName(SERIALIZED_NAME_VPC_ID)
  private String vpcId;

  public static final String SERIALIZED_NAME_STATS = "stats";
  @SerializedName(SERIALIZED_NAME_STATS)
  private DataStoreStats stats;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private DataStoreSource source;

  public static final String SERIALIZED_NAME_DATA_STORE_URL = "dataStoreUrl";
  @SerializedName(SERIALIZED_NAME_DATA_STORE_URL)
  private String dataStoreUrl;

  public static final String SERIALIZED_NAME_CLASSIFICATION_ERROR_MESSAGE = "classificationErrorMessage";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION_ERROR_MESSAGE)
  private String classificationErrorMessage;

  public static final String SERIALIZED_NAME_LAST_CLASSIFICATION_DATE = "lastClassificationDate";
  @SerializedName(SERIALIZED_NAME_LAST_CLASSIFICATION_DATE)
  private BigDecimal lastClassificationDate;

  public static final String SERIALIZED_NAME_UNSUPPORTED_REASON = "unsupportedReason";
  @SerializedName(SERIALIZED_NAME_UNSUPPORTED_REASON)
  private String unsupportedReason;

  public DataStore() {
  }

  public DataStore dataStoreId(String dataStoreId) {
    this.dataStoreId = dataStoreId;
    return this;
  }

   /**
   * Get dataStoreId
   * @return dataStoreId
  **/
  @javax.annotation.Nonnull
  public String getDataStoreId() {
    return dataStoreId;
  }

  public void setDataStoreId(String dataStoreId) {
    this.dataStoreId = dataStoreId;
  }


  public DataStore dataStoreType(String dataStoreType) {
    this.dataStoreType = dataStoreType;
    return this;
  }

   /**
   * Get dataStoreType
   * @return dataStoreType
  **/
  @javax.annotation.Nonnull
  public String getDataStoreType() {
    return dataStoreType;
  }

  public void setDataStoreType(String dataStoreType) {
    this.dataStoreType = dataStoreType;
  }


  public DataStore dataStoreName(String dataStoreName) {
    this.dataStoreName = dataStoreName;
    return this;
  }

   /**
   * Get dataStoreName
   * @return dataStoreName
  **/
  @javax.annotation.Nonnull
  public String getDataStoreName() {
    return dataStoreName;
  }

  public void setDataStoreName(String dataStoreName) {
    this.dataStoreName = dataStoreName;
  }


  public DataStore cloudAccountDetails(CloudAccountDetails cloudAccountDetails) {
    this.cloudAccountDetails = cloudAccountDetails;
    return this;
  }

   /**
   * Get cloudAccountDetails
   * @return cloudAccountDetails
  **/
  @javax.annotation.Nonnull
  public CloudAccountDetails getCloudAccountDetails() {
    return cloudAccountDetails;
  }

  public void setCloudAccountDetails(CloudAccountDetails cloudAccountDetails) {
    this.cloudAccountDetails = cloudAccountDetails;
  }


  public DataStore cloudRegion(String cloudRegion) {
    this.cloudRegion = cloudRegion;
    return this;
  }

   /**
   * Get cloudRegion
   * @return cloudRegion
  **/
  @javax.annotation.Nullable
  public String getCloudRegion() {
    return cloudRegion;
  }

  public void setCloudRegion(String cloudRegion) {
    this.cloudRegion = cloudRegion;
  }


  public DataStore country(String country) {
    this.country = country;
    return this;
  }

   /**
   * Get country
   * @return country
  **/
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public DataStore classificationStatus(ClassificationStatus classificationStatus) {
    this.classificationStatus = classificationStatus;
    return this;
  }

   /**
   * Get classificationStatus
   * @return classificationStatus
  **/
  @javax.annotation.Nullable
  public ClassificationStatus getClassificationStatus() {
    return classificationStatus;
  }

  public void setClassificationStatus(ClassificationStatus classificationStatus) {
    this.classificationStatus = classificationStatus;
  }


  public DataStore encryptionStatus(DataStoreEncryptionStatus encryptionStatus) {
    this.encryptionStatus = encryptionStatus;
    return this;
  }

   /**
   * Get encryptionStatus
   * @return encryptionStatus
  **/
  @javax.annotation.Nullable
  public DataStoreEncryptionStatus getEncryptionStatus() {
    return encryptionStatus;
  }

  public void setEncryptionStatus(DataStoreEncryptionStatus encryptionStatus) {
    this.encryptionStatus = encryptionStatus;
  }


  public DataStore customData(List<StringKeyValue> customData) {
    this.customData = customData;
    return this;
  }

  public DataStore addCustomDataItem(StringKeyValue customDataItem) {
    if (this.customData == null) {
      this.customData = new ArrayList<>();
    }
    this.customData.add(customDataItem);
    return this;
  }

   /**
   * Get customData
   * @return customData
  **/
  @javax.annotation.Nullable
  public List<StringKeyValue> getCustomData() {
    return customData;
  }

  public void setCustomData(List<StringKeyValue> customData) {
    this.customData = customData;
  }


  public DataStore label(String label) {
    this.label = label;
    return this;
  }

   /**
   * Get label
   * @return label
  **/
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public DataStore dataCustodian(String dataCustodian) {
    this.dataCustodian = dataCustodian;
    return this;
  }

   /**
   * Get dataCustodian
   * @return dataCustodian
  **/
  @javax.annotation.Nullable
  public String getDataCustodian() {
    return dataCustodian;
  }

  public void setDataCustodian(String dataCustodian) {
    this.dataCustodian = dataCustodian;
  }


  public DataStore cloudTags(List<StringKeyValue> cloudTags) {
    this.cloudTags = cloudTags;
    return this;
  }

  public DataStore addCloudTagsItem(StringKeyValue cloudTagsItem) {
    if (this.cloudTags == null) {
      this.cloudTags = new ArrayList<>();
    }
    this.cloudTags.add(cloudTagsItem);
    return this;
  }

   /**
   * Get cloudTags
   * @return cloudTags
  **/
  @javax.annotation.Nullable
  public List<StringKeyValue> getCloudTags() {
    return cloudTags;
  }

  public void setCloudTags(List<StringKeyValue> cloudTags) {
    this.cloudTags = cloudTags;
  }


  public DataStore isBackedUp(Boolean isBackedUp) {
    this.isBackedUp = isBackedUp;
    return this;
  }

   /**
   * Get isBackedUp
   * @return isBackedUp
  **/
  @javax.annotation.Nullable
  public Boolean getIsBackedUp() {
    return isBackedUp;
  }

  public void setIsBackedUp(Boolean isBackedUp) {
    this.isBackedUp = isBackedUp;
  }


  public DataStore managed(Boolean managed) {
    this.managed = managed;
    return this;
  }

   /**
   * Get managed
   * @return managed
  **/
  @javax.annotation.Nullable
  public Boolean getManaged() {
    return managed;
  }

  public void setManaged(Boolean managed) {
    this.managed = managed;
  }


  public DataStore vpcId(String vpcId) {
    this.vpcId = vpcId;
    return this;
  }

   /**
   * Get vpcId
   * @return vpcId
  **/
  @javax.annotation.Nullable
  public String getVpcId() {
    return vpcId;
  }

  public void setVpcId(String vpcId) {
    this.vpcId = vpcId;
  }


  public DataStore stats(DataStoreStats stats) {
    this.stats = stats;
    return this;
  }

   /**
   * Get stats
   * @return stats
  **/
  @javax.annotation.Nullable
  public DataStoreStats getStats() {
    return stats;
  }

  public void setStats(DataStoreStats stats) {
    this.stats = stats;
  }


  public DataStore source(DataStoreSource source) {
    this.source = source;
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  @javax.annotation.Nullable
  public DataStoreSource getSource() {
    return source;
  }

  public void setSource(DataStoreSource source) {
    this.source = source;
  }


  public DataStore dataStoreUrl(String dataStoreUrl) {
    this.dataStoreUrl = dataStoreUrl;
    return this;
  }

   /**
   * Get dataStoreUrl
   * @return dataStoreUrl
  **/
  @javax.annotation.Nullable
  public String getDataStoreUrl() {
    return dataStoreUrl;
  }

  public void setDataStoreUrl(String dataStoreUrl) {
    this.dataStoreUrl = dataStoreUrl;
  }


  public DataStore classificationErrorMessage(String classificationErrorMessage) {
    this.classificationErrorMessage = classificationErrorMessage;
    return this;
  }

   /**
   * Get classificationErrorMessage
   * @return classificationErrorMessage
  **/
  @javax.annotation.Nullable
  public String getClassificationErrorMessage() {
    return classificationErrorMessage;
  }

  public void setClassificationErrorMessage(String classificationErrorMessage) {
    this.classificationErrorMessage = classificationErrorMessage;
  }


  public DataStore lastClassificationDate(BigDecimal lastClassificationDate) {
    this.lastClassificationDate = lastClassificationDate;
    return this;
  }

   /**
   * Get lastClassificationDate
   * @return lastClassificationDate
  **/
  @javax.annotation.Nullable
  public BigDecimal getLastClassificationDate() {
    return lastClassificationDate;
  }

  public void setLastClassificationDate(BigDecimal lastClassificationDate) {
    this.lastClassificationDate = lastClassificationDate;
  }


  public DataStore unsupportedReason(String unsupportedReason) {
    this.unsupportedReason = unsupportedReason;
    return this;
  }

   /**
   * Get unsupportedReason
   * @return unsupportedReason
  **/
  @javax.annotation.Nullable
  public String getUnsupportedReason() {
    return unsupportedReason;
  }

  public void setUnsupportedReason(String unsupportedReason) {
    this.unsupportedReason = unsupportedReason;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataStore dataStore = (DataStore) o;
    return Objects.equals(this.dataStoreId, dataStore.dataStoreId) &&
        Objects.equals(this.dataStoreType, dataStore.dataStoreType) &&
        Objects.equals(this.dataStoreName, dataStore.dataStoreName) &&
        Objects.equals(this.cloudAccountDetails, dataStore.cloudAccountDetails) &&
        Objects.equals(this.cloudRegion, dataStore.cloudRegion) &&
        Objects.equals(this.country, dataStore.country) &&
        Objects.equals(this.classificationStatus, dataStore.classificationStatus) &&
        Objects.equals(this.encryptionStatus, dataStore.encryptionStatus) &&
        Objects.equals(this.customData, dataStore.customData) &&
        Objects.equals(this.label, dataStore.label) &&
        Objects.equals(this.dataCustodian, dataStore.dataCustodian) &&
        Objects.equals(this.cloudTags, dataStore.cloudTags) &&
        Objects.equals(this.isBackedUp, dataStore.isBackedUp) &&
        Objects.equals(this.managed, dataStore.managed) &&
        Objects.equals(this.vpcId, dataStore.vpcId) &&
        Objects.equals(this.stats, dataStore.stats) &&
        Objects.equals(this.source, dataStore.source) &&
        Objects.equals(this.dataStoreUrl, dataStore.dataStoreUrl) &&
        Objects.equals(this.classificationErrorMessage, dataStore.classificationErrorMessage) &&
        Objects.equals(this.lastClassificationDate, dataStore.lastClassificationDate) &&
        Objects.equals(this.unsupportedReason, dataStore.unsupportedReason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataStoreId, dataStoreType, dataStoreName, cloudAccountDetails, cloudRegion, country, classificationStatus, encryptionStatus, customData, label, dataCustodian, cloudTags, isBackedUp, managed, vpcId, stats, source, dataStoreUrl, classificationErrorMessage, lastClassificationDate, unsupportedReason);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataStore {\n");
    sb.append("    dataStoreId: ").append(toIndentedString(dataStoreId)).append("\n");
    sb.append("    dataStoreType: ").append(toIndentedString(dataStoreType)).append("\n");
    sb.append("    dataStoreName: ").append(toIndentedString(dataStoreName)).append("\n");
    sb.append("    cloudAccountDetails: ").append(toIndentedString(cloudAccountDetails)).append("\n");
    sb.append("    cloudRegion: ").append(toIndentedString(cloudRegion)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    classificationStatus: ").append(toIndentedString(classificationStatus)).append("\n");
    sb.append("    encryptionStatus: ").append(toIndentedString(encryptionStatus)).append("\n");
    sb.append("    customData: ").append(toIndentedString(customData)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    dataCustodian: ").append(toIndentedString(dataCustodian)).append("\n");
    sb.append("    cloudTags: ").append(toIndentedString(cloudTags)).append("\n");
    sb.append("    isBackedUp: ").append(toIndentedString(isBackedUp)).append("\n");
    sb.append("    managed: ").append(toIndentedString(managed)).append("\n");
    sb.append("    vpcId: ").append(toIndentedString(vpcId)).append("\n");
    sb.append("    stats: ").append(toIndentedString(stats)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    dataStoreUrl: ").append(toIndentedString(dataStoreUrl)).append("\n");
    sb.append("    classificationErrorMessage: ").append(toIndentedString(classificationErrorMessage)).append("\n");
    sb.append("    lastClassificationDate: ").append(toIndentedString(lastClassificationDate)).append("\n");
    sb.append("    unsupportedReason: ").append(toIndentedString(unsupportedReason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataStoreId");
    openapiFields.add("dataStoreType");
    openapiFields.add("dataStoreName");
    openapiFields.add("cloudAccountDetails");
    openapiFields.add("cloudRegion");
    openapiFields.add("country");
    openapiFields.add("classificationStatus");
    openapiFields.add("encryptionStatus");
    openapiFields.add("customData");
    openapiFields.add("label");
    openapiFields.add("dataCustodian");
    openapiFields.add("cloudTags");
    openapiFields.add("isBackedUp");
    openapiFields.add("managed");
    openapiFields.add("vpcId");
    openapiFields.add("stats");
    openapiFields.add("source");
    openapiFields.add("dataStoreUrl");
    openapiFields.add("classificationErrorMessage");
    openapiFields.add("lastClassificationDate");
    openapiFields.add("unsupportedReason");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dataStoreId");
    openapiRequiredFields.add("dataStoreType");
    openapiRequiredFields.add("dataStoreName");
    openapiRequiredFields.add("cloudAccountDetails");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DataStore
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataStore.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataStore is not found in the empty JSON string", DataStore.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataStore.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataStore` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DataStore.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("dataStoreId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataStoreId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataStoreId").toString()));
      }
      if (!jsonObj.get("dataStoreType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataStoreType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataStoreType").toString()));
      }
      if (!jsonObj.get("dataStoreName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataStoreName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataStoreName").toString()));
      }
      // validate the required field `cloudAccountDetails`
      CloudAccountDetails.validateJsonElement(jsonObj.get("cloudAccountDetails"));
      if ((jsonObj.get("cloudRegion") != null && !jsonObj.get("cloudRegion").isJsonNull()) && !jsonObj.get("cloudRegion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloudRegion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cloudRegion").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      // validate the optional field `classificationStatus`
      if (jsonObj.get("classificationStatus") != null && !jsonObj.get("classificationStatus").isJsonNull()) {
        ClassificationStatus.validateJsonElement(jsonObj.get("classificationStatus"));
      }
      // validate the optional field `encryptionStatus`
      if (jsonObj.get("encryptionStatus") != null && !jsonObj.get("encryptionStatus").isJsonNull()) {
        DataStoreEncryptionStatus.validateJsonElement(jsonObj.get("encryptionStatus"));
      }
      if (jsonObj.get("customData") != null && !jsonObj.get("customData").isJsonNull()) {
        JsonArray jsonArraycustomData = jsonObj.getAsJsonArray("customData");
        if (jsonArraycustomData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customData` to be an array in the JSON string but got `%s`", jsonObj.get("customData").toString()));
          }

          // validate the optional field `customData` (array)
          for (int i = 0; i < jsonArraycustomData.size(); i++) {
            StringKeyValue.validateJsonElement(jsonArraycustomData.get(i));
          };
        }
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("dataCustodian") != null && !jsonObj.get("dataCustodian").isJsonNull()) && !jsonObj.get("dataCustodian").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataCustodian` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataCustodian").toString()));
      }
      if (jsonObj.get("cloudTags") != null && !jsonObj.get("cloudTags").isJsonNull()) {
        JsonArray jsonArraycloudTags = jsonObj.getAsJsonArray("cloudTags");
        if (jsonArraycloudTags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cloudTags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cloudTags` to be an array in the JSON string but got `%s`", jsonObj.get("cloudTags").toString()));
          }

          // validate the optional field `cloudTags` (array)
          for (int i = 0; i < jsonArraycloudTags.size(); i++) {
            StringKeyValue.validateJsonElement(jsonArraycloudTags.get(i));
          };
        }
      }
      if ((jsonObj.get("vpcId") != null && !jsonObj.get("vpcId").isJsonNull()) && !jsonObj.get("vpcId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vpcId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vpcId").toString()));
      }
      // validate the optional field `stats`
      if (jsonObj.get("stats") != null && !jsonObj.get("stats").isJsonNull()) {
        DataStoreStats.validateJsonElement(jsonObj.get("stats"));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        DataStoreSource.validateJsonElement(jsonObj.get("source"));
      }
      if ((jsonObj.get("dataStoreUrl") != null && !jsonObj.get("dataStoreUrl").isJsonNull()) && !jsonObj.get("dataStoreUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataStoreUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataStoreUrl").toString()));
      }
      if ((jsonObj.get("classificationErrorMessage") != null && !jsonObj.get("classificationErrorMessage").isJsonNull()) && !jsonObj.get("classificationErrorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `classificationErrorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("classificationErrorMessage").toString()));
      }
      if ((jsonObj.get("unsupportedReason") != null && !jsonObj.get("unsupportedReason").isJsonNull()) && !jsonObj.get("unsupportedReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unsupportedReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unsupportedReason").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataStore.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataStore' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataStore> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataStore.class));

       return (TypeAdapter<T>) new TypeAdapter<DataStore>() {
           @Override
           public void write(JsonWriter out, DataStore value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataStore read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DataStore given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DataStore
  * @throws IOException if the JSON string is invalid with respect to DataStore
  */
  public static DataStore fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataStore.class);
  }

 /**
  * Convert an instance of DataStore to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

