/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.gdsc.sdk.models.Connectionsv3ConnectorType;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.sdk.JSON;

/**
 * Connector summary.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-07T13:24:05.648078332-08:00[America/Los_Angeles]", comments = "Generator version: 7.6.0")
public class Connectionsv3ConnectorSummary {
  public static final String SERIALIZED_NAME_STATUS_GREEN = "status_green";
  @SerializedName(SERIALIZED_NAME_STATUS_GREEN)
  private Integer statusGreen;

  public static final String SERIALIZED_NAME_STATUS_RED = "status_red";
  @SerializedName(SERIALIZED_NAME_STATUS_RED)
  private Integer statusRed;

  public static final String SERIALIZED_NAME_STATUS_YELLOW = "status_yellow";
  @SerializedName(SERIALIZED_NAME_STATUS_YELLOW)
  private Integer statusYellow;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Connectionsv3ConnectorType type = Connectionsv3ConnectorType.UNDEFINED_TYPE;

  public Connectionsv3ConnectorSummary() {
  }

  public Connectionsv3ConnectorSummary statusGreen(Integer statusGreen) {
    this.statusGreen = statusGreen;
    return this;
  }

   /**
   * The number of connections with a green status.
   * @return statusGreen
  **/
  @javax.annotation.Nullable
  public Integer getStatusGreen() {
    return statusGreen;
  }

  public void setStatusGreen(Integer statusGreen) {
    this.statusGreen = statusGreen;
  }


  public Connectionsv3ConnectorSummary statusRed(Integer statusRed) {
    this.statusRed = statusRed;
    return this;
  }

   /**
   * The number of connections with a red status.
   * @return statusRed
  **/
  @javax.annotation.Nullable
  public Integer getStatusRed() {
    return statusRed;
  }

  public void setStatusRed(Integer statusRed) {
    this.statusRed = statusRed;
  }


  public Connectionsv3ConnectorSummary statusYellow(Integer statusYellow) {
    this.statusYellow = statusYellow;
    return this;
  }

   /**
   * The number of connections with a yellow status.
   * @return statusYellow
  **/
  @javax.annotation.Nullable
  public Integer getStatusYellow() {
    return statusYellow;
  }

  public void setStatusYellow(Integer statusYellow) {
    this.statusYellow = statusYellow;
  }


  public Connectionsv3ConnectorSummary type(Connectionsv3ConnectorType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  public Connectionsv3ConnectorType getType() {
    return type;
  }

  public void setType(Connectionsv3ConnectorType type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Connectionsv3ConnectorSummary connectionsv3ConnectorSummary = (Connectionsv3ConnectorSummary) o;
    return Objects.equals(this.statusGreen, connectionsv3ConnectorSummary.statusGreen) &&
        Objects.equals(this.statusRed, connectionsv3ConnectorSummary.statusRed) &&
        Objects.equals(this.statusYellow, connectionsv3ConnectorSummary.statusYellow) &&
        Objects.equals(this.type, connectionsv3ConnectorSummary.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(statusGreen, statusRed, statusYellow, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Connectionsv3ConnectorSummary {\n");
    sb.append("    statusGreen: ").append(toIndentedString(statusGreen)).append("\n");
    sb.append("    statusRed: ").append(toIndentedString(statusRed)).append("\n");
    sb.append("    statusYellow: ").append(toIndentedString(statusYellow)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("status_green");
    openapiFields.add("status_red");
    openapiFields.add("status_yellow");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Connectionsv3ConnectorSummary
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Connectionsv3ConnectorSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Connectionsv3ConnectorSummary is not found in the empty JSON string", Connectionsv3ConnectorSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Connectionsv3ConnectorSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Connectionsv3ConnectorSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        Connectionsv3ConnectorType.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Connectionsv3ConnectorSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Connectionsv3ConnectorSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Connectionsv3ConnectorSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Connectionsv3ConnectorSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<Connectionsv3ConnectorSummary>() {
           @Override
           public void write(JsonWriter out, Connectionsv3ConnectorSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Connectionsv3ConnectorSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Connectionsv3ConnectorSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Connectionsv3ConnectorSummary
  * @throws IOException if the JSON string is invalid with respect to Connectionsv3ConnectorSummary
  */
  public static Connectionsv3ConnectorSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Connectionsv3ConnectorSummary.class);
  }

 /**
  * Convert an instance of Connectionsv3ConnectorSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

