/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.JSON;

/**
 * DatasetsFilter includes all fields used to filter the set of desired datasets list returned by a GET request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-15T03:58:58.617687Z[UTC]", comments = "Generator version: 7.6.0")
public class Ecosystemv3DatasetsFilter {
  public static final String SERIALIZED_NAME_DATASET_NAMES = "dataset_names";
  @SerializedName(SERIALIZED_NAME_DATASET_NAMES)
  private List<String> datasetNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_END_TIME = "end_time";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_START_TIME = "start_time";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public Ecosystemv3DatasetsFilter() {
  }

  public Ecosystemv3DatasetsFilter datasetNames(List<String> datasetNames) {
    this.datasetNames = datasetNames;
    return this;
  }

  public Ecosystemv3DatasetsFilter addDatasetNamesItem(String datasetNamesItem) {
    if (this.datasetNames == null) {
      this.datasetNames = new ArrayList<>();
    }
    this.datasetNames.add(datasetNamesItem);
    return this;
  }

   /**
   * The state filter groups commonly paired states. Only returns records that include the specified names.
   * @return datasetNames
  **/
  @javax.annotation.Nullable
  public List<String> getDatasetNames() {
    return datasetNames;
  }

  public void setDatasetNames(List<String> datasetNames) {
    this.datasetNames = datasetNames;
  }


  public Ecosystemv3DatasetsFilter endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

   /**
   * Return datasets created before this time (&lt;).
   * @return endTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public Ecosystemv3DatasetsFilter startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

   /**
   * Return datasets created at this time or later (&gt;&#x3D;).
   * @return startTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Ecosystemv3DatasetsFilter ecosystemv3DatasetsFilter = (Ecosystemv3DatasetsFilter) o;
    return Objects.equals(this.datasetNames, ecosystemv3DatasetsFilter.datasetNames) &&
        Objects.equals(this.endTime, ecosystemv3DatasetsFilter.endTime) &&
        Objects.equals(this.startTime, ecosystemv3DatasetsFilter.startTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(datasetNames, endTime, startTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Ecosystemv3DatasetsFilter {\n");
    sb.append("    datasetNames: ").append(toIndentedString(datasetNames)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataset_names");
    openapiFields.add("end_time");
    openapiFields.add("start_time");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Ecosystemv3DatasetsFilter
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Ecosystemv3DatasetsFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Ecosystemv3DatasetsFilter is not found in the empty JSON string", Ecosystemv3DatasetsFilter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Ecosystemv3DatasetsFilter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Ecosystemv3DatasetsFilter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("dataset_names") != null && !jsonObj.get("dataset_names").isJsonNull() && !jsonObj.get("dataset_names").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataset_names` to be an array in the JSON string but got `%s`", jsonObj.get("dataset_names").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Ecosystemv3DatasetsFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Ecosystemv3DatasetsFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Ecosystemv3DatasetsFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Ecosystemv3DatasetsFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<Ecosystemv3DatasetsFilter>() {
           @Override
           public void write(JsonWriter out, Ecosystemv3DatasetsFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Ecosystemv3DatasetsFilter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Ecosystemv3DatasetsFilter given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Ecosystemv3DatasetsFilter
  * @throws IOException if the JSON string is invalid with respect to Ecosystemv3DatasetsFilter
  */
  public static Ecosystemv3DatasetsFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Ecosystemv3DatasetsFilter.class);
  }

 /**
  * Convert an instance of Ecosystemv3DatasetsFilter to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

