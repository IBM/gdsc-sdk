/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.gdsc.sdk.Reportsrunnerv3ExportJobStatus;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.JSON;

/**
 * StopExportReportJobResponse is the return type of StopExportReportJob API.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-15T03:58:58.617687Z[UTC]", comments = "Generator version: 7.6.0")
public class Reportsrunnerv3StopExportReportJobResponse {
  public static final String SERIALIZED_NAME_EXPORT_FILE_NAME = "export_file_name";
  @SerializedName(SERIALIZED_NAME_EXPORT_FILE_NAME)
  private String exportFileName;

  public static final String SERIALIZED_NAME_JOB_ID = "job_id";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_JOB_STATUS = "job_status";
  @SerializedName(SERIALIZED_NAME_JOB_STATUS)
  private Reportsrunnerv3ExportJobStatus jobStatus = Reportsrunnerv3ExportJobStatus.UNDEFINED_JOB_STATUS;

  public Reportsrunnerv3StopExportReportJobResponse() {
  }

  public Reportsrunnerv3StopExportReportJobResponse exportFileName(String exportFileName) {
    this.exportFileName = exportFileName;
    return this;
  }

   /**
   * Export file name.
   * @return exportFileName
  **/
  @javax.annotation.Nullable
  public String getExportFileName() {
    return exportFileName;
  }

  public void setExportFileName(String exportFileName) {
    this.exportFileName = exportFileName;
  }


  public Reportsrunnerv3StopExportReportJobResponse jobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

   /**
   * Token that identifies the export job.
   * @return jobId
  **/
  @javax.annotation.Nullable
  public String getJobId() {
    return jobId;
  }

  public void setJobId(String jobId) {
    this.jobId = jobId;
  }


  public Reportsrunnerv3StopExportReportJobResponse jobStatus(Reportsrunnerv3ExportJobStatus jobStatus) {
    this.jobStatus = jobStatus;
    return this;
  }

   /**
   * Get jobStatus
   * @return jobStatus
  **/
  @javax.annotation.Nullable
  public Reportsrunnerv3ExportJobStatus getJobStatus() {
    return jobStatus;
  }

  public void setJobStatus(Reportsrunnerv3ExportJobStatus jobStatus) {
    this.jobStatus = jobStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Reportsrunnerv3StopExportReportJobResponse reportsrunnerv3StopExportReportJobResponse = (Reportsrunnerv3StopExportReportJobResponse) o;
    return Objects.equals(this.exportFileName, reportsrunnerv3StopExportReportJobResponse.exportFileName) &&
        Objects.equals(this.jobId, reportsrunnerv3StopExportReportJobResponse.jobId) &&
        Objects.equals(this.jobStatus, reportsrunnerv3StopExportReportJobResponse.jobStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exportFileName, jobId, jobStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Reportsrunnerv3StopExportReportJobResponse {\n");
    sb.append("    exportFileName: ").append(toIndentedString(exportFileName)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    jobStatus: ").append(toIndentedString(jobStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("export_file_name");
    openapiFields.add("job_id");
    openapiFields.add("job_status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Reportsrunnerv3StopExportReportJobResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Reportsrunnerv3StopExportReportJobResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Reportsrunnerv3StopExportReportJobResponse is not found in the empty JSON string", Reportsrunnerv3StopExportReportJobResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Reportsrunnerv3StopExportReportJobResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Reportsrunnerv3StopExportReportJobResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("export_file_name") != null && !jsonObj.get("export_file_name").isJsonNull()) && !jsonObj.get("export_file_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `export_file_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("export_file_name").toString()));
      }
      if ((jsonObj.get("job_id") != null && !jsonObj.get("job_id").isJsonNull()) && !jsonObj.get("job_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `job_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("job_id").toString()));
      }
      // validate the optional field `job_status`
      if (jsonObj.get("job_status") != null && !jsonObj.get("job_status").isJsonNull()) {
        Reportsrunnerv3ExportJobStatus.validateJsonElement(jsonObj.get("job_status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Reportsrunnerv3StopExportReportJobResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Reportsrunnerv3StopExportReportJobResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Reportsrunnerv3StopExportReportJobResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Reportsrunnerv3StopExportReportJobResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<Reportsrunnerv3StopExportReportJobResponse>() {
           @Override
           public void write(JsonWriter out, Reportsrunnerv3StopExportReportJobResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Reportsrunnerv3StopExportReportJobResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Reportsrunnerv3StopExportReportJobResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Reportsrunnerv3StopExportReportJobResponse
  * @throws IOException if the JSON string is invalid with respect to Reportsrunnerv3StopExportReportJobResponse
  */
  public static Reportsrunnerv3StopExportReportJobResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Reportsrunnerv3StopExportReportJobResponse.class);
  }

 /**
  * Convert an instance of Reportsrunnerv3StopExportReportJobResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

