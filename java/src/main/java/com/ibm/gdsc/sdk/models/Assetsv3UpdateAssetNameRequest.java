/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.sdk.JSON;

/**
 * Assetsv3UpdateAssetNameRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-07T13:24:05.648078332-08:00[America/Los_Angeles]", comments = "Generator version: 7.6.0")
public class Assetsv3UpdateAssetNameRequest {
  public static final String SERIALIZED_NAME_GROUPER_ID = "grouper_id";
  @SerializedName(SERIALIZED_NAME_GROUPER_ID)
  private Integer grouperId;

  public static final String SERIALIZED_NAME_UPDATED_NAME = "updated_name";
  @SerializedName(SERIALIZED_NAME_UPDATED_NAME)
  private String updatedName;

  public Assetsv3UpdateAssetNameRequest() {
  }

  public Assetsv3UpdateAssetNameRequest grouperId(Integer grouperId) {
    this.grouperId = grouperId;
    return this;
  }

   /**
   * Get grouperId
   * @return grouperId
  **/
  @javax.annotation.Nullable
  public Integer getGrouperId() {
    return grouperId;
  }

  public void setGrouperId(Integer grouperId) {
    this.grouperId = grouperId;
  }


  public Assetsv3UpdateAssetNameRequest updatedName(String updatedName) {
    this.updatedName = updatedName;
    return this;
  }

   /**
   * Get updatedName
   * @return updatedName
  **/
  @javax.annotation.Nullable
  public String getUpdatedName() {
    return updatedName;
  }

  public void setUpdatedName(String updatedName) {
    this.updatedName = updatedName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Assetsv3UpdateAssetNameRequest assetsv3UpdateAssetNameRequest = (Assetsv3UpdateAssetNameRequest) o;
    return Objects.equals(this.grouperId, assetsv3UpdateAssetNameRequest.grouperId) &&
        Objects.equals(this.updatedName, assetsv3UpdateAssetNameRequest.updatedName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(grouperId, updatedName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Assetsv3UpdateAssetNameRequest {\n");
    sb.append("    grouperId: ").append(toIndentedString(grouperId)).append("\n");
    sb.append("    updatedName: ").append(toIndentedString(updatedName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("grouper_id");
    openapiFields.add("updated_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Assetsv3UpdateAssetNameRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Assetsv3UpdateAssetNameRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Assetsv3UpdateAssetNameRequest is not found in the empty JSON string", Assetsv3UpdateAssetNameRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Assetsv3UpdateAssetNameRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Assetsv3UpdateAssetNameRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("updated_name") != null && !jsonObj.get("updated_name").isJsonNull()) && !jsonObj.get("updated_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Assetsv3UpdateAssetNameRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Assetsv3UpdateAssetNameRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Assetsv3UpdateAssetNameRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Assetsv3UpdateAssetNameRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<Assetsv3UpdateAssetNameRequest>() {
           @Override
           public void write(JsonWriter out, Assetsv3UpdateAssetNameRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Assetsv3UpdateAssetNameRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Assetsv3UpdateAssetNameRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Assetsv3UpdateAssetNameRequest
  * @throws IOException if the JSON string is invalid with respect to Assetsv3UpdateAssetNameRequest
  */
  public static Assetsv3UpdateAssetNameRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Assetsv3UpdateAssetNameRequest.class);
  }

 /**
  * Convert an instance of Assetsv3UpdateAssetNameRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

