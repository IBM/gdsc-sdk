/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.gdsc.sdk.Riskanalyticsenginev3ClassificationDetails;
import com.ibm.gdsc.sdk.Riskanalyticsenginev3FeatureSet;
import com.ibm.gdsc.sdk.Riskanalyticsenginev3Lead;
import com.ibm.gdsc.sdk.Riskanalyticsenginev3Pivot;
import com.ibm.gdsc.sdk.Riskanalyticsenginev3SeverityLevel;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.JSON;

/**
 * Riskanalyticsenginev3Risk
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-15T03:58:58.617687Z[UTC]", comments = "Generator version: 7.6.0")
public class Riskanalyticsenginev3Risk {
  public static final String SERIALIZED_NAME_CLASSIFICATION_DETAILS = "classification_details";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION_DETAILS)
  private Riskanalyticsenginev3ClassificationDetails classificationDetails;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creation_time";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_END_TIME = "end_time";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_FEATURE_SETS = "feature_sets";
  @SerializedName(SERIALIZED_NAME_FEATURE_SETS)
  private List<Riskanalyticsenginev3FeatureSet> featureSets = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_EMERGING = "is_emerging";
  @SerializedName(SERIALIZED_NAME_IS_EMERGING)
  private Boolean isEmerging;

  public static final String SERIALIZED_NAME_LEADS = "leads";
  @SerializedName(SERIALIZED_NAME_LEADS)
  private List<Riskanalyticsenginev3Lead> leads = new ArrayList<>();

  public static final String SERIALIZED_NAME_PIVOT = "pivot";
  @SerializedName(SERIALIZED_NAME_PIVOT)
  private Riskanalyticsenginev3Pivot pivot;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Integer score;

  public static final String SERIALIZED_NAME_SEVERITY_LEVEL = "severity_level";
  @SerializedName(SERIALIZED_NAME_SEVERITY_LEVEL)
  private Riskanalyticsenginev3SeverityLevel severityLevel = Riskanalyticsenginev3SeverityLevel.UNDEFINED_SEVERITY_LEVEL;

  public static final String SERIALIZED_NAME_START_TIME = "start_time";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public Riskanalyticsenginev3Risk() {
  }

  public Riskanalyticsenginev3Risk classificationDetails(Riskanalyticsenginev3ClassificationDetails classificationDetails) {
    this.classificationDetails = classificationDetails;
    return this;
  }

   /**
   * Get classificationDetails
   * @return classificationDetails
  **/
  @javax.annotation.Nullable
  public Riskanalyticsenginev3ClassificationDetails getClassificationDetails() {
    return classificationDetails;
  }

  public void setClassificationDetails(Riskanalyticsenginev3ClassificationDetails classificationDetails) {
    this.classificationDetails = classificationDetails;
  }


  public Riskanalyticsenginev3Risk creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

   /**
   * The risk creation time in format YYYY-MM-DDTHH:mm:ss.sssZ.
   * @return creationTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public Riskanalyticsenginev3Risk endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

   /**
   * The leads end time in format YYYY-MM-DDTHH:mm:ss.sssZ.
   * @return endTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public Riskanalyticsenginev3Risk featureSets(List<Riskanalyticsenginev3FeatureSet> featureSets) {
    this.featureSets = featureSets;
    return this;
  }

  public Riskanalyticsenginev3Risk addFeatureSetsItem(Riskanalyticsenginev3FeatureSet featureSetsItem) {
    if (this.featureSets == null) {
      this.featureSets = new ArrayList<>();
    }
    this.featureSets.add(featureSetsItem);
    return this;
  }

   /**
   * The risk features (scores).
   * @return featureSets
  **/
  @javax.annotation.Nullable
  public List<Riskanalyticsenginev3FeatureSet> getFeatureSets() {
    return featureSets;
  }

  public void setFeatureSets(List<Riskanalyticsenginev3FeatureSet> featureSets) {
    this.featureSets = featureSets;
  }


  public Riskanalyticsenginev3Risk id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The risk id.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Riskanalyticsenginev3Risk isEmerging(Boolean isEmerging) {
    this.isEmerging = isEmerging;
    return this;
  }

   /**
   * Get isEmerging
   * @return isEmerging
  **/
  @javax.annotation.Nullable
  public Boolean getIsEmerging() {
    return isEmerging;
  }

  public void setIsEmerging(Boolean isEmerging) {
    this.isEmerging = isEmerging;
  }


  public Riskanalyticsenginev3Risk leads(List<Riskanalyticsenginev3Lead> leads) {
    this.leads = leads;
    return this;
  }

  public Riskanalyticsenginev3Risk addLeadsItem(Riskanalyticsenginev3Lead leadsItem) {
    if (this.leads == null) {
      this.leads = new ArrayList<>();
    }
    this.leads.add(leadsItem);
    return this;
  }

   /**
   * The risk leads.
   * @return leads
  **/
  @javax.annotation.Nullable
  public List<Riskanalyticsenginev3Lead> getLeads() {
    return leads;
  }

  public void setLeads(List<Riskanalyticsenginev3Lead> leads) {
    this.leads = leads;
  }


  public Riskanalyticsenginev3Risk pivot(Riskanalyticsenginev3Pivot pivot) {
    this.pivot = pivot;
    return this;
  }

   /**
   * Get pivot
   * @return pivot
  **/
  @javax.annotation.Nullable
  public Riskanalyticsenginev3Pivot getPivot() {
    return pivot;
  }

  public void setPivot(Riskanalyticsenginev3Pivot pivot) {
    this.pivot = pivot;
  }


  public Riskanalyticsenginev3Risk score(Integer score) {
    this.score = score;
    return this;
  }

   /**
   * The risk score.
   * @return score
  **/
  @javax.annotation.Nullable
  public Integer getScore() {
    return score;
  }

  public void setScore(Integer score) {
    this.score = score;
  }


  public Riskanalyticsenginev3Risk severityLevel(Riskanalyticsenginev3SeverityLevel severityLevel) {
    this.severityLevel = severityLevel;
    return this;
  }

   /**
   * Get severityLevel
   * @return severityLevel
  **/
  @javax.annotation.Nullable
  public Riskanalyticsenginev3SeverityLevel getSeverityLevel() {
    return severityLevel;
  }

  public void setSeverityLevel(Riskanalyticsenginev3SeverityLevel severityLevel) {
    this.severityLevel = severityLevel;
  }


  public Riskanalyticsenginev3Risk startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

   /**
   * The leads start time in format YYYY-MM-DDTHH:mm:ss.sssZ.
   * @return startTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Riskanalyticsenginev3Risk riskanalyticsenginev3Risk = (Riskanalyticsenginev3Risk) o;
    return Objects.equals(this.classificationDetails, riskanalyticsenginev3Risk.classificationDetails) &&
        Objects.equals(this.creationTime, riskanalyticsenginev3Risk.creationTime) &&
        Objects.equals(this.endTime, riskanalyticsenginev3Risk.endTime) &&
        Objects.equals(this.featureSets, riskanalyticsenginev3Risk.featureSets) &&
        Objects.equals(this.id, riskanalyticsenginev3Risk.id) &&
        Objects.equals(this.isEmerging, riskanalyticsenginev3Risk.isEmerging) &&
        Objects.equals(this.leads, riskanalyticsenginev3Risk.leads) &&
        Objects.equals(this.pivot, riskanalyticsenginev3Risk.pivot) &&
        Objects.equals(this.score, riskanalyticsenginev3Risk.score) &&
        Objects.equals(this.severityLevel, riskanalyticsenginev3Risk.severityLevel) &&
        Objects.equals(this.startTime, riskanalyticsenginev3Risk.startTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(classificationDetails, creationTime, endTime, featureSets, id, isEmerging, leads, pivot, score, severityLevel, startTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Riskanalyticsenginev3Risk {\n");
    sb.append("    classificationDetails: ").append(toIndentedString(classificationDetails)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    featureSets: ").append(toIndentedString(featureSets)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isEmerging: ").append(toIndentedString(isEmerging)).append("\n");
    sb.append("    leads: ").append(toIndentedString(leads)).append("\n");
    sb.append("    pivot: ").append(toIndentedString(pivot)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    severityLevel: ").append(toIndentedString(severityLevel)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("classification_details");
    openapiFields.add("creation_time");
    openapiFields.add("end_time");
    openapiFields.add("feature_sets");
    openapiFields.add("id");
    openapiFields.add("is_emerging");
    openapiFields.add("leads");
    openapiFields.add("pivot");
    openapiFields.add("score");
    openapiFields.add("severity_level");
    openapiFields.add("start_time");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Riskanalyticsenginev3Risk
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Riskanalyticsenginev3Risk.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Riskanalyticsenginev3Risk is not found in the empty JSON string", Riskanalyticsenginev3Risk.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Riskanalyticsenginev3Risk.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Riskanalyticsenginev3Risk` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `classification_details`
      if (jsonObj.get("classification_details") != null && !jsonObj.get("classification_details").isJsonNull()) {
        Riskanalyticsenginev3ClassificationDetails.validateJsonElement(jsonObj.get("classification_details"));
      }
      if (jsonObj.get("feature_sets") != null && !jsonObj.get("feature_sets").isJsonNull()) {
        JsonArray jsonArrayfeatureSets = jsonObj.getAsJsonArray("feature_sets");
        if (jsonArrayfeatureSets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("feature_sets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `feature_sets` to be an array in the JSON string but got `%s`", jsonObj.get("feature_sets").toString()));
          }

          // validate the optional field `feature_sets` (array)
          for (int i = 0; i < jsonArrayfeatureSets.size(); i++) {
            Riskanalyticsenginev3FeatureSet.validateJsonElement(jsonArrayfeatureSets.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("leads") != null && !jsonObj.get("leads").isJsonNull()) {
        JsonArray jsonArrayleads = jsonObj.getAsJsonArray("leads");
        if (jsonArrayleads != null) {
          // ensure the json data is an array
          if (!jsonObj.get("leads").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `leads` to be an array in the JSON string but got `%s`", jsonObj.get("leads").toString()));
          }

          // validate the optional field `leads` (array)
          for (int i = 0; i < jsonArrayleads.size(); i++) {
            Riskanalyticsenginev3Lead.validateJsonElement(jsonArrayleads.get(i));
          };
        }
      }
      // validate the optional field `pivot`
      if (jsonObj.get("pivot") != null && !jsonObj.get("pivot").isJsonNull()) {
        Riskanalyticsenginev3Pivot.validateJsonElement(jsonObj.get("pivot"));
      }
      // validate the optional field `severity_level`
      if (jsonObj.get("severity_level") != null && !jsonObj.get("severity_level").isJsonNull()) {
        Riskanalyticsenginev3SeverityLevel.validateJsonElement(jsonObj.get("severity_level"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Riskanalyticsenginev3Risk.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Riskanalyticsenginev3Risk' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Riskanalyticsenginev3Risk> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Riskanalyticsenginev3Risk.class));

       return (TypeAdapter<T>) new TypeAdapter<Riskanalyticsenginev3Risk>() {
           @Override
           public void write(JsonWriter out, Riskanalyticsenginev3Risk value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Riskanalyticsenginev3Risk read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Riskanalyticsenginev3Risk given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Riskanalyticsenginev3Risk
  * @throws IOException if the JSON string is invalid with respect to Riskanalyticsenginev3Risk
  */
  public static Riskanalyticsenginev3Risk fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Riskanalyticsenginev3Risk.class);
  }

 /**
  * Convert an instance of Riskanalyticsenginev3Risk to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

