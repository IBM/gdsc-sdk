/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.gdsc.sdk.Compliance;
import com.ibm.gdsc.sdk.VulnerabilityCriticality;
import com.ibm.gdsc.sdk.VulnerabilityRelatedAsset;
import com.ibm.gdsc.sdk.VulnerabilityStatusType;
import com.ibm.gdsc.sdk.VulnerabilityType;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.JSON;

/**
 * VulnerabilityListItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-15T03:58:58.617687Z[UTC]", comments = "Generator version: 7.6.0")
public class VulnerabilityListItem {
  public static final String SERIALIZED_NAME_VULNERABILITY_ID = "vulnerabilityId";
  @SerializedName(SERIALIZED_NAME_VULNERABILITY_ID)
  private String vulnerabilityId;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private VulnerabilityType type;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DETECTION_TIMESTAMP = "detectionTimestamp";
  @SerializedName(SERIALIZED_NAME_DETECTION_TIMESTAMP)
  private BigDecimal detectionTimestamp;

  public static final String SERIALIZED_NAME_CRITICALITY = "criticality";
  @SerializedName(SERIALIZED_NAME_CRITICALITY)
  private VulnerabilityCriticality criticality;

  /**
   * Gets or Sets threats
   */
  @JsonAdapter(ThreatsEnum.Adapter.class)
  public enum ThreatsEnum {
    DATA_LEAKAGE("Data Leakage"),
    
    RANSOMWARE("Ransomware"),
    
    COMPLIANCE_VIOLATION("Compliance Violation"),
    
    MALWARE("Malware"),
    
    EXTERNAL_SHARING("External Sharing");

    private String value;

    ThreatsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ThreatsEnum fromValue(String value) {
      for (ThreatsEnum b : ThreatsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ThreatsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ThreatsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ThreatsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ThreatsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ThreatsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_THREATS = "threats";
  @SerializedName(SERIALIZED_NAME_THREATS)
  private List<ThreatsEnum> threats = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMPLIANCE = "compliance";
  @SerializedName(SERIALIZED_NAME_COMPLIANCE)
  private List<Compliance> compliance = new ArrayList<>();

  public static final String SERIALIZED_NAME_AFFECTED_ASSET = "affectedAsset";
  @SerializedName(SERIALIZED_NAME_AFFECTED_ASSET)
  private VulnerabilityRelatedAsset affectedAsset;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private VulnerabilityStatusType status;

  public VulnerabilityListItem() {
  }

  public VulnerabilityListItem vulnerabilityId(String vulnerabilityId) {
    this.vulnerabilityId = vulnerabilityId;
    return this;
  }

   /**
   * Get vulnerabilityId
   * @return vulnerabilityId
  **/
  @javax.annotation.Nonnull
  public String getVulnerabilityId() {
    return vulnerabilityId;
  }

  public void setVulnerabilityId(String vulnerabilityId) {
    this.vulnerabilityId = vulnerabilityId;
  }


  public VulnerabilityListItem type(VulnerabilityType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  public VulnerabilityType getType() {
    return type;
  }

  public void setType(VulnerabilityType type) {
    this.type = type;
  }


  public VulnerabilityListItem title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public VulnerabilityListItem description(String description) {
    this.description = description;
    return this;
  }

   /**
   * We detected a copy of sensitive data in another account...
   * @return description
  **/
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public VulnerabilityListItem detectionTimestamp(BigDecimal detectionTimestamp) {
    this.detectionTimestamp = detectionTimestamp;
    return this;
  }

   /**
   * Get detectionTimestamp
   * @return detectionTimestamp
  **/
  @javax.annotation.Nonnull
  public BigDecimal getDetectionTimestamp() {
    return detectionTimestamp;
  }

  public void setDetectionTimestamp(BigDecimal detectionTimestamp) {
    this.detectionTimestamp = detectionTimestamp;
  }


  public VulnerabilityListItem criticality(VulnerabilityCriticality criticality) {
    this.criticality = criticality;
    return this;
  }

   /**
   * Get criticality
   * @return criticality
  **/
  @javax.annotation.Nonnull
  public VulnerabilityCriticality getCriticality() {
    return criticality;
  }

  public void setCriticality(VulnerabilityCriticality criticality) {
    this.criticality = criticality;
  }


  public VulnerabilityListItem threats(List<ThreatsEnum> threats) {
    this.threats = threats;
    return this;
  }

  public VulnerabilityListItem addThreatsItem(ThreatsEnum threatsItem) {
    if (this.threats == null) {
      this.threats = new ArrayList<>();
    }
    this.threats.add(threatsItem);
    return this;
  }

   /**
   * Get threats
   * @return threats
  **/
  @javax.annotation.Nullable
  public List<ThreatsEnum> getThreats() {
    return threats;
  }

  public void setThreats(List<ThreatsEnum> threats) {
    this.threats = threats;
  }


  public VulnerabilityListItem compliance(List<Compliance> compliance) {
    this.compliance = compliance;
    return this;
  }

  public VulnerabilityListItem addComplianceItem(Compliance complianceItem) {
    if (this.compliance == null) {
      this.compliance = new ArrayList<>();
    }
    this.compliance.add(complianceItem);
    return this;
  }

   /**
   * Get compliance
   * @return compliance
  **/
  @javax.annotation.Nullable
  public List<Compliance> getCompliance() {
    return compliance;
  }

  public void setCompliance(List<Compliance> compliance) {
    this.compliance = compliance;
  }


  public VulnerabilityListItem affectedAsset(VulnerabilityRelatedAsset affectedAsset) {
    this.affectedAsset = affectedAsset;
    return this;
  }

   /**
   * Get affectedAsset
   * @return affectedAsset
  **/
  @javax.annotation.Nullable
  public VulnerabilityRelatedAsset getAffectedAsset() {
    return affectedAsset;
  }

  public void setAffectedAsset(VulnerabilityRelatedAsset affectedAsset) {
    this.affectedAsset = affectedAsset;
  }


  public VulnerabilityListItem status(VulnerabilityStatusType status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  public VulnerabilityStatusType getStatus() {
    return status;
  }

  public void setStatus(VulnerabilityStatusType status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VulnerabilityListItem vulnerabilityListItem = (VulnerabilityListItem) o;
    return Objects.equals(this.vulnerabilityId, vulnerabilityListItem.vulnerabilityId) &&
        Objects.equals(this.type, vulnerabilityListItem.type) &&
        Objects.equals(this.title, vulnerabilityListItem.title) &&
        Objects.equals(this.description, vulnerabilityListItem.description) &&
        Objects.equals(this.detectionTimestamp, vulnerabilityListItem.detectionTimestamp) &&
        Objects.equals(this.criticality, vulnerabilityListItem.criticality) &&
        Objects.equals(this.threats, vulnerabilityListItem.threats) &&
        Objects.equals(this.compliance, vulnerabilityListItem.compliance) &&
        Objects.equals(this.affectedAsset, vulnerabilityListItem.affectedAsset) &&
        Objects.equals(this.status, vulnerabilityListItem.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(vulnerabilityId, type, title, description, detectionTimestamp, criticality, threats, compliance, affectedAsset, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VulnerabilityListItem {\n");
    sb.append("    vulnerabilityId: ").append(toIndentedString(vulnerabilityId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    detectionTimestamp: ").append(toIndentedString(detectionTimestamp)).append("\n");
    sb.append("    criticality: ").append(toIndentedString(criticality)).append("\n");
    sb.append("    threats: ").append(toIndentedString(threats)).append("\n");
    sb.append("    compliance: ").append(toIndentedString(compliance)).append("\n");
    sb.append("    affectedAsset: ").append(toIndentedString(affectedAsset)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("vulnerabilityId");
    openapiFields.add("type");
    openapiFields.add("title");
    openapiFields.add("description");
    openapiFields.add("detectionTimestamp");
    openapiFields.add("criticality");
    openapiFields.add("threats");
    openapiFields.add("compliance");
    openapiFields.add("affectedAsset");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("vulnerabilityId");
    openapiRequiredFields.add("type");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("detectionTimestamp");
    openapiRequiredFields.add("criticality");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to VulnerabilityListItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VulnerabilityListItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VulnerabilityListItem is not found in the empty JSON string", VulnerabilityListItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VulnerabilityListItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VulnerabilityListItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VulnerabilityListItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("vulnerabilityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vulnerabilityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vulnerabilityId").toString()));
      }
      // validate the required field `type`
      VulnerabilityType.validateJsonElement(jsonObj.get("type"));
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the required field `criticality`
      VulnerabilityCriticality.validateJsonElement(jsonObj.get("criticality"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("threats") != null && !jsonObj.get("threats").isJsonNull() && !jsonObj.get("threats").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `threats` to be an array in the JSON string but got `%s`", jsonObj.get("threats").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("compliance") != null && !jsonObj.get("compliance").isJsonNull() && !jsonObj.get("compliance").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `compliance` to be an array in the JSON string but got `%s`", jsonObj.get("compliance").toString()));
      }
      // validate the optional field `affectedAsset`
      if (jsonObj.get("affectedAsset") != null && !jsonObj.get("affectedAsset").isJsonNull()) {
        VulnerabilityRelatedAsset.validateJsonElement(jsonObj.get("affectedAsset"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        VulnerabilityStatusType.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VulnerabilityListItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VulnerabilityListItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VulnerabilityListItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VulnerabilityListItem.class));

       return (TypeAdapter<T>) new TypeAdapter<VulnerabilityListItem>() {
           @Override
           public void write(JsonWriter out, VulnerabilityListItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VulnerabilityListItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VulnerabilityListItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VulnerabilityListItem
  * @throws IOException if the JSON string is invalid with respect to VulnerabilityListItem
  */
  public static VulnerabilityListItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VulnerabilityListItem.class);
  }

 /**
  * Convert an instance of VulnerabilityListItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

