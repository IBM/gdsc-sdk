/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.gdsc.sdk.AccessType;
import com.ibm.gdsc.sdk.CloudAccountDetails;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.JSON;

/**
 * PermissionsConfigurations
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-18T18:23:51.166908Z[UTC]", comments = "Generator version: 7.6.0")
public class PermissionsConfigurations {
  public static final String SERIALIZED_NAME_PERMISSIONS_CONFIGURATIONS_ID = "permissionsConfigurationsId";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS_CONFIGURATIONS_ID)
  private String permissionsConfigurationsId;

  public static final String SERIALIZED_NAME_PERMISSIONS_CONFIGURATIONS_NAME = "permissionsConfigurationsName";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS_CONFIGURATIONS_NAME)
  private String permissionsConfigurationsName;

  public static final String SERIALIZED_NAME_PERMISSIONS_CONFIGURATIONS_URL = "permissionsConfigurationsUrl";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS_CONFIGURATIONS_URL)
  private String permissionsConfigurationsUrl;

  public static final String SERIALIZED_NAME_PERMISSIONS_CONFIGURATIONS_TYPE = "permissionsConfigurationsType";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS_CONFIGURATIONS_TYPE)
  private String permissionsConfigurationsType;

  public static final String SERIALIZED_NAME_ASSIGNED_VIA_ID = "assignedViaId";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_VIA_ID)
  private String assignedViaId;

  public static final String SERIALIZED_NAME_ASSIGNED_VIA_NAME = "assignedViaName";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_VIA_NAME)
  private String assignedViaName;

  public static final String SERIALIZED_NAME_ASSIGNED_VIA_URL = "assignedViaUrl";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_VIA_URL)
  private String assignedViaUrl;

  public static final String SERIALIZED_NAME_ASSIGNED_VIA_TYPE = "assignedViaType";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_VIA_TYPE)
  private String assignedViaType;

  public static final String SERIALIZED_NAME_ASSIGNED_TO = "assignedTo";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_TO)
  private BigDecimal assignedTo;

  public static final String SERIALIZED_NAME_CLOUD_ACCOUNT_DETAILS = "cloudAccountDetails";
  @SerializedName(SERIALIZED_NAME_CLOUD_ACCOUNT_DETAILS)
  private CloudAccountDetails cloudAccountDetails;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private List<AccessType> permissions = new ArrayList<>();

  public PermissionsConfigurations() {
  }

  public PermissionsConfigurations permissionsConfigurationsId(String permissionsConfigurationsId) {
    this.permissionsConfigurationsId = permissionsConfigurationsId;
    return this;
  }

   /**
   * Get permissionsConfigurationsId
   * @return permissionsConfigurationsId
  **/
  @javax.annotation.Nonnull
  public String getPermissionsConfigurationsId() {
    return permissionsConfigurationsId;
  }

  public void setPermissionsConfigurationsId(String permissionsConfigurationsId) {
    this.permissionsConfigurationsId = permissionsConfigurationsId;
  }


  public PermissionsConfigurations permissionsConfigurationsName(String permissionsConfigurationsName) {
    this.permissionsConfigurationsName = permissionsConfigurationsName;
    return this;
  }

   /**
   * Get permissionsConfigurationsName
   * @return permissionsConfigurationsName
  **/
  @javax.annotation.Nonnull
  public String getPermissionsConfigurationsName() {
    return permissionsConfigurationsName;
  }

  public void setPermissionsConfigurationsName(String permissionsConfigurationsName) {
    this.permissionsConfigurationsName = permissionsConfigurationsName;
  }


  public PermissionsConfigurations permissionsConfigurationsUrl(String permissionsConfigurationsUrl) {
    this.permissionsConfigurationsUrl = permissionsConfigurationsUrl;
    return this;
  }

   /**
   * Get permissionsConfigurationsUrl
   * @return permissionsConfigurationsUrl
  **/
  @javax.annotation.Nonnull
  public String getPermissionsConfigurationsUrl() {
    return permissionsConfigurationsUrl;
  }

  public void setPermissionsConfigurationsUrl(String permissionsConfigurationsUrl) {
    this.permissionsConfigurationsUrl = permissionsConfigurationsUrl;
  }


  public PermissionsConfigurations permissionsConfigurationsType(String permissionsConfigurationsType) {
    this.permissionsConfigurationsType = permissionsConfigurationsType;
    return this;
  }

   /**
   * Get permissionsConfigurationsType
   * @return permissionsConfigurationsType
  **/
  @javax.annotation.Nonnull
  public String getPermissionsConfigurationsType() {
    return permissionsConfigurationsType;
  }

  public void setPermissionsConfigurationsType(String permissionsConfigurationsType) {
    this.permissionsConfigurationsType = permissionsConfigurationsType;
  }


  public PermissionsConfigurations assignedViaId(String assignedViaId) {
    this.assignedViaId = assignedViaId;
    return this;
  }

   /**
   * Get assignedViaId
   * @return assignedViaId
  **/
  @javax.annotation.Nonnull
  public String getAssignedViaId() {
    return assignedViaId;
  }

  public void setAssignedViaId(String assignedViaId) {
    this.assignedViaId = assignedViaId;
  }


  public PermissionsConfigurations assignedViaName(String assignedViaName) {
    this.assignedViaName = assignedViaName;
    return this;
  }

   /**
   * Get assignedViaName
   * @return assignedViaName
  **/
  @javax.annotation.Nonnull
  public String getAssignedViaName() {
    return assignedViaName;
  }

  public void setAssignedViaName(String assignedViaName) {
    this.assignedViaName = assignedViaName;
  }


  public PermissionsConfigurations assignedViaUrl(String assignedViaUrl) {
    this.assignedViaUrl = assignedViaUrl;
    return this;
  }

   /**
   * Get assignedViaUrl
   * @return assignedViaUrl
  **/
  @javax.annotation.Nonnull
  public String getAssignedViaUrl() {
    return assignedViaUrl;
  }

  public void setAssignedViaUrl(String assignedViaUrl) {
    this.assignedViaUrl = assignedViaUrl;
  }


  public PermissionsConfigurations assignedViaType(String assignedViaType) {
    this.assignedViaType = assignedViaType;
    return this;
  }

   /**
   * Get assignedViaType
   * @return assignedViaType
  **/
  @javax.annotation.Nonnull
  public String getAssignedViaType() {
    return assignedViaType;
  }

  public void setAssignedViaType(String assignedViaType) {
    this.assignedViaType = assignedViaType;
  }


  public PermissionsConfigurations assignedTo(BigDecimal assignedTo) {
    this.assignedTo = assignedTo;
    return this;
  }

   /**
   * Get assignedTo
   * @return assignedTo
  **/
  @javax.annotation.Nonnull
  public BigDecimal getAssignedTo() {
    return assignedTo;
  }

  public void setAssignedTo(BigDecimal assignedTo) {
    this.assignedTo = assignedTo;
  }


  public PermissionsConfigurations cloudAccountDetails(CloudAccountDetails cloudAccountDetails) {
    this.cloudAccountDetails = cloudAccountDetails;
    return this;
  }

   /**
   * Get cloudAccountDetails
   * @return cloudAccountDetails
  **/
  @javax.annotation.Nonnull
  public CloudAccountDetails getCloudAccountDetails() {
    return cloudAccountDetails;
  }

  public void setCloudAccountDetails(CloudAccountDetails cloudAccountDetails) {
    this.cloudAccountDetails = cloudAccountDetails;
  }


  public PermissionsConfigurations permissions(List<AccessType> permissions) {
    this.permissions = permissions;
    return this;
  }

  public PermissionsConfigurations addPermissionsItem(AccessType permissionsItem) {
    if (this.permissions == null) {
      this.permissions = new ArrayList<>();
    }
    this.permissions.add(permissionsItem);
    return this;
  }

   /**
   * Get permissions
   * @return permissions
  **/
  @javax.annotation.Nonnull
  public List<AccessType> getPermissions() {
    return permissions;
  }

  public void setPermissions(List<AccessType> permissions) {
    this.permissions = permissions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PermissionsConfigurations permissionsConfigurations = (PermissionsConfigurations) o;
    return Objects.equals(this.permissionsConfigurationsId, permissionsConfigurations.permissionsConfigurationsId) &&
        Objects.equals(this.permissionsConfigurationsName, permissionsConfigurations.permissionsConfigurationsName) &&
        Objects.equals(this.permissionsConfigurationsUrl, permissionsConfigurations.permissionsConfigurationsUrl) &&
        Objects.equals(this.permissionsConfigurationsType, permissionsConfigurations.permissionsConfigurationsType) &&
        Objects.equals(this.assignedViaId, permissionsConfigurations.assignedViaId) &&
        Objects.equals(this.assignedViaName, permissionsConfigurations.assignedViaName) &&
        Objects.equals(this.assignedViaUrl, permissionsConfigurations.assignedViaUrl) &&
        Objects.equals(this.assignedViaType, permissionsConfigurations.assignedViaType) &&
        Objects.equals(this.assignedTo, permissionsConfigurations.assignedTo) &&
        Objects.equals(this.cloudAccountDetails, permissionsConfigurations.cloudAccountDetails) &&
        Objects.equals(this.permissions, permissionsConfigurations.permissions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(permissionsConfigurationsId, permissionsConfigurationsName, permissionsConfigurationsUrl, permissionsConfigurationsType, assignedViaId, assignedViaName, assignedViaUrl, assignedViaType, assignedTo, cloudAccountDetails, permissions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PermissionsConfigurations {\n");
    sb.append("    permissionsConfigurationsId: ").append(toIndentedString(permissionsConfigurationsId)).append("\n");
    sb.append("    permissionsConfigurationsName: ").append(toIndentedString(permissionsConfigurationsName)).append("\n");
    sb.append("    permissionsConfigurationsUrl: ").append(toIndentedString(permissionsConfigurationsUrl)).append("\n");
    sb.append("    permissionsConfigurationsType: ").append(toIndentedString(permissionsConfigurationsType)).append("\n");
    sb.append("    assignedViaId: ").append(toIndentedString(assignedViaId)).append("\n");
    sb.append("    assignedViaName: ").append(toIndentedString(assignedViaName)).append("\n");
    sb.append("    assignedViaUrl: ").append(toIndentedString(assignedViaUrl)).append("\n");
    sb.append("    assignedViaType: ").append(toIndentedString(assignedViaType)).append("\n");
    sb.append("    assignedTo: ").append(toIndentedString(assignedTo)).append("\n");
    sb.append("    cloudAccountDetails: ").append(toIndentedString(cloudAccountDetails)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("permissionsConfigurationsId");
    openapiFields.add("permissionsConfigurationsName");
    openapiFields.add("permissionsConfigurationsUrl");
    openapiFields.add("permissionsConfigurationsType");
    openapiFields.add("assignedViaId");
    openapiFields.add("assignedViaName");
    openapiFields.add("assignedViaUrl");
    openapiFields.add("assignedViaType");
    openapiFields.add("assignedTo");
    openapiFields.add("cloudAccountDetails");
    openapiFields.add("permissions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("permissionsConfigurationsId");
    openapiRequiredFields.add("permissionsConfigurationsName");
    openapiRequiredFields.add("permissionsConfigurationsUrl");
    openapiRequiredFields.add("permissionsConfigurationsType");
    openapiRequiredFields.add("assignedViaId");
    openapiRequiredFields.add("assignedViaName");
    openapiRequiredFields.add("assignedViaUrl");
    openapiRequiredFields.add("assignedViaType");
    openapiRequiredFields.add("assignedTo");
    openapiRequiredFields.add("cloudAccountDetails");
    openapiRequiredFields.add("permissions");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to PermissionsConfigurations
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PermissionsConfigurations.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PermissionsConfigurations is not found in the empty JSON string", PermissionsConfigurations.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PermissionsConfigurations.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PermissionsConfigurations` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PermissionsConfigurations.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("permissionsConfigurationsId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permissionsConfigurationsId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permissionsConfigurationsId").toString()));
      }
      if (!jsonObj.get("permissionsConfigurationsName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permissionsConfigurationsName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permissionsConfigurationsName").toString()));
      }
      if (!jsonObj.get("permissionsConfigurationsUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permissionsConfigurationsUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permissionsConfigurationsUrl").toString()));
      }
      if (!jsonObj.get("permissionsConfigurationsType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permissionsConfigurationsType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permissionsConfigurationsType").toString()));
      }
      if (!jsonObj.get("assignedViaId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assignedViaId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assignedViaId").toString()));
      }
      if (!jsonObj.get("assignedViaName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assignedViaName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assignedViaName").toString()));
      }
      if (!jsonObj.get("assignedViaUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assignedViaUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assignedViaUrl").toString()));
      }
      if (!jsonObj.get("assignedViaType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assignedViaType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assignedViaType").toString()));
      }
      // validate the required field `cloudAccountDetails`
      CloudAccountDetails.validateJsonElement(jsonObj.get("cloudAccountDetails"));
      // ensure the required json array is present
      if (jsonObj.get("permissions") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("permissions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `permissions` to be an array in the JSON string but got `%s`", jsonObj.get("permissions").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PermissionsConfigurations.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PermissionsConfigurations' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PermissionsConfigurations> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PermissionsConfigurations.class));

       return (TypeAdapter<T>) new TypeAdapter<PermissionsConfigurations>() {
           @Override
           public void write(JsonWriter out, PermissionsConfigurations value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PermissionsConfigurations read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PermissionsConfigurations given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PermissionsConfigurations
  * @throws IOException if the JSON string is invalid with respect to PermissionsConfigurations
  */
  public static PermissionsConfigurations fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PermissionsConfigurations.class);
  }

 /**
  * Convert an instance of PermissionsConfigurations to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

