/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.gdsc.sdk.Resourcecontrollerk8v3App;
import com.ibm.gdsc.sdk.Resourcecontrollerk8v3ControllerResources;
import com.ibm.gdsc.sdk.Resourcecontrollerk8v3KeyPair;
import com.ibm.gdsc.sdk.Resourcecontrollerk8v3TextContent;
import com.ibm.gdsc.sdk.Resourcecontrollerk8v3Version;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.JSON;

/**
 * Controller contains the information about a controller.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-11T14:56:28.892451Z[UTC]", comments = "Generator version: 7.6.0")
public class Resourcecontrollerk8v3Controller {
  public static final String SERIALIZED_NAME_APP_IDS = "app_ids";
  @SerializedName(SERIALIZED_NAME_APP_IDS)
  private List<String> appIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_APPS = "apps";
  @SerializedName(SERIALIZED_NAME_APPS)
  private List<Resourcecontrollerk8v3App> apps = new ArrayList<>();

  public static final String SERIALIZED_NAME_CAPABILITY = "capability";
  @SerializedName(SERIALIZED_NAME_CAPABILITY)
  private Map<String, Boolean> capability = new HashMap<>();

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private String created;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private Resourcecontrollerk8v3TextContent description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KEYPAIR = "keypair";
  @SerializedName(SERIALIZED_NAME_KEYPAIR)
  private Resourcecontrollerk8v3KeyPair keypair;

  public static final String SERIALIZED_NAME_LAST_HEARTBEAT = "last_heartbeat";
  @SerializedName(SERIALIZED_NAME_LAST_HEARTBEAT)
  private String lastHeartbeat;

  public static final String SERIALIZED_NAME_LOCAL = "local";
  @SerializedName(SERIALIZED_NAME_LOCAL)
  private Boolean local;

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private String modified;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RESOURCES = "resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private Resourcecontrollerk8v3ControllerResources resources;

  public static final String SERIALIZED_NAME_SINCE_LAST_HEARTBEAT = "since_last_heartbeat";
  @SerializedName(SERIALIZED_NAME_SINCE_LAST_HEARTBEAT)
  private String sinceLastHeartbeat;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenant_id";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public static final String SERIALIZED_NAME_TENANT_UUID = "tenant_uuid";
  @SerializedName(SERIALIZED_NAME_TENANT_UUID)
  private String tenantUuid;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Resourcecontrollerk8v3Version version;

  public Resourcecontrollerk8v3Controller() {
  }

  public Resourcecontrollerk8v3Controller appIds(List<String> appIds) {
    this.appIds = appIds;
    return this;
  }

  public Resourcecontrollerk8v3Controller addAppIdsItem(String appIdsItem) {
    if (this.appIds == null) {
      this.appIds = new ArrayList<>();
    }
    this.appIds.add(appIdsItem);
    return this;
  }

   /**
   * Optional: The list of internal IDs of the apps for the controller.
   * @return appIds
  **/
  @javax.annotation.Nullable
  public List<String> getAppIds() {
    return appIds;
  }

  public void setAppIds(List<String> appIds) {
    this.appIds = appIds;
  }


  public Resourcecontrollerk8v3Controller apps(List<Resourcecontrollerk8v3App> apps) {
    this.apps = apps;
    return this;
  }

  public Resourcecontrollerk8v3Controller addAppsItem(Resourcecontrollerk8v3App appsItem) {
    if (this.apps == null) {
      this.apps = new ArrayList<>();
    }
    this.apps.add(appsItem);
    return this;
  }

   /**
   * Optional: The controller&#39;s apps.
   * @return apps
  **/
  @javax.annotation.Nullable
  public List<Resourcecontrollerk8v3App> getApps() {
    return apps;
  }

  public void setApps(List<Resourcecontrollerk8v3App> apps) {
    this.apps = apps;
  }


  public Resourcecontrollerk8v3Controller capability(Map<String, Boolean> capability) {
    this.capability = capability;
    return this;
  }

  public Resourcecontrollerk8v3Controller putCapabilityItem(String key, Boolean capabilityItem) {
    if (this.capability == null) {
      this.capability = new HashMap<>();
    }
    this.capability.put(key, capabilityItem);
    return this;
  }

   /**
   * Optional: The controller capability like protected secret. If absence, app manager assumes all capabilities are false.
   * @return capability
  **/
  @javax.annotation.Nullable
  public Map<String, Boolean> getCapability() {
    return capability;
  }

  public void setCapability(Map<String, Boolean> capability) {
    this.capability = capability;
  }


  public Resourcecontrollerk8v3Controller created(String created) {
    this.created = created;
    return this;
  }

   /**
   * Optional: The date this controller was created (ms since epoch).
   * @return created
  **/
  @javax.annotation.Nullable
  public String getCreated() {
    return created;
  }

  public void setCreated(String created) {
    this.created = created;
  }


  public Resourcecontrollerk8v3Controller description(Resourcecontrollerk8v3TextContent description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  public Resourcecontrollerk8v3TextContent getDescription() {
    return description;
  }

  public void setDescription(Resourcecontrollerk8v3TextContent description) {
    this.description = description;
  }


  public Resourcecontrollerk8v3Controller id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Optional: The internal ID of the controller.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Resourcecontrollerk8v3Controller keypair(Resourcecontrollerk8v3KeyPair keypair) {
    this.keypair = keypair;
    return this;
  }

   /**
   * Get keypair
   * @return keypair
  **/
  @javax.annotation.Nullable
  public Resourcecontrollerk8v3KeyPair getKeypair() {
    return keypair;
  }

  public void setKeypair(Resourcecontrollerk8v3KeyPair keypair) {
    this.keypair = keypair;
  }


  public Resourcecontrollerk8v3Controller lastHeartbeat(String lastHeartbeat) {
    this.lastHeartbeat = lastHeartbeat;
    return this;
  }

   /**
   * Optional: The last date when a heartbeat was applied to this controller (ms since epoch).
   * @return lastHeartbeat
  **/
  @javax.annotation.Nullable
  public String getLastHeartbeat() {
    return lastHeartbeat;
  }

  public void setLastHeartbeat(String lastHeartbeat) {
    this.lastHeartbeat = lastHeartbeat;
  }


  public Resourcecontrollerk8v3Controller local(Boolean local) {
    this.local = local;
    return this;
  }

   /**
   * Is the controller \\\&quot;local\\\&quot;? \\\&quot;Local\\\&quot; controllers may not be unpaired, removed, or renewed.
   * @return local
  **/
  @javax.annotation.Nullable
  public Boolean getLocal() {
    return local;
  }

  public void setLocal(Boolean local) {
    this.local = local;
  }


  public Resourcecontrollerk8v3Controller modified(String modified) {
    this.modified = modified;
    return this;
  }

   /**
   * Optional: The date this controller was modified (ms since epoch).
   * @return modified
  **/
  @javax.annotation.Nullable
  public String getModified() {
    return modified;
  }

  public void setModified(String modified) {
    this.modified = modified;
  }


  public Resourcecontrollerk8v3Controller name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the controller.
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Resourcecontrollerk8v3Controller resources(Resourcecontrollerk8v3ControllerResources resources) {
    this.resources = resources;
    return this;
  }

   /**
   * Get resources
   * @return resources
  **/
  @javax.annotation.Nullable
  public Resourcecontrollerk8v3ControllerResources getResources() {
    return resources;
  }

  public void setResources(Resourcecontrollerk8v3ControllerResources resources) {
    this.resources = resources;
  }


  public Resourcecontrollerk8v3Controller sinceLastHeartbeat(String sinceLastHeartbeat) {
    this.sinceLastHeartbeat = sinceLastHeartbeat;
    return this;
  }

   /**
   * Optional: The number of ms since the last heartbeat.
   * @return sinceLastHeartbeat
  **/
  @javax.annotation.Nullable
  public String getSinceLastHeartbeat() {
    return sinceLastHeartbeat;
  }

  public void setSinceLastHeartbeat(String sinceLastHeartbeat) {
    this.sinceLastHeartbeat = sinceLastHeartbeat;
  }


  public Resourcecontrollerk8v3Controller status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Optional: The status of the controller. Currently supported values are unpaired, paired, uninstalling.
   * @return status
  **/
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Resourcecontrollerk8v3Controller tenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

   /**
   * Optional: The tenant id for the controller.
   * @return tenantId
  **/
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }


  public Resourcecontrollerk8v3Controller tenantUuid(String tenantUuid) {
    this.tenantUuid = tenantUuid;
    return this;
  }

   /**
   * Optional: The internal ID of the tenant for the controller.
   * @return tenantUuid
  **/
  @javax.annotation.Nullable
  public String getTenantUuid() {
    return tenantUuid;
  }

  public void setTenantUuid(String tenantUuid) {
    this.tenantUuid = tenantUuid;
  }


  public Resourcecontrollerk8v3Controller version(Resourcecontrollerk8v3Version version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nullable
  public Resourcecontrollerk8v3Version getVersion() {
    return version;
  }

  public void setVersion(Resourcecontrollerk8v3Version version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Resourcecontrollerk8v3Controller resourcecontrollerk8v3Controller = (Resourcecontrollerk8v3Controller) o;
    return Objects.equals(this.appIds, resourcecontrollerk8v3Controller.appIds) &&
        Objects.equals(this.apps, resourcecontrollerk8v3Controller.apps) &&
        Objects.equals(this.capability, resourcecontrollerk8v3Controller.capability) &&
        Objects.equals(this.created, resourcecontrollerk8v3Controller.created) &&
        Objects.equals(this.description, resourcecontrollerk8v3Controller.description) &&
        Objects.equals(this.id, resourcecontrollerk8v3Controller.id) &&
        Objects.equals(this.keypair, resourcecontrollerk8v3Controller.keypair) &&
        Objects.equals(this.lastHeartbeat, resourcecontrollerk8v3Controller.lastHeartbeat) &&
        Objects.equals(this.local, resourcecontrollerk8v3Controller.local) &&
        Objects.equals(this.modified, resourcecontrollerk8v3Controller.modified) &&
        Objects.equals(this.name, resourcecontrollerk8v3Controller.name) &&
        Objects.equals(this.resources, resourcecontrollerk8v3Controller.resources) &&
        Objects.equals(this.sinceLastHeartbeat, resourcecontrollerk8v3Controller.sinceLastHeartbeat) &&
        Objects.equals(this.status, resourcecontrollerk8v3Controller.status) &&
        Objects.equals(this.tenantId, resourcecontrollerk8v3Controller.tenantId) &&
        Objects.equals(this.tenantUuid, resourcecontrollerk8v3Controller.tenantUuid) &&
        Objects.equals(this.version, resourcecontrollerk8v3Controller.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appIds, apps, capability, created, description, id, keypair, lastHeartbeat, local, modified, name, resources, sinceLastHeartbeat, status, tenantId, tenantUuid, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Resourcecontrollerk8v3Controller {\n");
    sb.append("    appIds: ").append(toIndentedString(appIds)).append("\n");
    sb.append("    apps: ").append(toIndentedString(apps)).append("\n");
    sb.append("    capability: ").append(toIndentedString(capability)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    keypair: ").append(toIndentedString(keypair)).append("\n");
    sb.append("    lastHeartbeat: ").append(toIndentedString(lastHeartbeat)).append("\n");
    sb.append("    local: ").append(toIndentedString(local)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    sinceLastHeartbeat: ").append(toIndentedString(sinceLastHeartbeat)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    tenantUuid: ").append(toIndentedString(tenantUuid)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("app_ids");
    openapiFields.add("apps");
    openapiFields.add("capability");
    openapiFields.add("created");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("keypair");
    openapiFields.add("last_heartbeat");
    openapiFields.add("local");
    openapiFields.add("modified");
    openapiFields.add("name");
    openapiFields.add("resources");
    openapiFields.add("since_last_heartbeat");
    openapiFields.add("status");
    openapiFields.add("tenant_id");
    openapiFields.add("tenant_uuid");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Resourcecontrollerk8v3Controller
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Resourcecontrollerk8v3Controller.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Resourcecontrollerk8v3Controller is not found in the empty JSON string", Resourcecontrollerk8v3Controller.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Resourcecontrollerk8v3Controller.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Resourcecontrollerk8v3Controller` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("app_ids") != null && !jsonObj.get("app_ids").isJsonNull() && !jsonObj.get("app_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `app_ids` to be an array in the JSON string but got `%s`", jsonObj.get("app_ids").toString()));
      }
      if (jsonObj.get("apps") != null && !jsonObj.get("apps").isJsonNull()) {
        JsonArray jsonArrayapps = jsonObj.getAsJsonArray("apps");
        if (jsonArrayapps != null) {
          // ensure the json data is an array
          if (!jsonObj.get("apps").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `apps` to be an array in the JSON string but got `%s`", jsonObj.get("apps").toString()));
          }

          // validate the optional field `apps` (array)
          for (int i = 0; i < jsonArrayapps.size(); i++) {
            Resourcecontrollerk8v3App.validateJsonElement(jsonArrayapps.get(i));
          };
        }
      }
      if ((jsonObj.get("created") != null && !jsonObj.get("created").isJsonNull()) && !jsonObj.get("created").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created").toString()));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        Resourcecontrollerk8v3TextContent.validateJsonElement(jsonObj.get("description"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `keypair`
      if (jsonObj.get("keypair") != null && !jsonObj.get("keypair").isJsonNull()) {
        Resourcecontrollerk8v3KeyPair.validateJsonElement(jsonObj.get("keypair"));
      }
      if ((jsonObj.get("last_heartbeat") != null && !jsonObj.get("last_heartbeat").isJsonNull()) && !jsonObj.get("last_heartbeat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_heartbeat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_heartbeat").toString()));
      }
      if ((jsonObj.get("modified") != null && !jsonObj.get("modified").isJsonNull()) && !jsonObj.get("modified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modified").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `resources`
      if (jsonObj.get("resources") != null && !jsonObj.get("resources").isJsonNull()) {
        Resourcecontrollerk8v3ControllerResources.validateJsonElement(jsonObj.get("resources"));
      }
      if ((jsonObj.get("since_last_heartbeat") != null && !jsonObj.get("since_last_heartbeat").isJsonNull()) && !jsonObj.get("since_last_heartbeat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `since_last_heartbeat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("since_last_heartbeat").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("tenant_id") != null && !jsonObj.get("tenant_id").isJsonNull()) && !jsonObj.get("tenant_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenant_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenant_id").toString()));
      }
      if ((jsonObj.get("tenant_uuid") != null && !jsonObj.get("tenant_uuid").isJsonNull()) && !jsonObj.get("tenant_uuid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenant_uuid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenant_uuid").toString()));
      }
      // validate the optional field `version`
      if (jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) {
        Resourcecontrollerk8v3Version.validateJsonElement(jsonObj.get("version"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Resourcecontrollerk8v3Controller.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Resourcecontrollerk8v3Controller' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Resourcecontrollerk8v3Controller> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Resourcecontrollerk8v3Controller.class));

       return (TypeAdapter<T>) new TypeAdapter<Resourcecontrollerk8v3Controller>() {
           @Override
           public void write(JsonWriter out, Resourcecontrollerk8v3Controller value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Resourcecontrollerk8v3Controller read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Resourcecontrollerk8v3Controller given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Resourcecontrollerk8v3Controller
  * @throws IOException if the JSON string is invalid with respect to Resourcecontrollerk8v3Controller
  */
  public static Resourcecontrollerk8v3Controller fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Resourcecontrollerk8v3Controller.class);
  }

 /**
  * Convert an instance of Resourcecontrollerk8v3Controller to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

