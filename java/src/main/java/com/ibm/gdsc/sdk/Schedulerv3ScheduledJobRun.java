/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.gdsc.sdk.Schedulerv3ExecutionStatus;
import com.ibm.gdsc.sdk.Schedulerv3TaskType;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.JSON;

/**
 * Schedulerv3ScheduledJobRun
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-18T18:23:51.166908Z[UTC]", comments = "Generator version: 7.6.0")
public class Schedulerv3ScheduledJobRun {
  public static final String SERIALIZED_NAME_COLLECTION_ID = "collection_id";
  @SerializedName(SERIALIZED_NAME_COLLECTION_ID)
  private String collectionId;

  public static final String SERIALIZED_NAME_END_TIME = "end_time";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_JOB_ID = "job_id";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_PREVIOUS_JOB_ID = "previous_job_id";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_JOB_ID)
  private String previousJobId;

  public static final String SERIALIZED_NAME_QUERY_FROM = "query_from";
  @SerializedName(SERIALIZED_NAME_QUERY_FROM)
  private String queryFrom;

  public static final String SERIALIZED_NAME_QUERY_TO = "query_to";
  @SerializedName(SERIALIZED_NAME_QUERY_TO)
  private String queryTo;

  public static final String SERIALIZED_NAME_QUEUE_TIME = "queue_time";
  @SerializedName(SERIALIZED_NAME_QUEUE_TIME)
  private OffsetDateTime queueTime;

  public static final String SERIALIZED_NAME_RUN_DETAIL = "run_detail";
  @SerializedName(SERIALIZED_NAME_RUN_DETAIL)
  private String runDetail;

  public static final String SERIALIZED_NAME_SCHEDULE_ID = "schedule_id";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_ID)
  private String scheduleId;

  public static final String SERIALIZED_NAME_START_TIME = "start_time";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Schedulerv3ExecutionStatus status = Schedulerv3ExecutionStatus.UNDEFINED;

  public static final String SERIALIZED_NAME_TASK_ID = "task_id";
  @SerializedName(SERIALIZED_NAME_TASK_ID)
  private String taskId;

  public static final String SERIALIZED_NAME_TASK_NAME = "task_name";
  @SerializedName(SERIALIZED_NAME_TASK_NAME)
  private String taskName;

  public static final String SERIALIZED_NAME_TASK_TYPE = "task_type";
  @SerializedName(SERIALIZED_NAME_TASK_TYPE)
  private Schedulerv3TaskType taskType = Schedulerv3TaskType.UNDEFINED_JOBTYPE;

  public Schedulerv3ScheduledJobRun() {
  }

  public Schedulerv3ScheduledJobRun collectionId(String collectionId) {
    this.collectionId = collectionId;
    return this;
  }

   /**
   * Get collectionId
   * @return collectionId
  **/
  @javax.annotation.Nullable
  public String getCollectionId() {
    return collectionId;
  }

  public void setCollectionId(String collectionId) {
    this.collectionId = collectionId;
  }


  public Schedulerv3ScheduledJobRun endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

   /**
   * Get endTime
   * @return endTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public Schedulerv3ScheduledJobRun jobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

   /**
   * Get jobId
   * @return jobId
  **/
  @javax.annotation.Nullable
  public String getJobId() {
    return jobId;
  }

  public void setJobId(String jobId) {
    this.jobId = jobId;
  }


  public Schedulerv3ScheduledJobRun previousJobId(String previousJobId) {
    this.previousJobId = previousJobId;
    return this;
  }

   /**
   * Get previousJobId
   * @return previousJobId
  **/
  @javax.annotation.Nullable
  public String getPreviousJobId() {
    return previousJobId;
  }

  public void setPreviousJobId(String previousJobId) {
    this.previousJobId = previousJobId;
  }


  public Schedulerv3ScheduledJobRun queryFrom(String queryFrom) {
    this.queryFrom = queryFrom;
    return this;
  }

   /**
   * Get queryFrom
   * @return queryFrom
  **/
  @javax.annotation.Nullable
  public String getQueryFrom() {
    return queryFrom;
  }

  public void setQueryFrom(String queryFrom) {
    this.queryFrom = queryFrom;
  }


  public Schedulerv3ScheduledJobRun queryTo(String queryTo) {
    this.queryTo = queryTo;
    return this;
  }

   /**
   * Get queryTo
   * @return queryTo
  **/
  @javax.annotation.Nullable
  public String getQueryTo() {
    return queryTo;
  }

  public void setQueryTo(String queryTo) {
    this.queryTo = queryTo;
  }


  public Schedulerv3ScheduledJobRun queueTime(OffsetDateTime queueTime) {
    this.queueTime = queueTime;
    return this;
  }

   /**
   * Get queueTime
   * @return queueTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getQueueTime() {
    return queueTime;
  }

  public void setQueueTime(OffsetDateTime queueTime) {
    this.queueTime = queueTime;
  }


  public Schedulerv3ScheduledJobRun runDetail(String runDetail) {
    this.runDetail = runDetail;
    return this;
  }

   /**
   * Get runDetail
   * @return runDetail
  **/
  @javax.annotation.Nullable
  public String getRunDetail() {
    return runDetail;
  }

  public void setRunDetail(String runDetail) {
    this.runDetail = runDetail;
  }


  public Schedulerv3ScheduledJobRun scheduleId(String scheduleId) {
    this.scheduleId = scheduleId;
    return this;
  }

   /**
   * Get scheduleId
   * @return scheduleId
  **/
  @javax.annotation.Nullable
  public String getScheduleId() {
    return scheduleId;
  }

  public void setScheduleId(String scheduleId) {
    this.scheduleId = scheduleId;
  }


  public Schedulerv3ScheduledJobRun startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

   /**
   * Get startTime
   * @return startTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public Schedulerv3ScheduledJobRun status(Schedulerv3ExecutionStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  public Schedulerv3ExecutionStatus getStatus() {
    return status;
  }

  public void setStatus(Schedulerv3ExecutionStatus status) {
    this.status = status;
  }


  public Schedulerv3ScheduledJobRun taskId(String taskId) {
    this.taskId = taskId;
    return this;
  }

   /**
   * Get taskId
   * @return taskId
  **/
  @javax.annotation.Nullable
  public String getTaskId() {
    return taskId;
  }

  public void setTaskId(String taskId) {
    this.taskId = taskId;
  }


  public Schedulerv3ScheduledJobRun taskName(String taskName) {
    this.taskName = taskName;
    return this;
  }

   /**
   * Get taskName
   * @return taskName
  **/
  @javax.annotation.Nullable
  public String getTaskName() {
    return taskName;
  }

  public void setTaskName(String taskName) {
    this.taskName = taskName;
  }


  public Schedulerv3ScheduledJobRun taskType(Schedulerv3TaskType taskType) {
    this.taskType = taskType;
    return this;
  }

   /**
   * Get taskType
   * @return taskType
  **/
  @javax.annotation.Nullable
  public Schedulerv3TaskType getTaskType() {
    return taskType;
  }

  public void setTaskType(Schedulerv3TaskType taskType) {
    this.taskType = taskType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Schedulerv3ScheduledJobRun schedulerv3ScheduledJobRun = (Schedulerv3ScheduledJobRun) o;
    return Objects.equals(this.collectionId, schedulerv3ScheduledJobRun.collectionId) &&
        Objects.equals(this.endTime, schedulerv3ScheduledJobRun.endTime) &&
        Objects.equals(this.jobId, schedulerv3ScheduledJobRun.jobId) &&
        Objects.equals(this.previousJobId, schedulerv3ScheduledJobRun.previousJobId) &&
        Objects.equals(this.queryFrom, schedulerv3ScheduledJobRun.queryFrom) &&
        Objects.equals(this.queryTo, schedulerv3ScheduledJobRun.queryTo) &&
        Objects.equals(this.queueTime, schedulerv3ScheduledJobRun.queueTime) &&
        Objects.equals(this.runDetail, schedulerv3ScheduledJobRun.runDetail) &&
        Objects.equals(this.scheduleId, schedulerv3ScheduledJobRun.scheduleId) &&
        Objects.equals(this.startTime, schedulerv3ScheduledJobRun.startTime) &&
        Objects.equals(this.status, schedulerv3ScheduledJobRun.status) &&
        Objects.equals(this.taskId, schedulerv3ScheduledJobRun.taskId) &&
        Objects.equals(this.taskName, schedulerv3ScheduledJobRun.taskName) &&
        Objects.equals(this.taskType, schedulerv3ScheduledJobRun.taskType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(collectionId, endTime, jobId, previousJobId, queryFrom, queryTo, queueTime, runDetail, scheduleId, startTime, status, taskId, taskName, taskType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Schedulerv3ScheduledJobRun {\n");
    sb.append("    collectionId: ").append(toIndentedString(collectionId)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    previousJobId: ").append(toIndentedString(previousJobId)).append("\n");
    sb.append("    queryFrom: ").append(toIndentedString(queryFrom)).append("\n");
    sb.append("    queryTo: ").append(toIndentedString(queryTo)).append("\n");
    sb.append("    queueTime: ").append(toIndentedString(queueTime)).append("\n");
    sb.append("    runDetail: ").append(toIndentedString(runDetail)).append("\n");
    sb.append("    scheduleId: ").append(toIndentedString(scheduleId)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    taskId: ").append(toIndentedString(taskId)).append("\n");
    sb.append("    taskName: ").append(toIndentedString(taskName)).append("\n");
    sb.append("    taskType: ").append(toIndentedString(taskType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("collection_id");
    openapiFields.add("end_time");
    openapiFields.add("job_id");
    openapiFields.add("previous_job_id");
    openapiFields.add("query_from");
    openapiFields.add("query_to");
    openapiFields.add("queue_time");
    openapiFields.add("run_detail");
    openapiFields.add("schedule_id");
    openapiFields.add("start_time");
    openapiFields.add("status");
    openapiFields.add("task_id");
    openapiFields.add("task_name");
    openapiFields.add("task_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Schedulerv3ScheduledJobRun
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Schedulerv3ScheduledJobRun.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Schedulerv3ScheduledJobRun is not found in the empty JSON string", Schedulerv3ScheduledJobRun.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Schedulerv3ScheduledJobRun.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Schedulerv3ScheduledJobRun` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("collection_id") != null && !jsonObj.get("collection_id").isJsonNull()) && !jsonObj.get("collection_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `collection_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("collection_id").toString()));
      }
      if ((jsonObj.get("job_id") != null && !jsonObj.get("job_id").isJsonNull()) && !jsonObj.get("job_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `job_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("job_id").toString()));
      }
      if ((jsonObj.get("previous_job_id") != null && !jsonObj.get("previous_job_id").isJsonNull()) && !jsonObj.get("previous_job_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `previous_job_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("previous_job_id").toString()));
      }
      if ((jsonObj.get("query_from") != null && !jsonObj.get("query_from").isJsonNull()) && !jsonObj.get("query_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query_from").toString()));
      }
      if ((jsonObj.get("query_to") != null && !jsonObj.get("query_to").isJsonNull()) && !jsonObj.get("query_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query_to").toString()));
      }
      if ((jsonObj.get("run_detail") != null && !jsonObj.get("run_detail").isJsonNull()) && !jsonObj.get("run_detail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `run_detail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("run_detail").toString()));
      }
      if ((jsonObj.get("schedule_id") != null && !jsonObj.get("schedule_id").isJsonNull()) && !jsonObj.get("schedule_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schedule_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schedule_id").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        Schedulerv3ExecutionStatus.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("task_id") != null && !jsonObj.get("task_id").isJsonNull()) && !jsonObj.get("task_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `task_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("task_id").toString()));
      }
      if ((jsonObj.get("task_name") != null && !jsonObj.get("task_name").isJsonNull()) && !jsonObj.get("task_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `task_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("task_name").toString()));
      }
      // validate the optional field `task_type`
      if (jsonObj.get("task_type") != null && !jsonObj.get("task_type").isJsonNull()) {
        Schedulerv3TaskType.validateJsonElement(jsonObj.get("task_type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Schedulerv3ScheduledJobRun.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Schedulerv3ScheduledJobRun' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Schedulerv3ScheduledJobRun> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Schedulerv3ScheduledJobRun.class));

       return (TypeAdapter<T>) new TypeAdapter<Schedulerv3ScheduledJobRun>() {
           @Override
           public void write(JsonWriter out, Schedulerv3ScheduledJobRun value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Schedulerv3ScheduledJobRun read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Schedulerv3ScheduledJobRun given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Schedulerv3ScheduledJobRun
  * @throws IOException if the JSON string is invalid with respect to Schedulerv3ScheduledJobRun
  */
  public static Schedulerv3ScheduledJobRun fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Schedulerv3ScheduledJobRun.class);
  }

 /**
  * Convert an instance of Schedulerv3ScheduledJobRun to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

