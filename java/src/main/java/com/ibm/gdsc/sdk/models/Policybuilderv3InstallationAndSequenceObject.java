/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.sdk.JSON;

/**
 * Object indicating Installation and UI Sequence of the policies.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-07T13:24:05.648078332-08:00[America/Los_Angeles]", comments = "Generator version: 7.6.0")
public class Policybuilderv3InstallationAndSequenceObject {
  public static final String SERIALIZED_NAME_EDGE_IDENTIFIER = "edge_identifier";
  @SerializedName(SERIALIZED_NAME_EDGE_IDENTIFIER)
  private String edgeIdentifier;

  public static final String SERIALIZED_NAME_INSTALLATION_SEQUENCE = "installation_sequence";
  @SerializedName(SERIALIZED_NAME_INSTALLATION_SEQUENCE)
  private Integer installationSequence;

  public static final String SERIALIZED_NAME_POLICY_ID = "policy_id";
  @SerializedName(SERIALIZED_NAME_POLICY_ID)
  private String policyId;

  public static final String SERIALIZED_NAME_UI_SEQUENCE = "ui_sequence";
  @SerializedName(SERIALIZED_NAME_UI_SEQUENCE)
  private Integer uiSequence;

  public Policybuilderv3InstallationAndSequenceObject() {
  }

  public Policybuilderv3InstallationAndSequenceObject edgeIdentifier(String edgeIdentifier) {
    this.edgeIdentifier = edgeIdentifier;
    return this;
  }

   /**
   * Get edgeIdentifier
   * @return edgeIdentifier
  **/
  @javax.annotation.Nullable
  public String getEdgeIdentifier() {
    return edgeIdentifier;
  }

  public void setEdgeIdentifier(String edgeIdentifier) {
    this.edgeIdentifier = edgeIdentifier;
  }


  public Policybuilderv3InstallationAndSequenceObject installationSequence(Integer installationSequence) {
    this.installationSequence = installationSequence;
    return this;
  }

   /**
   * Sequence in which the policy is to be installed.
   * @return installationSequence
  **/
  @javax.annotation.Nullable
  public Integer getInstallationSequence() {
    return installationSequence;
  }

  public void setInstallationSequence(Integer installationSequence) {
    this.installationSequence = installationSequence;
  }


  public Policybuilderv3InstallationAndSequenceObject policyId(String policyId) {
    this.policyId = policyId;
    return this;
  }

   /**
   * Policy id to perform sequencing on.
   * @return policyId
  **/
  @javax.annotation.Nullable
  public String getPolicyId() {
    return policyId;
  }

  public void setPolicyId(String policyId) {
    this.policyId = policyId;
  }


  public Policybuilderv3InstallationAndSequenceObject uiSequence(Integer uiSequence) {
    this.uiSequence = uiSequence;
    return this;
  }

   /**
   * Sequence of the policy in UI.
   * @return uiSequence
  **/
  @javax.annotation.Nullable
  public Integer getUiSequence() {
    return uiSequence;
  }

  public void setUiSequence(Integer uiSequence) {
    this.uiSequence = uiSequence;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Policybuilderv3InstallationAndSequenceObject policybuilderv3InstallationAndSequenceObject = (Policybuilderv3InstallationAndSequenceObject) o;
    return Objects.equals(this.edgeIdentifier, policybuilderv3InstallationAndSequenceObject.edgeIdentifier) &&
        Objects.equals(this.installationSequence, policybuilderv3InstallationAndSequenceObject.installationSequence) &&
        Objects.equals(this.policyId, policybuilderv3InstallationAndSequenceObject.policyId) &&
        Objects.equals(this.uiSequence, policybuilderv3InstallationAndSequenceObject.uiSequence);
  }

  @Override
  public int hashCode() {
    return Objects.hash(edgeIdentifier, installationSequence, policyId, uiSequence);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Policybuilderv3InstallationAndSequenceObject {\n");
    sb.append("    edgeIdentifier: ").append(toIndentedString(edgeIdentifier)).append("\n");
    sb.append("    installationSequence: ").append(toIndentedString(installationSequence)).append("\n");
    sb.append("    policyId: ").append(toIndentedString(policyId)).append("\n");
    sb.append("    uiSequence: ").append(toIndentedString(uiSequence)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("edge_identifier");
    openapiFields.add("installation_sequence");
    openapiFields.add("policy_id");
    openapiFields.add("ui_sequence");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Policybuilderv3InstallationAndSequenceObject
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Policybuilderv3InstallationAndSequenceObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Policybuilderv3InstallationAndSequenceObject is not found in the empty JSON string", Policybuilderv3InstallationAndSequenceObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Policybuilderv3InstallationAndSequenceObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Policybuilderv3InstallationAndSequenceObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("edge_identifier") != null && !jsonObj.get("edge_identifier").isJsonNull()) && !jsonObj.get("edge_identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `edge_identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("edge_identifier").toString()));
      }
      if ((jsonObj.get("policy_id") != null && !jsonObj.get("policy_id").isJsonNull()) && !jsonObj.get("policy_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policy_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policy_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Policybuilderv3InstallationAndSequenceObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Policybuilderv3InstallationAndSequenceObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Policybuilderv3InstallationAndSequenceObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Policybuilderv3InstallationAndSequenceObject.class));

       return (TypeAdapter<T>) new TypeAdapter<Policybuilderv3InstallationAndSequenceObject>() {
           @Override
           public void write(JsonWriter out, Policybuilderv3InstallationAndSequenceObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Policybuilderv3InstallationAndSequenceObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Policybuilderv3InstallationAndSequenceObject given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Policybuilderv3InstallationAndSequenceObject
  * @throws IOException if the JSON string is invalid with respect to Policybuilderv3InstallationAndSequenceObject
  */
  public static Policybuilderv3InstallationAndSequenceObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Policybuilderv3InstallationAndSequenceObject.class);
  }

 /**
  * Convert an instance of Policybuilderv3InstallationAndSequenceObject to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

