/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.JSON;

/**
 * Groupbuilderv3GdpGroup
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-18T20:02:04.461512Z[UTC]", comments = "Generator version: 7.6.0")
public class Groupbuilderv3GdpGroup {
  public static final String SERIALIZED_NAME_APPLICATION = "application";
  @SerializedName(SERIALIZED_NAME_APPLICATION)
  private String application;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HIERARCHICAL = "hierarchical";
  @SerializedName(SERIALIZED_NAME_HIERARCHICAL)
  private Boolean hierarchical;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_MEMBER_COUNT = "member_count";
  @SerializedName(SERIALIZED_NAME_MEMBER_COUNT)
  private Integer memberCount;

  public static final String SERIALIZED_NAME_MEMBERS = "members";
  @SerializedName(SERIALIZED_NAME_MEMBERS)
  private String members;

  public static final String SERIALIZED_NAME_TUPLE_COUNT = "tuple_count";
  @SerializedName(SERIALIZED_NAME_TUPLE_COUNT)
  private Integer tupleCount;

  public static final String SERIALIZED_NAME_TUPLES = "tuples";
  @SerializedName(SERIALIZED_NAME_TUPLES)
  private String tuples;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_TYPE_ID = "type_id";
  @SerializedName(SERIALIZED_NAME_TYPE_ID)
  private Integer typeId;

  public Groupbuilderv3GdpGroup() {
  }

  public Groupbuilderv3GdpGroup application(String application) {
    this.application = application;
    return this;
  }

   /**
   * Application of the group.
   * @return application
  **/
  @javax.annotation.Nullable
  public String getApplication() {
    return application;
  }

  public void setApplication(String application) {
    this.application = application;
  }


  public Groupbuilderv3GdpGroup description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Name of the group.
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Groupbuilderv3GdpGroup hierarchical(Boolean hierarchical) {
    this.hierarchical = hierarchical;
    return this;
  }

   /**
   * If the group is nested or not.
   * @return hierarchical
  **/
  @javax.annotation.Nullable
  public Boolean getHierarchical() {
    return hierarchical;
  }

  public void setHierarchical(Boolean hierarchical) {
    this.hierarchical = hierarchical;
  }


  public Groupbuilderv3GdpGroup id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * GDP group ID.
   * @return id
  **/
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public Groupbuilderv3GdpGroup memberCount(Integer memberCount) {
    this.memberCount = memberCount;
    return this;
  }

   /**
   * Number of group members.
   * @return memberCount
  **/
  @javax.annotation.Nullable
  public Integer getMemberCount() {
    return memberCount;
  }

  public void setMemberCount(Integer memberCount) {
    this.memberCount = memberCount;
  }


  public Groupbuilderv3GdpGroup members(String members) {
    this.members = members;
    return this;
  }

   /**
   * Json object of nested or regular members.
   * @return members
  **/
  @javax.annotation.Nullable
  public String getMembers() {
    return members;
  }

  public void setMembers(String members) {
    this.members = members;
  }


  public Groupbuilderv3GdpGroup tupleCount(Integer tupleCount) {
    this.tupleCount = tupleCount;
    return this;
  }

   /**
   * Number of tuples.
   * @return tupleCount
  **/
  @javax.annotation.Nullable
  public Integer getTupleCount() {
    return tupleCount;
  }

  public void setTupleCount(Integer tupleCount) {
    this.tupleCount = tupleCount;
  }


  public Groupbuilderv3GdpGroup tuples(String tuples) {
    this.tuples = tuples;
    return this;
  }

   /**
   * The tuples of the group.
   * @return tuples
  **/
  @javax.annotation.Nullable
  public String getTuples() {
    return tuples;
  }

  public void setTuples(String tuples) {
    this.tuples = tuples;
  }


  public Groupbuilderv3GdpGroup type(String type) {
    this.type = type;
    return this;
  }

   /**
   * GDP type name.
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public Groupbuilderv3GdpGroup typeId(Integer typeId) {
    this.typeId = typeId;
    return this;
  }

   /**
   * GDP type ID of group.
   * @return typeId
  **/
  @javax.annotation.Nullable
  public Integer getTypeId() {
    return typeId;
  }

  public void setTypeId(Integer typeId) {
    this.typeId = typeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Groupbuilderv3GdpGroup groupbuilderv3GdpGroup = (Groupbuilderv3GdpGroup) o;
    return Objects.equals(this.application, groupbuilderv3GdpGroup.application) &&
        Objects.equals(this.description, groupbuilderv3GdpGroup.description) &&
        Objects.equals(this.hierarchical, groupbuilderv3GdpGroup.hierarchical) &&
        Objects.equals(this.id, groupbuilderv3GdpGroup.id) &&
        Objects.equals(this.memberCount, groupbuilderv3GdpGroup.memberCount) &&
        Objects.equals(this.members, groupbuilderv3GdpGroup.members) &&
        Objects.equals(this.tupleCount, groupbuilderv3GdpGroup.tupleCount) &&
        Objects.equals(this.tuples, groupbuilderv3GdpGroup.tuples) &&
        Objects.equals(this.type, groupbuilderv3GdpGroup.type) &&
        Objects.equals(this.typeId, groupbuilderv3GdpGroup.typeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(application, description, hierarchical, id, memberCount, members, tupleCount, tuples, type, typeId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Groupbuilderv3GdpGroup {\n");
    sb.append("    application: ").append(toIndentedString(application)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    hierarchical: ").append(toIndentedString(hierarchical)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    memberCount: ").append(toIndentedString(memberCount)).append("\n");
    sb.append("    members: ").append(toIndentedString(members)).append("\n");
    sb.append("    tupleCount: ").append(toIndentedString(tupleCount)).append("\n");
    sb.append("    tuples: ").append(toIndentedString(tuples)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    typeId: ").append(toIndentedString(typeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("application");
    openapiFields.add("description");
    openapiFields.add("hierarchical");
    openapiFields.add("id");
    openapiFields.add("member_count");
    openapiFields.add("members");
    openapiFields.add("tuple_count");
    openapiFields.add("tuples");
    openapiFields.add("type");
    openapiFields.add("type_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Groupbuilderv3GdpGroup
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Groupbuilderv3GdpGroup.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Groupbuilderv3GdpGroup is not found in the empty JSON string", Groupbuilderv3GdpGroup.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Groupbuilderv3GdpGroup.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Groupbuilderv3GdpGroup` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("application") != null && !jsonObj.get("application").isJsonNull()) && !jsonObj.get("application").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `application` to be a primitive type in the JSON string but got `%s`", jsonObj.get("application").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("members") != null && !jsonObj.get("members").isJsonNull()) && !jsonObj.get("members").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `members` to be a primitive type in the JSON string but got `%s`", jsonObj.get("members").toString()));
      }
      if ((jsonObj.get("tuples") != null && !jsonObj.get("tuples").isJsonNull()) && !jsonObj.get("tuples").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tuples` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tuples").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Groupbuilderv3GdpGroup.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Groupbuilderv3GdpGroup' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Groupbuilderv3GdpGroup> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Groupbuilderv3GdpGroup.class));

       return (TypeAdapter<T>) new TypeAdapter<Groupbuilderv3GdpGroup>() {
           @Override
           public void write(JsonWriter out, Groupbuilderv3GdpGroup value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Groupbuilderv3GdpGroup read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Groupbuilderv3GdpGroup given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Groupbuilderv3GdpGroup
  * @throws IOException if the JSON string is invalid with respect to Groupbuilderv3GdpGroup
  */
  public static Groupbuilderv3GdpGroup fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Groupbuilderv3GdpGroup.class);
  }

 /**
  * Convert an instance of Groupbuilderv3GdpGroup to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

