/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.gdsc.sdk.Dashboardsv3Dashboard;
import com.ibm.gdsc.sdk.Dashboardsv3UpdateType;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.JSON;

/**
 * UpdateDashboardRequest is the argument type used to update a dashboard with the UpdateDashboard() api.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-18T18:23:51.166908Z[UTC]", comments = "Generator version: 7.6.0")
public class Dashboardsv3UpdateDashboardRequest {
  public static final String SERIALIZED_NAME_DASHBOARD = "dashboard";
  @SerializedName(SERIALIZED_NAME_DASHBOARD)
  private Dashboardsv3Dashboard dashboard;

  public static final String SERIALIZED_NAME_DASHBOARD_ID = "dashboard_id";
  @SerializedName(SERIALIZED_NAME_DASHBOARD_ID)
  private String dashboardId;

  public static final String SERIALIZED_NAME_UPDATE_HINT = "update_hint";
  @SerializedName(SERIALIZED_NAME_UPDATE_HINT)
  private String updateHint;

  public static final String SERIALIZED_NAME_UPDATE_TYPE = "update_type";
  @SerializedName(SERIALIZED_NAME_UPDATE_TYPE)
  private Dashboardsv3UpdateType updateType = Dashboardsv3UpdateType.UNDEFINED_UPDATE_TYPE;

  public Dashboardsv3UpdateDashboardRequest() {
  }

  public Dashboardsv3UpdateDashboardRequest dashboard(Dashboardsv3Dashboard dashboard) {
    this.dashboard = dashboard;
    return this;
  }

   /**
   * Get dashboard
   * @return dashboard
  **/
  @javax.annotation.Nullable
  public Dashboardsv3Dashboard getDashboard() {
    return dashboard;
  }

  public void setDashboard(Dashboardsv3Dashboard dashboard) {
    this.dashboard = dashboard;
  }


  public Dashboardsv3UpdateDashboardRequest dashboardId(String dashboardId) {
    this.dashboardId = dashboardId;
    return this;
  }

   /**
   * The id of the dashboard that was updated.
   * @return dashboardId
  **/
  @javax.annotation.Nullable
  public String getDashboardId() {
    return dashboardId;
  }

  public void setDashboardId(String dashboardId) {
    this.dashboardId = dashboardId;
  }


  public Dashboardsv3UpdateDashboardRequest updateHint(String updateHint) {
    this.updateHint = updateHint;
    return this;
  }

   /**
   * Optional: A hint describing the update used by the activity log.
   * @return updateHint
  **/
  @javax.annotation.Nullable
  public String getUpdateHint() {
    return updateHint;
  }

  public void setUpdateHint(String updateHint) {
    this.updateHint = updateHint;
  }


  public Dashboardsv3UpdateDashboardRequest updateType(Dashboardsv3UpdateType updateType) {
    this.updateType = updateType;
    return this;
  }

   /**
   * Get updateType
   * @return updateType
  **/
  @javax.annotation.Nullable
  public Dashboardsv3UpdateType getUpdateType() {
    return updateType;
  }

  public void setUpdateType(Dashboardsv3UpdateType updateType) {
    this.updateType = updateType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dashboardsv3UpdateDashboardRequest dashboardsv3UpdateDashboardRequest = (Dashboardsv3UpdateDashboardRequest) o;
    return Objects.equals(this.dashboard, dashboardsv3UpdateDashboardRequest.dashboard) &&
        Objects.equals(this.dashboardId, dashboardsv3UpdateDashboardRequest.dashboardId) &&
        Objects.equals(this.updateHint, dashboardsv3UpdateDashboardRequest.updateHint) &&
        Objects.equals(this.updateType, dashboardsv3UpdateDashboardRequest.updateType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dashboard, dashboardId, updateHint, updateType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dashboardsv3UpdateDashboardRequest {\n");
    sb.append("    dashboard: ").append(toIndentedString(dashboard)).append("\n");
    sb.append("    dashboardId: ").append(toIndentedString(dashboardId)).append("\n");
    sb.append("    updateHint: ").append(toIndentedString(updateHint)).append("\n");
    sb.append("    updateType: ").append(toIndentedString(updateType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dashboard");
    openapiFields.add("dashboard_id");
    openapiFields.add("update_hint");
    openapiFields.add("update_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Dashboardsv3UpdateDashboardRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dashboardsv3UpdateDashboardRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dashboardsv3UpdateDashboardRequest is not found in the empty JSON string", Dashboardsv3UpdateDashboardRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dashboardsv3UpdateDashboardRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dashboardsv3UpdateDashboardRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dashboard`
      if (jsonObj.get("dashboard") != null && !jsonObj.get("dashboard").isJsonNull()) {
        Dashboardsv3Dashboard.validateJsonElement(jsonObj.get("dashboard"));
      }
      if ((jsonObj.get("dashboard_id") != null && !jsonObj.get("dashboard_id").isJsonNull()) && !jsonObj.get("dashboard_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dashboard_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dashboard_id").toString()));
      }
      if ((jsonObj.get("update_hint") != null && !jsonObj.get("update_hint").isJsonNull()) && !jsonObj.get("update_hint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `update_hint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("update_hint").toString()));
      }
      // validate the optional field `update_type`
      if (jsonObj.get("update_type") != null && !jsonObj.get("update_type").isJsonNull()) {
        Dashboardsv3UpdateType.validateJsonElement(jsonObj.get("update_type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dashboardsv3UpdateDashboardRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dashboardsv3UpdateDashboardRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dashboardsv3UpdateDashboardRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dashboardsv3UpdateDashboardRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<Dashboardsv3UpdateDashboardRequest>() {
           @Override
           public void write(JsonWriter out, Dashboardsv3UpdateDashboardRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dashboardsv3UpdateDashboardRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Dashboardsv3UpdateDashboardRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Dashboardsv3UpdateDashboardRequest
  * @throws IOException if the JSON string is invalid with respect to Dashboardsv3UpdateDashboardRequest
  */
  public static Dashboardsv3UpdateDashboardRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dashboardsv3UpdateDashboardRequest.class);
  }

 /**
  * Convert an instance of Dashboardsv3UpdateDashboardRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

