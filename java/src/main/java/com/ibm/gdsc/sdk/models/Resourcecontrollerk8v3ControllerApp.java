/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3AppDeployment;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3AppHpa;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3Container;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3ControllerAppFile;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3ControllerAppSecret;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3InitContainer;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.sdk.JSON;

/**
 * Resourcecontrollerk8v3ControllerApp
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-07T13:24:05.648078332-08:00[America/Los_Angeles]", comments = "Generator version: 7.6.0")
public class Resourcecontrollerk8v3ControllerApp {
  public static final String SERIALIZED_NAME_CONTAINER = "container";
  @SerializedName(SERIALIZED_NAME_CONTAINER)
  private Resourcecontrollerk8v3Container container;

  public static final String SERIALIZED_NAME_DEPLOYMENT = "deployment";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT)
  private Resourcecontrollerk8v3AppDeployment deployment;

  public static final String SERIALIZED_NAME_EMPTY_DIR = "empty_dir";
  @SerializedName(SERIALIZED_NAME_EMPTY_DIR)
  private String emptyDir;

  public static final String SERIALIZED_NAME_FILES = "files";
  @SerializedName(SERIALIZED_NAME_FILES)
  private List<Resourcecontrollerk8v3ControllerAppFile> files = new ArrayList<>();

  public static final String SERIALIZED_NAME_HPA = "hpa";
  @SerializedName(SERIALIZED_NAME_HPA)
  private Resourcecontrollerk8v3AppHpa hpa;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INIT_CONTAINERS = "init_containers";
  @SerializedName(SERIALIZED_NAME_INIT_CONTAINERS)
  private List<Resourcecontrollerk8v3InitContainer> initContainers = new ArrayList<>();

  public static final String SERIALIZED_NAME_MODIFIED = "modified";
  @SerializedName(SERIALIZED_NAME_MODIFIED)
  private String modified;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SECRET_KEY = "secret_key";
  @SerializedName(SERIALIZED_NAME_SECRET_KEY)
  private String secretKey;

  public static final String SERIALIZED_NAME_SECRETS = "secrets";
  @SerializedName(SERIALIZED_NAME_SECRETS)
  private List<Resourcecontrollerk8v3ControllerAppSecret> secrets = new ArrayList<>();

  public Resourcecontrollerk8v3ControllerApp() {
  }

  public Resourcecontrollerk8v3ControllerApp container(Resourcecontrollerk8v3Container container) {
    this.container = container;
    return this;
  }

   /**
   * Get container
   * @return container
  **/
  @javax.annotation.Nullable
  public Resourcecontrollerk8v3Container getContainer() {
    return container;
  }

  public void setContainer(Resourcecontrollerk8v3Container container) {
    this.container = container;
  }


  public Resourcecontrollerk8v3ControllerApp deployment(Resourcecontrollerk8v3AppDeployment deployment) {
    this.deployment = deployment;
    return this;
  }

   /**
   * Get deployment
   * @return deployment
  **/
  @javax.annotation.Nullable
  public Resourcecontrollerk8v3AppDeployment getDeployment() {
    return deployment;
  }

  public void setDeployment(Resourcecontrollerk8v3AppDeployment deployment) {
    this.deployment = deployment;
  }


  public Resourcecontrollerk8v3ControllerApp emptyDir(String emptyDir) {
    this.emptyDir = emptyDir;
    return this;
  }

   /**
   * Get emptyDir
   * @return emptyDir
  **/
  @javax.annotation.Nullable
  public String getEmptyDir() {
    return emptyDir;
  }

  public void setEmptyDir(String emptyDir) {
    this.emptyDir = emptyDir;
  }


  public Resourcecontrollerk8v3ControllerApp files(List<Resourcecontrollerk8v3ControllerAppFile> files) {
    this.files = files;
    return this;
  }

  public Resourcecontrollerk8v3ControllerApp addFilesItem(Resourcecontrollerk8v3ControllerAppFile filesItem) {
    if (this.files == null) {
      this.files = new ArrayList<>();
    }
    this.files.add(filesItem);
    return this;
  }

   /**
   * Get files
   * @return files
  **/
  @javax.annotation.Nullable
  public List<Resourcecontrollerk8v3ControllerAppFile> getFiles() {
    return files;
  }

  public void setFiles(List<Resourcecontrollerk8v3ControllerAppFile> files) {
    this.files = files;
  }


  public Resourcecontrollerk8v3ControllerApp hpa(Resourcecontrollerk8v3AppHpa hpa) {
    this.hpa = hpa;
    return this;
  }

   /**
   * Get hpa
   * @return hpa
  **/
  @javax.annotation.Nullable
  public Resourcecontrollerk8v3AppHpa getHpa() {
    return hpa;
  }

  public void setHpa(Resourcecontrollerk8v3AppHpa hpa) {
    this.hpa = hpa;
  }


  public Resourcecontrollerk8v3ControllerApp id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The internal ID of the app.
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Resourcecontrollerk8v3ControllerApp initContainers(List<Resourcecontrollerk8v3InitContainer> initContainers) {
    this.initContainers = initContainers;
    return this;
  }

  public Resourcecontrollerk8v3ControllerApp addInitContainersItem(Resourcecontrollerk8v3InitContainer initContainersItem) {
    if (this.initContainers == null) {
      this.initContainers = new ArrayList<>();
    }
    this.initContainers.add(initContainersItem);
    return this;
  }

   /**
   * Get initContainers
   * @return initContainers
  **/
  @javax.annotation.Nullable
  public List<Resourcecontrollerk8v3InitContainer> getInitContainers() {
    return initContainers;
  }

  public void setInitContainers(List<Resourcecontrollerk8v3InitContainer> initContainers) {
    this.initContainers = initContainers;
  }


  public Resourcecontrollerk8v3ControllerApp modified(String modified) {
    this.modified = modified;
    return this;
  }

   /**
   * The date this app was modified (ms since epoch).
   * @return modified
  **/
  @javax.annotation.Nullable
  public String getModified() {
    return modified;
  }

  public void setModified(String modified) {
    this.modified = modified;
  }


  public Resourcecontrollerk8v3ControllerApp name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The name of the app.
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Resourcecontrollerk8v3ControllerApp secretKey(String secretKey) {
    this.secretKey = secretKey;
    return this;
  }

   /**
   * Get secretKey
   * @return secretKey
  **/
  @javax.annotation.Nullable
  public String getSecretKey() {
    return secretKey;
  }

  public void setSecretKey(String secretKey) {
    this.secretKey = secretKey;
  }


  public Resourcecontrollerk8v3ControllerApp secrets(List<Resourcecontrollerk8v3ControllerAppSecret> secrets) {
    this.secrets = secrets;
    return this;
  }

  public Resourcecontrollerk8v3ControllerApp addSecretsItem(Resourcecontrollerk8v3ControllerAppSecret secretsItem) {
    if (this.secrets == null) {
      this.secrets = new ArrayList<>();
    }
    this.secrets.add(secretsItem);
    return this;
  }

   /**
   * Get secrets
   * @return secrets
  **/
  @javax.annotation.Nullable
  public List<Resourcecontrollerk8v3ControllerAppSecret> getSecrets() {
    return secrets;
  }

  public void setSecrets(List<Resourcecontrollerk8v3ControllerAppSecret> secrets) {
    this.secrets = secrets;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Resourcecontrollerk8v3ControllerApp resourcecontrollerk8v3ControllerApp = (Resourcecontrollerk8v3ControllerApp) o;
    return Objects.equals(this.container, resourcecontrollerk8v3ControllerApp.container) &&
        Objects.equals(this.deployment, resourcecontrollerk8v3ControllerApp.deployment) &&
        Objects.equals(this.emptyDir, resourcecontrollerk8v3ControllerApp.emptyDir) &&
        Objects.equals(this.files, resourcecontrollerk8v3ControllerApp.files) &&
        Objects.equals(this.hpa, resourcecontrollerk8v3ControllerApp.hpa) &&
        Objects.equals(this.id, resourcecontrollerk8v3ControllerApp.id) &&
        Objects.equals(this.initContainers, resourcecontrollerk8v3ControllerApp.initContainers) &&
        Objects.equals(this.modified, resourcecontrollerk8v3ControllerApp.modified) &&
        Objects.equals(this.name, resourcecontrollerk8v3ControllerApp.name) &&
        Objects.equals(this.secretKey, resourcecontrollerk8v3ControllerApp.secretKey) &&
        Objects.equals(this.secrets, resourcecontrollerk8v3ControllerApp.secrets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(container, deployment, emptyDir, files, hpa, id, initContainers, modified, name, secretKey, secrets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Resourcecontrollerk8v3ControllerApp {\n");
    sb.append("    container: ").append(toIndentedString(container)).append("\n");
    sb.append("    deployment: ").append(toIndentedString(deployment)).append("\n");
    sb.append("    emptyDir: ").append(toIndentedString(emptyDir)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    hpa: ").append(toIndentedString(hpa)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    initContainers: ").append(toIndentedString(initContainers)).append("\n");
    sb.append("    modified: ").append(toIndentedString(modified)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    secretKey: ").append(toIndentedString(secretKey)).append("\n");
    sb.append("    secrets: ").append(toIndentedString(secrets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("container");
    openapiFields.add("deployment");
    openapiFields.add("empty_dir");
    openapiFields.add("files");
    openapiFields.add("hpa");
    openapiFields.add("id");
    openapiFields.add("init_containers");
    openapiFields.add("modified");
    openapiFields.add("name");
    openapiFields.add("secret_key");
    openapiFields.add("secrets");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Resourcecontrollerk8v3ControllerApp
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Resourcecontrollerk8v3ControllerApp.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Resourcecontrollerk8v3ControllerApp is not found in the empty JSON string", Resourcecontrollerk8v3ControllerApp.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Resourcecontrollerk8v3ControllerApp.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Resourcecontrollerk8v3ControllerApp` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `container`
      if (jsonObj.get("container") != null && !jsonObj.get("container").isJsonNull()) {
        Resourcecontrollerk8v3Container.validateJsonElement(jsonObj.get("container"));
      }
      // validate the optional field `deployment`
      if (jsonObj.get("deployment") != null && !jsonObj.get("deployment").isJsonNull()) {
        Resourcecontrollerk8v3AppDeployment.validateJsonElement(jsonObj.get("deployment"));
      }
      if ((jsonObj.get("empty_dir") != null && !jsonObj.get("empty_dir").isJsonNull()) && !jsonObj.get("empty_dir").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `empty_dir` to be a primitive type in the JSON string but got `%s`", jsonObj.get("empty_dir").toString()));
      }
      if (jsonObj.get("files") != null && !jsonObj.get("files").isJsonNull()) {
        JsonArray jsonArrayfiles = jsonObj.getAsJsonArray("files");
        if (jsonArrayfiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("files").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `files` to be an array in the JSON string but got `%s`", jsonObj.get("files").toString()));
          }

          // validate the optional field `files` (array)
          for (int i = 0; i < jsonArrayfiles.size(); i++) {
            Resourcecontrollerk8v3ControllerAppFile.validateJsonElement(jsonArrayfiles.get(i));
          };
        }
      }
      // validate the optional field `hpa`
      if (jsonObj.get("hpa") != null && !jsonObj.get("hpa").isJsonNull()) {
        Resourcecontrollerk8v3AppHpa.validateJsonElement(jsonObj.get("hpa"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("init_containers") != null && !jsonObj.get("init_containers").isJsonNull()) {
        JsonArray jsonArrayinitContainers = jsonObj.getAsJsonArray("init_containers");
        if (jsonArrayinitContainers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("init_containers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `init_containers` to be an array in the JSON string but got `%s`", jsonObj.get("init_containers").toString()));
          }

          // validate the optional field `init_containers` (array)
          for (int i = 0; i < jsonArrayinitContainers.size(); i++) {
            Resourcecontrollerk8v3InitContainer.validateJsonElement(jsonArrayinitContainers.get(i));
          };
        }
      }
      if ((jsonObj.get("modified") != null && !jsonObj.get("modified").isJsonNull()) && !jsonObj.get("modified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modified").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("secret_key") != null && !jsonObj.get("secret_key").isJsonNull()) && !jsonObj.get("secret_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secret_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secret_key").toString()));
      }
      if (jsonObj.get("secrets") != null && !jsonObj.get("secrets").isJsonNull()) {
        JsonArray jsonArraysecrets = jsonObj.getAsJsonArray("secrets");
        if (jsonArraysecrets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("secrets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `secrets` to be an array in the JSON string but got `%s`", jsonObj.get("secrets").toString()));
          }

          // validate the optional field `secrets` (array)
          for (int i = 0; i < jsonArraysecrets.size(); i++) {
            Resourcecontrollerk8v3ControllerAppSecret.validateJsonElement(jsonArraysecrets.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Resourcecontrollerk8v3ControllerApp.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Resourcecontrollerk8v3ControllerApp' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Resourcecontrollerk8v3ControllerApp> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Resourcecontrollerk8v3ControllerApp.class));

       return (TypeAdapter<T>) new TypeAdapter<Resourcecontrollerk8v3ControllerApp>() {
           @Override
           public void write(JsonWriter out, Resourcecontrollerk8v3ControllerApp value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Resourcecontrollerk8v3ControllerApp read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Resourcecontrollerk8v3ControllerApp given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Resourcecontrollerk8v3ControllerApp
  * @throws IOException if the JSON string is invalid with respect to Resourcecontrollerk8v3ControllerApp
  */
  public static Resourcecontrollerk8v3ControllerApp fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Resourcecontrollerk8v3ControllerApp.class);
  }

 /**
  * Convert an instance of Resourcecontrollerk8v3ControllerApp to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

