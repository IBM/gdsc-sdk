/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.gdsc.sdk.Policybuilderv3ActionParameter;
import com.ibm.gdsc.sdk.Policybuilderv3ActionType;
import com.ibm.gdsc.sdk.Policybuilderv3TargetReceiver;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.JSON;

/**
 * Message format for actions.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-15T03:58:58.617687Z[UTC]", comments = "Generator version: 7.6.0")
public class Policybuilderv3Action {
  public static final String SERIALIZED_NAME_ACTION_NAME = "action_name";
  @SerializedName(SERIALIZED_NAME_ACTION_NAME)
  private String actionName;

  public static final String SERIALIZED_NAME_NOTIFICATIONS = "notifications";
  @SerializedName(SERIALIZED_NAME_NOTIFICATIONS)
  private List<Policybuilderv3TargetReceiver> notifications = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORDER = "order";
  @SerializedName(SERIALIZED_NAME_ORDER)
  private Integer order;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private List<Policybuilderv3ActionParameter> parameters = new ArrayList<>();

  public static final String SERIALIZED_NAME_QR_DEFINTION_ID = "qr_defintion_id";
  @SerializedName(SERIALIZED_NAME_QR_DEFINTION_ID)
  private Integer qrDefintionId;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private Policybuilderv3ActionType type = Policybuilderv3ActionType.UNDEFINED_ACTIONTYPE;

  public static final String SERIALIZED_NAME_UI_LABEL = "ui_label";
  @SerializedName(SERIALIZED_NAME_UI_LABEL)
  private String uiLabel;

  public Policybuilderv3Action() {
  }

  public Policybuilderv3Action actionName(String actionName) {
    this.actionName = actionName;
    return this;
  }

   /**
   * Name of the action.
   * @return actionName
  **/
  @javax.annotation.Nullable
  public String getActionName() {
    return actionName;
  }

  public void setActionName(String actionName) {
    this.actionName = actionName;
  }


  public Policybuilderv3Action notifications(List<Policybuilderv3TargetReceiver> notifications) {
    this.notifications = notifications;
    return this;
  }

  public Policybuilderv3Action addNotificationsItem(Policybuilderv3TargetReceiver notificationsItem) {
    if (this.notifications == null) {
      this.notifications = new ArrayList<>();
    }
    this.notifications.add(notificationsItem);
    return this;
  }

   /**
   * Notification object if for alert action.
   * @return notifications
  **/
  @javax.annotation.Nullable
  public List<Policybuilderv3TargetReceiver> getNotifications() {
    return notifications;
  }

  public void setNotifications(List<Policybuilderv3TargetReceiver> notifications) {
    this.notifications = notifications;
  }


  public Policybuilderv3Action order(Integer order) {
    this.order = order;
    return this;
  }

   /**
   * Order of the action being used in the rules.
   * @return order
  **/
  @javax.annotation.Nullable
  public Integer getOrder() {
    return order;
  }

  public void setOrder(Integer order) {
    this.order = order;
  }


  public Policybuilderv3Action parameters(List<Policybuilderv3ActionParameter> parameters) {
    this.parameters = parameters;
    return this;
  }

  public Policybuilderv3Action addParametersItem(Policybuilderv3ActionParameter parametersItem) {
    if (this.parameters == null) {
      this.parameters = new ArrayList<>();
    }
    this.parameters.add(parametersItem);
    return this;
  }

   /**
   * Action parameters.
   * @return parameters
  **/
  @javax.annotation.Nullable
  public List<Policybuilderv3ActionParameter> getParameters() {
    return parameters;
  }

  public void setParameters(List<Policybuilderv3ActionParameter> parameters) {
    this.parameters = parameters;
  }


  public Policybuilderv3Action qrDefintionId(Integer qrDefintionId) {
    this.qrDefintionId = qrDefintionId;
    return this;
  }

   /**
   * Query rewrite definition id.
   * @return qrDefintionId
  **/
  @javax.annotation.Nullable
  public Integer getQrDefintionId() {
    return qrDefintionId;
  }

  public void setQrDefintionId(Integer qrDefintionId) {
    this.qrDefintionId = qrDefintionId;
  }


  public Policybuilderv3Action type(Policybuilderv3ActionType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  public Policybuilderv3ActionType getType() {
    return type;
  }

  public void setType(Policybuilderv3ActionType type) {
    this.type = type;
  }


  public Policybuilderv3Action uiLabel(String uiLabel) {
    this.uiLabel = uiLabel;
    return this;
  }

   /**
   * Ui label for the action.
   * @return uiLabel
  **/
  @javax.annotation.Nullable
  public String getUiLabel() {
    return uiLabel;
  }

  public void setUiLabel(String uiLabel) {
    this.uiLabel = uiLabel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Policybuilderv3Action policybuilderv3Action = (Policybuilderv3Action) o;
    return Objects.equals(this.actionName, policybuilderv3Action.actionName) &&
        Objects.equals(this.notifications, policybuilderv3Action.notifications) &&
        Objects.equals(this.order, policybuilderv3Action.order) &&
        Objects.equals(this.parameters, policybuilderv3Action.parameters) &&
        Objects.equals(this.qrDefintionId, policybuilderv3Action.qrDefintionId) &&
        Objects.equals(this.type, policybuilderv3Action.type) &&
        Objects.equals(this.uiLabel, policybuilderv3Action.uiLabel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionName, notifications, order, parameters, qrDefintionId, type, uiLabel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Policybuilderv3Action {\n");
    sb.append("    actionName: ").append(toIndentedString(actionName)).append("\n");
    sb.append("    notifications: ").append(toIndentedString(notifications)).append("\n");
    sb.append("    order: ").append(toIndentedString(order)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    qrDefintionId: ").append(toIndentedString(qrDefintionId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uiLabel: ").append(toIndentedString(uiLabel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action_name");
    openapiFields.add("notifications");
    openapiFields.add("order");
    openapiFields.add("parameters");
    openapiFields.add("qr_defintion_id");
    openapiFields.add("type");
    openapiFields.add("ui_label");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Policybuilderv3Action
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Policybuilderv3Action.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Policybuilderv3Action is not found in the empty JSON string", Policybuilderv3Action.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Policybuilderv3Action.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Policybuilderv3Action` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("action_name") != null && !jsonObj.get("action_name").isJsonNull()) && !jsonObj.get("action_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action_name").toString()));
      }
      if (jsonObj.get("notifications") != null && !jsonObj.get("notifications").isJsonNull()) {
        JsonArray jsonArraynotifications = jsonObj.getAsJsonArray("notifications");
        if (jsonArraynotifications != null) {
          // ensure the json data is an array
          if (!jsonObj.get("notifications").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `notifications` to be an array in the JSON string but got `%s`", jsonObj.get("notifications").toString()));
          }

          // validate the optional field `notifications` (array)
          for (int i = 0; i < jsonArraynotifications.size(); i++) {
            Policybuilderv3TargetReceiver.validateJsonElement(jsonArraynotifications.get(i));
          };
        }
      }
      if (jsonObj.get("parameters") != null && !jsonObj.get("parameters").isJsonNull()) {
        JsonArray jsonArrayparameters = jsonObj.getAsJsonArray("parameters");
        if (jsonArrayparameters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("parameters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `parameters` to be an array in the JSON string but got `%s`", jsonObj.get("parameters").toString()));
          }

          // validate the optional field `parameters` (array)
          for (int i = 0; i < jsonArrayparameters.size(); i++) {
            Policybuilderv3ActionParameter.validateJsonElement(jsonArrayparameters.get(i));
          };
        }
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        Policybuilderv3ActionType.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("ui_label") != null && !jsonObj.get("ui_label").isJsonNull()) && !jsonObj.get("ui_label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ui_label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ui_label").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Policybuilderv3Action.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Policybuilderv3Action' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Policybuilderv3Action> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Policybuilderv3Action.class));

       return (TypeAdapter<T>) new TypeAdapter<Policybuilderv3Action>() {
           @Override
           public void write(JsonWriter out, Policybuilderv3Action value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Policybuilderv3Action read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Policybuilderv3Action given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Policybuilderv3Action
  * @throws IOException if the JSON string is invalid with respect to Policybuilderv3Action
  */
  public static Policybuilderv3Action fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Policybuilderv3Action.class);
  }

 /**
  * Convert an instance of Policybuilderv3Action to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

