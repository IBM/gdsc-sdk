/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.JSON;

/**
 * Qspmdatamanagerv3ScanRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-18T18:23:51.166908Z[UTC]", comments = "Generator version: 7.6.0")
public class Qspmdatamanagerv3ScanRequest {
  public static final String SERIALIZED_NAME_PLUGIN_ID = "plugin_id";
  @SerializedName(SERIALIZED_NAME_PLUGIN_ID)
  private String pluginId;

  public static final String SERIALIZED_NAME_SCAN_CBOM_ID = "scan_cbom_id";
  @SerializedName(SERIALIZED_NAME_SCAN_CBOM_ID)
  private String scanCbomId;

  public static final String SERIALIZED_NAME_SCAN_DATA_TS = "scan_data_ts";
  @SerializedName(SERIALIZED_NAME_SCAN_DATA_TS)
  private OffsetDateTime scanDataTs;

  public static final String SERIALIZED_NAME_SCAN_DATA_UPDATE_TS = "scan_data_update_ts";
  @SerializedName(SERIALIZED_NAME_SCAN_DATA_UPDATE_TS)
  private OffsetDateTime scanDataUpdateTs;

  public static final String SERIALIZED_NAME_SCAN_DESC = "scan_desc";
  @SerializedName(SERIALIZED_NAME_SCAN_DESC)
  private String scanDesc;

  public static final String SERIALIZED_NAME_SCAN_ID = "scan_id";
  @SerializedName(SERIALIZED_NAME_SCAN_ID)
  private String scanId;

  public static final String SERIALIZED_NAME_SCAN_STATUS = "scan_status";
  @SerializedName(SERIALIZED_NAME_SCAN_STATUS)
  private String scanStatus;

  public static final String SERIALIZED_NAME_SCAN_TYPE = "scan_type";
  @SerializedName(SERIALIZED_NAME_SCAN_TYPE)
  private String scanType;

  public static final String SERIALIZED_NAME_USER_EMAIL = "user_email";
  @SerializedName(SERIALIZED_NAME_USER_EMAIL)
  private String userEmail;

  public Qspmdatamanagerv3ScanRequest() {
  }

  public Qspmdatamanagerv3ScanRequest pluginId(String pluginId) {
    this.pluginId = pluginId;
    return this;
  }

   /**
   * Get pluginId
   * @return pluginId
  **/
  @javax.annotation.Nullable
  public String getPluginId() {
    return pluginId;
  }

  public void setPluginId(String pluginId) {
    this.pluginId = pluginId;
  }


  public Qspmdatamanagerv3ScanRequest scanCbomId(String scanCbomId) {
    this.scanCbomId = scanCbomId;
    return this;
  }

   /**
   * Get scanCbomId
   * @return scanCbomId
  **/
  @javax.annotation.Nullable
  public String getScanCbomId() {
    return scanCbomId;
  }

  public void setScanCbomId(String scanCbomId) {
    this.scanCbomId = scanCbomId;
  }


  public Qspmdatamanagerv3ScanRequest scanDataTs(OffsetDateTime scanDataTs) {
    this.scanDataTs = scanDataTs;
    return this;
  }

   /**
   * Get scanDataTs
   * @return scanDataTs
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getScanDataTs() {
    return scanDataTs;
  }

  public void setScanDataTs(OffsetDateTime scanDataTs) {
    this.scanDataTs = scanDataTs;
  }


  public Qspmdatamanagerv3ScanRequest scanDataUpdateTs(OffsetDateTime scanDataUpdateTs) {
    this.scanDataUpdateTs = scanDataUpdateTs;
    return this;
  }

   /**
   * Get scanDataUpdateTs
   * @return scanDataUpdateTs
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getScanDataUpdateTs() {
    return scanDataUpdateTs;
  }

  public void setScanDataUpdateTs(OffsetDateTime scanDataUpdateTs) {
    this.scanDataUpdateTs = scanDataUpdateTs;
  }


  public Qspmdatamanagerv3ScanRequest scanDesc(String scanDesc) {
    this.scanDesc = scanDesc;
    return this;
  }

   /**
   * Get scanDesc
   * @return scanDesc
  **/
  @javax.annotation.Nullable
  public String getScanDesc() {
    return scanDesc;
  }

  public void setScanDesc(String scanDesc) {
    this.scanDesc = scanDesc;
  }


  public Qspmdatamanagerv3ScanRequest scanId(String scanId) {
    this.scanId = scanId;
    return this;
  }

   /**
   * Get scanId
   * @return scanId
  **/
  @javax.annotation.Nullable
  public String getScanId() {
    return scanId;
  }

  public void setScanId(String scanId) {
    this.scanId = scanId;
  }


  public Qspmdatamanagerv3ScanRequest scanStatus(String scanStatus) {
    this.scanStatus = scanStatus;
    return this;
  }

   /**
   * Get scanStatus
   * @return scanStatus
  **/
  @javax.annotation.Nullable
  public String getScanStatus() {
    return scanStatus;
  }

  public void setScanStatus(String scanStatus) {
    this.scanStatus = scanStatus;
  }


  public Qspmdatamanagerv3ScanRequest scanType(String scanType) {
    this.scanType = scanType;
    return this;
  }

   /**
   * Get scanType
   * @return scanType
  **/
  @javax.annotation.Nullable
  public String getScanType() {
    return scanType;
  }

  public void setScanType(String scanType) {
    this.scanType = scanType;
  }


  public Qspmdatamanagerv3ScanRequest userEmail(String userEmail) {
    this.userEmail = userEmail;
    return this;
  }

   /**
   * Get userEmail
   * @return userEmail
  **/
  @javax.annotation.Nullable
  public String getUserEmail() {
    return userEmail;
  }

  public void setUserEmail(String userEmail) {
    this.userEmail = userEmail;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Qspmdatamanagerv3ScanRequest qspmdatamanagerv3ScanRequest = (Qspmdatamanagerv3ScanRequest) o;
    return Objects.equals(this.pluginId, qspmdatamanagerv3ScanRequest.pluginId) &&
        Objects.equals(this.scanCbomId, qspmdatamanagerv3ScanRequest.scanCbomId) &&
        Objects.equals(this.scanDataTs, qspmdatamanagerv3ScanRequest.scanDataTs) &&
        Objects.equals(this.scanDataUpdateTs, qspmdatamanagerv3ScanRequest.scanDataUpdateTs) &&
        Objects.equals(this.scanDesc, qspmdatamanagerv3ScanRequest.scanDesc) &&
        Objects.equals(this.scanId, qspmdatamanagerv3ScanRequest.scanId) &&
        Objects.equals(this.scanStatus, qspmdatamanagerv3ScanRequest.scanStatus) &&
        Objects.equals(this.scanType, qspmdatamanagerv3ScanRequest.scanType) &&
        Objects.equals(this.userEmail, qspmdatamanagerv3ScanRequest.userEmail);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pluginId, scanCbomId, scanDataTs, scanDataUpdateTs, scanDesc, scanId, scanStatus, scanType, userEmail);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Qspmdatamanagerv3ScanRequest {\n");
    sb.append("    pluginId: ").append(toIndentedString(pluginId)).append("\n");
    sb.append("    scanCbomId: ").append(toIndentedString(scanCbomId)).append("\n");
    sb.append("    scanDataTs: ").append(toIndentedString(scanDataTs)).append("\n");
    sb.append("    scanDataUpdateTs: ").append(toIndentedString(scanDataUpdateTs)).append("\n");
    sb.append("    scanDesc: ").append(toIndentedString(scanDesc)).append("\n");
    sb.append("    scanId: ").append(toIndentedString(scanId)).append("\n");
    sb.append("    scanStatus: ").append(toIndentedString(scanStatus)).append("\n");
    sb.append("    scanType: ").append(toIndentedString(scanType)).append("\n");
    sb.append("    userEmail: ").append(toIndentedString(userEmail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("plugin_id");
    openapiFields.add("scan_cbom_id");
    openapiFields.add("scan_data_ts");
    openapiFields.add("scan_data_update_ts");
    openapiFields.add("scan_desc");
    openapiFields.add("scan_id");
    openapiFields.add("scan_status");
    openapiFields.add("scan_type");
    openapiFields.add("user_email");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Qspmdatamanagerv3ScanRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Qspmdatamanagerv3ScanRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Qspmdatamanagerv3ScanRequest is not found in the empty JSON string", Qspmdatamanagerv3ScanRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Qspmdatamanagerv3ScanRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Qspmdatamanagerv3ScanRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("plugin_id") != null && !jsonObj.get("plugin_id").isJsonNull()) && !jsonObj.get("plugin_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plugin_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plugin_id").toString()));
      }
      if ((jsonObj.get("scan_cbom_id") != null && !jsonObj.get("scan_cbom_id").isJsonNull()) && !jsonObj.get("scan_cbom_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scan_cbom_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scan_cbom_id").toString()));
      }
      if ((jsonObj.get("scan_desc") != null && !jsonObj.get("scan_desc").isJsonNull()) && !jsonObj.get("scan_desc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scan_desc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scan_desc").toString()));
      }
      if ((jsonObj.get("scan_id") != null && !jsonObj.get("scan_id").isJsonNull()) && !jsonObj.get("scan_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scan_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scan_id").toString()));
      }
      if ((jsonObj.get("scan_status") != null && !jsonObj.get("scan_status").isJsonNull()) && !jsonObj.get("scan_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scan_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scan_status").toString()));
      }
      if ((jsonObj.get("scan_type") != null && !jsonObj.get("scan_type").isJsonNull()) && !jsonObj.get("scan_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scan_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scan_type").toString()));
      }
      if ((jsonObj.get("user_email") != null && !jsonObj.get("user_email").isJsonNull()) && !jsonObj.get("user_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_email").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Qspmdatamanagerv3ScanRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Qspmdatamanagerv3ScanRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Qspmdatamanagerv3ScanRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Qspmdatamanagerv3ScanRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<Qspmdatamanagerv3ScanRequest>() {
           @Override
           public void write(JsonWriter out, Qspmdatamanagerv3ScanRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Qspmdatamanagerv3ScanRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Qspmdatamanagerv3ScanRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Qspmdatamanagerv3ScanRequest
  * @throws IOException if the JSON string is invalid with respect to Qspmdatamanagerv3ScanRequest
  */
  public static Qspmdatamanagerv3ScanRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Qspmdatamanagerv3ScanRequest.class);
  }

 /**
  * Convert an instance of Qspmdatamanagerv3ScanRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

