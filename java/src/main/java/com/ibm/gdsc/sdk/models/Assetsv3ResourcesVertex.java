/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.gdsc.sdk.models.Assetsv3ConnectionEdge;
import com.ibm.gdsc.sdk.models.Assetsv3CustomProperty;
import com.ibm.gdsc.sdk.models.Assetsv3SensitivityInfo;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.sdk.JSON;

/**
 * Assetsv3ResourcesVertex
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-07T13:24:05.648078332-08:00[America/Los_Angeles]", comments = "Generator version: 7.6.0")
public class Assetsv3ResourcesVertex {
  public static final String SERIALIZED_NAME_CREATION_DATE = "creation_date";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private OffsetDateTime creationDate;

  public static final String SERIALIZED_NAME_EXTENDED_PROPERTIES = "extended_properties";
  @SerializedName(SERIALIZED_NAME_EXTENDED_PROPERTIES)
  private List<Assetsv3CustomProperty> extendedProperties = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RESOLUTION_KEY = "resolution_key";
  @SerializedName(SERIALIZED_NAME_RESOLUTION_KEY)
  private String resolutionKey;

  public static final String SERIALIZED_NAME_RESOURCES_ACCOUNT = "resources_account";
  @SerializedName(SERIALIZED_NAME_RESOURCES_ACCOUNT)
  private List<Assetsv3ConnectionEdge> resourcesAccount = new ArrayList<>();

  public static final String SERIALIZED_NAME_SENSITIVITIES = "sensitivities";
  @SerializedName(SERIALIZED_NAME_SENSITIVITIES)
  private List<Assetsv3SensitivityInfo> sensitivities = new ArrayList<>();

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private String size;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public Assetsv3ResourcesVertex() {
  }

  public Assetsv3ResourcesVertex creationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
    return this;
  }

   /**
   * Get creationDate
   * @return creationDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(OffsetDateTime creationDate) {
    this.creationDate = creationDate;
  }


  public Assetsv3ResourcesVertex extendedProperties(List<Assetsv3CustomProperty> extendedProperties) {
    this.extendedProperties = extendedProperties;
    return this;
  }

  public Assetsv3ResourcesVertex addExtendedPropertiesItem(Assetsv3CustomProperty extendedPropertiesItem) {
    if (this.extendedProperties == null) {
      this.extendedProperties = new ArrayList<>();
    }
    this.extendedProperties.add(extendedPropertiesItem);
    return this;
  }

   /**
   * Get extendedProperties
   * @return extendedProperties
  **/
  @javax.annotation.Nullable
  public List<Assetsv3CustomProperty> getExtendedProperties() {
    return extendedProperties;
  }

  public void setExtendedProperties(List<Assetsv3CustomProperty> extendedProperties) {
    this.extendedProperties = extendedProperties;
  }


  public Assetsv3ResourcesVertex location(String location) {
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public Assetsv3ResourcesVertex name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Assetsv3ResourcesVertex resolutionKey(String resolutionKey) {
    this.resolutionKey = resolutionKey;
    return this;
  }

   /**
   * Get resolutionKey
   * @return resolutionKey
  **/
  @javax.annotation.Nullable
  public String getResolutionKey() {
    return resolutionKey;
  }

  public void setResolutionKey(String resolutionKey) {
    this.resolutionKey = resolutionKey;
  }


  public Assetsv3ResourcesVertex resourcesAccount(List<Assetsv3ConnectionEdge> resourcesAccount) {
    this.resourcesAccount = resourcesAccount;
    return this;
  }

  public Assetsv3ResourcesVertex addResourcesAccountItem(Assetsv3ConnectionEdge resourcesAccountItem) {
    if (this.resourcesAccount == null) {
      this.resourcesAccount = new ArrayList<>();
    }
    this.resourcesAccount.add(resourcesAccountItem);
    return this;
  }

   /**
   * Get resourcesAccount
   * @return resourcesAccount
  **/
  @javax.annotation.Nullable
  public List<Assetsv3ConnectionEdge> getResourcesAccount() {
    return resourcesAccount;
  }

  public void setResourcesAccount(List<Assetsv3ConnectionEdge> resourcesAccount) {
    this.resourcesAccount = resourcesAccount;
  }


  public Assetsv3ResourcesVertex sensitivities(List<Assetsv3SensitivityInfo> sensitivities) {
    this.sensitivities = sensitivities;
    return this;
  }

  public Assetsv3ResourcesVertex addSensitivitiesItem(Assetsv3SensitivityInfo sensitivitiesItem) {
    if (this.sensitivities == null) {
      this.sensitivities = new ArrayList<>();
    }
    this.sensitivities.add(sensitivitiesItem);
    return this;
  }

   /**
   * Get sensitivities
   * @return sensitivities
  **/
  @javax.annotation.Nullable
  public List<Assetsv3SensitivityInfo> getSensitivities() {
    return sensitivities;
  }

  public void setSensitivities(List<Assetsv3SensitivityInfo> sensitivities) {
    this.sensitivities = sensitivities;
  }


  public Assetsv3ResourcesVertex size(String size) {
    this.size = size;
    return this;
  }

   /**
   * Get size
   * @return size
  **/
  @javax.annotation.Nullable
  public String getSize() {
    return size;
  }

  public void setSize(String size) {
    this.size = size;
  }


  public Assetsv3ResourcesVertex type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Assetsv3ResourcesVertex assetsv3ResourcesVertex = (Assetsv3ResourcesVertex) o;
    return Objects.equals(this.creationDate, assetsv3ResourcesVertex.creationDate) &&
        Objects.equals(this.extendedProperties, assetsv3ResourcesVertex.extendedProperties) &&
        Objects.equals(this.location, assetsv3ResourcesVertex.location) &&
        Objects.equals(this.name, assetsv3ResourcesVertex.name) &&
        Objects.equals(this.resolutionKey, assetsv3ResourcesVertex.resolutionKey) &&
        Objects.equals(this.resourcesAccount, assetsv3ResourcesVertex.resourcesAccount) &&
        Objects.equals(this.sensitivities, assetsv3ResourcesVertex.sensitivities) &&
        Objects.equals(this.size, assetsv3ResourcesVertex.size) &&
        Objects.equals(this.type, assetsv3ResourcesVertex.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationDate, extendedProperties, location, name, resolutionKey, resourcesAccount, sensitivities, size, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Assetsv3ResourcesVertex {\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    extendedProperties: ").append(toIndentedString(extendedProperties)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    resolutionKey: ").append(toIndentedString(resolutionKey)).append("\n");
    sb.append("    resourcesAccount: ").append(toIndentedString(resourcesAccount)).append("\n");
    sb.append("    sensitivities: ").append(toIndentedString(sensitivities)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creation_date");
    openapiFields.add("extended_properties");
    openapiFields.add("location");
    openapiFields.add("name");
    openapiFields.add("resolution_key");
    openapiFields.add("resources_account");
    openapiFields.add("sensitivities");
    openapiFields.add("size");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Assetsv3ResourcesVertex
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Assetsv3ResourcesVertex.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Assetsv3ResourcesVertex is not found in the empty JSON string", Assetsv3ResourcesVertex.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Assetsv3ResourcesVertex.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Assetsv3ResourcesVertex` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("extended_properties") != null && !jsonObj.get("extended_properties").isJsonNull()) {
        JsonArray jsonArrayextendedProperties = jsonObj.getAsJsonArray("extended_properties");
        if (jsonArrayextendedProperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("extended_properties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `extended_properties` to be an array in the JSON string but got `%s`", jsonObj.get("extended_properties").toString()));
          }

          // validate the optional field `extended_properties` (array)
          for (int i = 0; i < jsonArrayextendedProperties.size(); i++) {
            Assetsv3CustomProperty.validateJsonElement(jsonArrayextendedProperties.get(i));
          };
        }
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("resolution_key") != null && !jsonObj.get("resolution_key").isJsonNull()) && !jsonObj.get("resolution_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resolution_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resolution_key").toString()));
      }
      if (jsonObj.get("resources_account") != null && !jsonObj.get("resources_account").isJsonNull()) {
        JsonArray jsonArrayresourcesAccount = jsonObj.getAsJsonArray("resources_account");
        if (jsonArrayresourcesAccount != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resources_account").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resources_account` to be an array in the JSON string but got `%s`", jsonObj.get("resources_account").toString()));
          }

          // validate the optional field `resources_account` (array)
          for (int i = 0; i < jsonArrayresourcesAccount.size(); i++) {
            Assetsv3ConnectionEdge.validateJsonElement(jsonArrayresourcesAccount.get(i));
          };
        }
      }
      if (jsonObj.get("sensitivities") != null && !jsonObj.get("sensitivities").isJsonNull()) {
        JsonArray jsonArraysensitivities = jsonObj.getAsJsonArray("sensitivities");
        if (jsonArraysensitivities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sensitivities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sensitivities` to be an array in the JSON string but got `%s`", jsonObj.get("sensitivities").toString()));
          }

          // validate the optional field `sensitivities` (array)
          for (int i = 0; i < jsonArraysensitivities.size(); i++) {
            Assetsv3SensitivityInfo.validateJsonElement(jsonArraysensitivities.get(i));
          };
        }
      }
      if ((jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) && !jsonObj.get("size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("size").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Assetsv3ResourcesVertex.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Assetsv3ResourcesVertex' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Assetsv3ResourcesVertex> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Assetsv3ResourcesVertex.class));

       return (TypeAdapter<T>) new TypeAdapter<Assetsv3ResourcesVertex>() {
           @Override
           public void write(JsonWriter out, Assetsv3ResourcesVertex value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Assetsv3ResourcesVertex read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Assetsv3ResourcesVertex given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Assetsv3ResourcesVertex
  * @throws IOException if the JSON string is invalid with respect to Assetsv3ResourcesVertex
  */
  public static Assetsv3ResourcesVertex fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Assetsv3ResourcesVertex.class);
  }

 /**
  * Convert an instance of Assetsv3ResourcesVertex to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

