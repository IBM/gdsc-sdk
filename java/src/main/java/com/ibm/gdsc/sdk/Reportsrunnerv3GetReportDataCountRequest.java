/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.gdsc.sdk.Reportsv3DateRange;
import com.ibm.gdsc.sdk.Reportsv3ModelType;
import com.ibm.gdsc.sdk.Reportsv3ReportDefinition;
import com.ibm.gdsc.sdk.Reportsv3RunTimeParameter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ibm.gdsc.JSON;

/**
 * GetReportDataCountRequest is the argument get count.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-18T20:02:04.461512Z[UTC]", comments = "Generator version: 7.6.0")
public class Reportsrunnerv3GetReportDataCountRequest {
  public static final String SERIALIZED_NAME_DATE_RANGE = "date_range";
  @SerializedName(SERIALIZED_NAME_DATE_RANGE)
  private Reportsv3DateRange dateRange;

  public static final String SERIALIZED_NAME_MODEL_TYPE = "model_type";
  @SerializedName(SERIALIZED_NAME_MODEL_TYPE)
  private Reportsv3ModelType modelType = Reportsv3ModelType.UNDEFINED_MODEL_TYPE;

  public static final String SERIALIZED_NAME_REPORT_DEFINITION = "report_definition";
  @SerializedName(SERIALIZED_NAME_REPORT_DEFINITION)
  private Reportsv3ReportDefinition reportDefinition;

  public static final String SERIALIZED_NAME_REPORT_ID = "report_id";
  @SerializedName(SERIALIZED_NAME_REPORT_ID)
  private String reportId;

  public static final String SERIALIZED_NAME_RUNTIME_PARAMETER_LIST = "runtime_parameter_list";
  @SerializedName(SERIALIZED_NAME_RUNTIME_PARAMETER_LIST)
  private List<Reportsv3RunTimeParameter> runtimeParameterList = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIME_ZONE = "time_zone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public Reportsrunnerv3GetReportDataCountRequest() {
  }

  public Reportsrunnerv3GetReportDataCountRequest dateRange(Reportsv3DateRange dateRange) {
    this.dateRange = dateRange;
    return this;
  }

   /**
   * Get dateRange
   * @return dateRange
  **/
  @javax.annotation.Nullable
  public Reportsv3DateRange getDateRange() {
    return dateRange;
  }

  public void setDateRange(Reportsv3DateRange dateRange) {
    this.dateRange = dateRange;
  }


  public Reportsrunnerv3GetReportDataCountRequest modelType(Reportsv3ModelType modelType) {
    this.modelType = modelType;
    return this;
  }

   /**
   * Get modelType
   * @return modelType
  **/
  @javax.annotation.Nullable
  public Reportsv3ModelType getModelType() {
    return modelType;
  }

  public void setModelType(Reportsv3ModelType modelType) {
    this.modelType = modelType;
  }


  public Reportsrunnerv3GetReportDataCountRequest reportDefinition(Reportsv3ReportDefinition reportDefinition) {
    this.reportDefinition = reportDefinition;
    return this;
  }

   /**
   * Get reportDefinition
   * @return reportDefinition
  **/
  @javax.annotation.Nullable
  public Reportsv3ReportDefinition getReportDefinition() {
    return reportDefinition;
  }

  public void setReportDefinition(Reportsv3ReportDefinition reportDefinition) {
    this.reportDefinition = reportDefinition;
  }


  public Reportsrunnerv3GetReportDataCountRequest reportId(String reportId) {
    this.reportId = reportId;
    return this;
  }

   /**
   * Optional: the ID of the Report we wish to run (e.g. 000000000000000000000905).
   * @return reportId
  **/
  @javax.annotation.Nullable
  public String getReportId() {
    return reportId;
  }

  public void setReportId(String reportId) {
    this.reportId = reportId;
  }


  public Reportsrunnerv3GetReportDataCountRequest runtimeParameterList(List<Reportsv3RunTimeParameter> runtimeParameterList) {
    this.runtimeParameterList = runtimeParameterList;
    return this;
  }

  public Reportsrunnerv3GetReportDataCountRequest addRuntimeParameterListItem(Reportsv3RunTimeParameter runtimeParameterListItem) {
    if (this.runtimeParameterList == null) {
      this.runtimeParameterList = new ArrayList<>();
    }
    this.runtimeParameterList.add(runtimeParameterListItem);
    return this;
  }

   /**
   * List of runtime parameter if needed.
   * @return runtimeParameterList
  **/
  @javax.annotation.Nullable
  public List<Reportsv3RunTimeParameter> getRuntimeParameterList() {
    return runtimeParameterList;
  }

  public void setRuntimeParameterList(List<Reportsv3RunTimeParameter> runtimeParameterList) {
    this.runtimeParameterList = runtimeParameterList;
  }


  public Reportsrunnerv3GetReportDataCountRequest timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

   /**
   * Optional: time zone.
   * @return timeZone
  **/
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Reportsrunnerv3GetReportDataCountRequest reportsrunnerv3GetReportDataCountRequest = (Reportsrunnerv3GetReportDataCountRequest) o;
    return Objects.equals(this.dateRange, reportsrunnerv3GetReportDataCountRequest.dateRange) &&
        Objects.equals(this.modelType, reportsrunnerv3GetReportDataCountRequest.modelType) &&
        Objects.equals(this.reportDefinition, reportsrunnerv3GetReportDataCountRequest.reportDefinition) &&
        Objects.equals(this.reportId, reportsrunnerv3GetReportDataCountRequest.reportId) &&
        Objects.equals(this.runtimeParameterList, reportsrunnerv3GetReportDataCountRequest.runtimeParameterList) &&
        Objects.equals(this.timeZone, reportsrunnerv3GetReportDataCountRequest.timeZone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dateRange, modelType, reportDefinition, reportId, runtimeParameterList, timeZone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Reportsrunnerv3GetReportDataCountRequest {\n");
    sb.append("    dateRange: ").append(toIndentedString(dateRange)).append("\n");
    sb.append("    modelType: ").append(toIndentedString(modelType)).append("\n");
    sb.append("    reportDefinition: ").append(toIndentedString(reportDefinition)).append("\n");
    sb.append("    reportId: ").append(toIndentedString(reportId)).append("\n");
    sb.append("    runtimeParameterList: ").append(toIndentedString(runtimeParameterList)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("date_range");
    openapiFields.add("model_type");
    openapiFields.add("report_definition");
    openapiFields.add("report_id");
    openapiFields.add("runtime_parameter_list");
    openapiFields.add("time_zone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Reportsrunnerv3GetReportDataCountRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Reportsrunnerv3GetReportDataCountRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Reportsrunnerv3GetReportDataCountRequest is not found in the empty JSON string", Reportsrunnerv3GetReportDataCountRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Reportsrunnerv3GetReportDataCountRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Reportsrunnerv3GetReportDataCountRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `date_range`
      if (jsonObj.get("date_range") != null && !jsonObj.get("date_range").isJsonNull()) {
        Reportsv3DateRange.validateJsonElement(jsonObj.get("date_range"));
      }
      // validate the optional field `model_type`
      if (jsonObj.get("model_type") != null && !jsonObj.get("model_type").isJsonNull()) {
        Reportsv3ModelType.validateJsonElement(jsonObj.get("model_type"));
      }
      // validate the optional field `report_definition`
      if (jsonObj.get("report_definition") != null && !jsonObj.get("report_definition").isJsonNull()) {
        Reportsv3ReportDefinition.validateJsonElement(jsonObj.get("report_definition"));
      }
      if ((jsonObj.get("report_id") != null && !jsonObj.get("report_id").isJsonNull()) && !jsonObj.get("report_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `report_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("report_id").toString()));
      }
      if (jsonObj.get("runtime_parameter_list") != null && !jsonObj.get("runtime_parameter_list").isJsonNull()) {
        JsonArray jsonArrayruntimeParameterList = jsonObj.getAsJsonArray("runtime_parameter_list");
        if (jsonArrayruntimeParameterList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("runtime_parameter_list").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `runtime_parameter_list` to be an array in the JSON string but got `%s`", jsonObj.get("runtime_parameter_list").toString()));
          }

          // validate the optional field `runtime_parameter_list` (array)
          for (int i = 0; i < jsonArrayruntimeParameterList.size(); i++) {
            Reportsv3RunTimeParameter.validateJsonElement(jsonArrayruntimeParameterList.get(i));
          };
        }
      }
      if ((jsonObj.get("time_zone") != null && !jsonObj.get("time_zone").isJsonNull()) && !jsonObj.get("time_zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_zone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Reportsrunnerv3GetReportDataCountRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Reportsrunnerv3GetReportDataCountRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Reportsrunnerv3GetReportDataCountRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Reportsrunnerv3GetReportDataCountRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<Reportsrunnerv3GetReportDataCountRequest>() {
           @Override
           public void write(JsonWriter out, Reportsrunnerv3GetReportDataCountRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Reportsrunnerv3GetReportDataCountRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Reportsrunnerv3GetReportDataCountRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Reportsrunnerv3GetReportDataCountRequest
  * @throws IOException if the JSON string is invalid with respect to Reportsrunnerv3GetReportDataCountRequest
  */
  public static Reportsrunnerv3GetReportDataCountRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Reportsrunnerv3GetReportDataCountRequest.class);
  }

 /**
  * Convert an instance of Reportsrunnerv3GetReportDataCountRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

