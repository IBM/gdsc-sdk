/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import com.ibm.gdsc.ApiCallback;
import com.ibm.gdsc.ApiClient;
import com.ibm.gdsc.ApiException;
import com.ibm.gdsc.ApiResponse;
import com.ibm.gdsc.Configuration;
import com.ibm.gdsc.Pair;
import com.ibm.gdsc.ProgressRequestBody;
import com.ibm.gdsc.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.ibm.gdsc.sdk.RuntimeError;
import com.ibm.gdsc.sdk.Schedulerv3CreateScheduledJobRequest;
import com.ibm.gdsc.sdk.Schedulerv3CreateScheduledJobResponse;
import com.ibm.gdsc.sdk.Schedulerv3DeleteScheduledJobResponse;
import com.ibm.gdsc.sdk.Schedulerv3GetDependenciesResponse;
import com.ibm.gdsc.sdk.Schedulerv3GetDistributionRulesResponse;
import com.ibm.gdsc.sdk.Schedulerv3GetScheduledJobResponse;
import com.ibm.gdsc.sdk.Schedulerv3GetSchedulesByReportRequest;
import com.ibm.gdsc.sdk.Schedulerv3GetSchedulesByReportResponse;
import com.ibm.gdsc.sdk.Schedulerv3GetTagsResponse;
import com.ibm.gdsc.sdk.Schedulerv3ScheduledJobSummaryResponse;
import com.ibm.gdsc.sdk.Schedulerv3SearchScheduledJobsRequest;
import com.ibm.gdsc.sdk.Schedulerv3SearchScheduledTaskRunsRequest;
import com.ibm.gdsc.sdk.Schedulerv3SearchScheduledTaskRunsResponse;
import com.ibm.gdsc.sdk.Schedulerv3UpdateScheduledJobRequest;
import com.ibm.gdsc.sdk.Schedulerv3UpdateScheduledJobResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SchedulerServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SchedulerServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SchedulerServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for schedulerServiceCreateScheduledJob
     * @param schedulerv3CreateScheduledJobRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulerServiceCreateScheduledJobCall(Schedulerv3CreateScheduledJobRequest schedulerv3CreateScheduledJobRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = schedulerv3CreateScheduledJobRequest;

        // create path and map variables
        String localVarPath = "/api/v3/schedules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulerServiceCreateScheduledJobValidateBeforeCall(Schedulerv3CreateScheduledJobRequest schedulerv3CreateScheduledJobRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schedulerv3CreateScheduledJobRequest' is set
        if (schedulerv3CreateScheduledJobRequest == null) {
            throw new ApiException("Missing the required parameter 'schedulerv3CreateScheduledJobRequest' when calling schedulerServiceCreateScheduledJob(Async)");
        }

        return schedulerServiceCreateScheduledJobCall(schedulerv3CreateScheduledJobRequest, _callback);

    }

    /**
     * Summary: Create scheduled job Description: Create a new scheduled job with tasks.
     * 
     * @param schedulerv3CreateScheduledJobRequest  (required)
     * @return Schedulerv3CreateScheduledJobResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Schedulerv3CreateScheduledJobResponse schedulerServiceCreateScheduledJob(Schedulerv3CreateScheduledJobRequest schedulerv3CreateScheduledJobRequest) throws ApiException {
        ApiResponse<Schedulerv3CreateScheduledJobResponse> localVarResp = schedulerServiceCreateScheduledJobWithHttpInfo(schedulerv3CreateScheduledJobRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Create scheduled job Description: Create a new scheduled job with tasks.
     * 
     * @param schedulerv3CreateScheduledJobRequest  (required)
     * @return ApiResponse&lt;Schedulerv3CreateScheduledJobResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Schedulerv3CreateScheduledJobResponse> schedulerServiceCreateScheduledJobWithHttpInfo(Schedulerv3CreateScheduledJobRequest schedulerv3CreateScheduledJobRequest) throws ApiException {
        okhttp3.Call localVarCall = schedulerServiceCreateScheduledJobValidateBeforeCall(schedulerv3CreateScheduledJobRequest, null);
        Type localVarReturnType = new TypeToken<Schedulerv3CreateScheduledJobResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Create scheduled job Description: Create a new scheduled job with tasks. (asynchronously)
     * 
     * @param schedulerv3CreateScheduledJobRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulerServiceCreateScheduledJobAsync(Schedulerv3CreateScheduledJobRequest schedulerv3CreateScheduledJobRequest, final ApiCallback<Schedulerv3CreateScheduledJobResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulerServiceCreateScheduledJobValidateBeforeCall(schedulerv3CreateScheduledJobRequest, _callback);
        Type localVarReturnType = new TypeToken<Schedulerv3CreateScheduledJobResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulerServiceDeleteScheduledJob
     * @param scheduleId Unique ID, required for delete. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulerServiceDeleteScheduledJobCall(String scheduleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/schedules/{schedule_id}"
            .replace("{" + "schedule_id" + "}", localVarApiClient.escapeString(scheduleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulerServiceDeleteScheduledJobValidateBeforeCall(String scheduleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scheduleId' is set
        if (scheduleId == null) {
            throw new ApiException("Missing the required parameter 'scheduleId' when calling schedulerServiceDeleteScheduledJob(Async)");
        }

        return schedulerServiceDeleteScheduledJobCall(scheduleId, _callback);

    }

    /**
     * Summary: Delete scheduled job Description: Delete a single scheduled job.
     * 
     * @param scheduleId Unique ID, required for delete. (required)
     * @return Schedulerv3DeleteScheduledJobResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Schedulerv3DeleteScheduledJobResponse schedulerServiceDeleteScheduledJob(String scheduleId) throws ApiException {
        ApiResponse<Schedulerv3DeleteScheduledJobResponse> localVarResp = schedulerServiceDeleteScheduledJobWithHttpInfo(scheduleId);
        return localVarResp.getData();
    }

    /**
     * Summary: Delete scheduled job Description: Delete a single scheduled job.
     * 
     * @param scheduleId Unique ID, required for delete. (required)
     * @return ApiResponse&lt;Schedulerv3DeleteScheduledJobResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Schedulerv3DeleteScheduledJobResponse> schedulerServiceDeleteScheduledJobWithHttpInfo(String scheduleId) throws ApiException {
        okhttp3.Call localVarCall = schedulerServiceDeleteScheduledJobValidateBeforeCall(scheduleId, null);
        Type localVarReturnType = new TypeToken<Schedulerv3DeleteScheduledJobResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Delete scheduled job Description: Delete a single scheduled job. (asynchronously)
     * 
     * @param scheduleId Unique ID, required for delete. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulerServiceDeleteScheduledJobAsync(String scheduleId, final ApiCallback<Schedulerv3DeleteScheduledJobResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulerServiceDeleteScheduledJobValidateBeforeCall(scheduleId, _callback);
        Type localVarReturnType = new TypeToken<Schedulerv3DeleteScheduledJobResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulerServiceGetDependencies
     * @param configType specify the configuration entry type: Distribution.Rule, workflow_investigation_link, workflow_response_template, etc. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulerServiceGetDependenciesCall(String configType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/schedules/dependencies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (configType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("config_type", configType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulerServiceGetDependenciesValidateBeforeCall(String configType, final ApiCallback _callback) throws ApiException {
        return schedulerServiceGetDependenciesCall(configType, _callback);

    }

    /**
     * Summary: Get dependencies Description: returns IDs of distribution rules, response templates, or processing rules that are in use
     * 
     * @param configType specify the configuration entry type: Distribution.Rule, workflow_investigation_link, workflow_response_template, etc. (optional)
     * @return Schedulerv3GetDependenciesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Schedulerv3GetDependenciesResponse schedulerServiceGetDependencies(String configType) throws ApiException {
        ApiResponse<Schedulerv3GetDependenciesResponse> localVarResp = schedulerServiceGetDependenciesWithHttpInfo(configType);
        return localVarResp.getData();
    }

    /**
     * Summary: Get dependencies Description: returns IDs of distribution rules, response templates, or processing rules that are in use
     * 
     * @param configType specify the configuration entry type: Distribution.Rule, workflow_investigation_link, workflow_response_template, etc. (optional)
     * @return ApiResponse&lt;Schedulerv3GetDependenciesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Schedulerv3GetDependenciesResponse> schedulerServiceGetDependenciesWithHttpInfo(String configType) throws ApiException {
        okhttp3.Call localVarCall = schedulerServiceGetDependenciesValidateBeforeCall(configType, null);
        Type localVarReturnType = new TypeToken<Schedulerv3GetDependenciesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get dependencies Description: returns IDs of distribution rules, response templates, or processing rules that are in use (asynchronously)
     * 
     * @param configType specify the configuration entry type: Distribution.Rule, workflow_investigation_link, workflow_response_template, etc. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulerServiceGetDependenciesAsync(String configType, final ApiCallback<Schedulerv3GetDependenciesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulerServiceGetDependenciesValidateBeforeCall(configType, _callback);
        Type localVarReturnType = new TypeToken<Schedulerv3GetDependenciesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulerServiceGetDistributionRules
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulerServiceGetDistributionRulesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/schedules/distribution_rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulerServiceGetDistributionRulesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return schedulerServiceGetDistributionRulesCall(_callback);

    }

    /**
     * Summary: Get distribution rules Description: Return a list of distribution rule IDs that are used by the scheduler Distribution rules can&#39;t be edited if it is used by a scheduled job.
     * 
     * @return Schedulerv3GetDistributionRulesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Schedulerv3GetDistributionRulesResponse schedulerServiceGetDistributionRules() throws ApiException {
        ApiResponse<Schedulerv3GetDistributionRulesResponse> localVarResp = schedulerServiceGetDistributionRulesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Summary: Get distribution rules Description: Return a list of distribution rule IDs that are used by the scheduler Distribution rules can&#39;t be edited if it is used by a scheduled job.
     * 
     * @return ApiResponse&lt;Schedulerv3GetDistributionRulesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Schedulerv3GetDistributionRulesResponse> schedulerServiceGetDistributionRulesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = schedulerServiceGetDistributionRulesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Schedulerv3GetDistributionRulesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get distribution rules Description: Return a list of distribution rule IDs that are used by the scheduler Distribution rules can&#39;t be edited if it is used by a scheduled job. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulerServiceGetDistributionRulesAsync(final ApiCallback<Schedulerv3GetDistributionRulesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulerServiceGetDistributionRulesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Schedulerv3GetDistributionRulesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulerServiceGetScheduledJobDetails
     * @param scheduleId Used to return a single scheduledjob. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulerServiceGetScheduledJobDetailsCall(String scheduleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/schedules/{schedule_id}/details"
            .replace("{" + "schedule_id" + "}", localVarApiClient.escapeString(scheduleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulerServiceGetScheduledJobDetailsValidateBeforeCall(String scheduleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scheduleId' is set
        if (scheduleId == null) {
            throw new ApiException("Missing the required parameter 'scheduleId' when calling schedulerServiceGetScheduledJobDetails(Async)");
        }

        return schedulerServiceGetScheduledJobDetailsCall(scheduleId, _callback);

    }

    /**
     * Summary: Get scheduled job Description: Return a single ScheduledJob in detail.
     * 
     * @param scheduleId Used to return a single scheduledjob. (required)
     * @return Schedulerv3GetScheduledJobResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Schedulerv3GetScheduledJobResponse schedulerServiceGetScheduledJobDetails(String scheduleId) throws ApiException {
        ApiResponse<Schedulerv3GetScheduledJobResponse> localVarResp = schedulerServiceGetScheduledJobDetailsWithHttpInfo(scheduleId);
        return localVarResp.getData();
    }

    /**
     * Summary: Get scheduled job Description: Return a single ScheduledJob in detail.
     * 
     * @param scheduleId Used to return a single scheduledjob. (required)
     * @return ApiResponse&lt;Schedulerv3GetScheduledJobResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Schedulerv3GetScheduledJobResponse> schedulerServiceGetScheduledJobDetailsWithHttpInfo(String scheduleId) throws ApiException {
        okhttp3.Call localVarCall = schedulerServiceGetScheduledJobDetailsValidateBeforeCall(scheduleId, null);
        Type localVarReturnType = new TypeToken<Schedulerv3GetScheduledJobResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get scheduled job Description: Return a single ScheduledJob in detail. (asynchronously)
     * 
     * @param scheduleId Used to return a single scheduledjob. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulerServiceGetScheduledJobDetailsAsync(String scheduleId, final ApiCallback<Schedulerv3GetScheduledJobResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulerServiceGetScheduledJobDetailsValidateBeforeCall(scheduleId, _callback);
        Type localVarReturnType = new TypeToken<Schedulerv3GetScheduledJobResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulerServiceGetScheduledJobs
     * @param offset Optional: the amount to offset the rows by for pagination. (optional)
     * @param limit Optional: the max amount of rows to return for pagination. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulerServiceGetScheduledJobsCall(Long offset, Long limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/schedules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulerServiceGetScheduledJobsValidateBeforeCall(Long offset, Long limit, final ApiCallback _callback) throws ApiException {
        return schedulerServiceGetScheduledJobsCall(offset, limit, _callback);

    }

    /**
     * Summary: Get scheduled jobs Description: Return a list of scheduled jobs and the linked tasks.
     * 
     * @param offset Optional: the amount to offset the rows by for pagination. (optional)
     * @param limit Optional: the max amount of rows to return for pagination. (optional)
     * @return Schedulerv3ScheduledJobSummaryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Schedulerv3ScheduledJobSummaryResponse schedulerServiceGetScheduledJobs(Long offset, Long limit) throws ApiException {
        ApiResponse<Schedulerv3ScheduledJobSummaryResponse> localVarResp = schedulerServiceGetScheduledJobsWithHttpInfo(offset, limit);
        return localVarResp.getData();
    }

    /**
     * Summary: Get scheduled jobs Description: Return a list of scheduled jobs and the linked tasks.
     * 
     * @param offset Optional: the amount to offset the rows by for pagination. (optional)
     * @param limit Optional: the max amount of rows to return for pagination. (optional)
     * @return ApiResponse&lt;Schedulerv3ScheduledJobSummaryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Schedulerv3ScheduledJobSummaryResponse> schedulerServiceGetScheduledJobsWithHttpInfo(Long offset, Long limit) throws ApiException {
        okhttp3.Call localVarCall = schedulerServiceGetScheduledJobsValidateBeforeCall(offset, limit, null);
        Type localVarReturnType = new TypeToken<Schedulerv3ScheduledJobSummaryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get scheduled jobs Description: Return a list of scheduled jobs and the linked tasks. (asynchronously)
     * 
     * @param offset Optional: the amount to offset the rows by for pagination. (optional)
     * @param limit Optional: the max amount of rows to return for pagination. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulerServiceGetScheduledJobsAsync(Long offset, Long limit, final ApiCallback<Schedulerv3ScheduledJobSummaryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulerServiceGetScheduledJobsValidateBeforeCall(offset, limit, _callback);
        Type localVarReturnType = new TypeToken<Schedulerv3ScheduledJobSummaryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulerServiceGetSchedulesByReport
     * @param reportId Report ID for the scheduled report. (required)
     * @param schedulerv3GetSchedulesByReportRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulerServiceGetSchedulesByReportCall(String reportId, Schedulerv3GetSchedulesByReportRequest schedulerv3GetSchedulesByReportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = schedulerv3GetSchedulesByReportRequest;

        // create path and map variables
        String localVarPath = "/api/v3/schedules/searchByReport/{report_id}"
            .replace("{" + "report_id" + "}", localVarApiClient.escapeString(reportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulerServiceGetSchedulesByReportValidateBeforeCall(String reportId, Schedulerv3GetSchedulesByReportRequest schedulerv3GetSchedulesByReportRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling schedulerServiceGetSchedulesByReport(Async)");
        }

        // verify the required parameter 'schedulerv3GetSchedulesByReportRequest' is set
        if (schedulerv3GetSchedulesByReportRequest == null) {
            throw new ApiException("Missing the required parameter 'schedulerv3GetSchedulesByReportRequest' when calling schedulerServiceGetSchedulesByReport(Async)");
        }

        return schedulerServiceGetSchedulesByReportCall(reportId, schedulerv3GetSchedulesByReportRequest, _callback);

    }

    /**
     * Summary: Get schedules by report Description: Return an array of scheduled job IDs that run the report_id.  An empty array is returned if the report_id is not scheduled.
     * 
     * @param reportId Report ID for the scheduled report. (required)
     * @param schedulerv3GetSchedulesByReportRequest  (required)
     * @return Schedulerv3GetSchedulesByReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Schedulerv3GetSchedulesByReportResponse schedulerServiceGetSchedulesByReport(String reportId, Schedulerv3GetSchedulesByReportRequest schedulerv3GetSchedulesByReportRequest) throws ApiException {
        ApiResponse<Schedulerv3GetSchedulesByReportResponse> localVarResp = schedulerServiceGetSchedulesByReportWithHttpInfo(reportId, schedulerv3GetSchedulesByReportRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Get schedules by report Description: Return an array of scheduled job IDs that run the report_id.  An empty array is returned if the report_id is not scheduled.
     * 
     * @param reportId Report ID for the scheduled report. (required)
     * @param schedulerv3GetSchedulesByReportRequest  (required)
     * @return ApiResponse&lt;Schedulerv3GetSchedulesByReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Schedulerv3GetSchedulesByReportResponse> schedulerServiceGetSchedulesByReportWithHttpInfo(String reportId, Schedulerv3GetSchedulesByReportRequest schedulerv3GetSchedulesByReportRequest) throws ApiException {
        okhttp3.Call localVarCall = schedulerServiceGetSchedulesByReportValidateBeforeCall(reportId, schedulerv3GetSchedulesByReportRequest, null);
        Type localVarReturnType = new TypeToken<Schedulerv3GetSchedulesByReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get schedules by report Description: Return an array of scheduled job IDs that run the report_id.  An empty array is returned if the report_id is not scheduled. (asynchronously)
     * 
     * @param reportId Report ID for the scheduled report. (required)
     * @param schedulerv3GetSchedulesByReportRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulerServiceGetSchedulesByReportAsync(String reportId, Schedulerv3GetSchedulesByReportRequest schedulerv3GetSchedulesByReportRequest, final ApiCallback<Schedulerv3GetSchedulesByReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulerServiceGetSchedulesByReportValidateBeforeCall(reportId, schedulerv3GetSchedulesByReportRequest, _callback);
        Type localVarReturnType = new TypeToken<Schedulerv3GetSchedulesByReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulerServiceGetTags
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulerServiceGetTagsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/schedules/tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulerServiceGetTagsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return schedulerServiceGetTagsCall(_callback);

    }

    /**
     * Summary: Get tags Description: Return an array of all the unique tags from scheduled jobs.
     * 
     * @return Schedulerv3GetTagsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Schedulerv3GetTagsResponse schedulerServiceGetTags() throws ApiException {
        ApiResponse<Schedulerv3GetTagsResponse> localVarResp = schedulerServiceGetTagsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Summary: Get tags Description: Return an array of all the unique tags from scheduled jobs.
     * 
     * @return ApiResponse&lt;Schedulerv3GetTagsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Schedulerv3GetTagsResponse> schedulerServiceGetTagsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = schedulerServiceGetTagsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Schedulerv3GetTagsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get tags Description: Return an array of all the unique tags from scheduled jobs. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulerServiceGetTagsAsync(final ApiCallback<Schedulerv3GetTagsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulerServiceGetTagsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Schedulerv3GetTagsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulerServiceSearchScheduledJobs
     * @param schedulerv3SearchScheduledJobsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulerServiceSearchScheduledJobsCall(Schedulerv3SearchScheduledJobsRequest schedulerv3SearchScheduledJobsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = schedulerv3SearchScheduledJobsRequest;

        // create path and map variables
        String localVarPath = "/api/v3/schedules/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulerServiceSearchScheduledJobsValidateBeforeCall(Schedulerv3SearchScheduledJobsRequest schedulerv3SearchScheduledJobsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schedulerv3SearchScheduledJobsRequest' is set
        if (schedulerv3SearchScheduledJobsRequest == null) {
            throw new ApiException("Missing the required parameter 'schedulerv3SearchScheduledJobsRequest' when calling schedulerServiceSearchScheduledJobs(Async)");
        }

        return schedulerServiceSearchScheduledJobsCall(schedulerv3SearchScheduledJobsRequest, _callback);

    }

    /**
     * Summary: Search scheduled jobs Description: Return a filtered list of scheduled jobs and the linked tasks.
     * 
     * @param schedulerv3SearchScheduledJobsRequest  (required)
     * @return Schedulerv3ScheduledJobSummaryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Schedulerv3ScheduledJobSummaryResponse schedulerServiceSearchScheduledJobs(Schedulerv3SearchScheduledJobsRequest schedulerv3SearchScheduledJobsRequest) throws ApiException {
        ApiResponse<Schedulerv3ScheduledJobSummaryResponse> localVarResp = schedulerServiceSearchScheduledJobsWithHttpInfo(schedulerv3SearchScheduledJobsRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Search scheduled jobs Description: Return a filtered list of scheduled jobs and the linked tasks.
     * 
     * @param schedulerv3SearchScheduledJobsRequest  (required)
     * @return ApiResponse&lt;Schedulerv3ScheduledJobSummaryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Schedulerv3ScheduledJobSummaryResponse> schedulerServiceSearchScheduledJobsWithHttpInfo(Schedulerv3SearchScheduledJobsRequest schedulerv3SearchScheduledJobsRequest) throws ApiException {
        okhttp3.Call localVarCall = schedulerServiceSearchScheduledJobsValidateBeforeCall(schedulerv3SearchScheduledJobsRequest, null);
        Type localVarReturnType = new TypeToken<Schedulerv3ScheduledJobSummaryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Search scheduled jobs Description: Return a filtered list of scheduled jobs and the linked tasks. (asynchronously)
     * 
     * @param schedulerv3SearchScheduledJobsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulerServiceSearchScheduledJobsAsync(Schedulerv3SearchScheduledJobsRequest schedulerv3SearchScheduledJobsRequest, final ApiCallback<Schedulerv3ScheduledJobSummaryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulerServiceSearchScheduledJobsValidateBeforeCall(schedulerv3SearchScheduledJobsRequest, _callback);
        Type localVarReturnType = new TypeToken<Schedulerv3ScheduledJobSummaryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulerServiceSearchScheduledTaskRuns
     * @param schedulerv3SearchScheduledTaskRunsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulerServiceSearchScheduledTaskRunsCall(Schedulerv3SearchScheduledTaskRunsRequest schedulerv3SearchScheduledTaskRunsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = schedulerv3SearchScheduledTaskRunsRequest;

        // create path and map variables
        String localVarPath = "/api/v3/schedules/runs/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulerServiceSearchScheduledTaskRunsValidateBeforeCall(Schedulerv3SearchScheduledTaskRunsRequest schedulerv3SearchScheduledTaskRunsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'schedulerv3SearchScheduledTaskRunsRequest' is set
        if (schedulerv3SearchScheduledTaskRunsRequest == null) {
            throw new ApiException("Missing the required parameter 'schedulerv3SearchScheduledTaskRunsRequest' when calling schedulerServiceSearchScheduledTaskRuns(Async)");
        }

        return schedulerServiceSearchScheduledTaskRunsCall(schedulerv3SearchScheduledTaskRunsRequest, _callback);

    }

    /**
     * Summary: Search scheduled task runs Description: Return a list of scheduled task run, start date, end date, status
     * 
     * @param schedulerv3SearchScheduledTaskRunsRequest  (required)
     * @return Schedulerv3SearchScheduledTaskRunsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Schedulerv3SearchScheduledTaskRunsResponse schedulerServiceSearchScheduledTaskRuns(Schedulerv3SearchScheduledTaskRunsRequest schedulerv3SearchScheduledTaskRunsRequest) throws ApiException {
        ApiResponse<Schedulerv3SearchScheduledTaskRunsResponse> localVarResp = schedulerServiceSearchScheduledTaskRunsWithHttpInfo(schedulerv3SearchScheduledTaskRunsRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Search scheduled task runs Description: Return a list of scheduled task run, start date, end date, status
     * 
     * @param schedulerv3SearchScheduledTaskRunsRequest  (required)
     * @return ApiResponse&lt;Schedulerv3SearchScheduledTaskRunsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Schedulerv3SearchScheduledTaskRunsResponse> schedulerServiceSearchScheduledTaskRunsWithHttpInfo(Schedulerv3SearchScheduledTaskRunsRequest schedulerv3SearchScheduledTaskRunsRequest) throws ApiException {
        okhttp3.Call localVarCall = schedulerServiceSearchScheduledTaskRunsValidateBeforeCall(schedulerv3SearchScheduledTaskRunsRequest, null);
        Type localVarReturnType = new TypeToken<Schedulerv3SearchScheduledTaskRunsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Search scheduled task runs Description: Return a list of scheduled task run, start date, end date, status (asynchronously)
     * 
     * @param schedulerv3SearchScheduledTaskRunsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulerServiceSearchScheduledTaskRunsAsync(Schedulerv3SearchScheduledTaskRunsRequest schedulerv3SearchScheduledTaskRunsRequest, final ApiCallback<Schedulerv3SearchScheduledTaskRunsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulerServiceSearchScheduledTaskRunsValidateBeforeCall(schedulerv3SearchScheduledTaskRunsRequest, _callback);
        Type localVarReturnType = new TypeToken<Schedulerv3SearchScheduledTaskRunsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulerServiceUpdateScheduledJob
     * @param scheduleId Unique ID, required for update. (required)
     * @param schedulerv3UpdateScheduledJobRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulerServiceUpdateScheduledJobCall(String scheduleId, Schedulerv3UpdateScheduledJobRequest schedulerv3UpdateScheduledJobRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = schedulerv3UpdateScheduledJobRequest;

        // create path and map variables
        String localVarPath = "/api/v3/schedules/{schedule_id}"
            .replace("{" + "schedule_id" + "}", localVarApiClient.escapeString(scheduleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulerServiceUpdateScheduledJobValidateBeforeCall(String scheduleId, Schedulerv3UpdateScheduledJobRequest schedulerv3UpdateScheduledJobRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scheduleId' is set
        if (scheduleId == null) {
            throw new ApiException("Missing the required parameter 'scheduleId' when calling schedulerServiceUpdateScheduledJob(Async)");
        }

        // verify the required parameter 'schedulerv3UpdateScheduledJobRequest' is set
        if (schedulerv3UpdateScheduledJobRequest == null) {
            throw new ApiException("Missing the required parameter 'schedulerv3UpdateScheduledJobRequest' when calling schedulerServiceUpdateScheduledJob(Async)");
        }

        return schedulerServiceUpdateScheduledJobCall(scheduleId, schedulerv3UpdateScheduledJobRequest, _callback);

    }

    /**
     * Summary: Update scheduled job Description: Update a single schedule job.
     * 
     * @param scheduleId Unique ID, required for update. (required)
     * @param schedulerv3UpdateScheduledJobRequest  (required)
     * @return Schedulerv3UpdateScheduledJobResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Schedulerv3UpdateScheduledJobResponse schedulerServiceUpdateScheduledJob(String scheduleId, Schedulerv3UpdateScheduledJobRequest schedulerv3UpdateScheduledJobRequest) throws ApiException {
        ApiResponse<Schedulerv3UpdateScheduledJobResponse> localVarResp = schedulerServiceUpdateScheduledJobWithHttpInfo(scheduleId, schedulerv3UpdateScheduledJobRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Update scheduled job Description: Update a single schedule job.
     * 
     * @param scheduleId Unique ID, required for update. (required)
     * @param schedulerv3UpdateScheduledJobRequest  (required)
     * @return ApiResponse&lt;Schedulerv3UpdateScheduledJobResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Schedulerv3UpdateScheduledJobResponse> schedulerServiceUpdateScheduledJobWithHttpInfo(String scheduleId, Schedulerv3UpdateScheduledJobRequest schedulerv3UpdateScheduledJobRequest) throws ApiException {
        okhttp3.Call localVarCall = schedulerServiceUpdateScheduledJobValidateBeforeCall(scheduleId, schedulerv3UpdateScheduledJobRequest, null);
        Type localVarReturnType = new TypeToken<Schedulerv3UpdateScheduledJobResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Update scheduled job Description: Update a single schedule job. (asynchronously)
     * 
     * @param scheduleId Unique ID, required for update. (required)
     * @param schedulerv3UpdateScheduledJobRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulerServiceUpdateScheduledJobAsync(String scheduleId, Schedulerv3UpdateScheduledJobRequest schedulerv3UpdateScheduledJobRequest, final ApiCallback<Schedulerv3UpdateScheduledJobResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulerServiceUpdateScheduledJobValidateBeforeCall(scheduleId, schedulerv3UpdateScheduledJobRequest, _callback);
        Type localVarReturnType = new TypeToken<Schedulerv3UpdateScheduledJobResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
