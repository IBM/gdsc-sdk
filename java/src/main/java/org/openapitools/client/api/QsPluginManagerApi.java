/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Qspmpluginmanagerv3PluginRQ;
import org.openapitools.client.model.Qspmpluginmanagerv3PluginRS;
import org.openapitools.client.model.Qspmpluginmanagerv3PolicyPluginRQ;
import org.openapitools.client.model.Qspmpluginmanagerv3PolicyPluginRS;
import org.openapitools.client.model.RuntimeError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QsPluginManagerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public QsPluginManagerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public QsPluginManagerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for qSPluginManagerInvokeAppProv
     * @param pluginId Unique identifier for the plugin (required)
     * @param qspmpluginmanagerv3PluginRQ  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qSPluginManagerInvokeAppProvCall(String pluginId, Qspmpluginmanagerv3PluginRQ qspmpluginmanagerv3PluginRQ, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = qspmpluginmanagerv3PluginRQ;

        // create path and map variables
        String localVarPath = "/api/v3/plugins/{plugin_id}/application"
            .replace("{" + "plugin_id" + "}", localVarApiClient.escapeString(pluginId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call qSPluginManagerInvokeAppProvValidateBeforeCall(String pluginId, Qspmpluginmanagerv3PluginRQ qspmpluginmanagerv3PluginRQ, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pluginId' is set
        if (pluginId == null) {
            throw new ApiException("Missing the required parameter 'pluginId' when calling qSPluginManagerInvokeAppProv(Async)");
        }

        // verify the required parameter 'qspmpluginmanagerv3PluginRQ' is set
        if (qspmpluginmanagerv3PluginRQ == null) {
            throw new ApiException("Missing the required parameter 'qspmpluginmanagerv3PluginRQ' when calling qSPluginManagerInvokeAppProv(Async)");
        }

        return qSPluginManagerInvokeAppProvCall(pluginId, qspmpluginmanagerv3PluginRQ, _callback);

    }

    /**
     * Summary: Invoke only application provisioning data plugin Description:Parses app input file and triggers dataload
     * 
     * @param pluginId Unique identifier for the plugin (required)
     * @param qspmpluginmanagerv3PluginRQ  (required)
     * @return Qspmpluginmanagerv3PluginRS
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Qspmpluginmanagerv3PluginRS qSPluginManagerInvokeAppProv(String pluginId, Qspmpluginmanagerv3PluginRQ qspmpluginmanagerv3PluginRQ) throws ApiException {
        ApiResponse<Qspmpluginmanagerv3PluginRS> localVarResp = qSPluginManagerInvokeAppProvWithHttpInfo(pluginId, qspmpluginmanagerv3PluginRQ);
        return localVarResp.getData();
    }

    /**
     * Summary: Invoke only application provisioning data plugin Description:Parses app input file and triggers dataload
     * 
     * @param pluginId Unique identifier for the plugin (required)
     * @param qspmpluginmanagerv3PluginRQ  (required)
     * @return ApiResponse&lt;Qspmpluginmanagerv3PluginRS&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Qspmpluginmanagerv3PluginRS> qSPluginManagerInvokeAppProvWithHttpInfo(String pluginId, Qspmpluginmanagerv3PluginRQ qspmpluginmanagerv3PluginRQ) throws ApiException {
        okhttp3.Call localVarCall = qSPluginManagerInvokeAppProvValidateBeforeCall(pluginId, qspmpluginmanagerv3PluginRQ, null);
        Type localVarReturnType = new TypeToken<Qspmpluginmanagerv3PluginRS>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Invoke only application provisioning data plugin Description:Parses app input file and triggers dataload (asynchronously)
     * 
     * @param pluginId Unique identifier for the plugin (required)
     * @param qspmpluginmanagerv3PluginRQ  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qSPluginManagerInvokeAppProvAsync(String pluginId, Qspmpluginmanagerv3PluginRQ qspmpluginmanagerv3PluginRQ, final ApiCallback<Qspmpluginmanagerv3PluginRS> _callback) throws ApiException {

        okhttp3.Call localVarCall = qSPluginManagerInvokeAppProvValidateBeforeCall(pluginId, qspmpluginmanagerv3PluginRQ, _callback);
        Type localVarReturnType = new TypeToken<Qspmpluginmanagerv3PluginRS>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for qSPluginManagerInvokeExplorerV1
     * @param pluginId Unique identifier for the plugin (required)
     * @param qspmpluginmanagerv3PluginRQ  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qSPluginManagerInvokeExplorerV1Call(String pluginId, Qspmpluginmanagerv3PluginRQ qspmpluginmanagerv3PluginRQ, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = qspmpluginmanagerv3PluginRQ;

        // create path and map variables
        String localVarPath = "/api/v3/plugins/{plugin_id}/explorer"
            .replace("{" + "plugin_id" + "}", localVarApiClient.escapeString(pluginId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call qSPluginManagerInvokeExplorerV1ValidateBeforeCall(String pluginId, Qspmpluginmanagerv3PluginRQ qspmpluginmanagerv3PluginRQ, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pluginId' is set
        if (pluginId == null) {
            throw new ApiException("Missing the required parameter 'pluginId' when calling qSPluginManagerInvokeExplorerV1(Async)");
        }

        // verify the required parameter 'qspmpluginmanagerv3PluginRQ' is set
        if (qspmpluginmanagerv3PluginRQ == null) {
            throw new ApiException("Missing the required parameter 'qspmpluginmanagerv3PluginRQ' when calling qSPluginManagerInvokeExplorerV1(Async)");
        }

        return qSPluginManagerInvokeExplorerV1Call(pluginId, qspmpluginmanagerv3PluginRQ, _callback);

    }

    /**
     * Summary: Invoke only explorer inventory data plugin Description:Parses explorer input file and triggers dataload
     * 
     * @param pluginId Unique identifier for the plugin (required)
     * @param qspmpluginmanagerv3PluginRQ  (required)
     * @return Qspmpluginmanagerv3PluginRS
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Qspmpluginmanagerv3PluginRS qSPluginManagerInvokeExplorerV1(String pluginId, Qspmpluginmanagerv3PluginRQ qspmpluginmanagerv3PluginRQ) throws ApiException {
        ApiResponse<Qspmpluginmanagerv3PluginRS> localVarResp = qSPluginManagerInvokeExplorerV1WithHttpInfo(pluginId, qspmpluginmanagerv3PluginRQ);
        return localVarResp.getData();
    }

    /**
     * Summary: Invoke only explorer inventory data plugin Description:Parses explorer input file and triggers dataload
     * 
     * @param pluginId Unique identifier for the plugin (required)
     * @param qspmpluginmanagerv3PluginRQ  (required)
     * @return ApiResponse&lt;Qspmpluginmanagerv3PluginRS&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Qspmpluginmanagerv3PluginRS> qSPluginManagerInvokeExplorerV1WithHttpInfo(String pluginId, Qspmpluginmanagerv3PluginRQ qspmpluginmanagerv3PluginRQ) throws ApiException {
        okhttp3.Call localVarCall = qSPluginManagerInvokeExplorerV1ValidateBeforeCall(pluginId, qspmpluginmanagerv3PluginRQ, null);
        Type localVarReturnType = new TypeToken<Qspmpluginmanagerv3PluginRS>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Invoke only explorer inventory data plugin Description:Parses explorer input file and triggers dataload (asynchronously)
     * 
     * @param pluginId Unique identifier for the plugin (required)
     * @param qspmpluginmanagerv3PluginRQ  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qSPluginManagerInvokeExplorerV1Async(String pluginId, Qspmpluginmanagerv3PluginRQ qspmpluginmanagerv3PluginRQ, final ApiCallback<Qspmpluginmanagerv3PluginRS> _callback) throws ApiException {

        okhttp3.Call localVarCall = qSPluginManagerInvokeExplorerV1ValidateBeforeCall(pluginId, qspmpluginmanagerv3PluginRQ, _callback);
        Type localVarReturnType = new TypeToken<Qspmpluginmanagerv3PluginRS>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for qSPluginManagerInvokeExplorerV2
     * @param pluginId Unique identifier for the plugin (required)
     * @param qspmpluginmanagerv3PluginRQ  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qSPluginManagerInvokeExplorerV2Call(String pluginId, Qspmpluginmanagerv3PluginRQ qspmpluginmanagerv3PluginRQ, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = qspmpluginmanagerv3PluginRQ;

        // create path and map variables
        String localVarPath = "/api/v3/plugins/{plugin_id}/explorer/analytics"
            .replace("{" + "plugin_id" + "}", localVarApiClient.escapeString(pluginId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call qSPluginManagerInvokeExplorerV2ValidateBeforeCall(String pluginId, Qspmpluginmanagerv3PluginRQ qspmpluginmanagerv3PluginRQ, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pluginId' is set
        if (pluginId == null) {
            throw new ApiException("Missing the required parameter 'pluginId' when calling qSPluginManagerInvokeExplorerV2(Async)");
        }

        // verify the required parameter 'qspmpluginmanagerv3PluginRQ' is set
        if (qspmpluginmanagerv3PluginRQ == null) {
            throw new ApiException("Missing the required parameter 'qspmpluginmanagerv3PluginRQ' when calling qSPluginManagerInvokeExplorerV2(Async)");
        }

        return qSPluginManagerInvokeExplorerV2Call(pluginId, qspmpluginmanagerv3PluginRQ, _callback);

    }

    /**
     * Summary: Invoke only explorer analytics data plugin Description:Parses explorer input file and triggers dataload
     * 
     * @param pluginId Unique identifier for the plugin (required)
     * @param qspmpluginmanagerv3PluginRQ  (required)
     * @return Qspmpluginmanagerv3PluginRS
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Qspmpluginmanagerv3PluginRS qSPluginManagerInvokeExplorerV2(String pluginId, Qspmpluginmanagerv3PluginRQ qspmpluginmanagerv3PluginRQ) throws ApiException {
        ApiResponse<Qspmpluginmanagerv3PluginRS> localVarResp = qSPluginManagerInvokeExplorerV2WithHttpInfo(pluginId, qspmpluginmanagerv3PluginRQ);
        return localVarResp.getData();
    }

    /**
     * Summary: Invoke only explorer analytics data plugin Description:Parses explorer input file and triggers dataload
     * 
     * @param pluginId Unique identifier for the plugin (required)
     * @param qspmpluginmanagerv3PluginRQ  (required)
     * @return ApiResponse&lt;Qspmpluginmanagerv3PluginRS&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Qspmpluginmanagerv3PluginRS> qSPluginManagerInvokeExplorerV2WithHttpInfo(String pluginId, Qspmpluginmanagerv3PluginRQ qspmpluginmanagerv3PluginRQ) throws ApiException {
        okhttp3.Call localVarCall = qSPluginManagerInvokeExplorerV2ValidateBeforeCall(pluginId, qspmpluginmanagerv3PluginRQ, null);
        Type localVarReturnType = new TypeToken<Qspmpluginmanagerv3PluginRS>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Invoke only explorer analytics data plugin Description:Parses explorer input file and triggers dataload (asynchronously)
     * 
     * @param pluginId Unique identifier for the plugin (required)
     * @param qspmpluginmanagerv3PluginRQ  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qSPluginManagerInvokeExplorerV2Async(String pluginId, Qspmpluginmanagerv3PluginRQ qspmpluginmanagerv3PluginRQ, final ApiCallback<Qspmpluginmanagerv3PluginRS> _callback) throws ApiException {

        okhttp3.Call localVarCall = qSPluginManagerInvokeExplorerV2ValidateBeforeCall(pluginId, qspmpluginmanagerv3PluginRQ, _callback);
        Type localVarReturnType = new TypeToken<Qspmpluginmanagerv3PluginRS>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for qSPluginManagerInvokePlugin
     * @param pluginId Unique identifier for the plugin (required)
     * @param qspmpluginmanagerv3PluginRQ  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qSPluginManagerInvokePluginCall(String pluginId, Qspmpluginmanagerv3PluginRQ qspmpluginmanagerv3PluginRQ, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = qspmpluginmanagerv3PluginRQ;

        // create path and map variables
        String localVarPath = "/api/v3/plugins/{plugin_id}/network"
            .replace("{" + "plugin_id" + "}", localVarApiClient.escapeString(pluginId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call qSPluginManagerInvokePluginValidateBeforeCall(String pluginId, Qspmpluginmanagerv3PluginRQ qspmpluginmanagerv3PluginRQ, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pluginId' is set
        if (pluginId == null) {
            throw new ApiException("Missing the required parameter 'pluginId' when calling qSPluginManagerInvokePlugin(Async)");
        }

        // verify the required parameter 'qspmpluginmanagerv3PluginRQ' is set
        if (qspmpluginmanagerv3PluginRQ == null) {
            throw new ApiException("Missing the required parameter 'qspmpluginmanagerv3PluginRQ' when calling qSPluginManagerInvokePlugin(Async)");
        }

        return qSPluginManagerInvokePluginCall(pluginId, qspmpluginmanagerv3PluginRQ, _callback);

    }

    /**
     * Summary: Invoke consolidated or only network data plugin Description:Parses input files and triggers dataload
     * 
     * @param pluginId Unique identifier for the plugin (required)
     * @param qspmpluginmanagerv3PluginRQ  (required)
     * @return Qspmpluginmanagerv3PluginRS
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Qspmpluginmanagerv3PluginRS qSPluginManagerInvokePlugin(String pluginId, Qspmpluginmanagerv3PluginRQ qspmpluginmanagerv3PluginRQ) throws ApiException {
        ApiResponse<Qspmpluginmanagerv3PluginRS> localVarResp = qSPluginManagerInvokePluginWithHttpInfo(pluginId, qspmpluginmanagerv3PluginRQ);
        return localVarResp.getData();
    }

    /**
     * Summary: Invoke consolidated or only network data plugin Description:Parses input files and triggers dataload
     * 
     * @param pluginId Unique identifier for the plugin (required)
     * @param qspmpluginmanagerv3PluginRQ  (required)
     * @return ApiResponse&lt;Qspmpluginmanagerv3PluginRS&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Qspmpluginmanagerv3PluginRS> qSPluginManagerInvokePluginWithHttpInfo(String pluginId, Qspmpluginmanagerv3PluginRQ qspmpluginmanagerv3PluginRQ) throws ApiException {
        okhttp3.Call localVarCall = qSPluginManagerInvokePluginValidateBeforeCall(pluginId, qspmpluginmanagerv3PluginRQ, null);
        Type localVarReturnType = new TypeToken<Qspmpluginmanagerv3PluginRS>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Invoke consolidated or only network data plugin Description:Parses input files and triggers dataload (asynchronously)
     * 
     * @param pluginId Unique identifier for the plugin (required)
     * @param qspmpluginmanagerv3PluginRQ  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qSPluginManagerInvokePluginAsync(String pluginId, Qspmpluginmanagerv3PluginRQ qspmpluginmanagerv3PluginRQ, final ApiCallback<Qspmpluginmanagerv3PluginRS> _callback) throws ApiException {

        okhttp3.Call localVarCall = qSPluginManagerInvokePluginValidateBeforeCall(pluginId, qspmpluginmanagerv3PluginRQ, _callback);
        Type localVarReturnType = new TypeToken<Qspmpluginmanagerv3PluginRS>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for qSPluginManagerInvokePolicy
     * @param pluginId Unique identifier for the plugin (required)
     * @param qspmpluginmanagerv3PolicyPluginRQ  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qSPluginManagerInvokePolicyCall(String pluginId, Qspmpluginmanagerv3PolicyPluginRQ qspmpluginmanagerv3PolicyPluginRQ, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = qspmpluginmanagerv3PolicyPluginRQ;

        // create path and map variables
        String localVarPath = "/api/v3/plugins/{plugin_id}/policy"
            .replace("{" + "plugin_id" + "}", localVarApiClient.escapeString(pluginId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call qSPluginManagerInvokePolicyValidateBeforeCall(String pluginId, Qspmpluginmanagerv3PolicyPluginRQ qspmpluginmanagerv3PolicyPluginRQ, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pluginId' is set
        if (pluginId == null) {
            throw new ApiException("Missing the required parameter 'pluginId' when calling qSPluginManagerInvokePolicy(Async)");
        }

        // verify the required parameter 'qspmpluginmanagerv3PolicyPluginRQ' is set
        if (qspmpluginmanagerv3PolicyPluginRQ == null) {
            throw new ApiException("Missing the required parameter 'qspmpluginmanagerv3PolicyPluginRQ' when calling qSPluginManagerInvokePolicy(Async)");
        }

        return qSPluginManagerInvokePolicyCall(pluginId, qspmpluginmanagerv3PolicyPluginRQ, _callback);

    }

    /**
     * Summary: Invoke only policy data plugin Description:Parses policy input file and triggers dataload
     * 
     * @param pluginId Unique identifier for the plugin (required)
     * @param qspmpluginmanagerv3PolicyPluginRQ  (required)
     * @return Qspmpluginmanagerv3PolicyPluginRS
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Qspmpluginmanagerv3PolicyPluginRS qSPluginManagerInvokePolicy(String pluginId, Qspmpluginmanagerv3PolicyPluginRQ qspmpluginmanagerv3PolicyPluginRQ) throws ApiException {
        ApiResponse<Qspmpluginmanagerv3PolicyPluginRS> localVarResp = qSPluginManagerInvokePolicyWithHttpInfo(pluginId, qspmpluginmanagerv3PolicyPluginRQ);
        return localVarResp.getData();
    }

    /**
     * Summary: Invoke only policy data plugin Description:Parses policy input file and triggers dataload
     * 
     * @param pluginId Unique identifier for the plugin (required)
     * @param qspmpluginmanagerv3PolicyPluginRQ  (required)
     * @return ApiResponse&lt;Qspmpluginmanagerv3PolicyPluginRS&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Qspmpluginmanagerv3PolicyPluginRS> qSPluginManagerInvokePolicyWithHttpInfo(String pluginId, Qspmpluginmanagerv3PolicyPluginRQ qspmpluginmanagerv3PolicyPluginRQ) throws ApiException {
        okhttp3.Call localVarCall = qSPluginManagerInvokePolicyValidateBeforeCall(pluginId, qspmpluginmanagerv3PolicyPluginRQ, null);
        Type localVarReturnType = new TypeToken<Qspmpluginmanagerv3PolicyPluginRS>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Invoke only policy data plugin Description:Parses policy input file and triggers dataload (asynchronously)
     * 
     * @param pluginId Unique identifier for the plugin (required)
     * @param qspmpluginmanagerv3PolicyPluginRQ  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qSPluginManagerInvokePolicyAsync(String pluginId, Qspmpluginmanagerv3PolicyPluginRQ qspmpluginmanagerv3PolicyPluginRQ, final ApiCallback<Qspmpluginmanagerv3PolicyPluginRS> _callback) throws ApiException {

        okhttp3.Call localVarCall = qSPluginManagerInvokePolicyValidateBeforeCall(pluginId, qspmpluginmanagerv3PolicyPluginRQ, _callback);
        Type localVarReturnType = new TypeToken<Qspmpluginmanagerv3PolicyPluginRS>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
