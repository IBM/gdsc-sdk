/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Groupbuilderv3CancelGroupImportResponse;
import org.openapitools.client.model.Groupbuilderv3CreateGroupRequest;
import org.openapitools.client.model.Groupbuilderv3CreateGroupResponse;
import org.openapitools.client.model.Groupbuilderv3DeleteGroupResponse;
import org.openapitools.client.model.Groupbuilderv3EditGroupRequest;
import org.openapitools.client.model.Groupbuilderv3EditGroupResponse;
import org.openapitools.client.model.Groupbuilderv3GetExportGroupRequest;
import org.openapitools.client.model.Groupbuilderv3GetExportGroupResponse;
import org.openapitools.client.model.Groupbuilderv3GetGroupDetailResponse;
import org.openapitools.client.model.Groupbuilderv3GetGroupMembersRequest;
import org.openapitools.client.model.Groupbuilderv3GetGroupMembersResponse;
import org.openapitools.client.model.Groupbuilderv3GetGroupSyncMappingResponse;
import org.openapitools.client.model.Groupbuilderv3GetGroupTypeMappingResponse;
import org.openapitools.client.model.Groupbuilderv3GetGroupTypesResponse;
import org.openapitools.client.model.Groupbuilderv3GetGroupsRequestGdp;
import org.openapitools.client.model.Groupbuilderv3GetGroupsResponse;
import org.openapitools.client.model.Groupbuilderv3GetGroupsResponseGdp;
import org.openapitools.client.model.Groupbuilderv3GetImportGroupsResponse;
import org.openapitools.client.model.Groupbuilderv3ImportGroupRequest;
import org.openapitools.client.model.Groupbuilderv3ImportGroupResponse;
import org.openapitools.client.model.Groupbuilderv3RefreshGroupsRequest;
import org.openapitools.client.model.Groupbuilderv3RefreshGroupsResponse;
import org.openapitools.client.model.Groupbuilderv3ResetGroupsRequest;
import org.openapitools.client.model.Groupbuilderv3ResetGroupsResponse;
import org.openapitools.client.model.Groupbuilderv3StoreGroupMembersGdpRequest;
import org.openapitools.client.model.Groupbuilderv3StoreGroupMembersGdpResponse;
import org.openapitools.client.model.RuntimeError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GroupBuilderApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GroupBuilderApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GroupBuilderApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for groupBuilderCancelImportGroup
     * @param groupIds Group IDs to delete. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupBuilderCancelImportGroupCall(List<Integer> groupIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/groups_import";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groupIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "group_ids", groupIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupBuilderCancelImportGroupValidateBeforeCall(List<Integer> groupIds, final ApiCallback _callback) throws ApiException {
        return groupBuilderCancelImportGroupCall(groupIds, _callback);

    }

    /**
     * Summary: Cancel import group Description: Cancel import refresh for selected groups.
     * 
     * @param groupIds Group IDs to delete. (optional)
     * @return Groupbuilderv3CancelGroupImportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Groupbuilderv3CancelGroupImportResponse groupBuilderCancelImportGroup(List<Integer> groupIds) throws ApiException {
        ApiResponse<Groupbuilderv3CancelGroupImportResponse> localVarResp = groupBuilderCancelImportGroupWithHttpInfo(groupIds);
        return localVarResp.getData();
    }

    /**
     * Summary: Cancel import group Description: Cancel import refresh for selected groups.
     * 
     * @param groupIds Group IDs to delete. (optional)
     * @return ApiResponse&lt;Groupbuilderv3CancelGroupImportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Groupbuilderv3CancelGroupImportResponse> groupBuilderCancelImportGroupWithHttpInfo(List<Integer> groupIds) throws ApiException {
        okhttp3.Call localVarCall = groupBuilderCancelImportGroupValidateBeforeCall(groupIds, null);
        Type localVarReturnType = new TypeToken<Groupbuilderv3CancelGroupImportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Cancel import group Description: Cancel import refresh for selected groups. (asynchronously)
     * 
     * @param groupIds Group IDs to delete. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupBuilderCancelImportGroupAsync(List<Integer> groupIds, final ApiCallback<Groupbuilderv3CancelGroupImportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupBuilderCancelImportGroupValidateBeforeCall(groupIds, _callback);
        Type localVarReturnType = new TypeToken<Groupbuilderv3CancelGroupImportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupBuilderCreateGroup
     * @param groupbuilderv3CreateGroupRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupBuilderCreateGroupCall(Groupbuilderv3CreateGroupRequest groupbuilderv3CreateGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupbuilderv3CreateGroupRequest;

        // create path and map variables
        String localVarPath = "/api/v3/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupBuilderCreateGroupValidateBeforeCall(Groupbuilderv3CreateGroupRequest groupbuilderv3CreateGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupbuilderv3CreateGroupRequest' is set
        if (groupbuilderv3CreateGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'groupbuilderv3CreateGroupRequest' when calling groupBuilderCreateGroup(Async)");
        }

        return groupBuilderCreateGroupCall(groupbuilderv3CreateGroupRequest, _callback);

    }

    /**
     * Summary: Create group Description: Create new groups.
     * 
     * @param groupbuilderv3CreateGroupRequest  (required)
     * @return Groupbuilderv3CreateGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Groupbuilderv3CreateGroupResponse groupBuilderCreateGroup(Groupbuilderv3CreateGroupRequest groupbuilderv3CreateGroupRequest) throws ApiException {
        ApiResponse<Groupbuilderv3CreateGroupResponse> localVarResp = groupBuilderCreateGroupWithHttpInfo(groupbuilderv3CreateGroupRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Create group Description: Create new groups.
     * 
     * @param groupbuilderv3CreateGroupRequest  (required)
     * @return ApiResponse&lt;Groupbuilderv3CreateGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Groupbuilderv3CreateGroupResponse> groupBuilderCreateGroupWithHttpInfo(Groupbuilderv3CreateGroupRequest groupbuilderv3CreateGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = groupBuilderCreateGroupValidateBeforeCall(groupbuilderv3CreateGroupRequest, null);
        Type localVarReturnType = new TypeToken<Groupbuilderv3CreateGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Create group Description: Create new groups. (asynchronously)
     * 
     * @param groupbuilderv3CreateGroupRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupBuilderCreateGroupAsync(Groupbuilderv3CreateGroupRequest groupbuilderv3CreateGroupRequest, final ApiCallback<Groupbuilderv3CreateGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupBuilderCreateGroupValidateBeforeCall(groupbuilderv3CreateGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<Groupbuilderv3CreateGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupBuilderDeleteGroup
     * @param groupIds Group IDs to delete. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupBuilderDeleteGroupCall(List<Integer> groupIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groupIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "group_ids", groupIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupBuilderDeleteGroupValidateBeforeCall(List<Integer> groupIds, final ApiCallback _callback) throws ApiException {
        return groupBuilderDeleteGroupCall(groupIds, _callback);

    }

    /**
     * Summary: Delete group Description: Delete specified groups if the group ID is not used for reports.
     * 
     * @param groupIds Group IDs to delete. (optional)
     * @return Groupbuilderv3DeleteGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Groupbuilderv3DeleteGroupResponse groupBuilderDeleteGroup(List<Integer> groupIds) throws ApiException {
        ApiResponse<Groupbuilderv3DeleteGroupResponse> localVarResp = groupBuilderDeleteGroupWithHttpInfo(groupIds);
        return localVarResp.getData();
    }

    /**
     * Summary: Delete group Description: Delete specified groups if the group ID is not used for reports.
     * 
     * @param groupIds Group IDs to delete. (optional)
     * @return ApiResponse&lt;Groupbuilderv3DeleteGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Groupbuilderv3DeleteGroupResponse> groupBuilderDeleteGroupWithHttpInfo(List<Integer> groupIds) throws ApiException {
        okhttp3.Call localVarCall = groupBuilderDeleteGroupValidateBeforeCall(groupIds, null);
        Type localVarReturnType = new TypeToken<Groupbuilderv3DeleteGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Delete group Description: Delete specified groups if the group ID is not used for reports. (asynchronously)
     * 
     * @param groupIds Group IDs to delete. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupBuilderDeleteGroupAsync(List<Integer> groupIds, final ApiCallback<Groupbuilderv3DeleteGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupBuilderDeleteGroupValidateBeforeCall(groupIds, _callback);
        Type localVarReturnType = new TypeToken<Groupbuilderv3DeleteGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupBuilderEditGroup
     * @param groupId Group ID. (required)
     * @param groupbuilderv3EditGroupRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupBuilderEditGroupCall(Integer groupId, Groupbuilderv3EditGroupRequest groupbuilderv3EditGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupbuilderv3EditGroupRequest;

        // create path and map variables
        String localVarPath = "/api/v3/groups/{group_id}"
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupBuilderEditGroupValidateBeforeCall(Integer groupId, Groupbuilderv3EditGroupRequest groupbuilderv3EditGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling groupBuilderEditGroup(Async)");
        }

        // verify the required parameter 'groupbuilderv3EditGroupRequest' is set
        if (groupbuilderv3EditGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'groupbuilderv3EditGroupRequest' when calling groupBuilderEditGroup(Async)");
        }

        return groupBuilderEditGroupCall(groupId, groupbuilderv3EditGroupRequest, _callback);

    }

    /**
     * Summary: Edit group Description: Add or delete group members.
     * 
     * @param groupId Group ID. (required)
     * @param groupbuilderv3EditGroupRequest  (required)
     * @return Groupbuilderv3EditGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Groupbuilderv3EditGroupResponse groupBuilderEditGroup(Integer groupId, Groupbuilderv3EditGroupRequest groupbuilderv3EditGroupRequest) throws ApiException {
        ApiResponse<Groupbuilderv3EditGroupResponse> localVarResp = groupBuilderEditGroupWithHttpInfo(groupId, groupbuilderv3EditGroupRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Edit group Description: Add or delete group members.
     * 
     * @param groupId Group ID. (required)
     * @param groupbuilderv3EditGroupRequest  (required)
     * @return ApiResponse&lt;Groupbuilderv3EditGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Groupbuilderv3EditGroupResponse> groupBuilderEditGroupWithHttpInfo(Integer groupId, Groupbuilderv3EditGroupRequest groupbuilderv3EditGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = groupBuilderEditGroupValidateBeforeCall(groupId, groupbuilderv3EditGroupRequest, null);
        Type localVarReturnType = new TypeToken<Groupbuilderv3EditGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Edit group Description: Add or delete group members. (asynchronously)
     * 
     * @param groupId Group ID. (required)
     * @param groupbuilderv3EditGroupRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupBuilderEditGroupAsync(Integer groupId, Groupbuilderv3EditGroupRequest groupbuilderv3EditGroupRequest, final ApiCallback<Groupbuilderv3EditGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupBuilderEditGroupValidateBeforeCall(groupId, groupbuilderv3EditGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<Groupbuilderv3EditGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupBuilderExportGroup
     * @param groupbuilderv3GetExportGroupRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupBuilderExportGroupCall(Groupbuilderv3GetExportGroupRequest groupbuilderv3GetExportGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupbuilderv3GetExportGroupRequest;

        // create path and map variables
        String localVarPath = "/api/v3/groups_export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupBuilderExportGroupValidateBeforeCall(Groupbuilderv3GetExportGroupRequest groupbuilderv3GetExportGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupbuilderv3GetExportGroupRequest' is set
        if (groupbuilderv3GetExportGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'groupbuilderv3GetExportGroupRequest' when calling groupBuilderExportGroup(Async)");
        }

        return groupBuilderExportGroupCall(groupbuilderv3GetExportGroupRequest, _callback);

    }

    /**
     * Summary: Export group Description: Export group content to a file based on a group ID.
     * 
     * @param groupbuilderv3GetExportGroupRequest  (required)
     * @return Groupbuilderv3GetExportGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Groupbuilderv3GetExportGroupResponse groupBuilderExportGroup(Groupbuilderv3GetExportGroupRequest groupbuilderv3GetExportGroupRequest) throws ApiException {
        ApiResponse<Groupbuilderv3GetExportGroupResponse> localVarResp = groupBuilderExportGroupWithHttpInfo(groupbuilderv3GetExportGroupRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Export group Description: Export group content to a file based on a group ID.
     * 
     * @param groupbuilderv3GetExportGroupRequest  (required)
     * @return ApiResponse&lt;Groupbuilderv3GetExportGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Groupbuilderv3GetExportGroupResponse> groupBuilderExportGroupWithHttpInfo(Groupbuilderv3GetExportGroupRequest groupbuilderv3GetExportGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = groupBuilderExportGroupValidateBeforeCall(groupbuilderv3GetExportGroupRequest, null);
        Type localVarReturnType = new TypeToken<Groupbuilderv3GetExportGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Export group Description: Export group content to a file based on a group ID. (asynchronously)
     * 
     * @param groupbuilderv3GetExportGroupRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupBuilderExportGroupAsync(Groupbuilderv3GetExportGroupRequest groupbuilderv3GetExportGroupRequest, final ApiCallback<Groupbuilderv3GetExportGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupBuilderExportGroupValidateBeforeCall(groupbuilderv3GetExportGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<Groupbuilderv3GetExportGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupBuilderGetGroupDetails
     * @param groupId Group ID. (required)
     * @param filter Filter by group member name. (optional)
     * @param order Order by ascending (ASC) or descending (DESC). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupBuilderGetGroupDetailsCall(Integer groupId, String filter, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/groups/{group_id}"
            .replace("{" + "group_id" + "}", localVarApiClient.escapeString(groupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupBuilderGetGroupDetailsValidateBeforeCall(Integer groupId, String filter, String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupId' is set
        if (groupId == null) {
            throw new ApiException("Missing the required parameter 'groupId' when calling groupBuilderGetGroupDetails(Async)");
        }

        return groupBuilderGetGroupDetailsCall(groupId, filter, order, _callback);

    }

    /**
     * Summary: Get group details Description: Get details of group specified by group ID.
     * 
     * @param groupId Group ID. (required)
     * @param filter Filter by group member name. (optional)
     * @param order Order by ascending (ASC) or descending (DESC). (optional)
     * @return Groupbuilderv3GetGroupDetailResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Groupbuilderv3GetGroupDetailResponse groupBuilderGetGroupDetails(Integer groupId, String filter, String order) throws ApiException {
        ApiResponse<Groupbuilderv3GetGroupDetailResponse> localVarResp = groupBuilderGetGroupDetailsWithHttpInfo(groupId, filter, order);
        return localVarResp.getData();
    }

    /**
     * Summary: Get group details Description: Get details of group specified by group ID.
     * 
     * @param groupId Group ID. (required)
     * @param filter Filter by group member name. (optional)
     * @param order Order by ascending (ASC) or descending (DESC). (optional)
     * @return ApiResponse&lt;Groupbuilderv3GetGroupDetailResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Groupbuilderv3GetGroupDetailResponse> groupBuilderGetGroupDetailsWithHttpInfo(Integer groupId, String filter, String order) throws ApiException {
        okhttp3.Call localVarCall = groupBuilderGetGroupDetailsValidateBeforeCall(groupId, filter, order, null);
        Type localVarReturnType = new TypeToken<Groupbuilderv3GetGroupDetailResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get group details Description: Get details of group specified by group ID. (asynchronously)
     * 
     * @param groupId Group ID. (required)
     * @param filter Filter by group member name. (optional)
     * @param order Order by ascending (ASC) or descending (DESC). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupBuilderGetGroupDetailsAsync(Integer groupId, String filter, String order, final ApiCallback<Groupbuilderv3GetGroupDetailResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupBuilderGetGroupDetailsValidateBeforeCall(groupId, filter, order, _callback);
        Type localVarReturnType = new TypeToken<Groupbuilderv3GetGroupDetailResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupBuilderGetGroupMembers
     * @param groupbuilderv3GetGroupMembersRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupBuilderGetGroupMembersCall(Groupbuilderv3GetGroupMembersRequest groupbuilderv3GetGroupMembersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupbuilderv3GetGroupMembersRequest;

        // create path and map variables
        String localVarPath = "/api/v3/groups/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupBuilderGetGroupMembersValidateBeforeCall(Groupbuilderv3GetGroupMembersRequest groupbuilderv3GetGroupMembersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupbuilderv3GetGroupMembersRequest' is set
        if (groupbuilderv3GetGroupMembersRequest == null) {
            throw new ApiException("Missing the required parameter 'groupbuilderv3GetGroupMembersRequest' when calling groupBuilderGetGroupMembers(Async)");
        }

        return groupBuilderGetGroupMembersCall(groupbuilderv3GetGroupMembersRequest, _callback);

    }

    /**
     * Summary: Get group members Description: Get members of all the group ids provided in the request. To be consumed by policy builder ms.
     * 
     * @param groupbuilderv3GetGroupMembersRequest  (required)
     * @return Groupbuilderv3GetGroupMembersResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Groupbuilderv3GetGroupMembersResponse groupBuilderGetGroupMembers(Groupbuilderv3GetGroupMembersRequest groupbuilderv3GetGroupMembersRequest) throws ApiException {
        ApiResponse<Groupbuilderv3GetGroupMembersResponse> localVarResp = groupBuilderGetGroupMembersWithHttpInfo(groupbuilderv3GetGroupMembersRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Get group members Description: Get members of all the group ids provided in the request. To be consumed by policy builder ms.
     * 
     * @param groupbuilderv3GetGroupMembersRequest  (required)
     * @return ApiResponse&lt;Groupbuilderv3GetGroupMembersResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Groupbuilderv3GetGroupMembersResponse> groupBuilderGetGroupMembersWithHttpInfo(Groupbuilderv3GetGroupMembersRequest groupbuilderv3GetGroupMembersRequest) throws ApiException {
        okhttp3.Call localVarCall = groupBuilderGetGroupMembersValidateBeforeCall(groupbuilderv3GetGroupMembersRequest, null);
        Type localVarReturnType = new TypeToken<Groupbuilderv3GetGroupMembersResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get group members Description: Get members of all the group ids provided in the request. To be consumed by policy builder ms. (asynchronously)
     * 
     * @param groupbuilderv3GetGroupMembersRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupBuilderGetGroupMembersAsync(Groupbuilderv3GetGroupMembersRequest groupbuilderv3GetGroupMembersRequest, final ApiCallback<Groupbuilderv3GetGroupMembersResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupBuilderGetGroupMembersValidateBeforeCall(groupbuilderv3GetGroupMembersRequest, _callback);
        Type localVarReturnType = new TypeToken<Groupbuilderv3GetGroupMembersResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupBuilderGetGroupSyncMapping
     * @param centralManagerId Central manager. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupBuilderGetGroupSyncMappingCall(String centralManagerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/groups/mappings/sync";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (centralManagerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("central_manager_id", centralManagerId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupBuilderGetGroupSyncMappingValidateBeforeCall(String centralManagerId, final ApiCallback _callback) throws ApiException {
        return groupBuilderGetGroupSyncMappingCall(centralManagerId, _callback);

    }

    /**
     * Summary: Get gdp to gi group mapping Description: Get insights to gdp group sync mapping.
     * 
     * @param centralManagerId Central manager. (optional)
     * @return Groupbuilderv3GetGroupSyncMappingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Groupbuilderv3GetGroupSyncMappingResponse groupBuilderGetGroupSyncMapping(String centralManagerId) throws ApiException {
        ApiResponse<Groupbuilderv3GetGroupSyncMappingResponse> localVarResp = groupBuilderGetGroupSyncMappingWithHttpInfo(centralManagerId);
        return localVarResp.getData();
    }

    /**
     * Summary: Get gdp to gi group mapping Description: Get insights to gdp group sync mapping.
     * 
     * @param centralManagerId Central manager. (optional)
     * @return ApiResponse&lt;Groupbuilderv3GetGroupSyncMappingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Groupbuilderv3GetGroupSyncMappingResponse> groupBuilderGetGroupSyncMappingWithHttpInfo(String centralManagerId) throws ApiException {
        okhttp3.Call localVarCall = groupBuilderGetGroupSyncMappingValidateBeforeCall(centralManagerId, null);
        Type localVarReturnType = new TypeToken<Groupbuilderv3GetGroupSyncMappingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get gdp to gi group mapping Description: Get insights to gdp group sync mapping. (asynchronously)
     * 
     * @param centralManagerId Central manager. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupBuilderGetGroupSyncMappingAsync(String centralManagerId, final ApiCallback<Groupbuilderv3GetGroupSyncMappingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupBuilderGetGroupSyncMappingValidateBeforeCall(centralManagerId, _callback);
        Type localVarReturnType = new TypeToken<Groupbuilderv3GetGroupSyncMappingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupBuilderGetGroupTypeMapping
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupBuilderGetGroupTypeMappingCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/groups-mappings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupBuilderGetGroupTypeMappingValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return groupBuilderGetGroupTypeMappingCall(_callback);

    }

    /**
     * Summary: Get group type mapping Description: Get insights to gdp group types mapping.
     * 
     * @return Groupbuilderv3GetGroupTypeMappingResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Groupbuilderv3GetGroupTypeMappingResponse groupBuilderGetGroupTypeMapping() throws ApiException {
        ApiResponse<Groupbuilderv3GetGroupTypeMappingResponse> localVarResp = groupBuilderGetGroupTypeMappingWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Summary: Get group type mapping Description: Get insights to gdp group types mapping.
     * 
     * @return ApiResponse&lt;Groupbuilderv3GetGroupTypeMappingResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Groupbuilderv3GetGroupTypeMappingResponse> groupBuilderGetGroupTypeMappingWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = groupBuilderGetGroupTypeMappingValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Groupbuilderv3GetGroupTypeMappingResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get group type mapping Description: Get insights to gdp group types mapping. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupBuilderGetGroupTypeMappingAsync(final ApiCallback<Groupbuilderv3GetGroupTypeMappingResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupBuilderGetGroupTypeMappingValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Groupbuilderv3GetGroupTypeMappingResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupBuilderGetGroupTypes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupBuilderGetGroupTypesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/group_types";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupBuilderGetGroupTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return groupBuilderGetGroupTypesCall(_callback);

    }

    /**
     * Summary: Get group types Description: Get a list of available group types.
     * 
     * @return Groupbuilderv3GetGroupTypesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Groupbuilderv3GetGroupTypesResponse groupBuilderGetGroupTypes() throws ApiException {
        ApiResponse<Groupbuilderv3GetGroupTypesResponse> localVarResp = groupBuilderGetGroupTypesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Summary: Get group types Description: Get a list of available group types.
     * 
     * @return ApiResponse&lt;Groupbuilderv3GetGroupTypesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Groupbuilderv3GetGroupTypesResponse> groupBuilderGetGroupTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = groupBuilderGetGroupTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Groupbuilderv3GetGroupTypesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get group types Description: Get a list of available group types. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupBuilderGetGroupTypesAsync(final ApiCallback<Groupbuilderv3GetGroupTypesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupBuilderGetGroupTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Groupbuilderv3GetGroupTypesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupBuilderGetGroups
     * @param doNotIncludeMemberCount Return group names, ID&#39;s, type ID&#39;s, nested bool, and tuple count only if the flag is true. (optional)
     * @param onlyFullAccess Only return groups that user has full-access to. (optional)
     * @param nonNested Only return non-nested groups. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupBuilderGetGroupsCall(Boolean doNotIncludeMemberCount, Boolean onlyFullAccess, Boolean nonNested, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (doNotIncludeMemberCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("do_not_include_member_count", doNotIncludeMemberCount));
        }

        if (onlyFullAccess != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("only_full_access", onlyFullAccess));
        }

        if (nonNested != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("non_nested", nonNested));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupBuilderGetGroupsValidateBeforeCall(Boolean doNotIncludeMemberCount, Boolean onlyFullAccess, Boolean nonNested, final ApiCallback _callback) throws ApiException {
        return groupBuilderGetGroupsCall(doNotIncludeMemberCount, onlyFullAccess, nonNested, _callback);

    }

    /**
     * Summary: Get groups Description: Get a list of imported group members.
     * 
     * @param doNotIncludeMemberCount Return group names, ID&#39;s, type ID&#39;s, nested bool, and tuple count only if the flag is true. (optional)
     * @param onlyFullAccess Only return groups that user has full-access to. (optional)
     * @param nonNested Only return non-nested groups. (optional)
     * @return Groupbuilderv3GetGroupsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Groupbuilderv3GetGroupsResponse groupBuilderGetGroups(Boolean doNotIncludeMemberCount, Boolean onlyFullAccess, Boolean nonNested) throws ApiException {
        ApiResponse<Groupbuilderv3GetGroupsResponse> localVarResp = groupBuilderGetGroupsWithHttpInfo(doNotIncludeMemberCount, onlyFullAccess, nonNested);
        return localVarResp.getData();
    }

    /**
     * Summary: Get groups Description: Get a list of imported group members.
     * 
     * @param doNotIncludeMemberCount Return group names, ID&#39;s, type ID&#39;s, nested bool, and tuple count only if the flag is true. (optional)
     * @param onlyFullAccess Only return groups that user has full-access to. (optional)
     * @param nonNested Only return non-nested groups. (optional)
     * @return ApiResponse&lt;Groupbuilderv3GetGroupsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Groupbuilderv3GetGroupsResponse> groupBuilderGetGroupsWithHttpInfo(Boolean doNotIncludeMemberCount, Boolean onlyFullAccess, Boolean nonNested) throws ApiException {
        okhttp3.Call localVarCall = groupBuilderGetGroupsValidateBeforeCall(doNotIncludeMemberCount, onlyFullAccess, nonNested, null);
        Type localVarReturnType = new TypeToken<Groupbuilderv3GetGroupsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get groups Description: Get a list of imported group members. (asynchronously)
     * 
     * @param doNotIncludeMemberCount Return group names, ID&#39;s, type ID&#39;s, nested bool, and tuple count only if the flag is true. (optional)
     * @param onlyFullAccess Only return groups that user has full-access to. (optional)
     * @param nonNested Only return non-nested groups. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupBuilderGetGroupsAsync(Boolean doNotIncludeMemberCount, Boolean onlyFullAccess, Boolean nonNested, final ApiCallback<Groupbuilderv3GetGroupsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupBuilderGetGroupsValidateBeforeCall(doNotIncludeMemberCount, onlyFullAccess, nonNested, _callback);
        Type localVarReturnType = new TypeToken<Groupbuilderv3GetGroupsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupBuilderGetImportGroups
     * @param centralManagerId Central manager host name. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupBuilderGetImportGroupsCall(String centralManagerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/groups_import";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (centralManagerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("central_manager_id", centralManagerId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupBuilderGetImportGroupsValidateBeforeCall(String centralManagerId, final ApiCallback _callback) throws ApiException {
        return groupBuilderGetImportGroupsCall(centralManagerId, _callback);

    }

    /**
     * Summary: Get import groups Description: Get unsynchronized groups from a central manager.
     * 
     * @param centralManagerId Central manager host name. (optional)
     * @return Groupbuilderv3GetImportGroupsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Groupbuilderv3GetImportGroupsResponse groupBuilderGetImportGroups(String centralManagerId) throws ApiException {
        ApiResponse<Groupbuilderv3GetImportGroupsResponse> localVarResp = groupBuilderGetImportGroupsWithHttpInfo(centralManagerId);
        return localVarResp.getData();
    }

    /**
     * Summary: Get import groups Description: Get unsynchronized groups from a central manager.
     * 
     * @param centralManagerId Central manager host name. (optional)
     * @return ApiResponse&lt;Groupbuilderv3GetImportGroupsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Groupbuilderv3GetImportGroupsResponse> groupBuilderGetImportGroupsWithHttpInfo(String centralManagerId) throws ApiException {
        okhttp3.Call localVarCall = groupBuilderGetImportGroupsValidateBeforeCall(centralManagerId, null);
        Type localVarReturnType = new TypeToken<Groupbuilderv3GetImportGroupsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get import groups Description: Get unsynchronized groups from a central manager. (asynchronously)
     * 
     * @param centralManagerId Central manager host name. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupBuilderGetImportGroupsAsync(String centralManagerId, final ApiCallback<Groupbuilderv3GetImportGroupsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupBuilderGetImportGroupsValidateBeforeCall(centralManagerId, _callback);
        Type localVarReturnType = new TypeToken<Groupbuilderv3GetImportGroupsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupBuilderImportGroup
     * @param groupbuilderv3ImportGroupRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupBuilderImportGroupCall(Groupbuilderv3ImportGroupRequest groupbuilderv3ImportGroupRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupbuilderv3ImportGroupRequest;

        // create path and map variables
        String localVarPath = "/api/v3/groups_import";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupBuilderImportGroupValidateBeforeCall(Groupbuilderv3ImportGroupRequest groupbuilderv3ImportGroupRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupbuilderv3ImportGroupRequest' is set
        if (groupbuilderv3ImportGroupRequest == null) {
            throw new ApiException("Missing the required parameter 'groupbuilderv3ImportGroupRequest' when calling groupBuilderImportGroup(Async)");
        }

        return groupBuilderImportGroupCall(groupbuilderv3ImportGroupRequest, _callback);

    }

    /**
     * Summary: Import group Description: Import selected groups from a central manager. (This API is called from GDP only)
     * 
     * @param groupbuilderv3ImportGroupRequest  (required)
     * @return Groupbuilderv3ImportGroupResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Groupbuilderv3ImportGroupResponse groupBuilderImportGroup(Groupbuilderv3ImportGroupRequest groupbuilderv3ImportGroupRequest) throws ApiException {
        ApiResponse<Groupbuilderv3ImportGroupResponse> localVarResp = groupBuilderImportGroupWithHttpInfo(groupbuilderv3ImportGroupRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Import group Description: Import selected groups from a central manager. (This API is called from GDP only)
     * 
     * @param groupbuilderv3ImportGroupRequest  (required)
     * @return ApiResponse&lt;Groupbuilderv3ImportGroupResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Groupbuilderv3ImportGroupResponse> groupBuilderImportGroupWithHttpInfo(Groupbuilderv3ImportGroupRequest groupbuilderv3ImportGroupRequest) throws ApiException {
        okhttp3.Call localVarCall = groupBuilderImportGroupValidateBeforeCall(groupbuilderv3ImportGroupRequest, null);
        Type localVarReturnType = new TypeToken<Groupbuilderv3ImportGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Import group Description: Import selected groups from a central manager. (This API is called from GDP only) (asynchronously)
     * 
     * @param groupbuilderv3ImportGroupRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupBuilderImportGroupAsync(Groupbuilderv3ImportGroupRequest groupbuilderv3ImportGroupRequest, final ApiCallback<Groupbuilderv3ImportGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupBuilderImportGroupValidateBeforeCall(groupbuilderv3ImportGroupRequest, _callback);
        Type localVarReturnType = new TypeToken<Groupbuilderv3ImportGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupBuilderRefreshGroups
     * @param groupbuilderv3RefreshGroupsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupBuilderRefreshGroupsCall(Groupbuilderv3RefreshGroupsRequest groupbuilderv3RefreshGroupsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupbuilderv3RefreshGroupsRequest;

        // create path and map variables
        String localVarPath = "/api/v3/groups/refresh";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupBuilderRefreshGroupsValidateBeforeCall(Groupbuilderv3RefreshGroupsRequest groupbuilderv3RefreshGroupsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupbuilderv3RefreshGroupsRequest' is set
        if (groupbuilderv3RefreshGroupsRequest == null) {
            throw new ApiException("Missing the required parameter 'groupbuilderv3RefreshGroupsRequest' when calling groupBuilderRefreshGroups(Async)");
        }

        return groupBuilderRefreshGroupsCall(groupbuilderv3RefreshGroupsRequest, _callback);

    }

    /**
     * Summary: Refresh groups Description: Refresh tenants selected imported groups.
     * 
     * @param groupbuilderv3RefreshGroupsRequest  (required)
     * @return Groupbuilderv3RefreshGroupsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Groupbuilderv3RefreshGroupsResponse groupBuilderRefreshGroups(Groupbuilderv3RefreshGroupsRequest groupbuilderv3RefreshGroupsRequest) throws ApiException {
        ApiResponse<Groupbuilderv3RefreshGroupsResponse> localVarResp = groupBuilderRefreshGroupsWithHttpInfo(groupbuilderv3RefreshGroupsRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Refresh groups Description: Refresh tenants selected imported groups.
     * 
     * @param groupbuilderv3RefreshGroupsRequest  (required)
     * @return ApiResponse&lt;Groupbuilderv3RefreshGroupsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Groupbuilderv3RefreshGroupsResponse> groupBuilderRefreshGroupsWithHttpInfo(Groupbuilderv3RefreshGroupsRequest groupbuilderv3RefreshGroupsRequest) throws ApiException {
        okhttp3.Call localVarCall = groupBuilderRefreshGroupsValidateBeforeCall(groupbuilderv3RefreshGroupsRequest, null);
        Type localVarReturnType = new TypeToken<Groupbuilderv3RefreshGroupsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Refresh groups Description: Refresh tenants selected imported groups. (asynchronously)
     * 
     * @param groupbuilderv3RefreshGroupsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupBuilderRefreshGroupsAsync(Groupbuilderv3RefreshGroupsRequest groupbuilderv3RefreshGroupsRequest, final ApiCallback<Groupbuilderv3RefreshGroupsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupBuilderRefreshGroupsValidateBeforeCall(groupbuilderv3RefreshGroupsRequest, _callback);
        Type localVarReturnType = new TypeToken<Groupbuilderv3RefreshGroupsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupBuilderResetGroups
     * @param groupbuilderv3ResetGroupsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupBuilderResetGroupsCall(Groupbuilderv3ResetGroupsRequest groupbuilderv3ResetGroupsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupbuilderv3ResetGroupsRequest;

        // create path and map variables
        String localVarPath = "/api/v3/groups/reset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupBuilderResetGroupsValidateBeforeCall(Groupbuilderv3ResetGroupsRequest groupbuilderv3ResetGroupsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'groupbuilderv3ResetGroupsRequest' is set
        if (groupbuilderv3ResetGroupsRequest == null) {
            throw new ApiException("Missing the required parameter 'groupbuilderv3ResetGroupsRequest' when calling groupBuilderResetGroups(Async)");
        }

        return groupBuilderResetGroupsCall(groupbuilderv3ResetGroupsRequest, _callback);

    }

    /**
     * Summary: Reset groups Description: Resets tenants selected predefined groups.
     * 
     * @param groupbuilderv3ResetGroupsRequest  (required)
     * @return Groupbuilderv3ResetGroupsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Groupbuilderv3ResetGroupsResponse groupBuilderResetGroups(Groupbuilderv3ResetGroupsRequest groupbuilderv3ResetGroupsRequest) throws ApiException {
        ApiResponse<Groupbuilderv3ResetGroupsResponse> localVarResp = groupBuilderResetGroupsWithHttpInfo(groupbuilderv3ResetGroupsRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Reset groups Description: Resets tenants selected predefined groups.
     * 
     * @param groupbuilderv3ResetGroupsRequest  (required)
     * @return ApiResponse&lt;Groupbuilderv3ResetGroupsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Groupbuilderv3ResetGroupsResponse> groupBuilderResetGroupsWithHttpInfo(Groupbuilderv3ResetGroupsRequest groupbuilderv3ResetGroupsRequest) throws ApiException {
        okhttp3.Call localVarCall = groupBuilderResetGroupsValidateBeforeCall(groupbuilderv3ResetGroupsRequest, null);
        Type localVarReturnType = new TypeToken<Groupbuilderv3ResetGroupsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Reset groups Description: Resets tenants selected predefined groups. (asynchronously)
     * 
     * @param groupbuilderv3ResetGroupsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupBuilderResetGroupsAsync(Groupbuilderv3ResetGroupsRequest groupbuilderv3ResetGroupsRequest, final ApiCallback<Groupbuilderv3ResetGroupsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupBuilderResetGroupsValidateBeforeCall(groupbuilderv3ResetGroupsRequest, _callback);
        Type localVarReturnType = new TypeToken<Groupbuilderv3ResetGroupsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupBuilderStoreGroupMembersGdp
     * @param centralManagerId ID of central manager. (required)
     * @param groupbuilderv3StoreGroupMembersGdpRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupBuilderStoreGroupMembersGdpCall(String centralManagerId, Groupbuilderv3StoreGroupMembersGdpRequest groupbuilderv3StoreGroupMembersGdpRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupbuilderv3StoreGroupMembersGdpRequest;

        // create path and map variables
        String localVarPath = "/api/v3/central_managers/{central_manager_id}/groups/members"
            .replace("{" + "central_manager_id" + "}", localVarApiClient.escapeString(centralManagerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupBuilderStoreGroupMembersGdpValidateBeforeCall(String centralManagerId, Groupbuilderv3StoreGroupMembersGdpRequest groupbuilderv3StoreGroupMembersGdpRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'centralManagerId' is set
        if (centralManagerId == null) {
            throw new ApiException("Missing the required parameter 'centralManagerId' when calling groupBuilderStoreGroupMembersGdp(Async)");
        }

        // verify the required parameter 'groupbuilderv3StoreGroupMembersGdpRequest' is set
        if (groupbuilderv3StoreGroupMembersGdpRequest == null) {
            throw new ApiException("Missing the required parameter 'groupbuilderv3StoreGroupMembersGdpRequest' when calling groupBuilderStoreGroupMembersGdp(Async)");
        }

        return groupBuilderStoreGroupMembersGdpCall(centralManagerId, groupbuilderv3StoreGroupMembersGdpRequest, _callback);

    }

    /**
     * Summary: Store group members Gdp Description: Store GDP groups. (This API is called from GDP only)
     * 
     * @param centralManagerId ID of central manager. (required)
     * @param groupbuilderv3StoreGroupMembersGdpRequest  (required)
     * @return Groupbuilderv3StoreGroupMembersGdpResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Groupbuilderv3StoreGroupMembersGdpResponse groupBuilderStoreGroupMembersGdp(String centralManagerId, Groupbuilderv3StoreGroupMembersGdpRequest groupbuilderv3StoreGroupMembersGdpRequest) throws ApiException {
        ApiResponse<Groupbuilderv3StoreGroupMembersGdpResponse> localVarResp = groupBuilderStoreGroupMembersGdpWithHttpInfo(centralManagerId, groupbuilderv3StoreGroupMembersGdpRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Store group members Gdp Description: Store GDP groups. (This API is called from GDP only)
     * 
     * @param centralManagerId ID of central manager. (required)
     * @param groupbuilderv3StoreGroupMembersGdpRequest  (required)
     * @return ApiResponse&lt;Groupbuilderv3StoreGroupMembersGdpResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Groupbuilderv3StoreGroupMembersGdpResponse> groupBuilderStoreGroupMembersGdpWithHttpInfo(String centralManagerId, Groupbuilderv3StoreGroupMembersGdpRequest groupbuilderv3StoreGroupMembersGdpRequest) throws ApiException {
        okhttp3.Call localVarCall = groupBuilderStoreGroupMembersGdpValidateBeforeCall(centralManagerId, groupbuilderv3StoreGroupMembersGdpRequest, null);
        Type localVarReturnType = new TypeToken<Groupbuilderv3StoreGroupMembersGdpResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Store group members Gdp Description: Store GDP groups. (This API is called from GDP only) (asynchronously)
     * 
     * @param centralManagerId ID of central manager. (required)
     * @param groupbuilderv3StoreGroupMembersGdpRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupBuilderStoreGroupMembersGdpAsync(String centralManagerId, Groupbuilderv3StoreGroupMembersGdpRequest groupbuilderv3StoreGroupMembersGdpRequest, final ApiCallback<Groupbuilderv3StoreGroupMembersGdpResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupBuilderStoreGroupMembersGdpValidateBeforeCall(centralManagerId, groupbuilderv3StoreGroupMembersGdpRequest, _callback);
        Type localVarReturnType = new TypeToken<Groupbuilderv3StoreGroupMembersGdpResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for groupBuilderStoreGroupsGdp
     * @param centralManagerId ID of central manager. (required)
     * @param groupbuilderv3GetGroupsRequestGdp  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupBuilderStoreGroupsGdpCall(String centralManagerId, Groupbuilderv3GetGroupsRequestGdp groupbuilderv3GetGroupsRequestGdp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = groupbuilderv3GetGroupsRequestGdp;

        // create path and map variables
        String localVarPath = "/api/v3/central_managers/{central_manager_id}/groups"
            .replace("{" + "central_manager_id" + "}", localVarApiClient.escapeString(centralManagerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call groupBuilderStoreGroupsGdpValidateBeforeCall(String centralManagerId, Groupbuilderv3GetGroupsRequestGdp groupbuilderv3GetGroupsRequestGdp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'centralManagerId' is set
        if (centralManagerId == null) {
            throw new ApiException("Missing the required parameter 'centralManagerId' when calling groupBuilderStoreGroupsGdp(Async)");
        }

        // verify the required parameter 'groupbuilderv3GetGroupsRequestGdp' is set
        if (groupbuilderv3GetGroupsRequestGdp == null) {
            throw new ApiException("Missing the required parameter 'groupbuilderv3GetGroupsRequestGdp' when calling groupBuilderStoreGroupsGdp(Async)");
        }

        return groupBuilderStoreGroupsGdpCall(centralManagerId, groupbuilderv3GetGroupsRequestGdp, _callback);

    }

    /**
     * Summary: Store groups Gdp Description: Store GDP groups. (This API is called from GDP only)
     * 
     * @param centralManagerId ID of central manager. (required)
     * @param groupbuilderv3GetGroupsRequestGdp  (required)
     * @return Groupbuilderv3GetGroupsResponseGdp
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Groupbuilderv3GetGroupsResponseGdp groupBuilderStoreGroupsGdp(String centralManagerId, Groupbuilderv3GetGroupsRequestGdp groupbuilderv3GetGroupsRequestGdp) throws ApiException {
        ApiResponse<Groupbuilderv3GetGroupsResponseGdp> localVarResp = groupBuilderStoreGroupsGdpWithHttpInfo(centralManagerId, groupbuilderv3GetGroupsRequestGdp);
        return localVarResp.getData();
    }

    /**
     * Summary: Store groups Gdp Description: Store GDP groups. (This API is called from GDP only)
     * 
     * @param centralManagerId ID of central manager. (required)
     * @param groupbuilderv3GetGroupsRequestGdp  (required)
     * @return ApiResponse&lt;Groupbuilderv3GetGroupsResponseGdp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Groupbuilderv3GetGroupsResponseGdp> groupBuilderStoreGroupsGdpWithHttpInfo(String centralManagerId, Groupbuilderv3GetGroupsRequestGdp groupbuilderv3GetGroupsRequestGdp) throws ApiException {
        okhttp3.Call localVarCall = groupBuilderStoreGroupsGdpValidateBeforeCall(centralManagerId, groupbuilderv3GetGroupsRequestGdp, null);
        Type localVarReturnType = new TypeToken<Groupbuilderv3GetGroupsResponseGdp>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Store groups Gdp Description: Store GDP groups. (This API is called from GDP only) (asynchronously)
     * 
     * @param centralManagerId ID of central manager. (required)
     * @param groupbuilderv3GetGroupsRequestGdp  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call groupBuilderStoreGroupsGdpAsync(String centralManagerId, Groupbuilderv3GetGroupsRequestGdp groupbuilderv3GetGroupsRequestGdp, final ApiCallback<Groupbuilderv3GetGroupsResponseGdp> _callback) throws ApiException {

        okhttp3.Call localVarCall = groupBuilderStoreGroupsGdpValidateBeforeCall(centralManagerId, groupbuilderv3GetGroupsRequestGdp, _callback);
        Type localVarReturnType = new TypeToken<Groupbuilderv3GetGroupsResponseGdp>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
