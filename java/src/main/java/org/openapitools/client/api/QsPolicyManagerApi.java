/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Qspmpolicymanagerv3CreateTicketRequest;
import org.openapitools.client.model.Qspmpolicymanagerv3CreateTicketResponse;
import org.openapitools.client.model.Qspmpolicymanagerv3FetchObjectStoreFileResponse;
import org.openapitools.client.model.Qspmpolicymanagerv3ProcessPolicyDimentionRecordsRequest;
import org.openapitools.client.model.Qspmpolicymanagerv3ProcessPolicyDimentionRecordsResonse;
import org.openapitools.client.model.Qspmpolicymanagerv3StandardEmptyResponse;
import org.openapitools.client.model.Qspmpolicymanagerv3UpdateTicketStatusRequest;
import org.openapitools.client.model.Qspmpolicymanagerv3UpdateTicketStatusResponse;
import org.openapitools.client.model.RuntimeError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QsPolicyManagerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public QsPolicyManagerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public QsPolicyManagerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for qSPolicyManagerBatchStatusUpdate
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qSPolicyManagerBatchStatusUpdateCall(Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v3/policy_manager/tickets/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call qSPolicyManagerBatchStatusUpdateValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling qSPolicyManagerBatchStatusUpdate(Async)");
        }

        return qSPolicyManagerBatchStatusUpdateCall(body, _callback);

    }

    /**
     * BatchStatusUpdate - trigger the batch to update the status of the Ticket .
     * 
     * @param body  (required)
     * @return Qspmpolicymanagerv3StandardEmptyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Qspmpolicymanagerv3StandardEmptyResponse qSPolicyManagerBatchStatusUpdate(Object body) throws ApiException {
        ApiResponse<Qspmpolicymanagerv3StandardEmptyResponse> localVarResp = qSPolicyManagerBatchStatusUpdateWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * BatchStatusUpdate - trigger the batch to update the status of the Ticket .
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Qspmpolicymanagerv3StandardEmptyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Qspmpolicymanagerv3StandardEmptyResponse> qSPolicyManagerBatchStatusUpdateWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = qSPolicyManagerBatchStatusUpdateValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Qspmpolicymanagerv3StandardEmptyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * BatchStatusUpdate - trigger the batch to update the status of the Ticket . (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qSPolicyManagerBatchStatusUpdateAsync(Object body, final ApiCallback<Qspmpolicymanagerv3StandardEmptyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = qSPolicyManagerBatchStatusUpdateValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Qspmpolicymanagerv3StandardEmptyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for qSPolicyManagerCreateTicket
     * @param qspmpolicymanagerv3CreateTicketRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qSPolicyManagerCreateTicketCall(Qspmpolicymanagerv3CreateTicketRequest qspmpolicymanagerv3CreateTicketRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = qspmpolicymanagerv3CreateTicketRequest;

        // create path and map variables
        String localVarPath = "/api/v3/policy_manager/ticket";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call qSPolicyManagerCreateTicketValidateBeforeCall(Qspmpolicymanagerv3CreateTicketRequest qspmpolicymanagerv3CreateTicketRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qspmpolicymanagerv3CreateTicketRequest' is set
        if (qspmpolicymanagerv3CreateTicketRequest == null) {
            throw new ApiException("Missing the required parameter 'qspmpolicymanagerv3CreateTicketRequest' when calling qSPolicyManagerCreateTicket(Async)");
        }

        return qSPolicyManagerCreateTicketCall(qspmpolicymanagerv3CreateTicketRequest, _callback);

    }

    /**
     * CreateTicket - Create a new Incident .
     * 
     * @param qspmpolicymanagerv3CreateTicketRequest  (required)
     * @return Qspmpolicymanagerv3CreateTicketResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Qspmpolicymanagerv3CreateTicketResponse qSPolicyManagerCreateTicket(Qspmpolicymanagerv3CreateTicketRequest qspmpolicymanagerv3CreateTicketRequest) throws ApiException {
        ApiResponse<Qspmpolicymanagerv3CreateTicketResponse> localVarResp = qSPolicyManagerCreateTicketWithHttpInfo(qspmpolicymanagerv3CreateTicketRequest);
        return localVarResp.getData();
    }

    /**
     * CreateTicket - Create a new Incident .
     * 
     * @param qspmpolicymanagerv3CreateTicketRequest  (required)
     * @return ApiResponse&lt;Qspmpolicymanagerv3CreateTicketResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Qspmpolicymanagerv3CreateTicketResponse> qSPolicyManagerCreateTicketWithHttpInfo(Qspmpolicymanagerv3CreateTicketRequest qspmpolicymanagerv3CreateTicketRequest) throws ApiException {
        okhttp3.Call localVarCall = qSPolicyManagerCreateTicketValidateBeforeCall(qspmpolicymanagerv3CreateTicketRequest, null);
        Type localVarReturnType = new TypeToken<Qspmpolicymanagerv3CreateTicketResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * CreateTicket - Create a new Incident . (asynchronously)
     * 
     * @param qspmpolicymanagerv3CreateTicketRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qSPolicyManagerCreateTicketAsync(Qspmpolicymanagerv3CreateTicketRequest qspmpolicymanagerv3CreateTicketRequest, final ApiCallback<Qspmpolicymanagerv3CreateTicketResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = qSPolicyManagerCreateTicketValidateBeforeCall(qspmpolicymanagerv3CreateTicketRequest, _callback);
        Type localVarReturnType = new TypeToken<Qspmpolicymanagerv3CreateTicketResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for qSPolicyManagerFetchFilesfromBuckets
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qSPolicyManagerFetchFilesfromBucketsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/policy_manager/os-files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call qSPolicyManagerFetchFilesfromBucketsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return qSPolicyManagerFetchFilesfromBucketsCall(_callback);

    }

    /**
     * FetchFilesfromBuckets - fetch the file(s) from bucket of the object storage
     * 
     * @return Qspmpolicymanagerv3FetchObjectStoreFileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Qspmpolicymanagerv3FetchObjectStoreFileResponse qSPolicyManagerFetchFilesfromBuckets() throws ApiException {
        ApiResponse<Qspmpolicymanagerv3FetchObjectStoreFileResponse> localVarResp = qSPolicyManagerFetchFilesfromBucketsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * FetchFilesfromBuckets - fetch the file(s) from bucket of the object storage
     * 
     * @return ApiResponse&lt;Qspmpolicymanagerv3FetchObjectStoreFileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Qspmpolicymanagerv3FetchObjectStoreFileResponse> qSPolicyManagerFetchFilesfromBucketsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = qSPolicyManagerFetchFilesfromBucketsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Qspmpolicymanagerv3FetchObjectStoreFileResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * FetchFilesfromBuckets - fetch the file(s) from bucket of the object storage (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qSPolicyManagerFetchFilesfromBucketsAsync(final ApiCallback<Qspmpolicymanagerv3FetchObjectStoreFileResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = qSPolicyManagerFetchFilesfromBucketsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Qspmpolicymanagerv3FetchObjectStoreFileResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for qSPolicyManagerProcessPolicyDimentionRecords
     * @param qspmpolicymanagerv3ProcessPolicyDimentionRecordsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qSPolicyManagerProcessPolicyDimentionRecordsCall(Qspmpolicymanagerv3ProcessPolicyDimentionRecordsRequest qspmpolicymanagerv3ProcessPolicyDimentionRecordsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = qspmpolicymanagerv3ProcessPolicyDimentionRecordsRequest;

        // create path and map variables
        String localVarPath = "/api/v3/policy_manager/policy/process";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call qSPolicyManagerProcessPolicyDimentionRecordsValidateBeforeCall(Qspmpolicymanagerv3ProcessPolicyDimentionRecordsRequest qspmpolicymanagerv3ProcessPolicyDimentionRecordsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qspmpolicymanagerv3ProcessPolicyDimentionRecordsRequest' is set
        if (qspmpolicymanagerv3ProcessPolicyDimentionRecordsRequest == null) {
            throw new ApiException("Missing the required parameter 'qspmpolicymanagerv3ProcessPolicyDimentionRecordsRequest' when calling qSPolicyManagerProcessPolicyDimentionRecords(Async)");
        }

        return qSPolicyManagerProcessPolicyDimentionRecordsCall(qspmpolicymanagerv3ProcessPolicyDimentionRecordsRequest, _callback);

    }

    /**
     * ProcessPolicyDimentionRecords - fetch the records from Policy Dimention and update Policy Fact table
     * 
     * @param qspmpolicymanagerv3ProcessPolicyDimentionRecordsRequest  (required)
     * @return Qspmpolicymanagerv3ProcessPolicyDimentionRecordsResonse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Qspmpolicymanagerv3ProcessPolicyDimentionRecordsResonse qSPolicyManagerProcessPolicyDimentionRecords(Qspmpolicymanagerv3ProcessPolicyDimentionRecordsRequest qspmpolicymanagerv3ProcessPolicyDimentionRecordsRequest) throws ApiException {
        ApiResponse<Qspmpolicymanagerv3ProcessPolicyDimentionRecordsResonse> localVarResp = qSPolicyManagerProcessPolicyDimentionRecordsWithHttpInfo(qspmpolicymanagerv3ProcessPolicyDimentionRecordsRequest);
        return localVarResp.getData();
    }

    /**
     * ProcessPolicyDimentionRecords - fetch the records from Policy Dimention and update Policy Fact table
     * 
     * @param qspmpolicymanagerv3ProcessPolicyDimentionRecordsRequest  (required)
     * @return ApiResponse&lt;Qspmpolicymanagerv3ProcessPolicyDimentionRecordsResonse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Qspmpolicymanagerv3ProcessPolicyDimentionRecordsResonse> qSPolicyManagerProcessPolicyDimentionRecordsWithHttpInfo(Qspmpolicymanagerv3ProcessPolicyDimentionRecordsRequest qspmpolicymanagerv3ProcessPolicyDimentionRecordsRequest) throws ApiException {
        okhttp3.Call localVarCall = qSPolicyManagerProcessPolicyDimentionRecordsValidateBeforeCall(qspmpolicymanagerv3ProcessPolicyDimentionRecordsRequest, null);
        Type localVarReturnType = new TypeToken<Qspmpolicymanagerv3ProcessPolicyDimentionRecordsResonse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * ProcessPolicyDimentionRecords - fetch the records from Policy Dimention and update Policy Fact table (asynchronously)
     * 
     * @param qspmpolicymanagerv3ProcessPolicyDimentionRecordsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qSPolicyManagerProcessPolicyDimentionRecordsAsync(Qspmpolicymanagerv3ProcessPolicyDimentionRecordsRequest qspmpolicymanagerv3ProcessPolicyDimentionRecordsRequest, final ApiCallback<Qspmpolicymanagerv3ProcessPolicyDimentionRecordsResonse> _callback) throws ApiException {

        okhttp3.Call localVarCall = qSPolicyManagerProcessPolicyDimentionRecordsValidateBeforeCall(qspmpolicymanagerv3ProcessPolicyDimentionRecordsRequest, _callback);
        Type localVarReturnType = new TypeToken<Qspmpolicymanagerv3ProcessPolicyDimentionRecordsResonse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for qSPolicyManagerUpdateTicketStatus
     * @param qspmpolicymanagerv3UpdateTicketStatusRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qSPolicyManagerUpdateTicketStatusCall(Qspmpolicymanagerv3UpdateTicketStatusRequest qspmpolicymanagerv3UpdateTicketStatusRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = qspmpolicymanagerv3UpdateTicketStatusRequest;

        // create path and map variables
        String localVarPath = "/api/v3/policy_manager/ticket/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call qSPolicyManagerUpdateTicketStatusValidateBeforeCall(Qspmpolicymanagerv3UpdateTicketStatusRequest qspmpolicymanagerv3UpdateTicketStatusRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'qspmpolicymanagerv3UpdateTicketStatusRequest' is set
        if (qspmpolicymanagerv3UpdateTicketStatusRequest == null) {
            throw new ApiException("Missing the required parameter 'qspmpolicymanagerv3UpdateTicketStatusRequest' when calling qSPolicyManagerUpdateTicketStatus(Async)");
        }

        return qSPolicyManagerUpdateTicketStatusCall(qspmpolicymanagerv3UpdateTicketStatusRequest, _callback);

    }

    /**
     * UpdateTicketStatus - Update the ticket status based on the IntegrationId and TicketId .
     * 
     * @param qspmpolicymanagerv3UpdateTicketStatusRequest  (required)
     * @return Qspmpolicymanagerv3UpdateTicketStatusResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Qspmpolicymanagerv3UpdateTicketStatusResponse qSPolicyManagerUpdateTicketStatus(Qspmpolicymanagerv3UpdateTicketStatusRequest qspmpolicymanagerv3UpdateTicketStatusRequest) throws ApiException {
        ApiResponse<Qspmpolicymanagerv3UpdateTicketStatusResponse> localVarResp = qSPolicyManagerUpdateTicketStatusWithHttpInfo(qspmpolicymanagerv3UpdateTicketStatusRequest);
        return localVarResp.getData();
    }

    /**
     * UpdateTicketStatus - Update the ticket status based on the IntegrationId and TicketId .
     * 
     * @param qspmpolicymanagerv3UpdateTicketStatusRequest  (required)
     * @return ApiResponse&lt;Qspmpolicymanagerv3UpdateTicketStatusResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Qspmpolicymanagerv3UpdateTicketStatusResponse> qSPolicyManagerUpdateTicketStatusWithHttpInfo(Qspmpolicymanagerv3UpdateTicketStatusRequest qspmpolicymanagerv3UpdateTicketStatusRequest) throws ApiException {
        okhttp3.Call localVarCall = qSPolicyManagerUpdateTicketStatusValidateBeforeCall(qspmpolicymanagerv3UpdateTicketStatusRequest, null);
        Type localVarReturnType = new TypeToken<Qspmpolicymanagerv3UpdateTicketStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * UpdateTicketStatus - Update the ticket status based on the IntegrationId and TicketId . (asynchronously)
     * 
     * @param qspmpolicymanagerv3UpdateTicketStatusRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qSPolicyManagerUpdateTicketStatusAsync(Qspmpolicymanagerv3UpdateTicketStatusRequest qspmpolicymanagerv3UpdateTicketStatusRequest, final ApiCallback<Qspmpolicymanagerv3UpdateTicketStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = qSPolicyManagerUpdateTicketStatusValidateBeforeCall(qspmpolicymanagerv3UpdateTicketStatusRequest, _callback);
        Type localVarReturnType = new TypeToken<Qspmpolicymanagerv3UpdateTicketStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
