/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Healthcollectorv3GetDataWarehouseUsageResponse;
import org.openapitools.client.model.Healthcollectorv3GetGDPHealthInfoResponse;
import org.openapitools.client.model.Healthcollectorv3GetHistoricalHealthInfoResponse;
import org.openapitools.client.model.Healthcollectorv3GetObjectStorageUsageResponse;
import org.openapitools.client.model.Healthcollectorv3GetPVCUsageResponse;
import org.openapitools.client.model.Healthcollectorv3GetPodRestartsResponse;
import org.openapitools.client.model.Healthcollectorv3GetStreamsIngestionResponse;
import org.openapitools.client.model.Healthcollectorv3GetTopGDPCollectorsResponse;
import org.openapitools.client.model.Healthcollectorv3StoreHealthInfoRequest;
import org.openapitools.client.model.Healthcollectorv3StoreHealthInfoResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.RuntimeError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HealthCollectorApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HealthCollectorApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HealthCollectorApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for healthCollectorGetDataWarehouseUsage
     * @param type The type of metric to retrieve (required)
     * @param startTime The start time from which the data needs to be calculated. (optional)
     * @param endTime The end time from which the data needs to be calculated. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthCollectorGetDataWarehouseUsageCall(String type, OffsetDateTime startTime, OffsetDateTime endTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/metrics/warehouse/{type}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_time", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_time", endTime));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call healthCollectorGetDataWarehouseUsageValidateBeforeCall(String type, OffsetDateTime startTime, OffsetDateTime endTime, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling healthCollectorGetDataWarehouseUsage(Async)");
        }

        return healthCollectorGetDataWarehouseUsageCall(type, startTime, endTime, _callback);

    }

    /**
     * Summary: Get data warehouse usage info Description: Get information from Db2 related to usage
     * 
     * @param type The type of metric to retrieve (required)
     * @param startTime The start time from which the data needs to be calculated. (optional)
     * @param endTime The end time from which the data needs to be calculated. (optional)
     * @return Healthcollectorv3GetDataWarehouseUsageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Healthcollectorv3GetDataWarehouseUsageResponse healthCollectorGetDataWarehouseUsage(String type, OffsetDateTime startTime, OffsetDateTime endTime) throws ApiException {
        ApiResponse<Healthcollectorv3GetDataWarehouseUsageResponse> localVarResp = healthCollectorGetDataWarehouseUsageWithHttpInfo(type, startTime, endTime);
        return localVarResp.getData();
    }

    /**
     * Summary: Get data warehouse usage info Description: Get information from Db2 related to usage
     * 
     * @param type The type of metric to retrieve (required)
     * @param startTime The start time from which the data needs to be calculated. (optional)
     * @param endTime The end time from which the data needs to be calculated. (optional)
     * @return ApiResponse&lt;Healthcollectorv3GetDataWarehouseUsageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Healthcollectorv3GetDataWarehouseUsageResponse> healthCollectorGetDataWarehouseUsageWithHttpInfo(String type, OffsetDateTime startTime, OffsetDateTime endTime) throws ApiException {
        okhttp3.Call localVarCall = healthCollectorGetDataWarehouseUsageValidateBeforeCall(type, startTime, endTime, null);
        Type localVarReturnType = new TypeToken<Healthcollectorv3GetDataWarehouseUsageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get data warehouse usage info Description: Get information from Db2 related to usage (asynchronously)
     * 
     * @param type The type of metric to retrieve (required)
     * @param startTime The start time from which the data needs to be calculated. (optional)
     * @param endTime The end time from which the data needs to be calculated. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthCollectorGetDataWarehouseUsageAsync(String type, OffsetDateTime startTime, OffsetDateTime endTime, final ApiCallback<Healthcollectorv3GetDataWarehouseUsageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = healthCollectorGetDataWarehouseUsageValidateBeforeCall(type, startTime, endTime, _callback);
        Type localVarReturnType = new TypeToken<Healthcollectorv3GetDataWarehouseUsageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for healthCollectorGetGDPHealthInfo
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthCollectorGetGDPHealthInfoCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/health";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call healthCollectorGetGDPHealthInfoValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return healthCollectorGetGDPHealthInfoCall(_callback);

    }

    /**
     * Summary: Get GDP health info Description: Get information from MongoDB for Guardium central managers using health-connector service.
     * 
     * @return Healthcollectorv3GetGDPHealthInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Healthcollectorv3GetGDPHealthInfoResponse healthCollectorGetGDPHealthInfo() throws ApiException {
        ApiResponse<Healthcollectorv3GetGDPHealthInfoResponse> localVarResp = healthCollectorGetGDPHealthInfoWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Summary: Get GDP health info Description: Get information from MongoDB for Guardium central managers using health-connector service.
     * 
     * @return ApiResponse&lt;Healthcollectorv3GetGDPHealthInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Healthcollectorv3GetGDPHealthInfoResponse> healthCollectorGetGDPHealthInfoWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = healthCollectorGetGDPHealthInfoValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Healthcollectorv3GetGDPHealthInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get GDP health info Description: Get information from MongoDB for Guardium central managers using health-connector service. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthCollectorGetGDPHealthInfoAsync(final ApiCallback<Healthcollectorv3GetGDPHealthInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = healthCollectorGetGDPHealthInfoValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Healthcollectorv3GetGDPHealthInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for healthCollectorGetHistoricalHealthInfo
     * @param unit Type of unit for which data needs to be retrieved. (optional, default to UNKNOWN_UNIT)
     * @param cmId Optional value if the data is for a particular cm. If it is empty the data for all cms would be retrieved. (optional)
     * @param startTime The start time from which the data needs to be calculated. (optional)
     * @param endTime The end time from which the data needs to be calculated. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthCollectorGetHistoricalHealthInfoCall(String unit, String cmId, OffsetDateTime startTime, OffsetDateTime endTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/health/history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (unit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unit", unit));
        }

        if (cmId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cm_id", cmId));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_time", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_time", endTime));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call healthCollectorGetHistoricalHealthInfoValidateBeforeCall(String unit, String cmId, OffsetDateTime startTime, OffsetDateTime endTime, final ApiCallback _callback) throws ApiException {
        return healthCollectorGetHistoricalHealthInfoCall(unit, cmId, startTime, endTime, _callback);

    }

    /**
     * Summary: Get historical health info Description: Retrieve historical s-tap related statistics from health-collector service.
     * 
     * @param unit Type of unit for which data needs to be retrieved. (optional, default to UNKNOWN_UNIT)
     * @param cmId Optional value if the data is for a particular cm. If it is empty the data for all cms would be retrieved. (optional)
     * @param startTime The start time from which the data needs to be calculated. (optional)
     * @param endTime The end time from which the data needs to be calculated. (optional)
     * @return Healthcollectorv3GetHistoricalHealthInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Healthcollectorv3GetHistoricalHealthInfoResponse healthCollectorGetHistoricalHealthInfo(String unit, String cmId, OffsetDateTime startTime, OffsetDateTime endTime) throws ApiException {
        ApiResponse<Healthcollectorv3GetHistoricalHealthInfoResponse> localVarResp = healthCollectorGetHistoricalHealthInfoWithHttpInfo(unit, cmId, startTime, endTime);
        return localVarResp.getData();
    }

    /**
     * Summary: Get historical health info Description: Retrieve historical s-tap related statistics from health-collector service.
     * 
     * @param unit Type of unit for which data needs to be retrieved. (optional, default to UNKNOWN_UNIT)
     * @param cmId Optional value if the data is for a particular cm. If it is empty the data for all cms would be retrieved. (optional)
     * @param startTime The start time from which the data needs to be calculated. (optional)
     * @param endTime The end time from which the data needs to be calculated. (optional)
     * @return ApiResponse&lt;Healthcollectorv3GetHistoricalHealthInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Healthcollectorv3GetHistoricalHealthInfoResponse> healthCollectorGetHistoricalHealthInfoWithHttpInfo(String unit, String cmId, OffsetDateTime startTime, OffsetDateTime endTime) throws ApiException {
        okhttp3.Call localVarCall = healthCollectorGetHistoricalHealthInfoValidateBeforeCall(unit, cmId, startTime, endTime, null);
        Type localVarReturnType = new TypeToken<Healthcollectorv3GetHistoricalHealthInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get historical health info Description: Retrieve historical s-tap related statistics from health-collector service. (asynchronously)
     * 
     * @param unit Type of unit for which data needs to be retrieved. (optional, default to UNKNOWN_UNIT)
     * @param cmId Optional value if the data is for a particular cm. If it is empty the data for all cms would be retrieved. (optional)
     * @param startTime The start time from which the data needs to be calculated. (optional)
     * @param endTime The end time from which the data needs to be calculated. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthCollectorGetHistoricalHealthInfoAsync(String unit, String cmId, OffsetDateTime startTime, OffsetDateTime endTime, final ApiCallback<Healthcollectorv3GetHistoricalHealthInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = healthCollectorGetHistoricalHealthInfoValidateBeforeCall(unit, cmId, startTime, endTime, _callback);
        Type localVarReturnType = new TypeToken<Healthcollectorv3GetHistoricalHealthInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for healthCollectorGetObjectStorageUsage
     * @param type The type of metric to retrieve (required)
     * @param startTime The start time from which the data needs to be calculated. (optional)
     * @param endTime The end time from which the data needs to be calculated. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthCollectorGetObjectStorageUsageCall(String type, OffsetDateTime startTime, OffsetDateTime endTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/metrics/object_storage/{type}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_time", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_time", endTime));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call healthCollectorGetObjectStorageUsageValidateBeforeCall(String type, OffsetDateTime startTime, OffsetDateTime endTime, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling healthCollectorGetObjectStorageUsage(Async)");
        }

        return healthCollectorGetObjectStorageUsageCall(type, startTime, endTime, _callback);

    }

    /**
     * Summary: Get object storage usage info Description: Get information from object storage about tenant bucket usage
     * 
     * @param type The type of metric to retrieve (required)
     * @param startTime The start time from which the data needs to be calculated. (optional)
     * @param endTime The end time from which the data needs to be calculated. (optional)
     * @return Healthcollectorv3GetObjectStorageUsageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Healthcollectorv3GetObjectStorageUsageResponse healthCollectorGetObjectStorageUsage(String type, OffsetDateTime startTime, OffsetDateTime endTime) throws ApiException {
        ApiResponse<Healthcollectorv3GetObjectStorageUsageResponse> localVarResp = healthCollectorGetObjectStorageUsageWithHttpInfo(type, startTime, endTime);
        return localVarResp.getData();
    }

    /**
     * Summary: Get object storage usage info Description: Get information from object storage about tenant bucket usage
     * 
     * @param type The type of metric to retrieve (required)
     * @param startTime The start time from which the data needs to be calculated. (optional)
     * @param endTime The end time from which the data needs to be calculated. (optional)
     * @return ApiResponse&lt;Healthcollectorv3GetObjectStorageUsageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Healthcollectorv3GetObjectStorageUsageResponse> healthCollectorGetObjectStorageUsageWithHttpInfo(String type, OffsetDateTime startTime, OffsetDateTime endTime) throws ApiException {
        okhttp3.Call localVarCall = healthCollectorGetObjectStorageUsageValidateBeforeCall(type, startTime, endTime, null);
        Type localVarReturnType = new TypeToken<Healthcollectorv3GetObjectStorageUsageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get object storage usage info Description: Get information from object storage about tenant bucket usage (asynchronously)
     * 
     * @param type The type of metric to retrieve (required)
     * @param startTime The start time from which the data needs to be calculated. (optional)
     * @param endTime The end time from which the data needs to be calculated. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthCollectorGetObjectStorageUsageAsync(String type, OffsetDateTime startTime, OffsetDateTime endTime, final ApiCallback<Healthcollectorv3GetObjectStorageUsageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = healthCollectorGetObjectStorageUsageValidateBeforeCall(type, startTime, endTime, _callback);
        Type localVarReturnType = new TypeToken<Healthcollectorv3GetObjectStorageUsageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for healthCollectorGetPVCUsage
     * @param type The type of metric to retrieve (required)
     * @param startTime The start time from which the data needs to be calculated. (optional)
     * @param endTime The end time from which the data needs to be calculated. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthCollectorGetPVCUsageCall(String type, OffsetDateTime startTime, OffsetDateTime endTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/metrics/pvc/{type}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_time", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_time", endTime));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call healthCollectorGetPVCUsageValidateBeforeCall(String type, OffsetDateTime startTime, OffsetDateTime endTime, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling healthCollectorGetPVCUsage(Async)");
        }

        return healthCollectorGetPVCUsageCall(type, startTime, endTime, _callback);

    }

    /**
     * Summary: Get the PVC usage information Description: Get information about the PVC usage in the OCP cluster
     * 
     * @param type The type of metric to retrieve (required)
     * @param startTime The start time from which the data needs to be calculated. (optional)
     * @param endTime The end time from which the data needs to be calculated. (optional)
     * @return Healthcollectorv3GetPVCUsageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Healthcollectorv3GetPVCUsageResponse healthCollectorGetPVCUsage(String type, OffsetDateTime startTime, OffsetDateTime endTime) throws ApiException {
        ApiResponse<Healthcollectorv3GetPVCUsageResponse> localVarResp = healthCollectorGetPVCUsageWithHttpInfo(type, startTime, endTime);
        return localVarResp.getData();
    }

    /**
     * Summary: Get the PVC usage information Description: Get information about the PVC usage in the OCP cluster
     * 
     * @param type The type of metric to retrieve (required)
     * @param startTime The start time from which the data needs to be calculated. (optional)
     * @param endTime The end time from which the data needs to be calculated. (optional)
     * @return ApiResponse&lt;Healthcollectorv3GetPVCUsageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Healthcollectorv3GetPVCUsageResponse> healthCollectorGetPVCUsageWithHttpInfo(String type, OffsetDateTime startTime, OffsetDateTime endTime) throws ApiException {
        okhttp3.Call localVarCall = healthCollectorGetPVCUsageValidateBeforeCall(type, startTime, endTime, null);
        Type localVarReturnType = new TypeToken<Healthcollectorv3GetPVCUsageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get the PVC usage information Description: Get information about the PVC usage in the OCP cluster (asynchronously)
     * 
     * @param type The type of metric to retrieve (required)
     * @param startTime The start time from which the data needs to be calculated. (optional)
     * @param endTime The end time from which the data needs to be calculated. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthCollectorGetPVCUsageAsync(String type, OffsetDateTime startTime, OffsetDateTime endTime, final ApiCallback<Healthcollectorv3GetPVCUsageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = healthCollectorGetPVCUsageValidateBeforeCall(type, startTime, endTime, _callback);
        Type localVarReturnType = new TypeToken<Healthcollectorv3GetPVCUsageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for healthCollectorGetPodRestarts
     * @param type The type of metric to retrieve (required)
     * @param startTime The start time from which the data needs to be calculated. (optional)
     * @param endTime The end time from which the data needs to be calculated. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call healthCollectorGetPodRestartsCall(String type, OffsetDateTime startTime, OffsetDateTime endTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/metrics/pods/{type}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_time", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_time", endTime));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call healthCollectorGetPodRestartsValidateBeforeCall(String type, OffsetDateTime startTime, OffsetDateTime endTime, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling healthCollectorGetPodRestarts(Async)");
        }

        return healthCollectorGetPodRestartsCall(type, startTime, endTime, _callback);

    }

    /**
     * Summary: Get the pod restart information Description: Get information about the number of restarts by pod in OCP
     * 
     * @param type The type of metric to retrieve (required)
     * @param startTime The start time from which the data needs to be calculated. (optional)
     * @param endTime The end time from which the data needs to be calculated. (optional)
     * @return Healthcollectorv3GetPodRestartsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Healthcollectorv3GetPodRestartsResponse healthCollectorGetPodRestarts(String type, OffsetDateTime startTime, OffsetDateTime endTime) throws ApiException {
        ApiResponse<Healthcollectorv3GetPodRestartsResponse> localVarResp = healthCollectorGetPodRestartsWithHttpInfo(type, startTime, endTime);
        return localVarResp.getData();
    }

    /**
     * Summary: Get the pod restart information Description: Get information about the number of restarts by pod in OCP
     * 
     * @param type The type of metric to retrieve (required)
     * @param startTime The start time from which the data needs to be calculated. (optional)
     * @param endTime The end time from which the data needs to be calculated. (optional)
     * @return ApiResponse&lt;Healthcollectorv3GetPodRestartsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Healthcollectorv3GetPodRestartsResponse> healthCollectorGetPodRestartsWithHttpInfo(String type, OffsetDateTime startTime, OffsetDateTime endTime) throws ApiException {
        okhttp3.Call localVarCall = healthCollectorGetPodRestartsValidateBeforeCall(type, startTime, endTime, null);
        Type localVarReturnType = new TypeToken<Healthcollectorv3GetPodRestartsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get the pod restart information Description: Get information about the number of restarts by pod in OCP (asynchronously)
     * 
     * @param type The type of metric to retrieve (required)
     * @param startTime The start time from which the data needs to be calculated. (optional)
     * @param endTime The end time from which the data needs to be calculated. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call healthCollectorGetPodRestartsAsync(String type, OffsetDateTime startTime, OffsetDateTime endTime, final ApiCallback<Healthcollectorv3GetPodRestartsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = healthCollectorGetPodRestartsValidateBeforeCall(type, startTime, endTime, _callback);
        Type localVarReturnType = new TypeToken<Healthcollectorv3GetPodRestartsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for healthCollectorGetStreamsIngestion
     * @param type The type of metric to retrieve (required)
     * @param startTime The start time from which the data needs to be calculated. (optional)
     * @param endTime The end time from which the data needs to be calculated. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthCollectorGetStreamsIngestionCall(String type, OffsetDateTime startTime, OffsetDateTime endTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/metrics/streams/{type}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_time", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_time", endTime));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call healthCollectorGetStreamsIngestionValidateBeforeCall(String type, OffsetDateTime startTime, OffsetDateTime endTime, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling healthCollectorGetStreamsIngestion(Async)");
        }

        return healthCollectorGetStreamsIngestionCall(type, startTime, endTime, _callback);

    }

    /**
     * Summary: Get streams ingestion volume over a given time Description: Get information about streams ingestion volume
     * 
     * @param type The type of metric to retrieve (required)
     * @param startTime The start time from which the data needs to be calculated. (optional)
     * @param endTime The end time from which the data needs to be calculated. (optional)
     * @return Healthcollectorv3GetStreamsIngestionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Healthcollectorv3GetStreamsIngestionResponse healthCollectorGetStreamsIngestion(String type, OffsetDateTime startTime, OffsetDateTime endTime) throws ApiException {
        ApiResponse<Healthcollectorv3GetStreamsIngestionResponse> localVarResp = healthCollectorGetStreamsIngestionWithHttpInfo(type, startTime, endTime);
        return localVarResp.getData();
    }

    /**
     * Summary: Get streams ingestion volume over a given time Description: Get information about streams ingestion volume
     * 
     * @param type The type of metric to retrieve (required)
     * @param startTime The start time from which the data needs to be calculated. (optional)
     * @param endTime The end time from which the data needs to be calculated. (optional)
     * @return ApiResponse&lt;Healthcollectorv3GetStreamsIngestionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Healthcollectorv3GetStreamsIngestionResponse> healthCollectorGetStreamsIngestionWithHttpInfo(String type, OffsetDateTime startTime, OffsetDateTime endTime) throws ApiException {
        okhttp3.Call localVarCall = healthCollectorGetStreamsIngestionValidateBeforeCall(type, startTime, endTime, null);
        Type localVarReturnType = new TypeToken<Healthcollectorv3GetStreamsIngestionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get streams ingestion volume over a given time Description: Get information about streams ingestion volume (asynchronously)
     * 
     * @param type The type of metric to retrieve (required)
     * @param startTime The start time from which the data needs to be calculated. (optional)
     * @param endTime The end time from which the data needs to be calculated. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthCollectorGetStreamsIngestionAsync(String type, OffsetDateTime startTime, OffsetDateTime endTime, final ApiCallback<Healthcollectorv3GetStreamsIngestionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = healthCollectorGetStreamsIngestionValidateBeforeCall(type, startTime, endTime, _callback);
        Type localVarReturnType = new TypeToken<Healthcollectorv3GetStreamsIngestionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for healthCollectorGetTopGDPCollectors
     * @param type The type of metric to retrieve (required)
     * @param startTime The start time from which the data needs to be calculated. (optional)
     * @param endTime The end time from which the data needs to be calculated. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthCollectorGetTopGDPCollectorsCall(String type, OffsetDateTime startTime, OffsetDateTime endTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/metrics/collectors/{type}"
            .replace("{" + "type" + "}", localVarApiClient.escapeString(type.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_time", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_time", endTime));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call healthCollectorGetTopGDPCollectorsValidateBeforeCall(String type, OffsetDateTime startTime, OffsetDateTime endTime, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling healthCollectorGetTopGDPCollectors(Async)");
        }

        return healthCollectorGetTopGDPCollectorsCall(type, startTime, endTime, _callback);

    }

    /**
     * Summary: Get the top GDP collectors which send data to GI Description: Get information about the top GDP collectors
     * 
     * @param type The type of metric to retrieve (required)
     * @param startTime The start time from which the data needs to be calculated. (optional)
     * @param endTime The end time from which the data needs to be calculated. (optional)
     * @return Healthcollectorv3GetTopGDPCollectorsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Healthcollectorv3GetTopGDPCollectorsResponse healthCollectorGetTopGDPCollectors(String type, OffsetDateTime startTime, OffsetDateTime endTime) throws ApiException {
        ApiResponse<Healthcollectorv3GetTopGDPCollectorsResponse> localVarResp = healthCollectorGetTopGDPCollectorsWithHttpInfo(type, startTime, endTime);
        return localVarResp.getData();
    }

    /**
     * Summary: Get the top GDP collectors which send data to GI Description: Get information about the top GDP collectors
     * 
     * @param type The type of metric to retrieve (required)
     * @param startTime The start time from which the data needs to be calculated. (optional)
     * @param endTime The end time from which the data needs to be calculated. (optional)
     * @return ApiResponse&lt;Healthcollectorv3GetTopGDPCollectorsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Healthcollectorv3GetTopGDPCollectorsResponse> healthCollectorGetTopGDPCollectorsWithHttpInfo(String type, OffsetDateTime startTime, OffsetDateTime endTime) throws ApiException {
        okhttp3.Call localVarCall = healthCollectorGetTopGDPCollectorsValidateBeforeCall(type, startTime, endTime, null);
        Type localVarReturnType = new TypeToken<Healthcollectorv3GetTopGDPCollectorsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get the top GDP collectors which send data to GI Description: Get information about the top GDP collectors (asynchronously)
     * 
     * @param type The type of metric to retrieve (required)
     * @param startTime The start time from which the data needs to be calculated. (optional)
     * @param endTime The end time from which the data needs to be calculated. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthCollectorGetTopGDPCollectorsAsync(String type, OffsetDateTime startTime, OffsetDateTime endTime, final ApiCallback<Healthcollectorv3GetTopGDPCollectorsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = healthCollectorGetTopGDPCollectorsValidateBeforeCall(type, startTime, endTime, _callback);
        Type localVarReturnType = new TypeToken<Healthcollectorv3GetTopGDPCollectorsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for healthCollectorStoreHealthInfo
     * @param centralManagerId ID of central manager. (required)
     * @param healthcollectorv3StoreHealthInfoRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthCollectorStoreHealthInfoCall(String centralManagerId, Healthcollectorv3StoreHealthInfoRequest healthcollectorv3StoreHealthInfoRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = healthcollectorv3StoreHealthInfoRequest;

        // create path and map variables
        String localVarPath = "/api/v3/health/central_managers/{central_manager_id}/health_info"
            .replace("{" + "central_manager_id" + "}", localVarApiClient.escapeString(centralManagerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call healthCollectorStoreHealthInfoValidateBeforeCall(String centralManagerId, Healthcollectorv3StoreHealthInfoRequest healthcollectorv3StoreHealthInfoRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'centralManagerId' is set
        if (centralManagerId == null) {
            throw new ApiException("Missing the required parameter 'centralManagerId' when calling healthCollectorStoreHealthInfo(Async)");
        }

        // verify the required parameter 'healthcollectorv3StoreHealthInfoRequest' is set
        if (healthcollectorv3StoreHealthInfoRequest == null) {
            throw new ApiException("Missing the required parameter 'healthcollectorv3StoreHealthInfoRequest' when calling healthCollectorStoreHealthInfo(Async)");
        }

        return healthCollectorStoreHealthInfoCall(centralManagerId, healthcollectorv3StoreHealthInfoRequest, _callback);

    }

    /**
     * Summary: Store health info Description: Store health info from GDP into GI. (This API is called from GDP only)
     * 
     * @param centralManagerId ID of central manager. (required)
     * @param healthcollectorv3StoreHealthInfoRequest  (required)
     * @return Healthcollectorv3StoreHealthInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Healthcollectorv3StoreHealthInfoResponse healthCollectorStoreHealthInfo(String centralManagerId, Healthcollectorv3StoreHealthInfoRequest healthcollectorv3StoreHealthInfoRequest) throws ApiException {
        ApiResponse<Healthcollectorv3StoreHealthInfoResponse> localVarResp = healthCollectorStoreHealthInfoWithHttpInfo(centralManagerId, healthcollectorv3StoreHealthInfoRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Store health info Description: Store health info from GDP into GI. (This API is called from GDP only)
     * 
     * @param centralManagerId ID of central manager. (required)
     * @param healthcollectorv3StoreHealthInfoRequest  (required)
     * @return ApiResponse&lt;Healthcollectorv3StoreHealthInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Healthcollectorv3StoreHealthInfoResponse> healthCollectorStoreHealthInfoWithHttpInfo(String centralManagerId, Healthcollectorv3StoreHealthInfoRequest healthcollectorv3StoreHealthInfoRequest) throws ApiException {
        okhttp3.Call localVarCall = healthCollectorStoreHealthInfoValidateBeforeCall(centralManagerId, healthcollectorv3StoreHealthInfoRequest, null);
        Type localVarReturnType = new TypeToken<Healthcollectorv3StoreHealthInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Store health info Description: Store health info from GDP into GI. (This API is called from GDP only) (asynchronously)
     * 
     * @param centralManagerId ID of central manager. (required)
     * @param healthcollectorv3StoreHealthInfoRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call healthCollectorStoreHealthInfoAsync(String centralManagerId, Healthcollectorv3StoreHealthInfoRequest healthcollectorv3StoreHealthInfoRequest, final ApiCallback<Healthcollectorv3StoreHealthInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = healthCollectorStoreHealthInfoValidateBeforeCall(centralManagerId, healthcollectorv3StoreHealthInfoRequest, _callback);
        Type localVarReturnType = new TypeToken<Healthcollectorv3StoreHealthInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
