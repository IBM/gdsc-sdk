/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Datamartprocessorv3DMExtractionLogsRequest;
import org.openapitools.client.model.Datamartprocessorv3DMExtractionLogsResponse;
import org.openapitools.client.model.Datamartprocessorv3GetDatamartInfoResponse;
import org.openapitools.client.model.Datamartprocessorv3GetDatamartResponse;
import org.openapitools.client.model.Datamartprocessorv3GetEarliestStartTimeResponse;
import org.openapitools.client.model.Datamartprocessorv3StatusResponseBase;
import java.io.File;
import java.time.OffsetDateTime;
import org.openapitools.client.model.RuntimeError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DatamartProcessorServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DatamartProcessorServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DatamartProcessorServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for datamartProcessorServiceGetDatamartInfo
     * @param ingestionId Ingestion id. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datamartProcessorServiceGetDatamartInfoCall(String ingestionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/datamarts/info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ingestionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ingestion_id", ingestionId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datamartProcessorServiceGetDatamartInfoValidateBeforeCall(String ingestionId, final ApiCallback _callback) throws ApiException {
        return datamartProcessorServiceGetDatamartInfoCall(ingestionId, _callback);

    }

    /**
     * Summary: Get datamarts Description: Return a list of files inside a datamart to the caller.
     * 
     * @param ingestionId Ingestion id. (optional)
     * @return Datamartprocessorv3GetDatamartInfoResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Datamartprocessorv3GetDatamartInfoResponse datamartProcessorServiceGetDatamartInfo(String ingestionId) throws ApiException {
        ApiResponse<Datamartprocessorv3GetDatamartInfoResponse> localVarResp = datamartProcessorServiceGetDatamartInfoWithHttpInfo(ingestionId);
        return localVarResp.getData();
    }

    /**
     * Summary: Get datamarts Description: Return a list of files inside a datamart to the caller.
     * 
     * @param ingestionId Ingestion id. (optional)
     * @return ApiResponse&lt;Datamartprocessorv3GetDatamartInfoResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Datamartprocessorv3GetDatamartInfoResponse> datamartProcessorServiceGetDatamartInfoWithHttpInfo(String ingestionId) throws ApiException {
        okhttp3.Call localVarCall = datamartProcessorServiceGetDatamartInfoValidateBeforeCall(ingestionId, null);
        Type localVarReturnType = new TypeToken<Datamartprocessorv3GetDatamartInfoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get datamarts Description: Return a list of files inside a datamart to the caller. (asynchronously)
     * 
     * @param ingestionId Ingestion id. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datamartProcessorServiceGetDatamartInfoAsync(String ingestionId, final ApiCallback<Datamartprocessorv3GetDatamartInfoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = datamartProcessorServiceGetDatamartInfoValidateBeforeCall(ingestionId, _callback);
        Type localVarReturnType = new TypeToken<Datamartprocessorv3GetDatamartInfoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datamartProcessorServiceGetDatamarts
     * @param periodStart Data starting time period in UTC. (optional)
     * @param periodEnd Data ending time period in UTC. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datamartProcessorServiceGetDatamartsCall(OffsetDateTime periodStart, OffsetDateTime periodEnd, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/datamarts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (periodStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("period_start", periodStart));
        }

        if (periodEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("period_end", periodEnd));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datamartProcessorServiceGetDatamartsValidateBeforeCall(OffsetDateTime periodStart, OffsetDateTime periodEnd, final ApiCallback _callback) throws ApiException {
        return datamartProcessorServiceGetDatamartsCall(periodStart, periodEnd, _callback);

    }

    /**
     * Summary: Get datamarts Description: Return a list of datamarts for a time interval to the caller.
     * 
     * @param periodStart Data starting time period in UTC. (optional)
     * @param periodEnd Data ending time period in UTC. (optional)
     * @return Datamartprocessorv3GetDatamartResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Datamartprocessorv3GetDatamartResponse datamartProcessorServiceGetDatamarts(OffsetDateTime periodStart, OffsetDateTime periodEnd) throws ApiException {
        ApiResponse<Datamartprocessorv3GetDatamartResponse> localVarResp = datamartProcessorServiceGetDatamartsWithHttpInfo(periodStart, periodEnd);
        return localVarResp.getData();
    }

    /**
     * Summary: Get datamarts Description: Return a list of datamarts for a time interval to the caller.
     * 
     * @param periodStart Data starting time period in UTC. (optional)
     * @param periodEnd Data ending time period in UTC. (optional)
     * @return ApiResponse&lt;Datamartprocessorv3GetDatamartResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Datamartprocessorv3GetDatamartResponse> datamartProcessorServiceGetDatamartsWithHttpInfo(OffsetDateTime periodStart, OffsetDateTime periodEnd) throws ApiException {
        okhttp3.Call localVarCall = datamartProcessorServiceGetDatamartsValidateBeforeCall(periodStart, periodEnd, null);
        Type localVarReturnType = new TypeToken<Datamartprocessorv3GetDatamartResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get datamarts Description: Return a list of datamarts for a time interval to the caller. (asynchronously)
     * 
     * @param periodStart Data starting time period in UTC. (optional)
     * @param periodEnd Data ending time period in UTC. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datamartProcessorServiceGetDatamartsAsync(OffsetDateTime periodStart, OffsetDateTime periodEnd, final ApiCallback<Datamartprocessorv3GetDatamartResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = datamartProcessorServiceGetDatamartsValidateBeforeCall(periodStart, periodEnd, _callback);
        Type localVarReturnType = new TypeToken<Datamartprocessorv3GetDatamartResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datamartProcessorServiceGetEarliestStartTime
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datamartProcessorServiceGetEarliestStartTimeCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/datamarts/earliest_start_time";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datamartProcessorServiceGetEarliestStartTimeValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return datamartProcessorServiceGetEarliestStartTimeCall(_callback);

    }

    /**
     * Summary: Get rarliest start time Description: Return the earliest time period of data available in database.
     * 
     * @return Datamartprocessorv3GetEarliestStartTimeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Datamartprocessorv3GetEarliestStartTimeResponse datamartProcessorServiceGetEarliestStartTime() throws ApiException {
        ApiResponse<Datamartprocessorv3GetEarliestStartTimeResponse> localVarResp = datamartProcessorServiceGetEarliestStartTimeWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Summary: Get rarliest start time Description: Return the earliest time period of data available in database.
     * 
     * @return ApiResponse&lt;Datamartprocessorv3GetEarliestStartTimeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Datamartprocessorv3GetEarliestStartTimeResponse> datamartProcessorServiceGetEarliestStartTimeWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = datamartProcessorServiceGetEarliestStartTimeValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Datamartprocessorv3GetEarliestStartTimeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get rarliest start time Description: Return the earliest time period of data available in database. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datamartProcessorServiceGetEarliestStartTimeAsync(final ApiCallback<Datamartprocessorv3GetEarliestStartTimeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = datamartProcessorServiceGetEarliestStartTimeValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Datamartprocessorv3GetEarliestStartTimeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datamartProcessorServiceSendAllCompleteFilesToQueue
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datamartProcessorServiceSendAllCompleteFilesToQueueCall(Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/api/v3/datamarts/repush_files";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datamartProcessorServiceSendAllCompleteFilesToQueueValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling datamartProcessorServiceSendAllCompleteFilesToQueue(Async)");
        }

        return datamartProcessorServiceSendAllCompleteFilesToQueueCall(body, _callback);

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Datamartprocessorv3StatusResponseBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Datamartprocessorv3StatusResponseBase datamartProcessorServiceSendAllCompleteFilesToQueue(Object body) throws ApiException {
        ApiResponse<Datamartprocessorv3StatusResponseBase> localVarResp = datamartProcessorServiceSendAllCompleteFilesToQueueWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Datamartprocessorv3StatusResponseBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Datamartprocessorv3StatusResponseBase> datamartProcessorServiceSendAllCompleteFilesToQueueWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = datamartProcessorServiceSendAllCompleteFilesToQueueValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Datamartprocessorv3StatusResponseBase>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datamartProcessorServiceSendAllCompleteFilesToQueueAsync(Object body, final ApiCallback<Datamartprocessorv3StatusResponseBase> _callback) throws ApiException {

        okhttp3.Call localVarCall = datamartProcessorServiceSendAllCompleteFilesToQueueValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Datamartprocessorv3StatusResponseBase>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for datamartProcessorServiceStoreExtractionLogs
     * @param requestId Request id which co-relates to request. (required)
     * @param datamartprocessorv3DMExtractionLogsRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datamartProcessorServiceStoreExtractionLogsCall(String requestId, Datamartprocessorv3DMExtractionLogsRequest datamartprocessorv3DMExtractionLogsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = datamartprocessorv3DMExtractionLogsRequest;

        // create path and map variables
        String localVarPath = "/api/v3/datamarts/{request_id}/dm_extraction_logs"
            .replace("{" + "request_id" + "}", localVarApiClient.escapeString(requestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datamartProcessorServiceStoreExtractionLogsValidateBeforeCall(String requestId, Datamartprocessorv3DMExtractionLogsRequest datamartprocessorv3DMExtractionLogsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'requestId' is set
        if (requestId == null) {
            throw new ApiException("Missing the required parameter 'requestId' when calling datamartProcessorServiceStoreExtractionLogs(Async)");
        }

        // verify the required parameter 'datamartprocessorv3DMExtractionLogsRequest' is set
        if (datamartprocessorv3DMExtractionLogsRequest == null) {
            throw new ApiException("Missing the required parameter 'datamartprocessorv3DMExtractionLogsRequest' when calling datamartProcessorServiceStoreExtractionLogs(Async)");
        }

        return datamartProcessorServiceStoreExtractionLogsCall(requestId, datamartprocessorv3DMExtractionLogsRequest, _callback);

    }

    /**
     * Summary: Store extraction logs Description: Store the datamart extraction logs inside GI.
     * 
     * @param requestId Request id which co-relates to request. (required)
     * @param datamartprocessorv3DMExtractionLogsRequest  (required)
     * @return Datamartprocessorv3DMExtractionLogsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Datamartprocessorv3DMExtractionLogsResponse datamartProcessorServiceStoreExtractionLogs(String requestId, Datamartprocessorv3DMExtractionLogsRequest datamartprocessorv3DMExtractionLogsRequest) throws ApiException {
        ApiResponse<Datamartprocessorv3DMExtractionLogsResponse> localVarResp = datamartProcessorServiceStoreExtractionLogsWithHttpInfo(requestId, datamartprocessorv3DMExtractionLogsRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Store extraction logs Description: Store the datamart extraction logs inside GI.
     * 
     * @param requestId Request id which co-relates to request. (required)
     * @param datamartprocessorv3DMExtractionLogsRequest  (required)
     * @return ApiResponse&lt;Datamartprocessorv3DMExtractionLogsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Datamartprocessorv3DMExtractionLogsResponse> datamartProcessorServiceStoreExtractionLogsWithHttpInfo(String requestId, Datamartprocessorv3DMExtractionLogsRequest datamartprocessorv3DMExtractionLogsRequest) throws ApiException {
        okhttp3.Call localVarCall = datamartProcessorServiceStoreExtractionLogsValidateBeforeCall(requestId, datamartprocessorv3DMExtractionLogsRequest, null);
        Type localVarReturnType = new TypeToken<Datamartprocessorv3DMExtractionLogsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Store extraction logs Description: Store the datamart extraction logs inside GI. (asynchronously)
     * 
     * @param requestId Request id which co-relates to request. (required)
     * @param datamartprocessorv3DMExtractionLogsRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datamartProcessorServiceStoreExtractionLogsAsync(String requestId, Datamartprocessorv3DMExtractionLogsRequest datamartprocessorv3DMExtractionLogsRequest, final ApiCallback<Datamartprocessorv3DMExtractionLogsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = datamartProcessorServiceStoreExtractionLogsValidateBeforeCall(requestId, datamartprocessorv3DMExtractionLogsRequest, _callback);
        Type localVarReturnType = new TypeToken<Datamartprocessorv3DMExtractionLogsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadDatamart
     * @param _file The file to upload. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadDatamartCall(File _file, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v3/datamarts/upload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (_file != null) {
            localVarFormParams.put("file", _file);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadDatamartValidateBeforeCall(File _file, final ApiCallback _callback) throws ApiException {
        // verify the required parameter '_file' is set
        if (_file == null) {
            throw new ApiException("Missing the required parameter '_file' when calling uploadDatamart(Async)");
        }

        return uploadDatamartCall(_file, _callback);

    }

    /**
     * Summary: Upload datamart Description: Upload datamart file for ingestion.
     * 
     * @param _file The file to upload. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public void uploadDatamart(File _file) throws ApiException {
        uploadDatamartWithHttpInfo(_file);
    }

    /**
     * Summary: Upload datamart Description: Upload datamart file for ingestion.
     * 
     * @param _file The file to upload. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> uploadDatamartWithHttpInfo(File _file) throws ApiException {
        okhttp3.Call localVarCall = uploadDatamartValidateBeforeCall(_file, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Summary: Upload datamart Description: Upload datamart file for ingestion. (asynchronously)
     * 
     * @param _file The file to upload. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadDatamartAsync(File _file, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadDatamartValidateBeforeCall(_file, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
