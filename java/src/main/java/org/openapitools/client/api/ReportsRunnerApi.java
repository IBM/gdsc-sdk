/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Reportsrunnerv3GetActiveQueriesRequest;
import org.openapitools.client.model.Reportsrunnerv3GetActiveQueriesResponse;
import org.openapitools.client.model.Reportsrunnerv3GetAuditDataCountRequest;
import org.openapitools.client.model.Reportsrunnerv3GetChartDataRequest;
import org.openapitools.client.model.Reportsrunnerv3GetChartDataRequestv2;
import org.openapitools.client.model.Reportsrunnerv3GetChartDataResponse;
import org.openapitools.client.model.Reportsrunnerv3GetChartDataResponsev2;
import org.openapitools.client.model.Reportsrunnerv3GetReportColumnFacetRequest;
import org.openapitools.client.model.Reportsrunnerv3GetReportColumnFacetResponse;
import org.openapitools.client.model.Reportsrunnerv3GetReportDataCountRequest;
import org.openapitools.client.model.Reportsrunnerv3GetReportDataCountResponse;
import org.openapitools.client.model.Reportsrunnerv3RunAuditReportRequest;
import org.openapitools.client.model.Reportsrunnerv3RunReportRequest;
import org.openapitools.client.model.Reportsrunnerv3StopQueryRequest;
import org.openapitools.client.model.Reportsrunnerv3StopQueryResponse;
import org.openapitools.client.model.RuntimeError;
import org.openapitools.client.model.StreamResultOfReportsrunnerv3RunReportResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReportsRunnerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReportsRunnerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReportsRunnerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for reportsRunnerGetActiveQueries
     * @param reportsrunnerv3GetActiveQueriesRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsRunnerGetActiveQueriesCall(Reportsrunnerv3GetActiveQueriesRequest reportsrunnerv3GetActiveQueriesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportsrunnerv3GetActiveQueriesRequest;

        // create path and map variables
        String localVarPath = "/api/v3/queries/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsRunnerGetActiveQueriesValidateBeforeCall(Reportsrunnerv3GetActiveQueriesRequest reportsrunnerv3GetActiveQueriesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportsrunnerv3GetActiveQueriesRequest' is set
        if (reportsrunnerv3GetActiveQueriesRequest == null) {
            throw new ApiException("Missing the required parameter 'reportsrunnerv3GetActiveQueriesRequest' when calling reportsRunnerGetActiveQueries(Async)");
        }

        return reportsRunnerGetActiveQueriesCall(reportsrunnerv3GetActiveQueriesRequest, _callback);

    }

    /**
     * Summary: Get running queries Description: Get queries that are running more than certain time
     * 
     * @param reportsrunnerv3GetActiveQueriesRequest  (required)
     * @return Reportsrunnerv3GetActiveQueriesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsrunnerv3GetActiveQueriesResponse reportsRunnerGetActiveQueries(Reportsrunnerv3GetActiveQueriesRequest reportsrunnerv3GetActiveQueriesRequest) throws ApiException {
        ApiResponse<Reportsrunnerv3GetActiveQueriesResponse> localVarResp = reportsRunnerGetActiveQueriesWithHttpInfo(reportsrunnerv3GetActiveQueriesRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Get running queries Description: Get queries that are running more than certain time
     * 
     * @param reportsrunnerv3GetActiveQueriesRequest  (required)
     * @return ApiResponse&lt;Reportsrunnerv3GetActiveQueriesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsrunnerv3GetActiveQueriesResponse> reportsRunnerGetActiveQueriesWithHttpInfo(Reportsrunnerv3GetActiveQueriesRequest reportsrunnerv3GetActiveQueriesRequest) throws ApiException {
        okhttp3.Call localVarCall = reportsRunnerGetActiveQueriesValidateBeforeCall(reportsrunnerv3GetActiveQueriesRequest, null);
        Type localVarReturnType = new TypeToken<Reportsrunnerv3GetActiveQueriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get running queries Description: Get queries that are running more than certain time (asynchronously)
     * 
     * @param reportsrunnerv3GetActiveQueriesRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsRunnerGetActiveQueriesAsync(Reportsrunnerv3GetActiveQueriesRequest reportsrunnerv3GetActiveQueriesRequest, final ApiCallback<Reportsrunnerv3GetActiveQueriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsRunnerGetActiveQueriesValidateBeforeCall(reportsrunnerv3GetActiveQueriesRequest, _callback);
        Type localVarReturnType = new TypeToken<Reportsrunnerv3GetActiveQueriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsRunnerGetAuditDataCount
     * @param reportId Optional: the ID of the Report we wish to run (e.g. 000000000000000000000905). (required)
     * @param reportsrunnerv3GetAuditDataCountRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsRunnerGetAuditDataCountCall(String reportId, Reportsrunnerv3GetAuditDataCountRequest reportsrunnerv3GetAuditDataCountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportsrunnerv3GetAuditDataCountRequest;

        // create path and map variables
        String localVarPath = "/api/v3/reports/{report_id}/audit_count"
            .replace("{" + "report_id" + "}", localVarApiClient.escapeString(reportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsRunnerGetAuditDataCountValidateBeforeCall(String reportId, Reportsrunnerv3GetAuditDataCountRequest reportsrunnerv3GetAuditDataCountRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling reportsRunnerGetAuditDataCount(Async)");
        }

        // verify the required parameter 'reportsrunnerv3GetAuditDataCountRequest' is set
        if (reportsrunnerv3GetAuditDataCountRequest == null) {
            throw new ApiException("Missing the required parameter 'reportsrunnerv3GetAuditDataCountRequest' when calling reportsRunnerGetAuditDataCount(Async)");
        }

        return reportsRunnerGetAuditDataCountCall(reportId, reportsrunnerv3GetAuditDataCountRequest, _callback);

    }

    /**
     * Summary: Get audit data count Description: Get audit data.
     * 
     * @param reportId Optional: the ID of the Report we wish to run (e.g. 000000000000000000000905). (required)
     * @param reportsrunnerv3GetAuditDataCountRequest  (required)
     * @return Reportsrunnerv3GetReportDataCountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsrunnerv3GetReportDataCountResponse reportsRunnerGetAuditDataCount(String reportId, Reportsrunnerv3GetAuditDataCountRequest reportsrunnerv3GetAuditDataCountRequest) throws ApiException {
        ApiResponse<Reportsrunnerv3GetReportDataCountResponse> localVarResp = reportsRunnerGetAuditDataCountWithHttpInfo(reportId, reportsrunnerv3GetAuditDataCountRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Get audit data count Description: Get audit data.
     * 
     * @param reportId Optional: the ID of the Report we wish to run (e.g. 000000000000000000000905). (required)
     * @param reportsrunnerv3GetAuditDataCountRequest  (required)
     * @return ApiResponse&lt;Reportsrunnerv3GetReportDataCountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsrunnerv3GetReportDataCountResponse> reportsRunnerGetAuditDataCountWithHttpInfo(String reportId, Reportsrunnerv3GetAuditDataCountRequest reportsrunnerv3GetAuditDataCountRequest) throws ApiException {
        okhttp3.Call localVarCall = reportsRunnerGetAuditDataCountValidateBeforeCall(reportId, reportsrunnerv3GetAuditDataCountRequest, null);
        Type localVarReturnType = new TypeToken<Reportsrunnerv3GetReportDataCountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get audit data count Description: Get audit data. (asynchronously)
     * 
     * @param reportId Optional: the ID of the Report we wish to run (e.g. 000000000000000000000905). (required)
     * @param reportsrunnerv3GetAuditDataCountRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsRunnerGetAuditDataCountAsync(String reportId, Reportsrunnerv3GetAuditDataCountRequest reportsrunnerv3GetAuditDataCountRequest, final ApiCallback<Reportsrunnerv3GetReportDataCountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsRunnerGetAuditDataCountValidateBeforeCall(reportId, reportsrunnerv3GetAuditDataCountRequest, _callback);
        Type localVarReturnType = new TypeToken<Reportsrunnerv3GetReportDataCountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsRunnerGetChartData
     * @param reportsrunnerv3GetChartDataRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsRunnerGetChartDataCall(Reportsrunnerv3GetChartDataRequest reportsrunnerv3GetChartDataRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportsrunnerv3GetChartDataRequest;

        // create path and map variables
        String localVarPath = "/api/v3/charts/run";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsRunnerGetChartDataValidateBeforeCall(Reportsrunnerv3GetChartDataRequest reportsrunnerv3GetChartDataRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportsrunnerv3GetChartDataRequest' is set
        if (reportsrunnerv3GetChartDataRequest == null) {
            throw new ApiException("Missing the required parameter 'reportsrunnerv3GetChartDataRequest' when calling reportsRunnerGetChartData(Async)");
        }

        return reportsRunnerGetChartDataCall(reportsrunnerv3GetChartDataRequest, _callback);

    }

    /**
     * Summary: Get chart data Description: Get Chart data by chart ID or by specifying report definition and chart settings.
     * 
     * @param reportsrunnerv3GetChartDataRequest  (required)
     * @return Reportsrunnerv3GetChartDataResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsrunnerv3GetChartDataResponse reportsRunnerGetChartData(Reportsrunnerv3GetChartDataRequest reportsrunnerv3GetChartDataRequest) throws ApiException {
        ApiResponse<Reportsrunnerv3GetChartDataResponse> localVarResp = reportsRunnerGetChartDataWithHttpInfo(reportsrunnerv3GetChartDataRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Get chart data Description: Get Chart data by chart ID or by specifying report definition and chart settings.
     * 
     * @param reportsrunnerv3GetChartDataRequest  (required)
     * @return ApiResponse&lt;Reportsrunnerv3GetChartDataResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsrunnerv3GetChartDataResponse> reportsRunnerGetChartDataWithHttpInfo(Reportsrunnerv3GetChartDataRequest reportsrunnerv3GetChartDataRequest) throws ApiException {
        okhttp3.Call localVarCall = reportsRunnerGetChartDataValidateBeforeCall(reportsrunnerv3GetChartDataRequest, null);
        Type localVarReturnType = new TypeToken<Reportsrunnerv3GetChartDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get chart data Description: Get Chart data by chart ID or by specifying report definition and chart settings. (asynchronously)
     * 
     * @param reportsrunnerv3GetChartDataRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsRunnerGetChartDataAsync(Reportsrunnerv3GetChartDataRequest reportsrunnerv3GetChartDataRequest, final ApiCallback<Reportsrunnerv3GetChartDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsRunnerGetChartDataValidateBeforeCall(reportsrunnerv3GetChartDataRequest, _callback);
        Type localVarReturnType = new TypeToken<Reportsrunnerv3GetChartDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsRunnerGetChartDatav2
     * @param reportsrunnerv3GetChartDataRequestv2  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsRunnerGetChartDatav2Call(Reportsrunnerv3GetChartDataRequestv2 reportsrunnerv3GetChartDataRequestv2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportsrunnerv3GetChartDataRequestv2;

        // create path and map variables
        String localVarPath = "/api/v3/flex-charts/run";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsRunnerGetChartDatav2ValidateBeforeCall(Reportsrunnerv3GetChartDataRequestv2 reportsrunnerv3GetChartDataRequestv2, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportsrunnerv3GetChartDataRequestv2' is set
        if (reportsrunnerv3GetChartDataRequestv2 == null) {
            throw new ApiException("Missing the required parameter 'reportsrunnerv3GetChartDataRequestv2' when calling reportsRunnerGetChartDatav2(Async)");
        }

        return reportsRunnerGetChartDatav2Call(reportsrunnerv3GetChartDataRequestv2, _callback);

    }

    /**
     * 
     * 
     * @param reportsrunnerv3GetChartDataRequestv2  (required)
     * @return Reportsrunnerv3GetChartDataResponsev2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsrunnerv3GetChartDataResponsev2 reportsRunnerGetChartDatav2(Reportsrunnerv3GetChartDataRequestv2 reportsrunnerv3GetChartDataRequestv2) throws ApiException {
        ApiResponse<Reportsrunnerv3GetChartDataResponsev2> localVarResp = reportsRunnerGetChartDatav2WithHttpInfo(reportsrunnerv3GetChartDataRequestv2);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param reportsrunnerv3GetChartDataRequestv2  (required)
     * @return ApiResponse&lt;Reportsrunnerv3GetChartDataResponsev2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsrunnerv3GetChartDataResponsev2> reportsRunnerGetChartDatav2WithHttpInfo(Reportsrunnerv3GetChartDataRequestv2 reportsrunnerv3GetChartDataRequestv2) throws ApiException {
        okhttp3.Call localVarCall = reportsRunnerGetChartDatav2ValidateBeforeCall(reportsrunnerv3GetChartDataRequestv2, null);
        Type localVarReturnType = new TypeToken<Reportsrunnerv3GetChartDataResponsev2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param reportsrunnerv3GetChartDataRequestv2  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsRunnerGetChartDatav2Async(Reportsrunnerv3GetChartDataRequestv2 reportsrunnerv3GetChartDataRequestv2, final ApiCallback<Reportsrunnerv3GetChartDataResponsev2> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsRunnerGetChartDatav2ValidateBeforeCall(reportsrunnerv3GetChartDataRequestv2, _callback);
        Type localVarReturnType = new TypeToken<Reportsrunnerv3GetChartDataResponsev2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsRunnerGetReportColumnFacet
     * @param reportsrunnerv3GetReportColumnFacetRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsRunnerGetReportColumnFacetCall(Reportsrunnerv3GetReportColumnFacetRequest reportsrunnerv3GetReportColumnFacetRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportsrunnerv3GetReportColumnFacetRequest;

        // create path and map variables
        String localVarPath = "/api/v3/reports/facet";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsRunnerGetReportColumnFacetValidateBeforeCall(Reportsrunnerv3GetReportColumnFacetRequest reportsrunnerv3GetReportColumnFacetRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportsrunnerv3GetReportColumnFacetRequest' is set
        if (reportsrunnerv3GetReportColumnFacetRequest == null) {
            throw new ApiException("Missing the required parameter 'reportsrunnerv3GetReportColumnFacetRequest' when calling reportsRunnerGetReportColumnFacet(Async)");
        }

        return reportsRunnerGetReportColumnFacetCall(reportsrunnerv3GetReportColumnFacetRequest, _callback);

    }

    /**
     * Summary: Get report column facet Description: Get counts that is group by values for the selected column.
     * 
     * @param reportsrunnerv3GetReportColumnFacetRequest  (required)
     * @return Reportsrunnerv3GetReportColumnFacetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsrunnerv3GetReportColumnFacetResponse reportsRunnerGetReportColumnFacet(Reportsrunnerv3GetReportColumnFacetRequest reportsrunnerv3GetReportColumnFacetRequest) throws ApiException {
        ApiResponse<Reportsrunnerv3GetReportColumnFacetResponse> localVarResp = reportsRunnerGetReportColumnFacetWithHttpInfo(reportsrunnerv3GetReportColumnFacetRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Get report column facet Description: Get counts that is group by values for the selected column.
     * 
     * @param reportsrunnerv3GetReportColumnFacetRequest  (required)
     * @return ApiResponse&lt;Reportsrunnerv3GetReportColumnFacetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsrunnerv3GetReportColumnFacetResponse> reportsRunnerGetReportColumnFacetWithHttpInfo(Reportsrunnerv3GetReportColumnFacetRequest reportsrunnerv3GetReportColumnFacetRequest) throws ApiException {
        okhttp3.Call localVarCall = reportsRunnerGetReportColumnFacetValidateBeforeCall(reportsrunnerv3GetReportColumnFacetRequest, null);
        Type localVarReturnType = new TypeToken<Reportsrunnerv3GetReportColumnFacetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get report column facet Description: Get counts that is group by values for the selected column. (asynchronously)
     * 
     * @param reportsrunnerv3GetReportColumnFacetRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsRunnerGetReportColumnFacetAsync(Reportsrunnerv3GetReportColumnFacetRequest reportsrunnerv3GetReportColumnFacetRequest, final ApiCallback<Reportsrunnerv3GetReportColumnFacetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsRunnerGetReportColumnFacetValidateBeforeCall(reportsrunnerv3GetReportColumnFacetRequest, _callback);
        Type localVarReturnType = new TypeToken<Reportsrunnerv3GetReportColumnFacetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsRunnerGetReportDataCount
     * @param reportsrunnerv3GetReportDataCountRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsRunnerGetReportDataCountCall(Reportsrunnerv3GetReportDataCountRequest reportsrunnerv3GetReportDataCountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportsrunnerv3GetReportDataCountRequest;

        // create path and map variables
        String localVarPath = "/api/v3/reports/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsRunnerGetReportDataCountValidateBeforeCall(Reportsrunnerv3GetReportDataCountRequest reportsrunnerv3GetReportDataCountRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportsrunnerv3GetReportDataCountRequest' is set
        if (reportsrunnerv3GetReportDataCountRequest == null) {
            throw new ApiException("Missing the required parameter 'reportsrunnerv3GetReportDataCountRequest' when calling reportsRunnerGetReportDataCount(Async)");
        }

        return reportsRunnerGetReportDataCountCall(reportsrunnerv3GetReportDataCountRequest, _callback);

    }

    /**
     * Summary: Get report data count Description: Get report data.
     * 
     * @param reportsrunnerv3GetReportDataCountRequest  (required)
     * @return Reportsrunnerv3GetReportDataCountResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsrunnerv3GetReportDataCountResponse reportsRunnerGetReportDataCount(Reportsrunnerv3GetReportDataCountRequest reportsrunnerv3GetReportDataCountRequest) throws ApiException {
        ApiResponse<Reportsrunnerv3GetReportDataCountResponse> localVarResp = reportsRunnerGetReportDataCountWithHttpInfo(reportsrunnerv3GetReportDataCountRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Get report data count Description: Get report data.
     * 
     * @param reportsrunnerv3GetReportDataCountRequest  (required)
     * @return ApiResponse&lt;Reportsrunnerv3GetReportDataCountResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsrunnerv3GetReportDataCountResponse> reportsRunnerGetReportDataCountWithHttpInfo(Reportsrunnerv3GetReportDataCountRequest reportsrunnerv3GetReportDataCountRequest) throws ApiException {
        okhttp3.Call localVarCall = reportsRunnerGetReportDataCountValidateBeforeCall(reportsrunnerv3GetReportDataCountRequest, null);
        Type localVarReturnType = new TypeToken<Reportsrunnerv3GetReportDataCountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Get report data count Description: Get report data. (asynchronously)
     * 
     * @param reportsrunnerv3GetReportDataCountRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsRunnerGetReportDataCountAsync(Reportsrunnerv3GetReportDataCountRequest reportsrunnerv3GetReportDataCountRequest, final ApiCallback<Reportsrunnerv3GetReportDataCountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsRunnerGetReportDataCountValidateBeforeCall(reportsrunnerv3GetReportDataCountRequest, _callback);
        Type localVarReturnType = new TypeToken<Reportsrunnerv3GetReportDataCountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsRunnerRunAuditReport
     * @param reportId The ID of the Report we wish to run (e.g. 000000000000000000000905). (required)
     * @param reportsrunnerv3RunAuditReportRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response.(streaming responses) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsRunnerRunAuditReportCall(String reportId, Reportsrunnerv3RunAuditReportRequest reportsrunnerv3RunAuditReportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportsrunnerv3RunAuditReportRequest;

        // create path and map variables
        String localVarPath = "/api/v3/audit/{report_id}/run"
            .replace("{" + "report_id" + "}", localVarApiClient.escapeString(reportId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsRunnerRunAuditReportValidateBeforeCall(String reportId, Reportsrunnerv3RunAuditReportRequest reportsrunnerv3RunAuditReportRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new ApiException("Missing the required parameter 'reportId' when calling reportsRunnerRunAuditReport(Async)");
        }

        // verify the required parameter 'reportsrunnerv3RunAuditReportRequest' is set
        if (reportsrunnerv3RunAuditReportRequest == null) {
            throw new ApiException("Missing the required parameter 'reportsrunnerv3RunAuditReportRequest' when calling reportsRunnerRunAuditReport(Async)");
        }

        return reportsRunnerRunAuditReportCall(reportId, reportsrunnerv3RunAuditReportRequest, _callback);

    }

    /**
     * Summary: Run audit report Description: Run task report by SQL based ob report ID and filter definition.
     * 
     * @param reportId The ID of the Report we wish to run (e.g. 000000000000000000000905). (required)
     * @param reportsrunnerv3RunAuditReportRequest  (required)
     * @return StreamResultOfReportsrunnerv3RunReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response.(streaming responses) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public StreamResultOfReportsrunnerv3RunReportResponse reportsRunnerRunAuditReport(String reportId, Reportsrunnerv3RunAuditReportRequest reportsrunnerv3RunAuditReportRequest) throws ApiException {
        ApiResponse<StreamResultOfReportsrunnerv3RunReportResponse> localVarResp = reportsRunnerRunAuditReportWithHttpInfo(reportId, reportsrunnerv3RunAuditReportRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Run audit report Description: Run task report by SQL based ob report ID and filter definition.
     * 
     * @param reportId The ID of the Report we wish to run (e.g. 000000000000000000000905). (required)
     * @param reportsrunnerv3RunAuditReportRequest  (required)
     * @return ApiResponse&lt;StreamResultOfReportsrunnerv3RunReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response.(streaming responses) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamResultOfReportsrunnerv3RunReportResponse> reportsRunnerRunAuditReportWithHttpInfo(String reportId, Reportsrunnerv3RunAuditReportRequest reportsrunnerv3RunAuditReportRequest) throws ApiException {
        okhttp3.Call localVarCall = reportsRunnerRunAuditReportValidateBeforeCall(reportId, reportsrunnerv3RunAuditReportRequest, null);
        Type localVarReturnType = new TypeToken<StreamResultOfReportsrunnerv3RunReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Run audit report Description: Run task report by SQL based ob report ID and filter definition. (asynchronously)
     * 
     * @param reportId The ID of the Report we wish to run (e.g. 000000000000000000000905). (required)
     * @param reportsrunnerv3RunAuditReportRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response.(streaming responses) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsRunnerRunAuditReportAsync(String reportId, Reportsrunnerv3RunAuditReportRequest reportsrunnerv3RunAuditReportRequest, final ApiCallback<StreamResultOfReportsrunnerv3RunReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsRunnerRunAuditReportValidateBeforeCall(reportId, reportsrunnerv3RunAuditReportRequest, _callback);
        Type localVarReturnType = new TypeToken<StreamResultOfReportsrunnerv3RunReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsRunnerRunReport
     * @param reportsrunnerv3RunReportRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response.(streaming responses) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsRunnerRunReportCall(Reportsrunnerv3RunReportRequest reportsrunnerv3RunReportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportsrunnerv3RunReportRequest;

        // create path and map variables
        String localVarPath = "/api/v3/reports/run";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsRunnerRunReportValidateBeforeCall(Reportsrunnerv3RunReportRequest reportsrunnerv3RunReportRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportsrunnerv3RunReportRequest' is set
        if (reportsrunnerv3RunReportRequest == null) {
            throw new ApiException("Missing the required parameter 'reportsrunnerv3RunReportRequest' when calling reportsRunnerRunReport(Async)");
        }

        return reportsRunnerRunReportCall(reportsrunnerv3RunReportRequest, _callback);

    }

    /**
     * Summary: Run report Description: Run report by report ID or by specifying report definition.
     * 
     * @param reportsrunnerv3RunReportRequest  (required)
     * @return StreamResultOfReportsrunnerv3RunReportResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response.(streaming responses) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public StreamResultOfReportsrunnerv3RunReportResponse reportsRunnerRunReport(Reportsrunnerv3RunReportRequest reportsrunnerv3RunReportRequest) throws ApiException {
        ApiResponse<StreamResultOfReportsrunnerv3RunReportResponse> localVarResp = reportsRunnerRunReportWithHttpInfo(reportsrunnerv3RunReportRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Run report Description: Run report by report ID or by specifying report definition.
     * 
     * @param reportsrunnerv3RunReportRequest  (required)
     * @return ApiResponse&lt;StreamResultOfReportsrunnerv3RunReportResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response.(streaming responses) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StreamResultOfReportsrunnerv3RunReportResponse> reportsRunnerRunReportWithHttpInfo(Reportsrunnerv3RunReportRequest reportsrunnerv3RunReportRequest) throws ApiException {
        okhttp3.Call localVarCall = reportsRunnerRunReportValidateBeforeCall(reportsrunnerv3RunReportRequest, null);
        Type localVarReturnType = new TypeToken<StreamResultOfReportsrunnerv3RunReportResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Run report Description: Run report by report ID or by specifying report definition. (asynchronously)
     * 
     * @param reportsrunnerv3RunReportRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response.(streaming responses) </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsRunnerRunReportAsync(Reportsrunnerv3RunReportRequest reportsrunnerv3RunReportRequest, final ApiCallback<StreamResultOfReportsrunnerv3RunReportResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsRunnerRunReportValidateBeforeCall(reportsrunnerv3RunReportRequest, _callback);
        Type localVarReturnType = new TypeToken<StreamResultOfReportsrunnerv3RunReportResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reportsRunnerStopQuery
     * @param reportsrunnerv3StopQueryRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsRunnerStopQueryCall(Reportsrunnerv3StopQueryRequest reportsrunnerv3StopQueryRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = reportsrunnerv3StopQueryRequest;

        // create path and map variables
        String localVarPath = "/api/v3/queries/stop";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reportsRunnerStopQueryValidateBeforeCall(Reportsrunnerv3StopQueryRequest reportsrunnerv3StopQueryRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'reportsrunnerv3StopQueryRequest' is set
        if (reportsrunnerv3StopQueryRequest == null) {
            throw new ApiException("Missing the required parameter 'reportsrunnerv3StopQueryRequest' when calling reportsRunnerStopQuery(Async)");
        }

        return reportsRunnerStopQueryCall(reportsrunnerv3StopQueryRequest, _callback);

    }

    /**
     * Summary: Stop query Description: Stop a query based on the id
     * 
     * @param reportsrunnerv3StopQueryRequest  (required)
     * @return Reportsrunnerv3StopQueryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public Reportsrunnerv3StopQueryResponse reportsRunnerStopQuery(Reportsrunnerv3StopQueryRequest reportsrunnerv3StopQueryRequest) throws ApiException {
        ApiResponse<Reportsrunnerv3StopQueryResponse> localVarResp = reportsRunnerStopQueryWithHttpInfo(reportsrunnerv3StopQueryRequest);
        return localVarResp.getData();
    }

    /**
     * Summary: Stop query Description: Stop a query based on the id
     * 
     * @param reportsrunnerv3StopQueryRequest  (required)
     * @return ApiResponse&lt;Reportsrunnerv3StopQueryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Reportsrunnerv3StopQueryResponse> reportsRunnerStopQueryWithHttpInfo(Reportsrunnerv3StopQueryRequest reportsrunnerv3StopQueryRequest) throws ApiException {
        okhttp3.Call localVarCall = reportsRunnerStopQueryValidateBeforeCall(reportsrunnerv3StopQueryRequest, null);
        Type localVarReturnType = new TypeToken<Reportsrunnerv3StopQueryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary: Stop query Description: Stop a query based on the id (asynchronously)
     * 
     * @param reportsrunnerv3StopQueryRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A successful response. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reportsRunnerStopQueryAsync(Reportsrunnerv3StopQueryRequest reportsrunnerv3StopQueryRequest, final ApiCallback<Reportsrunnerv3StopQueryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = reportsRunnerStopQueryValidateBeforeCall(reportsrunnerv3StopQueryRequest, _callback);
        Type localVarReturnType = new TypeToken<Reportsrunnerv3StopQueryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
