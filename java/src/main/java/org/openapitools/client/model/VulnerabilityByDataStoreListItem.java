/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SensitivitySummary;
import org.openapitools.client.model.ServiceProvider;
import org.openapitools.client.model.VulnerabilitiesCriticalityCountInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VulnerabilityByDataStoreListItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-31T19:36:57.870742Z[UTC]", comments = "Generator version: 7.6.0")
public class VulnerabilityByDataStoreListItem {
  public static final String SERIALIZED_NAME_DATA_STORE_ID = "dataStoreId";
  @SerializedName(SERIALIZED_NAME_DATA_STORE_ID)
  private String dataStoreId;

  public static final String SERIALIZED_NAME_DATA_STORE_TYPE = "dataStoreType";
  @SerializedName(SERIALIZED_NAME_DATA_STORE_TYPE)
  private String dataStoreType;

  public static final String SERIALIZED_NAME_DATA_STORE_NAME = "dataStoreName";
  @SerializedName(SERIALIZED_NAME_DATA_STORE_NAME)
  private String dataStoreName;

  public static final String SERIALIZED_NAME_CLOUD_ACCOUNT_ID = "cloudAccountId";
  @SerializedName(SERIALIZED_NAME_CLOUD_ACCOUNT_ID)
  private String cloudAccountId;

  public static final String SERIALIZED_NAME_CLOUD_SERVICE_PROVIDER = "cloudServiceProvider";
  @SerializedName(SERIALIZED_NAME_CLOUD_SERVICE_PROVIDER)
  private ServiceProvider cloudServiceProvider;

  public static final String SERIALIZED_NAME_VULNERABILITY_CRITICALITY_COUNT = "vulnerabilityCriticalityCount";
  @SerializedName(SERIALIZED_NAME_VULNERABILITY_CRITICALITY_COUNT)
  private List<VulnerabilitiesCriticalityCountInner> vulnerabilityCriticalityCount = new ArrayList<>();

  public static final String SERIALIZED_NAME_SENSITIVITIES_SUMMARY = "sensitivitiesSummary";
  @SerializedName(SERIALIZED_NAME_SENSITIVITIES_SUMMARY)
  private List<SensitivitySummary> sensitivitiesSummary = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTODIAN = "custodian";
  @SerializedName(SERIALIZED_NAME_CUSTODIAN)
  private String custodian;

  public VulnerabilityByDataStoreListItem() {
  }

  public VulnerabilityByDataStoreListItem dataStoreId(String dataStoreId) {
    this.dataStoreId = dataStoreId;
    return this;
  }

   /**
   * Get dataStoreId
   * @return dataStoreId
  **/
  @javax.annotation.Nonnull
  public String getDataStoreId() {
    return dataStoreId;
  }

  public void setDataStoreId(String dataStoreId) {
    this.dataStoreId = dataStoreId;
  }


  public VulnerabilityByDataStoreListItem dataStoreType(String dataStoreType) {
    this.dataStoreType = dataStoreType;
    return this;
  }

   /**
   * Get dataStoreType
   * @return dataStoreType
  **/
  @javax.annotation.Nonnull
  public String getDataStoreType() {
    return dataStoreType;
  }

  public void setDataStoreType(String dataStoreType) {
    this.dataStoreType = dataStoreType;
  }


  public VulnerabilityByDataStoreListItem dataStoreName(String dataStoreName) {
    this.dataStoreName = dataStoreName;
    return this;
  }

   /**
   * Get dataStoreName
   * @return dataStoreName
  **/
  @javax.annotation.Nonnull
  public String getDataStoreName() {
    return dataStoreName;
  }

  public void setDataStoreName(String dataStoreName) {
    this.dataStoreName = dataStoreName;
  }


  public VulnerabilityByDataStoreListItem cloudAccountId(String cloudAccountId) {
    this.cloudAccountId = cloudAccountId;
    return this;
  }

   /**
   * Get cloudAccountId
   * @return cloudAccountId
  **/
  @javax.annotation.Nonnull
  public String getCloudAccountId() {
    return cloudAccountId;
  }

  public void setCloudAccountId(String cloudAccountId) {
    this.cloudAccountId = cloudAccountId;
  }


  public VulnerabilityByDataStoreListItem cloudServiceProvider(ServiceProvider cloudServiceProvider) {
    this.cloudServiceProvider = cloudServiceProvider;
    return this;
  }

   /**
   * Get cloudServiceProvider
   * @return cloudServiceProvider
  **/
  @javax.annotation.Nonnull
  public ServiceProvider getCloudServiceProvider() {
    return cloudServiceProvider;
  }

  public void setCloudServiceProvider(ServiceProvider cloudServiceProvider) {
    this.cloudServiceProvider = cloudServiceProvider;
  }


  public VulnerabilityByDataStoreListItem vulnerabilityCriticalityCount(List<VulnerabilitiesCriticalityCountInner> vulnerabilityCriticalityCount) {
    this.vulnerabilityCriticalityCount = vulnerabilityCriticalityCount;
    return this;
  }

  public VulnerabilityByDataStoreListItem addVulnerabilityCriticalityCountItem(VulnerabilitiesCriticalityCountInner vulnerabilityCriticalityCountItem) {
    if (this.vulnerabilityCriticalityCount == null) {
      this.vulnerabilityCriticalityCount = new ArrayList<>();
    }
    this.vulnerabilityCriticalityCount.add(vulnerabilityCriticalityCountItem);
    return this;
  }

   /**
   * Get vulnerabilityCriticalityCount
   * @return vulnerabilityCriticalityCount
  **/
  @javax.annotation.Nonnull
  public List<VulnerabilitiesCriticalityCountInner> getVulnerabilityCriticalityCount() {
    return vulnerabilityCriticalityCount;
  }

  public void setVulnerabilityCriticalityCount(List<VulnerabilitiesCriticalityCountInner> vulnerabilityCriticalityCount) {
    this.vulnerabilityCriticalityCount = vulnerabilityCriticalityCount;
  }


  public VulnerabilityByDataStoreListItem sensitivitiesSummary(List<SensitivitySummary> sensitivitiesSummary) {
    this.sensitivitiesSummary = sensitivitiesSummary;
    return this;
  }

  public VulnerabilityByDataStoreListItem addSensitivitiesSummaryItem(SensitivitySummary sensitivitiesSummaryItem) {
    if (this.sensitivitiesSummary == null) {
      this.sensitivitiesSummary = new ArrayList<>();
    }
    this.sensitivitiesSummary.add(sensitivitiesSummaryItem);
    return this;
  }

   /**
   * Get sensitivitiesSummary
   * @return sensitivitiesSummary
  **/
  @javax.annotation.Nonnull
  public List<SensitivitySummary> getSensitivitiesSummary() {
    return sensitivitiesSummary;
  }

  public void setSensitivitiesSummary(List<SensitivitySummary> sensitivitiesSummary) {
    this.sensitivitiesSummary = sensitivitiesSummary;
  }


  public VulnerabilityByDataStoreListItem custodian(String custodian) {
    this.custodian = custodian;
    return this;
  }

   /**
   * Get custodian
   * @return custodian
  **/
  @javax.annotation.Nullable
  public String getCustodian() {
    return custodian;
  }

  public void setCustodian(String custodian) {
    this.custodian = custodian;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VulnerabilityByDataStoreListItem vulnerabilityByDataStoreListItem = (VulnerabilityByDataStoreListItem) o;
    return Objects.equals(this.dataStoreId, vulnerabilityByDataStoreListItem.dataStoreId) &&
        Objects.equals(this.dataStoreType, vulnerabilityByDataStoreListItem.dataStoreType) &&
        Objects.equals(this.dataStoreName, vulnerabilityByDataStoreListItem.dataStoreName) &&
        Objects.equals(this.cloudAccountId, vulnerabilityByDataStoreListItem.cloudAccountId) &&
        Objects.equals(this.cloudServiceProvider, vulnerabilityByDataStoreListItem.cloudServiceProvider) &&
        Objects.equals(this.vulnerabilityCriticalityCount, vulnerabilityByDataStoreListItem.vulnerabilityCriticalityCount) &&
        Objects.equals(this.sensitivitiesSummary, vulnerabilityByDataStoreListItem.sensitivitiesSummary) &&
        Objects.equals(this.custodian, vulnerabilityByDataStoreListItem.custodian);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataStoreId, dataStoreType, dataStoreName, cloudAccountId, cloudServiceProvider, vulnerabilityCriticalityCount, sensitivitiesSummary, custodian);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VulnerabilityByDataStoreListItem {\n");
    sb.append("    dataStoreId: ").append(toIndentedString(dataStoreId)).append("\n");
    sb.append("    dataStoreType: ").append(toIndentedString(dataStoreType)).append("\n");
    sb.append("    dataStoreName: ").append(toIndentedString(dataStoreName)).append("\n");
    sb.append("    cloudAccountId: ").append(toIndentedString(cloudAccountId)).append("\n");
    sb.append("    cloudServiceProvider: ").append(toIndentedString(cloudServiceProvider)).append("\n");
    sb.append("    vulnerabilityCriticalityCount: ").append(toIndentedString(vulnerabilityCriticalityCount)).append("\n");
    sb.append("    sensitivitiesSummary: ").append(toIndentedString(sensitivitiesSummary)).append("\n");
    sb.append("    custodian: ").append(toIndentedString(custodian)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataStoreId");
    openapiFields.add("dataStoreType");
    openapiFields.add("dataStoreName");
    openapiFields.add("cloudAccountId");
    openapiFields.add("cloudServiceProvider");
    openapiFields.add("vulnerabilityCriticalityCount");
    openapiFields.add("sensitivitiesSummary");
    openapiFields.add("custodian");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dataStoreId");
    openapiRequiredFields.add("dataStoreType");
    openapiRequiredFields.add("dataStoreName");
    openapiRequiredFields.add("cloudAccountId");
    openapiRequiredFields.add("cloudServiceProvider");
    openapiRequiredFields.add("vulnerabilityCriticalityCount");
    openapiRequiredFields.add("sensitivitiesSummary");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to VulnerabilityByDataStoreListItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VulnerabilityByDataStoreListItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VulnerabilityByDataStoreListItem is not found in the empty JSON string", VulnerabilityByDataStoreListItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VulnerabilityByDataStoreListItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VulnerabilityByDataStoreListItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VulnerabilityByDataStoreListItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("dataStoreId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataStoreId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataStoreId").toString()));
      }
      if (!jsonObj.get("dataStoreType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataStoreType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataStoreType").toString()));
      }
      if (!jsonObj.get("dataStoreName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataStoreName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataStoreName").toString()));
      }
      if (!jsonObj.get("cloudAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloudAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cloudAccountId").toString()));
      }
      // validate the required field `cloudServiceProvider`
      ServiceProvider.validateJsonElement(jsonObj.get("cloudServiceProvider"));
      // ensure the json data is an array
      if (!jsonObj.get("vulnerabilityCriticalityCount").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `vulnerabilityCriticalityCount` to be an array in the JSON string but got `%s`", jsonObj.get("vulnerabilityCriticalityCount").toString()));
      }

      JsonArray jsonArrayvulnerabilityCriticalityCount = jsonObj.getAsJsonArray("vulnerabilityCriticalityCount");
      // validate the required field `vulnerabilityCriticalityCount` (array)
      for (int i = 0; i < jsonArrayvulnerabilityCriticalityCount.size(); i++) {
        VulnerabilitiesCriticalityCountInner.validateJsonElement(jsonArrayvulnerabilityCriticalityCount.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("sensitivitiesSummary").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sensitivitiesSummary` to be an array in the JSON string but got `%s`", jsonObj.get("sensitivitiesSummary").toString()));
      }

      JsonArray jsonArraysensitivitiesSummary = jsonObj.getAsJsonArray("sensitivitiesSummary");
      // validate the required field `sensitivitiesSummary` (array)
      for (int i = 0; i < jsonArraysensitivitiesSummary.size(); i++) {
        SensitivitySummary.validateJsonElement(jsonArraysensitivitiesSummary.get(i));
      };
      if ((jsonObj.get("custodian") != null && !jsonObj.get("custodian").isJsonNull()) && !jsonObj.get("custodian").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custodian` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custodian").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VulnerabilityByDataStoreListItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VulnerabilityByDataStoreListItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VulnerabilityByDataStoreListItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VulnerabilityByDataStoreListItem.class));

       return (TypeAdapter<T>) new TypeAdapter<VulnerabilityByDataStoreListItem>() {
           @Override
           public void write(JsonWriter out, VulnerabilityByDataStoreListItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VulnerabilityByDataStoreListItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VulnerabilityByDataStoreListItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VulnerabilityByDataStoreListItem
  * @throws IOException if the JSON string is invalid with respect to VulnerabilityByDataStoreListItem
  */
  public static VulnerabilityByDataStoreListItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VulnerabilityByDataStoreListItem.class);
  }

 /**
  * Convert an instance of VulnerabilityByDataStoreListItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

