/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Datasource Definition encapsulates all data necessary for a handling datasource in Universal Connector.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-31T19:36:57.870742Z[UTC]", comments = "Generator version: 7.6.0")
public class Universalconnectormanagerv3DatasourceDefinition {
  public static final String SERIALIZED_NAME_DATASOURCE_FILTER = "datasource_filter";
  @SerializedName(SERIALIZED_NAME_DATASOURCE_FILTER)
  private String datasourceFilter;

  public static final String SERIALIZED_NAME_DATASOURCE_ID = "datasource_id";
  @SerializedName(SERIALIZED_NAME_DATASOURCE_ID)
  private String datasourceId;

  public static final String SERIALIZED_NAME_DATASOURCE_INPUT = "datasource_input";
  @SerializedName(SERIALIZED_NAME_DATASOURCE_INPUT)
  private String datasourceInput;

  public static final String SERIALIZED_NAME_DATASOURCE_NAME = "datasource_name";
  @SerializedName(SERIALIZED_NAME_DATASOURCE_NAME)
  private String datasourceName;

  public static final String SERIALIZED_NAME_OWNER_USER_ID = "owner_user_id";
  @SerializedName(SERIALIZED_NAME_OWNER_USER_ID)
  private String ownerUserId;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "update_time";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private OffsetDateTime updateTime;

  public Universalconnectormanagerv3DatasourceDefinition() {
  }

  public Universalconnectormanagerv3DatasourceDefinition datasourceFilter(String datasourceFilter) {
    this.datasourceFilter = datasourceFilter;
    return this;
  }

   /**
   * Datasource configuration filter section text.
   * @return datasourceFilter
  **/
  @javax.annotation.Nullable
  public String getDatasourceFilter() {
    return datasourceFilter;
  }

  public void setDatasourceFilter(String datasourceFilter) {
    this.datasourceFilter = datasourceFilter;
  }


  public Universalconnectormanagerv3DatasourceDefinition datasourceId(String datasourceId) {
    this.datasourceId = datasourceId;
    return this;
  }

   /**
   * The datasource ID.
   * @return datasourceId
  **/
  @javax.annotation.Nullable
  public String getDatasourceId() {
    return datasourceId;
  }

  public void setDatasourceId(String datasourceId) {
    this.datasourceId = datasourceId;
  }


  public Universalconnectormanagerv3DatasourceDefinition datasourceInput(String datasourceInput) {
    this.datasourceInput = datasourceInput;
    return this;
  }

   /**
   * Datasource configuration input section text.
   * @return datasourceInput
  **/
  @javax.annotation.Nullable
  public String getDatasourceInput() {
    return datasourceInput;
  }

  public void setDatasourceInput(String datasourceInput) {
    this.datasourceInput = datasourceInput;
  }


  public Universalconnectormanagerv3DatasourceDefinition datasourceName(String datasourceName) {
    this.datasourceName = datasourceName;
    return this;
  }

   /**
   * Datasource name.
   * @return datasourceName
  **/
  @javax.annotation.Nullable
  public String getDatasourceName() {
    return datasourceName;
  }

  public void setDatasourceName(String datasourceName) {
    this.datasourceName = datasourceName;
  }


  public Universalconnectormanagerv3DatasourceDefinition ownerUserId(String ownerUserId) {
    this.ownerUserId = ownerUserId;
    return this;
  }

   /**
   * The name of the user created datasource.
   * @return ownerUserId
  **/
  @javax.annotation.Nullable
  public String getOwnerUserId() {
    return ownerUserId;
  }

  public void setOwnerUserId(String ownerUserId) {
    this.ownerUserId = ownerUserId;
  }


  public Universalconnectormanagerv3DatasourceDefinition updateTime(OffsetDateTime updateTime) {
    this.updateTime = updateTime;
    return this;
  }

   /**
   * The datasource update time.
   * @return updateTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(OffsetDateTime updateTime) {
    this.updateTime = updateTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Universalconnectormanagerv3DatasourceDefinition universalconnectormanagerv3DatasourceDefinition = (Universalconnectormanagerv3DatasourceDefinition) o;
    return Objects.equals(this.datasourceFilter, universalconnectormanagerv3DatasourceDefinition.datasourceFilter) &&
        Objects.equals(this.datasourceId, universalconnectormanagerv3DatasourceDefinition.datasourceId) &&
        Objects.equals(this.datasourceInput, universalconnectormanagerv3DatasourceDefinition.datasourceInput) &&
        Objects.equals(this.datasourceName, universalconnectormanagerv3DatasourceDefinition.datasourceName) &&
        Objects.equals(this.ownerUserId, universalconnectormanagerv3DatasourceDefinition.ownerUserId) &&
        Objects.equals(this.updateTime, universalconnectormanagerv3DatasourceDefinition.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(datasourceFilter, datasourceId, datasourceInput, datasourceName, ownerUserId, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Universalconnectormanagerv3DatasourceDefinition {\n");
    sb.append("    datasourceFilter: ").append(toIndentedString(datasourceFilter)).append("\n");
    sb.append("    datasourceId: ").append(toIndentedString(datasourceId)).append("\n");
    sb.append("    datasourceInput: ").append(toIndentedString(datasourceInput)).append("\n");
    sb.append("    datasourceName: ").append(toIndentedString(datasourceName)).append("\n");
    sb.append("    ownerUserId: ").append(toIndentedString(ownerUserId)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("datasource_filter");
    openapiFields.add("datasource_id");
    openapiFields.add("datasource_input");
    openapiFields.add("datasource_name");
    openapiFields.add("owner_user_id");
    openapiFields.add("update_time");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Universalconnectormanagerv3DatasourceDefinition
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Universalconnectormanagerv3DatasourceDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Universalconnectormanagerv3DatasourceDefinition is not found in the empty JSON string", Universalconnectormanagerv3DatasourceDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Universalconnectormanagerv3DatasourceDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Universalconnectormanagerv3DatasourceDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("datasource_filter") != null && !jsonObj.get("datasource_filter").isJsonNull()) && !jsonObj.get("datasource_filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datasource_filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datasource_filter").toString()));
      }
      if ((jsonObj.get("datasource_id") != null && !jsonObj.get("datasource_id").isJsonNull()) && !jsonObj.get("datasource_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datasource_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datasource_id").toString()));
      }
      if ((jsonObj.get("datasource_input") != null && !jsonObj.get("datasource_input").isJsonNull()) && !jsonObj.get("datasource_input").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datasource_input` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datasource_input").toString()));
      }
      if ((jsonObj.get("datasource_name") != null && !jsonObj.get("datasource_name").isJsonNull()) && !jsonObj.get("datasource_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datasource_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datasource_name").toString()));
      }
      if ((jsonObj.get("owner_user_id") != null && !jsonObj.get("owner_user_id").isJsonNull()) && !jsonObj.get("owner_user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner_user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner_user_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Universalconnectormanagerv3DatasourceDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Universalconnectormanagerv3DatasourceDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Universalconnectormanagerv3DatasourceDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Universalconnectormanagerv3DatasourceDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<Universalconnectormanagerv3DatasourceDefinition>() {
           @Override
           public void write(JsonWriter out, Universalconnectormanagerv3DatasourceDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Universalconnectormanagerv3DatasourceDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Universalconnectormanagerv3DatasourceDefinition given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Universalconnectormanagerv3DatasourceDefinition
  * @throws IOException if the JSON string is invalid with respect to Universalconnectormanagerv3DatasourceDefinition
  */
  public static Universalconnectormanagerv3DatasourceDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Universalconnectormanagerv3DatasourceDefinition.class);
  }

 /**
  * Convert an instance of Universalconnectormanagerv3DatasourceDefinition to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

