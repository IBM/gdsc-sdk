/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CloudAccountDetails;
import org.openapitools.client.model.CloudServiceProvider;
import org.openapitools.client.model.SensitivitySummary;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * VendorSummary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-31T19:36:57.870742Z[UTC]", comments = "Generator version: 7.6.0")
public class VendorSummary {
  public static final String SERIALIZED_NAME_CUSTOMER_ACCOUNT_DETAILS = "customerAccountDetails";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ACCOUNT_DETAILS)
  private CloudAccountDetails customerAccountDetails;

  public static final String SERIALIZED_NAME_SENSITIVITIES_SUMMARY = "sensitivitiesSummary";
  @SerializedName(SERIALIZED_NAME_SENSITIVITIES_SUMMARY)
  private List<SensitivitySummary> sensitivitiesSummary = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLOUD_PROVIDER = "cloudProvider";
  @SerializedName(SERIALIZED_NAME_CLOUD_PROVIDER)
  private CloudServiceProvider cloudProvider;

  public VendorSummary() {
  }

  public VendorSummary customerAccountDetails(CloudAccountDetails customerAccountDetails) {
    this.customerAccountDetails = customerAccountDetails;
    return this;
  }

   /**
   * Get customerAccountDetails
   * @return customerAccountDetails
  **/
  @javax.annotation.Nonnull
  public CloudAccountDetails getCustomerAccountDetails() {
    return customerAccountDetails;
  }

  public void setCustomerAccountDetails(CloudAccountDetails customerAccountDetails) {
    this.customerAccountDetails = customerAccountDetails;
  }


  public VendorSummary sensitivitiesSummary(List<SensitivitySummary> sensitivitiesSummary) {
    this.sensitivitiesSummary = sensitivitiesSummary;
    return this;
  }

  public VendorSummary addSensitivitiesSummaryItem(SensitivitySummary sensitivitiesSummaryItem) {
    if (this.sensitivitiesSummary == null) {
      this.sensitivitiesSummary = new ArrayList<>();
    }
    this.sensitivitiesSummary.add(sensitivitiesSummaryItem);
    return this;
  }

   /**
   * Get sensitivitiesSummary
   * @return sensitivitiesSummary
  **/
  @javax.annotation.Nonnull
  public List<SensitivitySummary> getSensitivitiesSummary() {
    return sensitivitiesSummary;
  }

  public void setSensitivitiesSummary(List<SensitivitySummary> sensitivitiesSummary) {
    this.sensitivitiesSummary = sensitivitiesSummary;
  }


  public VendorSummary cloudProvider(CloudServiceProvider cloudProvider) {
    this.cloudProvider = cloudProvider;
    return this;
  }

   /**
   * Get cloudProvider
   * @return cloudProvider
  **/
  @javax.annotation.Nonnull
  public CloudServiceProvider getCloudProvider() {
    return cloudProvider;
  }

  public void setCloudProvider(CloudServiceProvider cloudProvider) {
    this.cloudProvider = cloudProvider;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VendorSummary vendorSummary = (VendorSummary) o;
    return Objects.equals(this.customerAccountDetails, vendorSummary.customerAccountDetails) &&
        Objects.equals(this.sensitivitiesSummary, vendorSummary.sensitivitiesSummary) &&
        Objects.equals(this.cloudProvider, vendorSummary.cloudProvider);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customerAccountDetails, sensitivitiesSummary, cloudProvider);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VendorSummary {\n");
    sb.append("    customerAccountDetails: ").append(toIndentedString(customerAccountDetails)).append("\n");
    sb.append("    sensitivitiesSummary: ").append(toIndentedString(sensitivitiesSummary)).append("\n");
    sb.append("    cloudProvider: ").append(toIndentedString(cloudProvider)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customerAccountDetails");
    openapiFields.add("sensitivitiesSummary");
    openapiFields.add("cloudProvider");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("customerAccountDetails");
    openapiRequiredFields.add("sensitivitiesSummary");
    openapiRequiredFields.add("cloudProvider");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to VendorSummary
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VendorSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VendorSummary is not found in the empty JSON string", VendorSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VendorSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VendorSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VendorSummary.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `customerAccountDetails`
      CloudAccountDetails.validateJsonElement(jsonObj.get("customerAccountDetails"));
      // ensure the json data is an array
      if (!jsonObj.get("sensitivitiesSummary").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sensitivitiesSummary` to be an array in the JSON string but got `%s`", jsonObj.get("sensitivitiesSummary").toString()));
      }

      JsonArray jsonArraysensitivitiesSummary = jsonObj.getAsJsonArray("sensitivitiesSummary");
      // validate the required field `sensitivitiesSummary` (array)
      for (int i = 0; i < jsonArraysensitivitiesSummary.size(); i++) {
        SensitivitySummary.validateJsonElement(jsonArraysensitivitiesSummary.get(i));
      };
      // validate the required field `cloudProvider`
      CloudServiceProvider.validateJsonElement(jsonObj.get("cloudProvider"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VendorSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VendorSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VendorSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VendorSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<VendorSummary>() {
           @Override
           public void write(JsonWriter out, VendorSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VendorSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VendorSummary given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VendorSummary
  * @throws IOException if the JSON string is invalid with respect to VendorSummary
  */
  public static VendorSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VendorSummary.class);
  }

 /**
  * Convert an instance of VendorSummary to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

