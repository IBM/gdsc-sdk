/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Reportsv3FieldName;
import org.openapitools.client.model.Reportsv3HeaderDescription;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DisplayHeader that have the header name and the translated value.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-31T19:36:57.870742Z[UTC]", comments = "Generator version: 7.6.0")
public class Reportsv3DisplayHeader {
  public static final String SERIALIZED_NAME_FIELD_NAME = "field_name";
  @SerializedName(SERIALIZED_NAME_FIELD_NAME)
  private Reportsv3FieldName fieldName;

  public static final String SERIALIZED_NAME_HEADER_DESCRIPTION = "header_description";
  @SerializedName(SERIALIZED_NAME_HEADER_DESCRIPTION)
  private Reportsv3HeaderDescription headerDescription;

  public static final String SERIALIZED_NAME_HEADER_ID = "header_id";
  @SerializedName(SERIALIZED_NAME_HEADER_ID)
  private String headerId;

  public static final String SERIALIZED_NAME_HEADER_NAME = "header_name";
  @SerializedName(SERIALIZED_NAME_HEADER_NAME)
  private String headerName;

  public static final String SERIALIZED_NAME_SEQUENCE = "sequence";
  @SerializedName(SERIALIZED_NAME_SEQUENCE)
  private Integer sequence;

  public static final String SERIALIZED_NAME_TABLE_NAME = "table_name";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  private String tableName;

  public Reportsv3DisplayHeader() {
  }

  public Reportsv3DisplayHeader fieldName(Reportsv3FieldName fieldName) {
    this.fieldName = fieldName;
    return this;
  }

   /**
   * Get fieldName
   * @return fieldName
  **/
  @javax.annotation.Nullable
  public Reportsv3FieldName getFieldName() {
    return fieldName;
  }

  public void setFieldName(Reportsv3FieldName fieldName) {
    this.fieldName = fieldName;
  }


  public Reportsv3DisplayHeader headerDescription(Reportsv3HeaderDescription headerDescription) {
    this.headerDescription = headerDescription;
    return this;
  }

   /**
   * Get headerDescription
   * @return headerDescription
  **/
  @javax.annotation.Nullable
  public Reportsv3HeaderDescription getHeaderDescription() {
    return headerDescription;
  }

  public void setHeaderDescription(Reportsv3HeaderDescription headerDescription) {
    this.headerDescription = headerDescription;
  }


  public Reportsv3DisplayHeader headerId(String headerId) {
    this.headerId = headerId;
    return this;
  }

   /**
   * The header ID.
   * @return headerId
  **/
  @javax.annotation.Nullable
  public String getHeaderId() {
    return headerId;
  }

  public void setHeaderId(String headerId) {
    this.headerId = headerId;
  }


  public Reportsv3DisplayHeader headerName(String headerName) {
    this.headerName = headerName;
    return this;
  }

   /**
   * The header name.
   * @return headerName
  **/
  @javax.annotation.Nullable
  public String getHeaderName() {
    return headerName;
  }

  public void setHeaderName(String headerName) {
    this.headerName = headerName;
  }


  public Reportsv3DisplayHeader sequence(Integer sequence) {
    this.sequence = sequence;
    return this;
  }

   /**
   * Sequence of the corresponding header.
   * @return sequence
  **/
  @javax.annotation.Nullable
  public Integer getSequence() {
    return sequence;
  }

  public void setSequence(Integer sequence) {
    this.sequence = sequence;
  }


  public Reportsv3DisplayHeader tableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

   /**
   * Table name.
   * @return tableName
  **/
  @javax.annotation.Nullable
  public String getTableName() {
    return tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Reportsv3DisplayHeader reportsv3DisplayHeader = (Reportsv3DisplayHeader) o;
    return Objects.equals(this.fieldName, reportsv3DisplayHeader.fieldName) &&
        Objects.equals(this.headerDescription, reportsv3DisplayHeader.headerDescription) &&
        Objects.equals(this.headerId, reportsv3DisplayHeader.headerId) &&
        Objects.equals(this.headerName, reportsv3DisplayHeader.headerName) &&
        Objects.equals(this.sequence, reportsv3DisplayHeader.sequence) &&
        Objects.equals(this.tableName, reportsv3DisplayHeader.tableName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fieldName, headerDescription, headerId, headerName, sequence, tableName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Reportsv3DisplayHeader {\n");
    sb.append("    fieldName: ").append(toIndentedString(fieldName)).append("\n");
    sb.append("    headerDescription: ").append(toIndentedString(headerDescription)).append("\n");
    sb.append("    headerId: ").append(toIndentedString(headerId)).append("\n");
    sb.append("    headerName: ").append(toIndentedString(headerName)).append("\n");
    sb.append("    sequence: ").append(toIndentedString(sequence)).append("\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("field_name");
    openapiFields.add("header_description");
    openapiFields.add("header_id");
    openapiFields.add("header_name");
    openapiFields.add("sequence");
    openapiFields.add("table_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Reportsv3DisplayHeader
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Reportsv3DisplayHeader.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Reportsv3DisplayHeader is not found in the empty JSON string", Reportsv3DisplayHeader.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Reportsv3DisplayHeader.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Reportsv3DisplayHeader` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `field_name`
      if (jsonObj.get("field_name") != null && !jsonObj.get("field_name").isJsonNull()) {
        Reportsv3FieldName.validateJsonElement(jsonObj.get("field_name"));
      }
      // validate the optional field `header_description`
      if (jsonObj.get("header_description") != null && !jsonObj.get("header_description").isJsonNull()) {
        Reportsv3HeaderDescription.validateJsonElement(jsonObj.get("header_description"));
      }
      if ((jsonObj.get("header_id") != null && !jsonObj.get("header_id").isJsonNull()) && !jsonObj.get("header_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `header_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("header_id").toString()));
      }
      if ((jsonObj.get("header_name") != null && !jsonObj.get("header_name").isJsonNull()) && !jsonObj.get("header_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `header_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("header_name").toString()));
      }
      if ((jsonObj.get("table_name") != null && !jsonObj.get("table_name").isJsonNull()) && !jsonObj.get("table_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `table_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("table_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Reportsv3DisplayHeader.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Reportsv3DisplayHeader' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Reportsv3DisplayHeader> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Reportsv3DisplayHeader.class));

       return (TypeAdapter<T>) new TypeAdapter<Reportsv3DisplayHeader>() {
           @Override
           public void write(JsonWriter out, Reportsv3DisplayHeader value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Reportsv3DisplayHeader read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Reportsv3DisplayHeader given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Reportsv3DisplayHeader
  * @throws IOException if the JSON string is invalid with respect to Reportsv3DisplayHeader
  */
  public static Reportsv3DisplayHeader fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Reportsv3DisplayHeader.class);
  }

 /**
  * Convert an instance of Reportsv3DisplayHeader to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

