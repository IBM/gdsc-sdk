/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Reportsv3ChartDisplayLayout;
import org.openapitools.client.model.Reportsv3ModelType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetChartQueryResponse is the return type of the GetQueryByChartID() api and GetQueryByReportChartSettings() api.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-31T19:36:57.870742Z[UTC]", comments = "Generator version: 7.6.0")
public class Reportsv3GetChartQueryResponse {
  public static final String SERIALIZED_NAME_CHART_LAYOUT = "chart_layout";
  @SerializedName(SERIALIZED_NAME_CHART_LAYOUT)
  private Reportsv3ChartDisplayLayout chartLayout;

  public static final String SERIALIZED_NAME_MODEL_TYPE = "model_type";
  @SerializedName(SERIALIZED_NAME_MODEL_TYPE)
  private Reportsv3ModelType modelType = Reportsv3ModelType.UNDEFINED_MODEL_TYPE;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  private String query;

  public Reportsv3GetChartQueryResponse() {
  }

  public Reportsv3GetChartQueryResponse chartLayout(Reportsv3ChartDisplayLayout chartLayout) {
    this.chartLayout = chartLayout;
    return this;
  }

   /**
   * Get chartLayout
   * @return chartLayout
  **/
  @javax.annotation.Nullable
  public Reportsv3ChartDisplayLayout getChartLayout() {
    return chartLayout;
  }

  public void setChartLayout(Reportsv3ChartDisplayLayout chartLayout) {
    this.chartLayout = chartLayout;
  }


  public Reportsv3GetChartQueryResponse modelType(Reportsv3ModelType modelType) {
    this.modelType = modelType;
    return this;
  }

   /**
   * Get modelType
   * @return modelType
  **/
  @javax.annotation.Nullable
  public Reportsv3ModelType getModelType() {
    return modelType;
  }

  public void setModelType(Reportsv3ModelType modelType) {
    this.modelType = modelType;
  }


  public Reportsv3GetChartQueryResponse query(String query) {
    this.query = query;
    return this;
  }

   /**
   * The chart&#39;s query.
   * @return query
  **/
  @javax.annotation.Nullable
  public String getQuery() {
    return query;
  }

  public void setQuery(String query) {
    this.query = query;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Reportsv3GetChartQueryResponse reportsv3GetChartQueryResponse = (Reportsv3GetChartQueryResponse) o;
    return Objects.equals(this.chartLayout, reportsv3GetChartQueryResponse.chartLayout) &&
        Objects.equals(this.modelType, reportsv3GetChartQueryResponse.modelType) &&
        Objects.equals(this.query, reportsv3GetChartQueryResponse.query);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chartLayout, modelType, query);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Reportsv3GetChartQueryResponse {\n");
    sb.append("    chartLayout: ").append(toIndentedString(chartLayout)).append("\n");
    sb.append("    modelType: ").append(toIndentedString(modelType)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chart_layout");
    openapiFields.add("model_type");
    openapiFields.add("query");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Reportsv3GetChartQueryResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Reportsv3GetChartQueryResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Reportsv3GetChartQueryResponse is not found in the empty JSON string", Reportsv3GetChartQueryResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Reportsv3GetChartQueryResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Reportsv3GetChartQueryResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `chart_layout`
      if (jsonObj.get("chart_layout") != null && !jsonObj.get("chart_layout").isJsonNull()) {
        Reportsv3ChartDisplayLayout.validateJsonElement(jsonObj.get("chart_layout"));
      }
      // validate the optional field `model_type`
      if (jsonObj.get("model_type") != null && !jsonObj.get("model_type").isJsonNull()) {
        Reportsv3ModelType.validateJsonElement(jsonObj.get("model_type"));
      }
      if ((jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) && !jsonObj.get("query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Reportsv3GetChartQueryResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Reportsv3GetChartQueryResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Reportsv3GetChartQueryResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Reportsv3GetChartQueryResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<Reportsv3GetChartQueryResponse>() {
           @Override
           public void write(JsonWriter out, Reportsv3GetChartQueryResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Reportsv3GetChartQueryResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Reportsv3GetChartQueryResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Reportsv3GetChartQueryResponse
  * @throws IOException if the JSON string is invalid with respect to Reportsv3GetChartQueryResponse
  */
  public static Reportsv3GetChartQueryResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Reportsv3GetChartQueryResponse.class);
  }

 /**
  * Convert an instance of Reportsv3GetChartQueryResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

