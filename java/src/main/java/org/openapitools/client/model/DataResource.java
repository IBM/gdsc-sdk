/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.DataResourceStats;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DataResource
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-31T19:36:57.870742Z[UTC]", comments = "Generator version: 7.6.0")
public class DataResource {
  public static final String SERIALIZED_NAME_DATA_RESOURCE_ID = "dataResourceId";
  @SerializedName(SERIALIZED_NAME_DATA_RESOURCE_ID)
  private String dataResourceId;

  public static final String SERIALIZED_NAME_DATA_RESOURCE_NAME = "dataResourceName";
  @SerializedName(SERIALIZED_NAME_DATA_RESOURCE_NAME)
  private String dataResourceName;

  public static final String SERIALIZED_NAME_DATA_STORE_ID = "dataStoreId";
  @SerializedName(SERIALIZED_NAME_DATA_STORE_ID)
  private String dataStoreId;

  public static final String SERIALIZED_NAME_DATA_RESOURCE_TYPE = "dataResourceType";
  @SerializedName(SERIALIZED_NAME_DATA_RESOURCE_TYPE)
  private String dataResourceType;

  public static final String SERIALIZED_NAME_DATA_RESOURCE_OWNER = "dataResourceOwner";
  @SerializedName(SERIALIZED_NAME_DATA_RESOURCE_OWNER)
  private String dataResourceOwner;

  public static final String SERIALIZED_NAME_SIZE_IN_BYTES = "sizeInBytes";
  @SerializedName(SERIALIZED_NAME_SIZE_IN_BYTES)
  private BigDecimal sizeInBytes;

  public static final String SERIALIZED_NAME_SIZE_FORMATTED = "sizeFormatted";
  @SerializedName(SERIALIZED_NAME_SIZE_FORMATTED)
  private String sizeFormatted;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private String creationTime;

  public static final String SERIALIZED_NAME_MODIFICATION_TIME = "modificationTime";
  @SerializedName(SERIALIZED_NAME_MODIFICATION_TIME)
  private String modificationTime;

  public static final String SERIALIZED_NAME_IS_REVIEWED = "isReviewed";
  @SerializedName(SERIALIZED_NAME_IS_REVIEWED)
  private Boolean isReviewed;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_STATS = "stats";
  @SerializedName(SERIALIZED_NAME_STATS)
  private DataResourceStats stats;

  public DataResource() {
  }

  public DataResource dataResourceId(String dataResourceId) {
    this.dataResourceId = dataResourceId;
    return this;
  }

   /**
   * Get dataResourceId
   * @return dataResourceId
  **/
  @javax.annotation.Nonnull
  public String getDataResourceId() {
    return dataResourceId;
  }

  public void setDataResourceId(String dataResourceId) {
    this.dataResourceId = dataResourceId;
  }


  public DataResource dataResourceName(String dataResourceName) {
    this.dataResourceName = dataResourceName;
    return this;
  }

   /**
   * Get dataResourceName
   * @return dataResourceName
  **/
  @javax.annotation.Nonnull
  public String getDataResourceName() {
    return dataResourceName;
  }

  public void setDataResourceName(String dataResourceName) {
    this.dataResourceName = dataResourceName;
  }


  public DataResource dataStoreId(String dataStoreId) {
    this.dataStoreId = dataStoreId;
    return this;
  }

   /**
   * Get dataStoreId
   * @return dataStoreId
  **/
  @javax.annotation.Nonnull
  public String getDataStoreId() {
    return dataStoreId;
  }

  public void setDataStoreId(String dataStoreId) {
    this.dataStoreId = dataStoreId;
  }


  public DataResource dataResourceType(String dataResourceType) {
    this.dataResourceType = dataResourceType;
    return this;
  }

   /**
   * Get dataResourceType
   * @return dataResourceType
  **/
  @javax.annotation.Nonnull
  public String getDataResourceType() {
    return dataResourceType;
  }

  public void setDataResourceType(String dataResourceType) {
    this.dataResourceType = dataResourceType;
  }


  public DataResource dataResourceOwner(String dataResourceOwner) {
    this.dataResourceOwner = dataResourceOwner;
    return this;
  }

   /**
   * Get dataResourceOwner
   * @return dataResourceOwner
  **/
  @javax.annotation.Nullable
  public String getDataResourceOwner() {
    return dataResourceOwner;
  }

  public void setDataResourceOwner(String dataResourceOwner) {
    this.dataResourceOwner = dataResourceOwner;
  }


  public DataResource sizeInBytes(BigDecimal sizeInBytes) {
    this.sizeInBytes = sizeInBytes;
    return this;
  }

   /**
   * Get sizeInBytes
   * @return sizeInBytes
  **/
  @javax.annotation.Nullable
  public BigDecimal getSizeInBytes() {
    return sizeInBytes;
  }

  public void setSizeInBytes(BigDecimal sizeInBytes) {
    this.sizeInBytes = sizeInBytes;
  }


  public DataResource sizeFormatted(String sizeFormatted) {
    this.sizeFormatted = sizeFormatted;
    return this;
  }

   /**
   * Get sizeFormatted
   * @return sizeFormatted
  **/
  @javax.annotation.Nullable
  public String getSizeFormatted() {
    return sizeFormatted;
  }

  public void setSizeFormatted(String sizeFormatted) {
    this.sizeFormatted = sizeFormatted;
  }


  public DataResource creationTime(String creationTime) {
    this.creationTime = creationTime;
    return this;
  }

   /**
   * Get creationTime
   * @return creationTime
  **/
  @javax.annotation.Nullable
  public String getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(String creationTime) {
    this.creationTime = creationTime;
  }


  public DataResource modificationTime(String modificationTime) {
    this.modificationTime = modificationTime;
    return this;
  }

   /**
   * Get modificationTime
   * @return modificationTime
  **/
  @javax.annotation.Nullable
  public String getModificationTime() {
    return modificationTime;
  }

  public void setModificationTime(String modificationTime) {
    this.modificationTime = modificationTime;
  }


  public DataResource isReviewed(Boolean isReviewed) {
    this.isReviewed = isReviewed;
    return this;
  }

   /**
   * Get isReviewed
   * @return isReviewed
  **/
  @javax.annotation.Nullable
  public Boolean getIsReviewed() {
    return isReviewed;
  }

  public void setIsReviewed(Boolean isReviewed) {
    this.isReviewed = isReviewed;
  }


  public DataResource link(String link) {
    this.link = link;
    return this;
  }

   /**
   * Get link
   * @return link
  **/
  @javax.annotation.Nullable
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public DataResource stats(DataResourceStats stats) {
    this.stats = stats;
    return this;
  }

   /**
   * Get stats
   * @return stats
  **/
  @javax.annotation.Nullable
  public DataResourceStats getStats() {
    return stats;
  }

  public void setStats(DataResourceStats stats) {
    this.stats = stats;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataResource dataResource = (DataResource) o;
    return Objects.equals(this.dataResourceId, dataResource.dataResourceId) &&
        Objects.equals(this.dataResourceName, dataResource.dataResourceName) &&
        Objects.equals(this.dataStoreId, dataResource.dataStoreId) &&
        Objects.equals(this.dataResourceType, dataResource.dataResourceType) &&
        Objects.equals(this.dataResourceOwner, dataResource.dataResourceOwner) &&
        Objects.equals(this.sizeInBytes, dataResource.sizeInBytes) &&
        Objects.equals(this.sizeFormatted, dataResource.sizeFormatted) &&
        Objects.equals(this.creationTime, dataResource.creationTime) &&
        Objects.equals(this.modificationTime, dataResource.modificationTime) &&
        Objects.equals(this.isReviewed, dataResource.isReviewed) &&
        Objects.equals(this.link, dataResource.link) &&
        Objects.equals(this.stats, dataResource.stats);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataResourceId, dataResourceName, dataStoreId, dataResourceType, dataResourceOwner, sizeInBytes, sizeFormatted, creationTime, modificationTime, isReviewed, link, stats);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataResource {\n");
    sb.append("    dataResourceId: ").append(toIndentedString(dataResourceId)).append("\n");
    sb.append("    dataResourceName: ").append(toIndentedString(dataResourceName)).append("\n");
    sb.append("    dataStoreId: ").append(toIndentedString(dataStoreId)).append("\n");
    sb.append("    dataResourceType: ").append(toIndentedString(dataResourceType)).append("\n");
    sb.append("    dataResourceOwner: ").append(toIndentedString(dataResourceOwner)).append("\n");
    sb.append("    sizeInBytes: ").append(toIndentedString(sizeInBytes)).append("\n");
    sb.append("    sizeFormatted: ").append(toIndentedString(sizeFormatted)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    modificationTime: ").append(toIndentedString(modificationTime)).append("\n");
    sb.append("    isReviewed: ").append(toIndentedString(isReviewed)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    stats: ").append(toIndentedString(stats)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataResourceId");
    openapiFields.add("dataResourceName");
    openapiFields.add("dataStoreId");
    openapiFields.add("dataResourceType");
    openapiFields.add("dataResourceOwner");
    openapiFields.add("sizeInBytes");
    openapiFields.add("sizeFormatted");
    openapiFields.add("creationTime");
    openapiFields.add("modificationTime");
    openapiFields.add("isReviewed");
    openapiFields.add("link");
    openapiFields.add("stats");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dataResourceId");
    openapiRequiredFields.add("dataResourceName");
    openapiRequiredFields.add("dataStoreId");
    openapiRequiredFields.add("dataResourceType");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DataResource
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataResource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataResource is not found in the empty JSON string", DataResource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataResource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataResource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DataResource.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("dataResourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataResourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataResourceId").toString()));
      }
      if (!jsonObj.get("dataResourceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataResourceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataResourceName").toString()));
      }
      if (!jsonObj.get("dataStoreId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataStoreId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataStoreId").toString()));
      }
      if (!jsonObj.get("dataResourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataResourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataResourceType").toString()));
      }
      if ((jsonObj.get("dataResourceOwner") != null && !jsonObj.get("dataResourceOwner").isJsonNull()) && !jsonObj.get("dataResourceOwner").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataResourceOwner` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataResourceOwner").toString()));
      }
      if ((jsonObj.get("sizeFormatted") != null && !jsonObj.get("sizeFormatted").isJsonNull()) && !jsonObj.get("sizeFormatted").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sizeFormatted` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sizeFormatted").toString()));
      }
      if ((jsonObj.get("creationTime") != null && !jsonObj.get("creationTime").isJsonNull()) && !jsonObj.get("creationTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationTime").toString()));
      }
      if ((jsonObj.get("modificationTime") != null && !jsonObj.get("modificationTime").isJsonNull()) && !jsonObj.get("modificationTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modificationTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modificationTime").toString()));
      }
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      // validate the optional field `stats`
      if (jsonObj.get("stats") != null && !jsonObj.get("stats").isJsonNull()) {
        DataResourceStats.validateJsonElement(jsonObj.get("stats"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataResource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataResource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataResource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataResource.class));

       return (TypeAdapter<T>) new TypeAdapter<DataResource>() {
           @Override
           public void write(JsonWriter out, DataResource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataResource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DataResource given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DataResource
  * @throws IOException if the JSON string is invalid with respect to DataResource
  */
  public static DataResource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataResource.class);
  }

 /**
  * Convert an instance of DataResource to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

