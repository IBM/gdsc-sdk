/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Reportsv3ChartSettings;
import org.openapitools.client.model.Reportsv3ReportDefinition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UpdateReportRequest is the argument type used to update a report using the UpdateReport() api.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-31T19:36:57.870742Z[UTC]", comments = "Generator version: 7.6.0")
public class Reportsv3UpdateReportRequest {
  public static final String SERIALIZED_NAME_CHART_SETTINGS = "chart_settings";
  @SerializedName(SERIALIZED_NAME_CHART_SETTINGS)
  private Reportsv3ChartSettings chartSettings;

  public static final String SERIALIZED_NAME_REPORT_DEFINITION = "report_definition";
  @SerializedName(SERIALIZED_NAME_REPORT_DEFINITION)
  private Reportsv3ReportDefinition reportDefinition;

  public static final String SERIALIZED_NAME_REPORT_ID = "report_id";
  @SerializedName(SERIALIZED_NAME_REPORT_ID)
  private String reportId;

  public Reportsv3UpdateReportRequest() {
  }

  public Reportsv3UpdateReportRequest chartSettings(Reportsv3ChartSettings chartSettings) {
    this.chartSettings = chartSettings;
    return this;
  }

   /**
   * Get chartSettings
   * @return chartSettings
  **/
  @javax.annotation.Nullable
  public Reportsv3ChartSettings getChartSettings() {
    return chartSettings;
  }

  public void setChartSettings(Reportsv3ChartSettings chartSettings) {
    this.chartSettings = chartSettings;
  }


  public Reportsv3UpdateReportRequest reportDefinition(Reportsv3ReportDefinition reportDefinition) {
    this.reportDefinition = reportDefinition;
    return this;
  }

   /**
   * Get reportDefinition
   * @return reportDefinition
  **/
  @javax.annotation.Nullable
  public Reportsv3ReportDefinition getReportDefinition() {
    return reportDefinition;
  }

  public void setReportDefinition(Reportsv3ReportDefinition reportDefinition) {
    this.reportDefinition = reportDefinition;
  }


  public Reportsv3UpdateReportRequest reportId(String reportId) {
    this.reportId = reportId;
    return this;
  }

   /**
   * Unique Report ID.
   * @return reportId
  **/
  @javax.annotation.Nullable
  public String getReportId() {
    return reportId;
  }

  public void setReportId(String reportId) {
    this.reportId = reportId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Reportsv3UpdateReportRequest reportsv3UpdateReportRequest = (Reportsv3UpdateReportRequest) o;
    return Objects.equals(this.chartSettings, reportsv3UpdateReportRequest.chartSettings) &&
        Objects.equals(this.reportDefinition, reportsv3UpdateReportRequest.reportDefinition) &&
        Objects.equals(this.reportId, reportsv3UpdateReportRequest.reportId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chartSettings, reportDefinition, reportId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Reportsv3UpdateReportRequest {\n");
    sb.append("    chartSettings: ").append(toIndentedString(chartSettings)).append("\n");
    sb.append("    reportDefinition: ").append(toIndentedString(reportDefinition)).append("\n");
    sb.append("    reportId: ").append(toIndentedString(reportId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("chart_settings");
    openapiFields.add("report_definition");
    openapiFields.add("report_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Reportsv3UpdateReportRequest
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Reportsv3UpdateReportRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Reportsv3UpdateReportRequest is not found in the empty JSON string", Reportsv3UpdateReportRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Reportsv3UpdateReportRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Reportsv3UpdateReportRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `chart_settings`
      if (jsonObj.get("chart_settings") != null && !jsonObj.get("chart_settings").isJsonNull()) {
        Reportsv3ChartSettings.validateJsonElement(jsonObj.get("chart_settings"));
      }
      // validate the optional field `report_definition`
      if (jsonObj.get("report_definition") != null && !jsonObj.get("report_definition").isJsonNull()) {
        Reportsv3ReportDefinition.validateJsonElement(jsonObj.get("report_definition"));
      }
      if ((jsonObj.get("report_id") != null && !jsonObj.get("report_id").isJsonNull()) && !jsonObj.get("report_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `report_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("report_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Reportsv3UpdateReportRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Reportsv3UpdateReportRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Reportsv3UpdateReportRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Reportsv3UpdateReportRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<Reportsv3UpdateReportRequest>() {
           @Override
           public void write(JsonWriter out, Reportsv3UpdateReportRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Reportsv3UpdateReportRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Reportsv3UpdateReportRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Reportsv3UpdateReportRequest
  * @throws IOException if the JSON string is invalid with respect to Reportsv3UpdateReportRequest
  */
  public static Reportsv3UpdateReportRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Reportsv3UpdateReportRequest.class);
  }

 /**
  * Convert an instance of Reportsv3UpdateReportRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

