/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Assetsv3TagCategoriesData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-31T19:36:57.870742Z[UTC]", comments = "Generator version: 7.6.0")
public class Assetsv3TagCategoriesData {
  public static final String SERIALIZED_NAME_TAG_CATEGORY_ID = "tag_category_id";
  @SerializedName(SERIALIZED_NAME_TAG_CATEGORY_ID)
  private String tagCategoryId;

  public static final String SERIALIZED_NAME_TAG_CATEGORY_NAME = "tag_category_name";
  @SerializedName(SERIALIZED_NAME_TAG_CATEGORY_NAME)
  private String tagCategoryName;

  public Assetsv3TagCategoriesData() {
  }

  public Assetsv3TagCategoriesData tagCategoryId(String tagCategoryId) {
    this.tagCategoryId = tagCategoryId;
    return this;
  }

   /**
   * Get tagCategoryId
   * @return tagCategoryId
  **/
  @javax.annotation.Nullable
  public String getTagCategoryId() {
    return tagCategoryId;
  }

  public void setTagCategoryId(String tagCategoryId) {
    this.tagCategoryId = tagCategoryId;
  }


  public Assetsv3TagCategoriesData tagCategoryName(String tagCategoryName) {
    this.tagCategoryName = tagCategoryName;
    return this;
  }

   /**
   * Get tagCategoryName
   * @return tagCategoryName
  **/
  @javax.annotation.Nullable
  public String getTagCategoryName() {
    return tagCategoryName;
  }

  public void setTagCategoryName(String tagCategoryName) {
    this.tagCategoryName = tagCategoryName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Assetsv3TagCategoriesData assetsv3TagCategoriesData = (Assetsv3TagCategoriesData) o;
    return Objects.equals(this.tagCategoryId, assetsv3TagCategoriesData.tagCategoryId) &&
        Objects.equals(this.tagCategoryName, assetsv3TagCategoriesData.tagCategoryName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tagCategoryId, tagCategoryName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Assetsv3TagCategoriesData {\n");
    sb.append("    tagCategoryId: ").append(toIndentedString(tagCategoryId)).append("\n");
    sb.append("    tagCategoryName: ").append(toIndentedString(tagCategoryName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tag_category_id");
    openapiFields.add("tag_category_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Assetsv3TagCategoriesData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Assetsv3TagCategoriesData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Assetsv3TagCategoriesData is not found in the empty JSON string", Assetsv3TagCategoriesData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Assetsv3TagCategoriesData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Assetsv3TagCategoriesData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("tag_category_id") != null && !jsonObj.get("tag_category_id").isJsonNull()) && !jsonObj.get("tag_category_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag_category_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag_category_id").toString()));
      }
      if ((jsonObj.get("tag_category_name") != null && !jsonObj.get("tag_category_name").isJsonNull()) && !jsonObj.get("tag_category_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag_category_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag_category_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Assetsv3TagCategoriesData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Assetsv3TagCategoriesData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Assetsv3TagCategoriesData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Assetsv3TagCategoriesData.class));

       return (TypeAdapter<T>) new TypeAdapter<Assetsv3TagCategoriesData>() {
           @Override
           public void write(JsonWriter out, Assetsv3TagCategoriesData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Assetsv3TagCategoriesData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Assetsv3TagCategoriesData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Assetsv3TagCategoriesData
  * @throws IOException if the JSON string is invalid with respect to Assetsv3TagCategoriesData
  */
  public static Assetsv3TagCategoriesData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Assetsv3TagCategoriesData.class);
  }

 /**
  * Convert an instance of Assetsv3TagCategoriesData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

