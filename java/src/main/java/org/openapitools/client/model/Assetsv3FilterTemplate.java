/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Assetsv3FilterCatagory;
import org.openapitools.client.model.Assetsv3TableColumn;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * FilterTemplate - Filter Template structure.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-31T19:36:57.870742Z[UTC]", comments = "Generator version: 7.6.0")
public class Assetsv3FilterTemplate {
  public static final String SERIALIZED_NAME_COLUMMNS_LIST = "colummns_list";
  @SerializedName(SERIALIZED_NAME_COLUMMNS_LIST)
  private List<Assetsv3TableColumn> colummnsList = new ArrayList<>();

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private String count;

  public static final String SERIALIZED_NAME_CREATED_BY = "created_by";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public static final String SERIALIZED_NAME_CREATED_DATE = "created_date";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private String createdDate;

  public static final String SERIALIZED_NAME_DASHBOARD_TEMPLATE = "dashboard_template";
  @SerializedName(SERIALIZED_NAME_DASHBOARD_TEMPLATE)
  private Boolean dashboardTemplate;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_SELECTED_FILTERS = "selected_filters";
  @SerializedName(SERIALIZED_NAME_SELECTED_FILTERS)
  private List<Assetsv3FilterCatagory> selectedFilters = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEMPLATE_ID = "template_id";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_ID)
  private String templateId;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UPDATED_DATE = "updated_date";
  @SerializedName(SERIALIZED_NAME_UPDATED_DATE)
  private String updatedDate;

  public Assetsv3FilterTemplate() {
  }

  public Assetsv3FilterTemplate colummnsList(List<Assetsv3TableColumn> colummnsList) {
    this.colummnsList = colummnsList;
    return this;
  }

  public Assetsv3FilterTemplate addColummnsListItem(Assetsv3TableColumn colummnsListItem) {
    if (this.colummnsList == null) {
      this.colummnsList = new ArrayList<>();
    }
    this.colummnsList.add(colummnsListItem);
    return this;
  }

   /**
   * Get colummnsList
   * @return colummnsList
  **/
  @javax.annotation.Nullable
  public List<Assetsv3TableColumn> getColummnsList() {
    return colummnsList;
  }

  public void setColummnsList(List<Assetsv3TableColumn> colummnsList) {
    this.colummnsList = colummnsList;
  }


  public Assetsv3FilterTemplate count(String count) {
    this.count = count;
    return this;
  }

   /**
   * Get count
   * @return count
  **/
  @javax.annotation.Nullable
  public String getCount() {
    return count;
  }

  public void setCount(String count) {
    this.count = count;
  }


  public Assetsv3FilterTemplate createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Get createdBy
   * @return createdBy
  **/
  @javax.annotation.Nullable
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }


  public Assetsv3FilterTemplate createdDate(String createdDate) {
    this.createdDate = createdDate;
    return this;
  }

   /**
   * Get createdDate
   * @return createdDate
  **/
  @javax.annotation.Nullable
  public String getCreatedDate() {
    return createdDate;
  }

  public void setCreatedDate(String createdDate) {
    this.createdDate = createdDate;
  }


  public Assetsv3FilterTemplate dashboardTemplate(Boolean dashboardTemplate) {
    this.dashboardTemplate = dashboardTemplate;
    return this;
  }

   /**
   * Get dashboardTemplate
   * @return dashboardTemplate
  **/
  @javax.annotation.Nullable
  public Boolean getDashboardTemplate() {
    return dashboardTemplate;
  }

  public void setDashboardTemplate(Boolean dashboardTemplate) {
    this.dashboardTemplate = dashboardTemplate;
  }


  public Assetsv3FilterTemplate description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Assetsv3FilterTemplate id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Assetsv3FilterTemplate selectedFilters(List<Assetsv3FilterCatagory> selectedFilters) {
    this.selectedFilters = selectedFilters;
    return this;
  }

  public Assetsv3FilterTemplate addSelectedFiltersItem(Assetsv3FilterCatagory selectedFiltersItem) {
    if (this.selectedFilters == null) {
      this.selectedFilters = new ArrayList<>();
    }
    this.selectedFilters.add(selectedFiltersItem);
    return this;
  }

   /**
   * Get selectedFilters
   * @return selectedFilters
  **/
  @javax.annotation.Nullable
  public List<Assetsv3FilterCatagory> getSelectedFilters() {
    return selectedFilters;
  }

  public void setSelectedFilters(List<Assetsv3FilterCatagory> selectedFilters) {
    this.selectedFilters = selectedFilters;
  }


  public Assetsv3FilterTemplate templateId(String templateId) {
    this.templateId = templateId;
    return this;
  }

   /**
   * Get templateId
   * @return templateId
  **/
  @javax.annotation.Nullable
  public String getTemplateId() {
    return templateId;
  }

  public void setTemplateId(String templateId) {
    this.templateId = templateId;
  }


  public Assetsv3FilterTemplate title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Assetsv3FilterTemplate updatedDate(String updatedDate) {
    this.updatedDate = updatedDate;
    return this;
  }

   /**
   * Get updatedDate
   * @return updatedDate
  **/
  @javax.annotation.Nullable
  public String getUpdatedDate() {
    return updatedDate;
  }

  public void setUpdatedDate(String updatedDate) {
    this.updatedDate = updatedDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Assetsv3FilterTemplate assetsv3FilterTemplate = (Assetsv3FilterTemplate) o;
    return Objects.equals(this.colummnsList, assetsv3FilterTemplate.colummnsList) &&
        Objects.equals(this.count, assetsv3FilterTemplate.count) &&
        Objects.equals(this.createdBy, assetsv3FilterTemplate.createdBy) &&
        Objects.equals(this.createdDate, assetsv3FilterTemplate.createdDate) &&
        Objects.equals(this.dashboardTemplate, assetsv3FilterTemplate.dashboardTemplate) &&
        Objects.equals(this.description, assetsv3FilterTemplate.description) &&
        Objects.equals(this.id, assetsv3FilterTemplate.id) &&
        Objects.equals(this.selectedFilters, assetsv3FilterTemplate.selectedFilters) &&
        Objects.equals(this.templateId, assetsv3FilterTemplate.templateId) &&
        Objects.equals(this.title, assetsv3FilterTemplate.title) &&
        Objects.equals(this.updatedDate, assetsv3FilterTemplate.updatedDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(colummnsList, count, createdBy, createdDate, dashboardTemplate, description, id, selectedFilters, templateId, title, updatedDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Assetsv3FilterTemplate {\n");
    sb.append("    colummnsList: ").append(toIndentedString(colummnsList)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    dashboardTemplate: ").append(toIndentedString(dashboardTemplate)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    selectedFilters: ").append(toIndentedString(selectedFilters)).append("\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    updatedDate: ").append(toIndentedString(updatedDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("colummns_list");
    openapiFields.add("count");
    openapiFields.add("created_by");
    openapiFields.add("created_date");
    openapiFields.add("dashboard_template");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("selected_filters");
    openapiFields.add("template_id");
    openapiFields.add("title");
    openapiFields.add("updated_date");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Assetsv3FilterTemplate
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Assetsv3FilterTemplate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Assetsv3FilterTemplate is not found in the empty JSON string", Assetsv3FilterTemplate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Assetsv3FilterTemplate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Assetsv3FilterTemplate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("colummns_list") != null && !jsonObj.get("colummns_list").isJsonNull()) {
        JsonArray jsonArraycolummnsList = jsonObj.getAsJsonArray("colummns_list");
        if (jsonArraycolummnsList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("colummns_list").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `colummns_list` to be an array in the JSON string but got `%s`", jsonObj.get("colummns_list").toString()));
          }

          // validate the optional field `colummns_list` (array)
          for (int i = 0; i < jsonArraycolummnsList.size(); i++) {
            Assetsv3TableColumn.validateJsonElement(jsonArraycolummnsList.get(i));
          };
        }
      }
      if ((jsonObj.get("count") != null && !jsonObj.get("count").isJsonNull()) && !jsonObj.get("count").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `count` to be a primitive type in the JSON string but got `%s`", jsonObj.get("count").toString()));
      }
      if ((jsonObj.get("created_by") != null && !jsonObj.get("created_by").isJsonNull()) && !jsonObj.get("created_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_by").toString()));
      }
      if ((jsonObj.get("created_date") != null && !jsonObj.get("created_date").isJsonNull()) && !jsonObj.get("created_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_date").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("selected_filters") != null && !jsonObj.get("selected_filters").isJsonNull()) {
        JsonArray jsonArrayselectedFilters = jsonObj.getAsJsonArray("selected_filters");
        if (jsonArrayselectedFilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("selected_filters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `selected_filters` to be an array in the JSON string but got `%s`", jsonObj.get("selected_filters").toString()));
          }

          // validate the optional field `selected_filters` (array)
          for (int i = 0; i < jsonArrayselectedFilters.size(); i++) {
            Assetsv3FilterCatagory.validateJsonElement(jsonArrayselectedFilters.get(i));
          };
        }
      }
      if ((jsonObj.get("template_id") != null && !jsonObj.get("template_id").isJsonNull()) && !jsonObj.get("template_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template_id").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("updated_date") != null && !jsonObj.get("updated_date").isJsonNull()) && !jsonObj.get("updated_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_date").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Assetsv3FilterTemplate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Assetsv3FilterTemplate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Assetsv3FilterTemplate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Assetsv3FilterTemplate.class));

       return (TypeAdapter<T>) new TypeAdapter<Assetsv3FilterTemplate>() {
           @Override
           public void write(JsonWriter out, Assetsv3FilterTemplate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Assetsv3FilterTemplate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Assetsv3FilterTemplate given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Assetsv3FilterTemplate
  * @throws IOException if the JSON string is invalid with respect to Assetsv3FilterTemplate
  */
  public static Assetsv3FilterTemplate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Assetsv3FilterTemplate.class);
  }

 /**
  * Convert an instance of Assetsv3FilterTemplate to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

