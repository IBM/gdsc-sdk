/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Riskanalyticsenginev3PivotType;
import org.openapitools.client.model.Riskanalyticsenginev3Risk;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GenerateLeadsResponse is the response object for GenerateLeads API.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-31T19:36:57.870742Z[UTC]", comments = "Generator version: 7.6.0")
public class Riskanalyticsenginev3GenerateLeadsResponse {
  public static final String SERIALIZED_NAME_END_TIME = "end_time";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_PIVOT_TYPE = "pivot_type";
  @SerializedName(SERIALIZED_NAME_PIVOT_TYPE)
  private Riskanalyticsenginev3PivotType pivotType = Riskanalyticsenginev3PivotType.UNDEFINED_PIVOT_TYPE;

  public static final String SERIALIZED_NAME_RISKS = "risks";
  @SerializedName(SERIALIZED_NAME_RISKS)
  private List<Riskanalyticsenginev3Risk> risks = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_TIME = "start_time";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public Riskanalyticsenginev3GenerateLeadsResponse() {
  }

  public Riskanalyticsenginev3GenerateLeadsResponse endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

   /**
   * The end time of the risks in format YYYY-MM-ddTHH:mm:ssZ.
   * @return endTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public Riskanalyticsenginev3GenerateLeadsResponse pivotType(Riskanalyticsenginev3PivotType pivotType) {
    this.pivotType = pivotType;
    return this;
  }

   /**
   * Get pivotType
   * @return pivotType
  **/
  @javax.annotation.Nullable
  public Riskanalyticsenginev3PivotType getPivotType() {
    return pivotType;
  }

  public void setPivotType(Riskanalyticsenginev3PivotType pivotType) {
    this.pivotType = pivotType;
  }


  public Riskanalyticsenginev3GenerateLeadsResponse risks(List<Riskanalyticsenginev3Risk> risks) {
    this.risks = risks;
    return this;
  }

  public Riskanalyticsenginev3GenerateLeadsResponse addRisksItem(Riskanalyticsenginev3Risk risksItem) {
    if (this.risks == null) {
      this.risks = new ArrayList<>();
    }
    this.risks.add(risksItem);
    return this;
  }

   /**
   * Returns an array with risks with pivot and leads.
   * @return risks
  **/
  @javax.annotation.Nullable
  public List<Riskanalyticsenginev3Risk> getRisks() {
    return risks;
  }

  public void setRisks(List<Riskanalyticsenginev3Risk> risks) {
    this.risks = risks;
  }


  public Riskanalyticsenginev3GenerateLeadsResponse startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

   /**
   * The start time of the risks in format YYYY-MM-ddTHH:mm:ssZ.
   * @return startTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Riskanalyticsenginev3GenerateLeadsResponse riskanalyticsenginev3GenerateLeadsResponse = (Riskanalyticsenginev3GenerateLeadsResponse) o;
    return Objects.equals(this.endTime, riskanalyticsenginev3GenerateLeadsResponse.endTime) &&
        Objects.equals(this.pivotType, riskanalyticsenginev3GenerateLeadsResponse.pivotType) &&
        Objects.equals(this.risks, riskanalyticsenginev3GenerateLeadsResponse.risks) &&
        Objects.equals(this.startTime, riskanalyticsenginev3GenerateLeadsResponse.startTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endTime, pivotType, risks, startTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Riskanalyticsenginev3GenerateLeadsResponse {\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    pivotType: ").append(toIndentedString(pivotType)).append("\n");
    sb.append("    risks: ").append(toIndentedString(risks)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("end_time");
    openapiFields.add("pivot_type");
    openapiFields.add("risks");
    openapiFields.add("start_time");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Riskanalyticsenginev3GenerateLeadsResponse
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Riskanalyticsenginev3GenerateLeadsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Riskanalyticsenginev3GenerateLeadsResponse is not found in the empty JSON string", Riskanalyticsenginev3GenerateLeadsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Riskanalyticsenginev3GenerateLeadsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Riskanalyticsenginev3GenerateLeadsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `pivot_type`
      if (jsonObj.get("pivot_type") != null && !jsonObj.get("pivot_type").isJsonNull()) {
        Riskanalyticsenginev3PivotType.validateJsonElement(jsonObj.get("pivot_type"));
      }
      if (jsonObj.get("risks") != null && !jsonObj.get("risks").isJsonNull()) {
        JsonArray jsonArrayrisks = jsonObj.getAsJsonArray("risks");
        if (jsonArrayrisks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("risks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `risks` to be an array in the JSON string but got `%s`", jsonObj.get("risks").toString()));
          }

          // validate the optional field `risks` (array)
          for (int i = 0; i < jsonArrayrisks.size(); i++) {
            Riskanalyticsenginev3Risk.validateJsonElement(jsonArrayrisks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Riskanalyticsenginev3GenerateLeadsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Riskanalyticsenginev3GenerateLeadsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Riskanalyticsenginev3GenerateLeadsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Riskanalyticsenginev3GenerateLeadsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<Riskanalyticsenginev3GenerateLeadsResponse>() {
           @Override
           public void write(JsonWriter out, Riskanalyticsenginev3GenerateLeadsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Riskanalyticsenginev3GenerateLeadsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Riskanalyticsenginev3GenerateLeadsResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Riskanalyticsenginev3GenerateLeadsResponse
  * @throws IOException if the JSON string is invalid with respect to Riskanalyticsenginev3GenerateLeadsResponse
  */
  public static Riskanalyticsenginev3GenerateLeadsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Riskanalyticsenginev3GenerateLeadsResponse.class);
  }

 /**
  * Convert an instance of Riskanalyticsenginev3GenerateLeadsResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

