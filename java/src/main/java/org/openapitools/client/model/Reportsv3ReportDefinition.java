/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Reportsv3DateRange;
import org.openapitools.client.model.Reportsv3ReportFilterBrackets;
import org.openapitools.client.model.Reportsv3ReportHeader;
import org.openapitools.client.model.Reportsv3ReportTag;
import org.openapitools.client.model.Reportsv3RunTimeParameter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReportDefinition encapsulates all data necessary for a report object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-31T19:36:57.870742Z[UTC]", comments = "Generator version: 7.6.0")
public class Reportsv3ReportDefinition {
  public static final String SERIALIZED_NAME_CATEGORY_ID = "category_id";
  @SerializedName(SERIALIZED_NAME_CATEGORY_ID)
  private String categoryId;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creation_time";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_CREATOR_USER_ID = "creator_user_id";
  @SerializedName(SERIALIZED_NAME_CREATOR_USER_ID)
  private String creatorUserId;

  public static final String SERIALIZED_NAME_DATE_RANGE = "date_range";
  @SerializedName(SERIALIZED_NAME_DATE_RANGE)
  private Reportsv3DateRange dateRange;

  public static final String SERIALIZED_NAME_DEFAULT_TIMESTAMP_HEADER_ID = "default_timestamp_header_id";
  @SerializedName(SERIALIZED_NAME_DEFAULT_TIMESTAMP_HEADER_ID)
  private String defaultTimestampHeaderId;

  public static final String SERIALIZED_NAME_IS_AUDITABLE = "is_auditable";
  @SerializedName(SERIALIZED_NAME_IS_AUDITABLE)
  private Boolean isAuditable;

  public static final String SERIALIZED_NAME_IS_HIDDEN = "is_hidden";
  @SerializedName(SERIALIZED_NAME_IS_HIDDEN)
  private Boolean isHidden;

  public static final String SERIALIZED_NAME_IS_PINNED = "is_pinned";
  @SerializedName(SERIALIZED_NAME_IS_PINNED)
  private Boolean isPinned;

  public static final String SERIALIZED_NAME_IS_PREDEFINED = "is_predefined";
  @SerializedName(SERIALIZED_NAME_IS_PREDEFINED)
  private Boolean isPredefined;

  public static final String SERIALIZED_NAME_REFRESH_RATE = "refresh_rate";
  @SerializedName(SERIALIZED_NAME_REFRESH_RATE)
  private Integer refreshRate;

  public static final String SERIALIZED_NAME_REPORT_DESCRIPTION = "report_description";
  @SerializedName(SERIALIZED_NAME_REPORT_DESCRIPTION)
  private String reportDescription;

  public static final String SERIALIZED_NAME_REPORT_FILTERS = "report_filters";
  @SerializedName(SERIALIZED_NAME_REPORT_FILTERS)
  private Reportsv3ReportFilterBrackets reportFilters;

  public static final String SERIALIZED_NAME_REPORT_HEADERS = "report_headers";
  @SerializedName(SERIALIZED_NAME_REPORT_HEADERS)
  private List<Reportsv3ReportHeader> reportHeaders = new ArrayList<>();

  public static final String SERIALIZED_NAME_REPORT_ID = "report_id";
  @SerializedName(SERIALIZED_NAME_REPORT_ID)
  private String reportId;

  public static final String SERIALIZED_NAME_REPORT_NAME = "report_name";
  @SerializedName(SERIALIZED_NAME_REPORT_NAME)
  private String reportName;

  public static final String SERIALIZED_NAME_REPORT_TAGS = "report_tags";
  @SerializedName(SERIALIZED_NAME_REPORT_TAGS)
  private List<Reportsv3ReportTag> reportTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_RUNTIME_PARAMETERS = "runtime_parameters";
  @SerializedName(SERIALIZED_NAME_RUNTIME_PARAMETERS)
  private List<Reportsv3RunTimeParameter> runtimeParameters = new ArrayList<>();

  public static final String SERIALIZED_NAME_SELECTED_TIMESTAMP_HEADER_ID = "selected_timestamp_header_id";
  @SerializedName(SERIALIZED_NAME_SELECTED_TIMESTAMP_HEADER_ID)
  private String selectedTimestampHeaderId;

  public static final String SERIALIZED_NAME_SHOULD_ADD_COUNT = "should_add_count";
  @SerializedName(SERIALIZED_NAME_SHOULD_ADD_COUNT)
  private Boolean shouldAddCount;

  public static final String SERIALIZED_NAME_SHOULD_ADD_DISTINCT = "should_add_distinct";
  @SerializedName(SERIALIZED_NAME_SHOULD_ADD_DISTINCT)
  private Boolean shouldAddDistinct;

  public static final String SERIALIZED_NAME_SQL_LAST_VERSION = "sql_last_version";
  @SerializedName(SERIALIZED_NAME_SQL_LAST_VERSION)
  private String sqlLastVersion;

  public static final String SERIALIZED_NAME_TABLE_JOIN_OPTIMIZATION = "table_join_optimization";
  @SerializedName(SERIALIZED_NAME_TABLE_JOIN_OPTIMIZATION)
  private String tableJoinOptimization;

  public static final String SERIALIZED_NAME_USE_PIPELINE_QUERIES = "use_pipeline_queries";
  @SerializedName(SERIALIZED_NAME_USE_PIPELINE_QUERIES)
  private String usePipelineQueries;

  public Reportsv3ReportDefinition() {
  }

  public Reportsv3ReportDefinition categoryId(String categoryId) {
    this.categoryId = categoryId;
    return this;
  }

   /**
   * Unique category ID.
   * @return categoryId
  **/
  @javax.annotation.Nullable
  public String getCategoryId() {
    return categoryId;
  }

  public void setCategoryId(String categoryId) {
    this.categoryId = categoryId;
  }


  public Reportsv3ReportDefinition creationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
    return this;
  }

   /**
   * The report&#39;s cration time in format YYYY-MM-DDTHH:mm:ss.sssZ.
   * @return creationTime
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(OffsetDateTime creationTime) {
    this.creationTime = creationTime;
  }


  public Reportsv3ReportDefinition creatorUserId(String creatorUserId) {
    this.creatorUserId = creatorUserId;
    return this;
  }

   /**
   * An identifier for the creator of the report.
   * @return creatorUserId
  **/
  @javax.annotation.Nullable
  public String getCreatorUserId() {
    return creatorUserId;
  }

  public void setCreatorUserId(String creatorUserId) {
    this.creatorUserId = creatorUserId;
  }


  public Reportsv3ReportDefinition dateRange(Reportsv3DateRange dateRange) {
    this.dateRange = dateRange;
    return this;
  }

   /**
   * Get dateRange
   * @return dateRange
  **/
  @javax.annotation.Nullable
  public Reportsv3DateRange getDateRange() {
    return dateRange;
  }

  public void setDateRange(Reportsv3DateRange dateRange) {
    this.dateRange = dateRange;
  }


  public Reportsv3ReportDefinition defaultTimestampHeaderId(String defaultTimestampHeaderId) {
    this.defaultTimestampHeaderId = defaultTimestampHeaderId;
    return this;
  }

   /**
   * The default timestamp header id.
   * @return defaultTimestampHeaderId
  **/
  @javax.annotation.Nullable
  public String getDefaultTimestampHeaderId() {
    return defaultTimestampHeaderId;
  }

  public void setDefaultTimestampHeaderId(String defaultTimestampHeaderId) {
    this.defaultTimestampHeaderId = defaultTimestampHeaderId;
  }


  public Reportsv3ReportDefinition isAuditable(Boolean isAuditable) {
    this.isAuditable = isAuditable;
    return this;
  }

   /**
   * If a report is auditable.
   * @return isAuditable
  **/
  @javax.annotation.Nullable
  public Boolean getIsAuditable() {
    return isAuditable;
  }

  public void setIsAuditable(Boolean isAuditable) {
    this.isAuditable = isAuditable;
  }


  public Reportsv3ReportDefinition isHidden(Boolean isHidden) {
    this.isHidden = isHidden;
    return this;
  }

   /**
   * The is hidden true when report should be showed to the user.
   * @return isHidden
  **/
  @javax.annotation.Nullable
  public Boolean getIsHidden() {
    return isHidden;
  }

  public void setIsHidden(Boolean isHidden) {
    this.isHidden = isHidden;
  }


  public Reportsv3ReportDefinition isPinned(Boolean isPinned) {
    this.isPinned = isPinned;
    return this;
  }

   /**
   * Is pinned report.
   * @return isPinned
  **/
  @javax.annotation.Nullable
  public Boolean getIsPinned() {
    return isPinned;
  }

  public void setIsPinned(Boolean isPinned) {
    this.isPinned = isPinned;
  }


  public Reportsv3ReportDefinition isPredefined(Boolean isPredefined) {
    this.isPredefined = isPredefined;
    return this;
  }

   /**
   * If a report is predefined.
   * @return isPredefined
  **/
  @javax.annotation.Nullable
  public Boolean getIsPredefined() {
    return isPredefined;
  }

  public void setIsPredefined(Boolean isPredefined) {
    this.isPredefined = isPredefined;
  }


  public Reportsv3ReportDefinition refreshRate(Integer refreshRate) {
    this.refreshRate = refreshRate;
    return this;
  }

   /**
   * Report refresh rate.
   * @return refreshRate
  **/
  @javax.annotation.Nullable
  public Integer getRefreshRate() {
    return refreshRate;
  }

  public void setRefreshRate(Integer refreshRate) {
    this.refreshRate = refreshRate;
  }


  public Reportsv3ReportDefinition reportDescription(String reportDescription) {
    this.reportDescription = reportDescription;
    return this;
  }

   /**
   * Report description.
   * @return reportDescription
  **/
  @javax.annotation.Nullable
  public String getReportDescription() {
    return reportDescription;
  }

  public void setReportDescription(String reportDescription) {
    this.reportDescription = reportDescription;
  }


  public Reportsv3ReportDefinition reportFilters(Reportsv3ReportFilterBrackets reportFilters) {
    this.reportFilters = reportFilters;
    return this;
  }

   /**
   * Get reportFilters
   * @return reportFilters
  **/
  @javax.annotation.Nullable
  public Reportsv3ReportFilterBrackets getReportFilters() {
    return reportFilters;
  }

  public void setReportFilters(Reportsv3ReportFilterBrackets reportFilters) {
    this.reportFilters = reportFilters;
  }


  public Reportsv3ReportDefinition reportHeaders(List<Reportsv3ReportHeader> reportHeaders) {
    this.reportHeaders = reportHeaders;
    return this;
  }

  public Reportsv3ReportDefinition addReportHeadersItem(Reportsv3ReportHeader reportHeadersItem) {
    if (this.reportHeaders == null) {
      this.reportHeaders = new ArrayList<>();
    }
    this.reportHeaders.add(reportHeadersItem);
    return this;
  }

   /**
   * Selected headers for the report.
   * @return reportHeaders
  **/
  @javax.annotation.Nullable
  public List<Reportsv3ReportHeader> getReportHeaders() {
    return reportHeaders;
  }

  public void setReportHeaders(List<Reportsv3ReportHeader> reportHeaders) {
    this.reportHeaders = reportHeaders;
  }


  public Reportsv3ReportDefinition reportId(String reportId) {
    this.reportId = reportId;
    return this;
  }

   /**
   * The report ID.
   * @return reportId
  **/
  @javax.annotation.Nullable
  public String getReportId() {
    return reportId;
  }

  public void setReportId(String reportId) {
    this.reportId = reportId;
  }


  public Reportsv3ReportDefinition reportName(String reportName) {
    this.reportName = reportName;
    return this;
  }

   /**
   * Report name.
   * @return reportName
  **/
  @javax.annotation.Nullable
  public String getReportName() {
    return reportName;
  }

  public void setReportName(String reportName) {
    this.reportName = reportName;
  }


  public Reportsv3ReportDefinition reportTags(List<Reportsv3ReportTag> reportTags) {
    this.reportTags = reportTags;
    return this;
  }

  public Reportsv3ReportDefinition addReportTagsItem(Reportsv3ReportTag reportTagsItem) {
    if (this.reportTags == null) {
      this.reportTags = new ArrayList<>();
    }
    this.reportTags.add(reportTagsItem);
    return this;
  }

   /**
   * Report tags.
   * @return reportTags
  **/
  @javax.annotation.Nullable
  public List<Reportsv3ReportTag> getReportTags() {
    return reportTags;
  }

  public void setReportTags(List<Reportsv3ReportTag> reportTags) {
    this.reportTags = reportTags;
  }


  public Reportsv3ReportDefinition runtimeParameters(List<Reportsv3RunTimeParameter> runtimeParameters) {
    this.runtimeParameters = runtimeParameters;
    return this;
  }

  public Reportsv3ReportDefinition addRuntimeParametersItem(Reportsv3RunTimeParameter runtimeParametersItem) {
    if (this.runtimeParameters == null) {
      this.runtimeParameters = new ArrayList<>();
    }
    this.runtimeParameters.add(runtimeParametersItem);
    return this;
  }

   /**
   * Report runtime parameters.
   * @return runtimeParameters
  **/
  @javax.annotation.Nullable
  public List<Reportsv3RunTimeParameter> getRuntimeParameters() {
    return runtimeParameters;
  }

  public void setRuntimeParameters(List<Reportsv3RunTimeParameter> runtimeParameters) {
    this.runtimeParameters = runtimeParameters;
  }


  public Reportsv3ReportDefinition selectedTimestampHeaderId(String selectedTimestampHeaderId) {
    this.selectedTimestampHeaderId = selectedTimestampHeaderId;
    return this;
  }

   /**
   * The selected timestamp header id- in case the user override the default.
   * @return selectedTimestampHeaderId
  **/
  @javax.annotation.Nullable
  public String getSelectedTimestampHeaderId() {
    return selectedTimestampHeaderId;
  }

  public void setSelectedTimestampHeaderId(String selectedTimestampHeaderId) {
    this.selectedTimestampHeaderId = selectedTimestampHeaderId;
  }


  public Reportsv3ReportDefinition shouldAddCount(Boolean shouldAddCount) {
    this.shouldAddCount = shouldAddCount;
    return this;
  }

   /**
   * Add \&quot;count\&quot; statement or not.
   * @return shouldAddCount
  **/
  @javax.annotation.Nullable
  public Boolean getShouldAddCount() {
    return shouldAddCount;
  }

  public void setShouldAddCount(Boolean shouldAddCount) {
    this.shouldAddCount = shouldAddCount;
  }


  public Reportsv3ReportDefinition shouldAddDistinct(Boolean shouldAddDistinct) {
    this.shouldAddDistinct = shouldAddDistinct;
    return this;
  }

   /**
   * Add \&quot;distinct\&quot; statement or not.
   * @return shouldAddDistinct
  **/
  @javax.annotation.Nullable
  public Boolean getShouldAddDistinct() {
    return shouldAddDistinct;
  }

  public void setShouldAddDistinct(Boolean shouldAddDistinct) {
    this.shouldAddDistinct = shouldAddDistinct;
  }


  public Reportsv3ReportDefinition sqlLastVersion(String sqlLastVersion) {
    this.sqlLastVersion = sqlLastVersion;
    return this;
  }

   /**
   * SQL Last Version -  Last version of GI when the query was generated.
   * @return sqlLastVersion
  **/
  @javax.annotation.Nullable
  public String getSqlLastVersion() {
    return sqlLastVersion;
  }

  public void setSqlLastVersion(String sqlLastVersion) {
    this.sqlLastVersion = sqlLastVersion;
  }


  public Reportsv3ReportDefinition tableJoinOptimization(String tableJoinOptimization) {
    this.tableJoinOptimization = tableJoinOptimization;
    return this;
  }

   /**
   * optional : table join optimization - optimized the join operation to enhance the performance. the value can be empty, false or true. if the value is empty then the global setting will be used.
   * @return tableJoinOptimization
  **/
  @javax.annotation.Nullable
  public String getTableJoinOptimization() {
    return tableJoinOptimization;
  }

  public void setTableJoinOptimization(String tableJoinOptimization) {
    this.tableJoinOptimization = tableJoinOptimization;
  }


  public Reportsv3ReportDefinition usePipelineQueries(String usePipelineQueries) {
    this.usePipelineQueries = usePipelineQueries;
    return this;
  }

   /**
   * Optional: disable or enable the pipeline queries the value can be empty, false or true. if the value is empty then the global setting will be used.
   * @return usePipelineQueries
  **/
  @javax.annotation.Nullable
  public String getUsePipelineQueries() {
    return usePipelineQueries;
  }

  public void setUsePipelineQueries(String usePipelineQueries) {
    this.usePipelineQueries = usePipelineQueries;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Reportsv3ReportDefinition reportsv3ReportDefinition = (Reportsv3ReportDefinition) o;
    return Objects.equals(this.categoryId, reportsv3ReportDefinition.categoryId) &&
        Objects.equals(this.creationTime, reportsv3ReportDefinition.creationTime) &&
        Objects.equals(this.creatorUserId, reportsv3ReportDefinition.creatorUserId) &&
        Objects.equals(this.dateRange, reportsv3ReportDefinition.dateRange) &&
        Objects.equals(this.defaultTimestampHeaderId, reportsv3ReportDefinition.defaultTimestampHeaderId) &&
        Objects.equals(this.isAuditable, reportsv3ReportDefinition.isAuditable) &&
        Objects.equals(this.isHidden, reportsv3ReportDefinition.isHidden) &&
        Objects.equals(this.isPinned, reportsv3ReportDefinition.isPinned) &&
        Objects.equals(this.isPredefined, reportsv3ReportDefinition.isPredefined) &&
        Objects.equals(this.refreshRate, reportsv3ReportDefinition.refreshRate) &&
        Objects.equals(this.reportDescription, reportsv3ReportDefinition.reportDescription) &&
        Objects.equals(this.reportFilters, reportsv3ReportDefinition.reportFilters) &&
        Objects.equals(this.reportHeaders, reportsv3ReportDefinition.reportHeaders) &&
        Objects.equals(this.reportId, reportsv3ReportDefinition.reportId) &&
        Objects.equals(this.reportName, reportsv3ReportDefinition.reportName) &&
        Objects.equals(this.reportTags, reportsv3ReportDefinition.reportTags) &&
        Objects.equals(this.runtimeParameters, reportsv3ReportDefinition.runtimeParameters) &&
        Objects.equals(this.selectedTimestampHeaderId, reportsv3ReportDefinition.selectedTimestampHeaderId) &&
        Objects.equals(this.shouldAddCount, reportsv3ReportDefinition.shouldAddCount) &&
        Objects.equals(this.shouldAddDistinct, reportsv3ReportDefinition.shouldAddDistinct) &&
        Objects.equals(this.sqlLastVersion, reportsv3ReportDefinition.sqlLastVersion) &&
        Objects.equals(this.tableJoinOptimization, reportsv3ReportDefinition.tableJoinOptimization) &&
        Objects.equals(this.usePipelineQueries, reportsv3ReportDefinition.usePipelineQueries);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryId, creationTime, creatorUserId, dateRange, defaultTimestampHeaderId, isAuditable, isHidden, isPinned, isPredefined, refreshRate, reportDescription, reportFilters, reportHeaders, reportId, reportName, reportTags, runtimeParameters, selectedTimestampHeaderId, shouldAddCount, shouldAddDistinct, sqlLastVersion, tableJoinOptimization, usePipelineQueries);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Reportsv3ReportDefinition {\n");
    sb.append("    categoryId: ").append(toIndentedString(categoryId)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    creatorUserId: ").append(toIndentedString(creatorUserId)).append("\n");
    sb.append("    dateRange: ").append(toIndentedString(dateRange)).append("\n");
    sb.append("    defaultTimestampHeaderId: ").append(toIndentedString(defaultTimestampHeaderId)).append("\n");
    sb.append("    isAuditable: ").append(toIndentedString(isAuditable)).append("\n");
    sb.append("    isHidden: ").append(toIndentedString(isHidden)).append("\n");
    sb.append("    isPinned: ").append(toIndentedString(isPinned)).append("\n");
    sb.append("    isPredefined: ").append(toIndentedString(isPredefined)).append("\n");
    sb.append("    refreshRate: ").append(toIndentedString(refreshRate)).append("\n");
    sb.append("    reportDescription: ").append(toIndentedString(reportDescription)).append("\n");
    sb.append("    reportFilters: ").append(toIndentedString(reportFilters)).append("\n");
    sb.append("    reportHeaders: ").append(toIndentedString(reportHeaders)).append("\n");
    sb.append("    reportId: ").append(toIndentedString(reportId)).append("\n");
    sb.append("    reportName: ").append(toIndentedString(reportName)).append("\n");
    sb.append("    reportTags: ").append(toIndentedString(reportTags)).append("\n");
    sb.append("    runtimeParameters: ").append(toIndentedString(runtimeParameters)).append("\n");
    sb.append("    selectedTimestampHeaderId: ").append(toIndentedString(selectedTimestampHeaderId)).append("\n");
    sb.append("    shouldAddCount: ").append(toIndentedString(shouldAddCount)).append("\n");
    sb.append("    shouldAddDistinct: ").append(toIndentedString(shouldAddDistinct)).append("\n");
    sb.append("    sqlLastVersion: ").append(toIndentedString(sqlLastVersion)).append("\n");
    sb.append("    tableJoinOptimization: ").append(toIndentedString(tableJoinOptimization)).append("\n");
    sb.append("    usePipelineQueries: ").append(toIndentedString(usePipelineQueries)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category_id");
    openapiFields.add("creation_time");
    openapiFields.add("creator_user_id");
    openapiFields.add("date_range");
    openapiFields.add("default_timestamp_header_id");
    openapiFields.add("is_auditable");
    openapiFields.add("is_hidden");
    openapiFields.add("is_pinned");
    openapiFields.add("is_predefined");
    openapiFields.add("refresh_rate");
    openapiFields.add("report_description");
    openapiFields.add("report_filters");
    openapiFields.add("report_headers");
    openapiFields.add("report_id");
    openapiFields.add("report_name");
    openapiFields.add("report_tags");
    openapiFields.add("runtime_parameters");
    openapiFields.add("selected_timestamp_header_id");
    openapiFields.add("should_add_count");
    openapiFields.add("should_add_distinct");
    openapiFields.add("sql_last_version");
    openapiFields.add("table_join_optimization");
    openapiFields.add("use_pipeline_queries");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Reportsv3ReportDefinition
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Reportsv3ReportDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Reportsv3ReportDefinition is not found in the empty JSON string", Reportsv3ReportDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Reportsv3ReportDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Reportsv3ReportDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("category_id") != null && !jsonObj.get("category_id").isJsonNull()) && !jsonObj.get("category_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category_id").toString()));
      }
      if ((jsonObj.get("creator_user_id") != null && !jsonObj.get("creator_user_id").isJsonNull()) && !jsonObj.get("creator_user_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creator_user_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creator_user_id").toString()));
      }
      // validate the optional field `date_range`
      if (jsonObj.get("date_range") != null && !jsonObj.get("date_range").isJsonNull()) {
        Reportsv3DateRange.validateJsonElement(jsonObj.get("date_range"));
      }
      if ((jsonObj.get("default_timestamp_header_id") != null && !jsonObj.get("default_timestamp_header_id").isJsonNull()) && !jsonObj.get("default_timestamp_header_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `default_timestamp_header_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("default_timestamp_header_id").toString()));
      }
      if ((jsonObj.get("report_description") != null && !jsonObj.get("report_description").isJsonNull()) && !jsonObj.get("report_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `report_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("report_description").toString()));
      }
      // validate the optional field `report_filters`
      if (jsonObj.get("report_filters") != null && !jsonObj.get("report_filters").isJsonNull()) {
        Reportsv3ReportFilterBrackets.validateJsonElement(jsonObj.get("report_filters"));
      }
      if (jsonObj.get("report_headers") != null && !jsonObj.get("report_headers").isJsonNull()) {
        JsonArray jsonArrayreportHeaders = jsonObj.getAsJsonArray("report_headers");
        if (jsonArrayreportHeaders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("report_headers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `report_headers` to be an array in the JSON string but got `%s`", jsonObj.get("report_headers").toString()));
          }

          // validate the optional field `report_headers` (array)
          for (int i = 0; i < jsonArrayreportHeaders.size(); i++) {
            Reportsv3ReportHeader.validateJsonElement(jsonArrayreportHeaders.get(i));
          };
        }
      }
      if ((jsonObj.get("report_id") != null && !jsonObj.get("report_id").isJsonNull()) && !jsonObj.get("report_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `report_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("report_id").toString()));
      }
      if ((jsonObj.get("report_name") != null && !jsonObj.get("report_name").isJsonNull()) && !jsonObj.get("report_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `report_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("report_name").toString()));
      }
      if (jsonObj.get("report_tags") != null && !jsonObj.get("report_tags").isJsonNull()) {
        JsonArray jsonArrayreportTags = jsonObj.getAsJsonArray("report_tags");
        if (jsonArrayreportTags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("report_tags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `report_tags` to be an array in the JSON string but got `%s`", jsonObj.get("report_tags").toString()));
          }

          // validate the optional field `report_tags` (array)
          for (int i = 0; i < jsonArrayreportTags.size(); i++) {
            Reportsv3ReportTag.validateJsonElement(jsonArrayreportTags.get(i));
          };
        }
      }
      if (jsonObj.get("runtime_parameters") != null && !jsonObj.get("runtime_parameters").isJsonNull()) {
        JsonArray jsonArrayruntimeParameters = jsonObj.getAsJsonArray("runtime_parameters");
        if (jsonArrayruntimeParameters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("runtime_parameters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `runtime_parameters` to be an array in the JSON string but got `%s`", jsonObj.get("runtime_parameters").toString()));
          }

          // validate the optional field `runtime_parameters` (array)
          for (int i = 0; i < jsonArrayruntimeParameters.size(); i++) {
            Reportsv3RunTimeParameter.validateJsonElement(jsonArrayruntimeParameters.get(i));
          };
        }
      }
      if ((jsonObj.get("selected_timestamp_header_id") != null && !jsonObj.get("selected_timestamp_header_id").isJsonNull()) && !jsonObj.get("selected_timestamp_header_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selected_timestamp_header_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selected_timestamp_header_id").toString()));
      }
      if ((jsonObj.get("sql_last_version") != null && !jsonObj.get("sql_last_version").isJsonNull()) && !jsonObj.get("sql_last_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sql_last_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sql_last_version").toString()));
      }
      if ((jsonObj.get("table_join_optimization") != null && !jsonObj.get("table_join_optimization").isJsonNull()) && !jsonObj.get("table_join_optimization").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `table_join_optimization` to be a primitive type in the JSON string but got `%s`", jsonObj.get("table_join_optimization").toString()));
      }
      if ((jsonObj.get("use_pipeline_queries") != null && !jsonObj.get("use_pipeline_queries").isJsonNull()) && !jsonObj.get("use_pipeline_queries").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `use_pipeline_queries` to be a primitive type in the JSON string but got `%s`", jsonObj.get("use_pipeline_queries").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Reportsv3ReportDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Reportsv3ReportDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Reportsv3ReportDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Reportsv3ReportDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<Reportsv3ReportDefinition>() {
           @Override
           public void write(JsonWriter out, Reportsv3ReportDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Reportsv3ReportDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Reportsv3ReportDefinition given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Reportsv3ReportDefinition
  * @throws IOException if the JSON string is invalid with respect to Reportsv3ReportDefinition
  */
  public static Reportsv3ReportDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Reportsv3ReportDefinition.class);
  }

 /**
  * Convert an instance of Reportsv3ReportDefinition to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

