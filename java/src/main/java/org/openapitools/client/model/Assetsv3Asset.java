/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Assetsv3ExtendedProp;
import org.openapitools.client.model.Assetsv3HealthType;
import org.openapitools.client.model.Assetsv3StatusType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Assetsv3Asset
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-31T19:36:57.870742Z[UTC]", comments = "Generator version: 7.6.0")
public class Assetsv3Asset {
  public static final String SERIALIZED_NAME_APPLICATION_NAME = "application_name";
  @SerializedName(SERIALIZED_NAME_APPLICATION_NAME)
  private String applicationName;

  public static final String SERIALIZED_NAME_APPLICATION_VERSION = "application_version";
  @SerializedName(SERIALIZED_NAME_APPLICATION_VERSION)
  private String applicationVersion;

  public static final String SERIALIZED_NAME_ASSET_SUBTYPE = "asset_subtype";
  @SerializedName(SERIALIZED_NAME_ASSET_SUBTYPE)
  private String assetSubtype;

  public static final String SERIALIZED_NAME_ASSET_TYPE = "asset_type";
  @SerializedName(SERIALIZED_NAME_ASSET_TYPE)
  private String assetType;

  public static final String SERIALIZED_NAME_CONNECTIVITY = "connectivity";
  @SerializedName(SERIALIZED_NAME_CONNECTIVITY)
  private Assetsv3HealthType connectivity = Assetsv3HealthType.UNSPECIFIED;

  public static final String SERIALIZED_NAME_CRITICAL_VA_COUNT = "critical_va_count";
  @SerializedName(SERIALIZED_NAME_CRITICAL_VA_COUNT)
  private Long criticalVaCount;

  public static final String SERIALIZED_NAME_DATABASE = "database";
  @SerializedName(SERIALIZED_NAME_DATABASE)
  private String database;

  public static final String SERIALIZED_NAME_DB_ID = "db_id";
  @SerializedName(SERIALIZED_NAME_DB_ID)
  private String dbId;

  public static final String SERIALIZED_NAME_DEPLOYMENT = "deployment";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT)
  private String deployment;

  public static final String SERIALIZED_NAME_ENCRYPTION = "encryption";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION)
  private Assetsv3StatusType encryption = Assetsv3StatusType.NA;

  public static final String SERIALIZED_NAME_ENDPOINT_NAME = "endpoint_name";
  @SerializedName(SERIALIZED_NAME_ENDPOINT_NAME)
  private String endpointName;

  public static final String SERIALIZED_NAME_ENTITY_ID = "entity_id";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  private String entityId;

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "entity_type";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  private String entityType;

  public static final String SERIALIZED_NAME_EXTENDED_PROPERTIES = "extended_properties";
  @SerializedName(SERIALIZED_NAME_EXTENDED_PROPERTIES)
  private List<Assetsv3ExtendedProp> extendedProperties = new ArrayList<>();

  public static final String SERIALIZED_NAME_GDP_DATA_SOURCES = "gdp_data_sources";
  @SerializedName(SERIALIZED_NAME_GDP_DATA_SOURCES)
  private String gdpDataSources;

  public static final String SERIALIZED_NAME_GROUPER_ID = "grouper_id";
  @SerializedName(SERIALIZED_NAME_GROUPER_ID)
  private Integer grouperId;

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_HOST_ID = "host_id";
  @SerializedName(SERIALIZED_NAME_HOST_ID)
  private String hostId;

  public static final String SERIALIZED_NAME_HOST_PORT = "host_port";
  @SerializedName(SERIALIZED_NAME_HOST_PORT)
  private String hostPort;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_IP_PORT = "ip_port";
  @SerializedName(SERIALIZED_NAME_IP_PORT)
  private String ipPort;

  public static final String SERIALIZED_NAME_MAC_ADDRESS = "mac_address";
  @SerializedName(SERIALIZED_NAME_MAC_ADDRESS)
  private String macAddress;

  public static final String SERIALIZED_NAME_MODEL_NAME = "model_name";
  @SerializedName(SERIALIZED_NAME_MODEL_NAME)
  private String modelName;

  public static final String SERIALIZED_NAME_MONITORING = "monitoring";
  @SerializedName(SERIALIZED_NAME_MONITORING)
  private Assetsv3StatusType monitoring = Assetsv3StatusType.NA;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ORIGIN = "origin";
  @SerializedName(SERIALIZED_NAME_ORIGIN)
  private List<String> origin = new ArrayList<>();

  public static final String SERIALIZED_NAME_RISK_LEVEL = "risk_level";
  @SerializedName(SERIALIZED_NAME_RISK_LEVEL)
  private String riskLevel;

  public static final String SERIALIZED_NAME_SENSITIVE_DATA = "sensitive_data";
  @SerializedName(SERIALIZED_NAME_SENSITIVE_DATA)
  private Long sensitiveData;

  public static final String SERIALIZED_NAME_SERVICE = "service";
  @SerializedName(SERIALIZED_NAME_SERVICE)
  private String service;

  public static final String SERIALIZED_NAME_STORAGE_NAME = "storage_name";
  @SerializedName(SERIALIZED_NAME_STORAGE_NAME)
  private String storageName;

  public static final String SERIALIZED_NAME_SUBSCRIPTION = "subscription";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION)
  private String subscription;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_VA_COUNT = "total_va_count";
  @SerializedName(SERIALIZED_NAME_TOTAL_VA_COUNT)
  private Long totalVaCount;

  public static final String SERIALIZED_NAME_TRAFFIC = "traffic";
  @SerializedName(SERIALIZED_NAME_TRAFFIC)
  private Assetsv3HealthType traffic = Assetsv3HealthType.UNSPECIFIED;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_USER_ACCOUNTS = "user_accounts";
  @SerializedName(SERIALIZED_NAME_USER_ACCOUNTS)
  private List<String> userAccounts = new ArrayList<>();

  public Assetsv3Asset() {
  }

  public Assetsv3Asset applicationName(String applicationName) {
    this.applicationName = applicationName;
    return this;
  }

   /**
   * Get applicationName
   * @return applicationName
  **/
  @javax.annotation.Nullable
  public String getApplicationName() {
    return applicationName;
  }

  public void setApplicationName(String applicationName) {
    this.applicationName = applicationName;
  }


  public Assetsv3Asset applicationVersion(String applicationVersion) {
    this.applicationVersion = applicationVersion;
    return this;
  }

   /**
   * Get applicationVersion
   * @return applicationVersion
  **/
  @javax.annotation.Nullable
  public String getApplicationVersion() {
    return applicationVersion;
  }

  public void setApplicationVersion(String applicationVersion) {
    this.applicationVersion = applicationVersion;
  }


  public Assetsv3Asset assetSubtype(String assetSubtype) {
    this.assetSubtype = assetSubtype;
    return this;
  }

   /**
   * Get assetSubtype
   * @return assetSubtype
  **/
  @javax.annotation.Nullable
  public String getAssetSubtype() {
    return assetSubtype;
  }

  public void setAssetSubtype(String assetSubtype) {
    this.assetSubtype = assetSubtype;
  }


  public Assetsv3Asset assetType(String assetType) {
    this.assetType = assetType;
    return this;
  }

   /**
   * Get assetType
   * @return assetType
  **/
  @javax.annotation.Nullable
  public String getAssetType() {
    return assetType;
  }

  public void setAssetType(String assetType) {
    this.assetType = assetType;
  }


  public Assetsv3Asset connectivity(Assetsv3HealthType connectivity) {
    this.connectivity = connectivity;
    return this;
  }

   /**
   * Get connectivity
   * @return connectivity
  **/
  @javax.annotation.Nullable
  public Assetsv3HealthType getConnectivity() {
    return connectivity;
  }

  public void setConnectivity(Assetsv3HealthType connectivity) {
    this.connectivity = connectivity;
  }


  public Assetsv3Asset criticalVaCount(Long criticalVaCount) {
    this.criticalVaCount = criticalVaCount;
    return this;
  }

   /**
   * Get criticalVaCount
   * @return criticalVaCount
  **/
  @javax.annotation.Nullable
  public Long getCriticalVaCount() {
    return criticalVaCount;
  }

  public void setCriticalVaCount(Long criticalVaCount) {
    this.criticalVaCount = criticalVaCount;
  }


  public Assetsv3Asset database(String database) {
    this.database = database;
    return this;
  }

   /**
   * Get database
   * @return database
  **/
  @javax.annotation.Nullable
  public String getDatabase() {
    return database;
  }

  public void setDatabase(String database) {
    this.database = database;
  }


  public Assetsv3Asset dbId(String dbId) {
    this.dbId = dbId;
    return this;
  }

   /**
   * Get dbId
   * @return dbId
  **/
  @javax.annotation.Nullable
  public String getDbId() {
    return dbId;
  }

  public void setDbId(String dbId) {
    this.dbId = dbId;
  }


  public Assetsv3Asset deployment(String deployment) {
    this.deployment = deployment;
    return this;
  }

   /**
   * Get deployment
   * @return deployment
  **/
  @javax.annotation.Nullable
  public String getDeployment() {
    return deployment;
  }

  public void setDeployment(String deployment) {
    this.deployment = deployment;
  }


  public Assetsv3Asset encryption(Assetsv3StatusType encryption) {
    this.encryption = encryption;
    return this;
  }

   /**
   * Get encryption
   * @return encryption
  **/
  @javax.annotation.Nullable
  public Assetsv3StatusType getEncryption() {
    return encryption;
  }

  public void setEncryption(Assetsv3StatusType encryption) {
    this.encryption = encryption;
  }


  public Assetsv3Asset endpointName(String endpointName) {
    this.endpointName = endpointName;
    return this;
  }

   /**
   * Get endpointName
   * @return endpointName
  **/
  @javax.annotation.Nullable
  public String getEndpointName() {
    return endpointName;
  }

  public void setEndpointName(String endpointName) {
    this.endpointName = endpointName;
  }


  public Assetsv3Asset entityId(String entityId) {
    this.entityId = entityId;
    return this;
  }

   /**
   * entity ID which was inserted/updated.
   * @return entityId
  **/
  @javax.annotation.Nullable
  public String getEntityId() {
    return entityId;
  }

  public void setEntityId(String entityId) {
    this.entityId = entityId;
  }


  public Assetsv3Asset entityType(String entityType) {
    this.entityType = entityType;
    return this;
  }

   /**
   * Get entityType
   * @return entityType
  **/
  @javax.annotation.Nullable
  public String getEntityType() {
    return entityType;
  }

  public void setEntityType(String entityType) {
    this.entityType = entityType;
  }


  public Assetsv3Asset extendedProperties(List<Assetsv3ExtendedProp> extendedProperties) {
    this.extendedProperties = extendedProperties;
    return this;
  }

  public Assetsv3Asset addExtendedPropertiesItem(Assetsv3ExtendedProp extendedPropertiesItem) {
    if (this.extendedProperties == null) {
      this.extendedProperties = new ArrayList<>();
    }
    this.extendedProperties.add(extendedPropertiesItem);
    return this;
  }

   /**
   * Get extendedProperties
   * @return extendedProperties
  **/
  @javax.annotation.Nullable
  public List<Assetsv3ExtendedProp> getExtendedProperties() {
    return extendedProperties;
  }

  public void setExtendedProperties(List<Assetsv3ExtendedProp> extendedProperties) {
    this.extendedProperties = extendedProperties;
  }


  public Assetsv3Asset gdpDataSources(String gdpDataSources) {
    this.gdpDataSources = gdpDataSources;
    return this;
  }

   /**
   * Get gdpDataSources
   * @return gdpDataSources
  **/
  @javax.annotation.Nullable
  public String getGdpDataSources() {
    return gdpDataSources;
  }

  public void setGdpDataSources(String gdpDataSources) {
    this.gdpDataSources = gdpDataSources;
  }


  public Assetsv3Asset grouperId(Integer grouperId) {
    this.grouperId = grouperId;
    return this;
  }

   /**
   * grouper ID which was grouped assets.
   * @return grouperId
  **/
  @javax.annotation.Nullable
  public Integer getGrouperId() {
    return grouperId;
  }

  public void setGrouperId(Integer grouperId) {
    this.grouperId = grouperId;
  }


  public Assetsv3Asset host(String host) {
    this.host = host;
    return this;
  }

   /**
   * Get host
   * @return host
  **/
  @javax.annotation.Nullable
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }


  public Assetsv3Asset hostId(String hostId) {
    this.hostId = hostId;
    return this;
  }

   /**
   * Get hostId
   * @return hostId
  **/
  @javax.annotation.Nullable
  public String getHostId() {
    return hostId;
  }

  public void setHostId(String hostId) {
    this.hostId = hostId;
  }


  public Assetsv3Asset hostPort(String hostPort) {
    this.hostPort = hostPort;
    return this;
  }

   /**
   * Get hostPort
   * @return hostPort
  **/
  @javax.annotation.Nullable
  public String getHostPort() {
    return hostPort;
  }

  public void setHostPort(String hostPort) {
    this.hostPort = hostPort;
  }


  public Assetsv3Asset ip(String ip) {
    this.ip = ip;
    return this;
  }

   /**
   * Get ip
   * @return ip
  **/
  @javax.annotation.Nullable
  public String getIp() {
    return ip;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }


  public Assetsv3Asset ipPort(String ipPort) {
    this.ipPort = ipPort;
    return this;
  }

   /**
   * Get ipPort
   * @return ipPort
  **/
  @javax.annotation.Nullable
  public String getIpPort() {
    return ipPort;
  }

  public void setIpPort(String ipPort) {
    this.ipPort = ipPort;
  }


  public Assetsv3Asset macAddress(String macAddress) {
    this.macAddress = macAddress;
    return this;
  }

   /**
   * Get macAddress
   * @return macAddress
  **/
  @javax.annotation.Nullable
  public String getMacAddress() {
    return macAddress;
  }

  public void setMacAddress(String macAddress) {
    this.macAddress = macAddress;
  }


  public Assetsv3Asset modelName(String modelName) {
    this.modelName = modelName;
    return this;
  }

   /**
   * Get modelName
   * @return modelName
  **/
  @javax.annotation.Nullable
  public String getModelName() {
    return modelName;
  }

  public void setModelName(String modelName) {
    this.modelName = modelName;
  }


  public Assetsv3Asset monitoring(Assetsv3StatusType monitoring) {
    this.monitoring = monitoring;
    return this;
  }

   /**
   * Get monitoring
   * @return monitoring
  **/
  @javax.annotation.Nullable
  public Assetsv3StatusType getMonitoring() {
    return monitoring;
  }

  public void setMonitoring(Assetsv3StatusType monitoring) {
    this.monitoring = monitoring;
  }


  public Assetsv3Asset name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Assetsv3Asset origin(List<String> origin) {
    this.origin = origin;
    return this;
  }

  public Assetsv3Asset addOriginItem(String originItem) {
    if (this.origin == null) {
      this.origin = new ArrayList<>();
    }
    this.origin.add(originItem);
    return this;
  }

   /**
   * Get origin
   * @return origin
  **/
  @javax.annotation.Nullable
  public List<String> getOrigin() {
    return origin;
  }

  public void setOrigin(List<String> origin) {
    this.origin = origin;
  }


  public Assetsv3Asset riskLevel(String riskLevel) {
    this.riskLevel = riskLevel;
    return this;
  }

   /**
   * Get riskLevel
   * @return riskLevel
  **/
  @javax.annotation.Nullable
  public String getRiskLevel() {
    return riskLevel;
  }

  public void setRiskLevel(String riskLevel) {
    this.riskLevel = riskLevel;
  }


  public Assetsv3Asset sensitiveData(Long sensitiveData) {
    this.sensitiveData = sensitiveData;
    return this;
  }

   /**
   * Get sensitiveData
   * @return sensitiveData
  **/
  @javax.annotation.Nullable
  public Long getSensitiveData() {
    return sensitiveData;
  }

  public void setSensitiveData(Long sensitiveData) {
    this.sensitiveData = sensitiveData;
  }


  public Assetsv3Asset service(String service) {
    this.service = service;
    return this;
  }

   /**
   * Get service
   * @return service
  **/
  @javax.annotation.Nullable
  public String getService() {
    return service;
  }

  public void setService(String service) {
    this.service = service;
  }


  public Assetsv3Asset storageName(String storageName) {
    this.storageName = storageName;
    return this;
  }

   /**
   * Get storageName
   * @return storageName
  **/
  @javax.annotation.Nullable
  public String getStorageName() {
    return storageName;
  }

  public void setStorageName(String storageName) {
    this.storageName = storageName;
  }


  public Assetsv3Asset subscription(String subscription) {
    this.subscription = subscription;
    return this;
  }

   /**
   * Get subscription
   * @return subscription
  **/
  @javax.annotation.Nullable
  public String getSubscription() {
    return subscription;
  }

  public void setSubscription(String subscription) {
    this.subscription = subscription;
  }


  public Assetsv3Asset tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public Assetsv3Asset addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Get tags
   * @return tags
  **/
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public Assetsv3Asset totalVaCount(Long totalVaCount) {
    this.totalVaCount = totalVaCount;
    return this;
  }

   /**
   * Get totalVaCount
   * @return totalVaCount
  **/
  @javax.annotation.Nullable
  public Long getTotalVaCount() {
    return totalVaCount;
  }

  public void setTotalVaCount(Long totalVaCount) {
    this.totalVaCount = totalVaCount;
  }


  public Assetsv3Asset traffic(Assetsv3HealthType traffic) {
    this.traffic = traffic;
    return this;
  }

   /**
   * Get traffic
   * @return traffic
  **/
  @javax.annotation.Nullable
  public Assetsv3HealthType getTraffic() {
    return traffic;
  }

  public void setTraffic(Assetsv3HealthType traffic) {
    this.traffic = traffic;
  }


  public Assetsv3Asset type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public Assetsv3Asset userAccounts(List<String> userAccounts) {
    this.userAccounts = userAccounts;
    return this;
  }

  public Assetsv3Asset addUserAccountsItem(String userAccountsItem) {
    if (this.userAccounts == null) {
      this.userAccounts = new ArrayList<>();
    }
    this.userAccounts.add(userAccountsItem);
    return this;
  }

   /**
   * Get userAccounts
   * @return userAccounts
  **/
  @javax.annotation.Nullable
  public List<String> getUserAccounts() {
    return userAccounts;
  }

  public void setUserAccounts(List<String> userAccounts) {
    this.userAccounts = userAccounts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Assetsv3Asset assetsv3Asset = (Assetsv3Asset) o;
    return Objects.equals(this.applicationName, assetsv3Asset.applicationName) &&
        Objects.equals(this.applicationVersion, assetsv3Asset.applicationVersion) &&
        Objects.equals(this.assetSubtype, assetsv3Asset.assetSubtype) &&
        Objects.equals(this.assetType, assetsv3Asset.assetType) &&
        Objects.equals(this.connectivity, assetsv3Asset.connectivity) &&
        Objects.equals(this.criticalVaCount, assetsv3Asset.criticalVaCount) &&
        Objects.equals(this.database, assetsv3Asset.database) &&
        Objects.equals(this.dbId, assetsv3Asset.dbId) &&
        Objects.equals(this.deployment, assetsv3Asset.deployment) &&
        Objects.equals(this.encryption, assetsv3Asset.encryption) &&
        Objects.equals(this.endpointName, assetsv3Asset.endpointName) &&
        Objects.equals(this.entityId, assetsv3Asset.entityId) &&
        Objects.equals(this.entityType, assetsv3Asset.entityType) &&
        Objects.equals(this.extendedProperties, assetsv3Asset.extendedProperties) &&
        Objects.equals(this.gdpDataSources, assetsv3Asset.gdpDataSources) &&
        Objects.equals(this.grouperId, assetsv3Asset.grouperId) &&
        Objects.equals(this.host, assetsv3Asset.host) &&
        Objects.equals(this.hostId, assetsv3Asset.hostId) &&
        Objects.equals(this.hostPort, assetsv3Asset.hostPort) &&
        Objects.equals(this.ip, assetsv3Asset.ip) &&
        Objects.equals(this.ipPort, assetsv3Asset.ipPort) &&
        Objects.equals(this.macAddress, assetsv3Asset.macAddress) &&
        Objects.equals(this.modelName, assetsv3Asset.modelName) &&
        Objects.equals(this.monitoring, assetsv3Asset.monitoring) &&
        Objects.equals(this.name, assetsv3Asset.name) &&
        Objects.equals(this.origin, assetsv3Asset.origin) &&
        Objects.equals(this.riskLevel, assetsv3Asset.riskLevel) &&
        Objects.equals(this.sensitiveData, assetsv3Asset.sensitiveData) &&
        Objects.equals(this.service, assetsv3Asset.service) &&
        Objects.equals(this.storageName, assetsv3Asset.storageName) &&
        Objects.equals(this.subscription, assetsv3Asset.subscription) &&
        Objects.equals(this.tags, assetsv3Asset.tags) &&
        Objects.equals(this.totalVaCount, assetsv3Asset.totalVaCount) &&
        Objects.equals(this.traffic, assetsv3Asset.traffic) &&
        Objects.equals(this.type, assetsv3Asset.type) &&
        Objects.equals(this.userAccounts, assetsv3Asset.userAccounts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationName, applicationVersion, assetSubtype, assetType, connectivity, criticalVaCount, database, dbId, deployment, encryption, endpointName, entityId, entityType, extendedProperties, gdpDataSources, grouperId, host, hostId, hostPort, ip, ipPort, macAddress, modelName, monitoring, name, origin, riskLevel, sensitiveData, service, storageName, subscription, tags, totalVaCount, traffic, type, userAccounts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Assetsv3Asset {\n");
    sb.append("    applicationName: ").append(toIndentedString(applicationName)).append("\n");
    sb.append("    applicationVersion: ").append(toIndentedString(applicationVersion)).append("\n");
    sb.append("    assetSubtype: ").append(toIndentedString(assetSubtype)).append("\n");
    sb.append("    assetType: ").append(toIndentedString(assetType)).append("\n");
    sb.append("    connectivity: ").append(toIndentedString(connectivity)).append("\n");
    sb.append("    criticalVaCount: ").append(toIndentedString(criticalVaCount)).append("\n");
    sb.append("    database: ").append(toIndentedString(database)).append("\n");
    sb.append("    dbId: ").append(toIndentedString(dbId)).append("\n");
    sb.append("    deployment: ").append(toIndentedString(deployment)).append("\n");
    sb.append("    encryption: ").append(toIndentedString(encryption)).append("\n");
    sb.append("    endpointName: ").append(toIndentedString(endpointName)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    extendedProperties: ").append(toIndentedString(extendedProperties)).append("\n");
    sb.append("    gdpDataSources: ").append(toIndentedString(gdpDataSources)).append("\n");
    sb.append("    grouperId: ").append(toIndentedString(grouperId)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    hostId: ").append(toIndentedString(hostId)).append("\n");
    sb.append("    hostPort: ").append(toIndentedString(hostPort)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    ipPort: ").append(toIndentedString(ipPort)).append("\n");
    sb.append("    macAddress: ").append(toIndentedString(macAddress)).append("\n");
    sb.append("    modelName: ").append(toIndentedString(modelName)).append("\n");
    sb.append("    monitoring: ").append(toIndentedString(monitoring)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    origin: ").append(toIndentedString(origin)).append("\n");
    sb.append("    riskLevel: ").append(toIndentedString(riskLevel)).append("\n");
    sb.append("    sensitiveData: ").append(toIndentedString(sensitiveData)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("    storageName: ").append(toIndentedString(storageName)).append("\n");
    sb.append("    subscription: ").append(toIndentedString(subscription)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    totalVaCount: ").append(toIndentedString(totalVaCount)).append("\n");
    sb.append("    traffic: ").append(toIndentedString(traffic)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    userAccounts: ").append(toIndentedString(userAccounts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("application_name");
    openapiFields.add("application_version");
    openapiFields.add("asset_subtype");
    openapiFields.add("asset_type");
    openapiFields.add("connectivity");
    openapiFields.add("critical_va_count");
    openapiFields.add("database");
    openapiFields.add("db_id");
    openapiFields.add("deployment");
    openapiFields.add("encryption");
    openapiFields.add("endpoint_name");
    openapiFields.add("entity_id");
    openapiFields.add("entity_type");
    openapiFields.add("extended_properties");
    openapiFields.add("gdp_data_sources");
    openapiFields.add("grouper_id");
    openapiFields.add("host");
    openapiFields.add("host_id");
    openapiFields.add("host_port");
    openapiFields.add("ip");
    openapiFields.add("ip_port");
    openapiFields.add("mac_address");
    openapiFields.add("model_name");
    openapiFields.add("monitoring");
    openapiFields.add("name");
    openapiFields.add("origin");
    openapiFields.add("risk_level");
    openapiFields.add("sensitive_data");
    openapiFields.add("service");
    openapiFields.add("storage_name");
    openapiFields.add("subscription");
    openapiFields.add("tags");
    openapiFields.add("total_va_count");
    openapiFields.add("traffic");
    openapiFields.add("type");
    openapiFields.add("user_accounts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Assetsv3Asset
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Assetsv3Asset.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Assetsv3Asset is not found in the empty JSON string", Assetsv3Asset.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Assetsv3Asset.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Assetsv3Asset` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("application_name") != null && !jsonObj.get("application_name").isJsonNull()) && !jsonObj.get("application_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `application_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("application_name").toString()));
      }
      if ((jsonObj.get("application_version") != null && !jsonObj.get("application_version").isJsonNull()) && !jsonObj.get("application_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `application_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("application_version").toString()));
      }
      if ((jsonObj.get("asset_subtype") != null && !jsonObj.get("asset_subtype").isJsonNull()) && !jsonObj.get("asset_subtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asset_subtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asset_subtype").toString()));
      }
      if ((jsonObj.get("asset_type") != null && !jsonObj.get("asset_type").isJsonNull()) && !jsonObj.get("asset_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `asset_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("asset_type").toString()));
      }
      // validate the optional field `connectivity`
      if (jsonObj.get("connectivity") != null && !jsonObj.get("connectivity").isJsonNull()) {
        Assetsv3HealthType.validateJsonElement(jsonObj.get("connectivity"));
      }
      if ((jsonObj.get("database") != null && !jsonObj.get("database").isJsonNull()) && !jsonObj.get("database").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `database` to be a primitive type in the JSON string but got `%s`", jsonObj.get("database").toString()));
      }
      if ((jsonObj.get("db_id") != null && !jsonObj.get("db_id").isJsonNull()) && !jsonObj.get("db_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `db_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("db_id").toString()));
      }
      if ((jsonObj.get("deployment") != null && !jsonObj.get("deployment").isJsonNull()) && !jsonObj.get("deployment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deployment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deployment").toString()));
      }
      // validate the optional field `encryption`
      if (jsonObj.get("encryption") != null && !jsonObj.get("encryption").isJsonNull()) {
        Assetsv3StatusType.validateJsonElement(jsonObj.get("encryption"));
      }
      if ((jsonObj.get("endpoint_name") != null && !jsonObj.get("endpoint_name").isJsonNull()) && !jsonObj.get("endpoint_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpoint_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpoint_name").toString()));
      }
      if ((jsonObj.get("entity_id") != null && !jsonObj.get("entity_id").isJsonNull()) && !jsonObj.get("entity_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entity_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entity_id").toString()));
      }
      if ((jsonObj.get("entity_type") != null && !jsonObj.get("entity_type").isJsonNull()) && !jsonObj.get("entity_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entity_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entity_type").toString()));
      }
      if (jsonObj.get("extended_properties") != null && !jsonObj.get("extended_properties").isJsonNull()) {
        JsonArray jsonArrayextendedProperties = jsonObj.getAsJsonArray("extended_properties");
        if (jsonArrayextendedProperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("extended_properties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `extended_properties` to be an array in the JSON string but got `%s`", jsonObj.get("extended_properties").toString()));
          }

          // validate the optional field `extended_properties` (array)
          for (int i = 0; i < jsonArrayextendedProperties.size(); i++) {
            Assetsv3ExtendedProp.validateJsonElement(jsonArrayextendedProperties.get(i));
          };
        }
      }
      if ((jsonObj.get("gdp_data_sources") != null && !jsonObj.get("gdp_data_sources").isJsonNull()) && !jsonObj.get("gdp_data_sources").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gdp_data_sources` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gdp_data_sources").toString()));
      }
      if ((jsonObj.get("host") != null && !jsonObj.get("host").isJsonNull()) && !jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      if ((jsonObj.get("host_id") != null && !jsonObj.get("host_id").isJsonNull()) && !jsonObj.get("host_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host_id").toString()));
      }
      if ((jsonObj.get("host_port") != null && !jsonObj.get("host_port").isJsonNull()) && !jsonObj.get("host_port").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host_port` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host_port").toString()));
      }
      if ((jsonObj.get("ip") != null && !jsonObj.get("ip").isJsonNull()) && !jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      if ((jsonObj.get("ip_port") != null && !jsonObj.get("ip_port").isJsonNull()) && !jsonObj.get("ip_port").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip_port` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip_port").toString()));
      }
      if ((jsonObj.get("mac_address") != null && !jsonObj.get("mac_address").isJsonNull()) && !jsonObj.get("mac_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mac_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mac_address").toString()));
      }
      if ((jsonObj.get("model_name") != null && !jsonObj.get("model_name").isJsonNull()) && !jsonObj.get("model_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `model_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("model_name").toString()));
      }
      // validate the optional field `monitoring`
      if (jsonObj.get("monitoring") != null && !jsonObj.get("monitoring").isJsonNull()) {
        Assetsv3StatusType.validateJsonElement(jsonObj.get("monitoring"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("origin") != null && !jsonObj.get("origin").isJsonNull() && !jsonObj.get("origin").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `origin` to be an array in the JSON string but got `%s`", jsonObj.get("origin").toString()));
      }
      if ((jsonObj.get("risk_level") != null && !jsonObj.get("risk_level").isJsonNull()) && !jsonObj.get("risk_level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `risk_level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("risk_level").toString()));
      }
      if ((jsonObj.get("service") != null && !jsonObj.get("service").isJsonNull()) && !jsonObj.get("service").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service").toString()));
      }
      if ((jsonObj.get("storage_name") != null && !jsonObj.get("storage_name").isJsonNull()) && !jsonObj.get("storage_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storage_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storage_name").toString()));
      }
      if ((jsonObj.get("subscription") != null && !jsonObj.get("subscription").isJsonNull()) && !jsonObj.get("subscription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscription").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      // validate the optional field `traffic`
      if (jsonObj.get("traffic") != null && !jsonObj.get("traffic").isJsonNull()) {
        Assetsv3HealthType.validateJsonElement(jsonObj.get("traffic"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("user_accounts") != null && !jsonObj.get("user_accounts").isJsonNull() && !jsonObj.get("user_accounts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_accounts` to be an array in the JSON string but got `%s`", jsonObj.get("user_accounts").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Assetsv3Asset.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Assetsv3Asset' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Assetsv3Asset> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Assetsv3Asset.class));

       return (TypeAdapter<T>) new TypeAdapter<Assetsv3Asset>() {
           @Override
           public void write(JsonWriter out, Assetsv3Asset value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Assetsv3Asset read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Assetsv3Asset given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Assetsv3Asset
  * @throws IOException if the JSON string is invalid with respect to Assetsv3Asset
  */
  public static Assetsv3Asset fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Assetsv3Asset.class);
  }

 /**
  * Convert an instance of Assetsv3Asset to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

