/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Riskanalyticscontrollerv3EnableDisableRiskEventFeedbackRequest;
import org.openapitools.client.model.Riskanalyticscontrollerv3EnableDisableRiskEventFeedbackResponse;
import org.openapitools.client.model.Riskanalyticscontrollerv3EnableDisableRiskEventProcessRequest;
import org.openapitools.client.model.Riskanalyticscontrollerv3EnableDisableRiskEventProcessResponse;
import org.openapitools.client.model.Riskanalyticscontrollerv3GetAllClassificationsListResponse;
import org.openapitools.client.model.Riskanalyticscontrollerv3GetRiskEventClassificationsListResponse;
import org.openapitools.client.model.Riskanalyticscontrollerv3GetRiskEventDetailsResponse;
import org.openapitools.client.model.Riskanalyticscontrollerv3GetRiskEventProcessStatusResponse;
import org.openapitools.client.model.Riskanalyticscontrollerv3GetRiskEventRowResponse;
import org.openapitools.client.model.Riskanalyticscontrollerv3GetRiskFeedbackResponse;
import org.openapitools.client.model.Riskanalyticscontrollerv3GetRiskObservationDetailsResponse;
import org.openapitools.client.model.Riskanalyticscontrollerv3GetUserUISettingsResponse;
import org.openapitools.client.model.Riskanalyticscontrollerv3RiskEventSummarizationDataResponse;
import org.openapitools.client.model.Riskanalyticscontrollerv3RiskEventTuningRequest;
import org.openapitools.client.model.Riskanalyticscontrollerv3RiskEventTuningResponse;
import org.openapitools.client.model.Riskanalyticscontrollerv3RiskEventVulnerabilityAssessmentDetailsResponse;
import org.openapitools.client.model.Riskanalyticscontrollerv3SetRiskEventStatusRequest;
import org.openapitools.client.model.Riskanalyticscontrollerv3SetRiskEventStatusResponse;
import org.openapitools.client.model.Riskanalyticscontrollerv3SetUserUISettingsRequest;
import org.openapitools.client.model.Riskanalyticscontrollerv3SetUserUISettingsResponse;
import org.openapitools.client.model.Riskanalyticscontrollerv3UpdateRiskFeedbackRequest;
import org.openapitools.client.model.Riskanalyticscontrollerv3UpdateRiskFeedbackResponse;
import org.openapitools.client.model.RuntimeError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RiskAnalyticsControllerApi
 */
@Disabled
public class RiskAnalyticsControllerApiTest {

    private final RiskAnalyticsControllerApi api = new RiskAnalyticsControllerApi();

    /**
     * Summary: Enable disable risk rvent feedback Description: Enable or disable the collect feedback process.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void riskAnalyticsControllerEnableDisableRiskEventFeedbackTest() throws ApiException {
        Riskanalyticscontrollerv3EnableDisableRiskEventFeedbackRequest riskanalyticscontrollerv3EnableDisableRiskEventFeedbackRequest = null;
        Riskanalyticscontrollerv3EnableDisableRiskEventFeedbackResponse response = api.riskAnalyticsControllerEnableDisableRiskEventFeedback(riskanalyticscontrollerv3EnableDisableRiskEventFeedbackRequest);
        // TODO: test validations
    }

    /**
     * Summary: Enable disable risk event process Description: Enable or disable the risk event process.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void riskAnalyticsControllerEnableDisableRiskEventProcessTest() throws ApiException {
        Riskanalyticscontrollerv3EnableDisableRiskEventProcessRequest riskanalyticscontrollerv3EnableDisableRiskEventProcessRequest = null;
        Riskanalyticscontrollerv3EnableDisableRiskEventProcessResponse response = api.riskAnalyticsControllerEnableDisableRiskEventProcess(riskanalyticscontrollerv3EnableDisableRiskEventProcessRequest);
        // TODO: test validations
    }

    /**
     * Summary: Get all classifications Description: Get all possible classifications for a risk event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void riskAnalyticsControllerGetAllClassificationsListTest() throws ApiException {
        Riskanalyticscontrollerv3GetAllClassificationsListResponse response = api.riskAnalyticsControllerGetAllClassificationsList();
        // TODO: test validations
    }

    /**
     * Summary: Get risk event classifications list Description: retrieves the ClassificationMatchDetails for a given risk id â€“ classification that did not matched will be with class_value 0.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void riskAnalyticsControllerGetRiskEventClassificationsListTest() throws ApiException {
        Integer riskId = null;
        Riskanalyticscontrollerv3GetRiskEventClassificationsListResponse response = api.riskAnalyticsControllerGetRiskEventClassificationsList(riskId);
        // TODO: test validations
    }

    /**
     * Summary: Get risk event data needed for summarization task Description: Retrieve the full information about this risk event including all findings data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void riskAnalyticsControllerGetRiskEventDataForSummarizationTest() throws ApiException {
        Integer riskId = null;
        Boolean includeIndicators = null;
        Integer numFindingsLimit = null;
        Riskanalyticscontrollerv3RiskEventSummarizationDataResponse response = api.riskAnalyticsControllerGetRiskEventDataForSummarization(riskId, includeIndicators, numFindingsLimit);
        // TODO: test validations
    }

    /**
     * Summary: Get risk event details Description: Return the details of a risk event, including risk general info and a list of observations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void riskAnalyticsControllerGetRiskEventDetailsTest() throws ApiException {
        Integer riskId = null;
        Riskanalyticscontrollerv3GetRiskEventDetailsResponse response = api.riskAnalyticsControllerGetRiskEventDetails(riskId);
        // TODO: test validations
    }

    /**
     * Summary: Get risk event process status Description: Get the risk event process status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void riskAnalyticsControllerGetRiskEventProcessStatusTest() throws ApiException {
        Riskanalyticscontrollerv3GetRiskEventProcessStatusResponse response = api.riskAnalyticsControllerGetRiskEventProcessStatus();
        // TODO: test validations
    }

    /**
     * Summary: Get risk event row Description: Return a list of risk events.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void riskAnalyticsControllerGetRiskEventRowTest() throws ApiException {
        String status = null;
        OffsetDateTime dateFrom = null;
        OffsetDateTime dateTo = null;
        String pivotType = null;
        String pivotId = null;
        String pivotDbUser = null;
        String pivotDatabase = null;
        String pivotServerIp = null;
        String pivotOsUser = null;
        String pivotDatabaseSourceField = null;
        Riskanalyticscontrollerv3GetRiskEventRowResponse response = api.riskAnalyticsControllerGetRiskEventRow(status, dateFrom, dateTo, pivotType, pivotId, pivotDbUser, pivotDatabase, pivotServerIp, pivotOsUser, pivotDatabaseSourceField);
        // TODO: test validations
    }

    /**
     * Summary: Get vulnerability assessment details for a given risk event Description: Retrieve the information about failed VA tests for assets database and db user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void riskAnalyticsControllerGetRiskEventVulnerabilityAssessmentDetailsTest() throws ApiException {
        Integer riskId = null;
        Riskanalyticscontrollerv3RiskEventVulnerabilityAssessmentDetailsResponse response = api.riskAnalyticsControllerGetRiskEventVulnerabilityAssessmentDetails(riskId);
        // TODO: test validations
    }

    /**
     * Summary: Get risk feedback Description: Get all feedbacks that are in status NEW/WIP and change them to status WIP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void riskAnalyticsControllerGetRiskFeedbackTest() throws ApiException {
        Riskanalyticscontrollerv3GetRiskFeedbackResponse response = api.riskAnalyticsControllerGetRiskFeedback();
        // TODO: test validations
    }

    /**
     * Summary: Get risk observation details Description: Return details of a single risk observation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void riskAnalyticsControllerGetRiskObservationDetailsTest() throws ApiException {
        Integer leadFeatureId = null;
        String observationType = null;
        Riskanalyticscontrollerv3GetRiskObservationDetailsResponse response = api.riskAnalyticsControllerGetRiskObservationDetails(leadFeatureId, observationType);
        // TODO: test validations
    }

    /**
     * Summary: Get user UI settings Description: Get the user settings by user id to display the risk in the UI.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void riskAnalyticsControllerGetUserUISettingsTest() throws ApiException {
        Riskanalyticscontrollerv3GetUserUISettingsResponse response = api.riskAnalyticsControllerGetUserUISettings();
        // TODO: test validations
    }

    /**
     * Summary: Risk event tuning Description: Perform tuning risk event actions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void riskAnalyticsControllerRiskEventTuningTest() throws ApiException {
        Riskanalyticscontrollerv3RiskEventTuningRequest riskanalyticscontrollerv3RiskEventTuningRequest = null;
        Riskanalyticscontrollerv3RiskEventTuningResponse response = api.riskAnalyticsControllerRiskEventTuning(riskanalyticscontrollerv3RiskEventTuningRequest);
        // TODO: test validations
    }

    /**
     * Summary: Set risk event status Description: Update the risk status and justification.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void riskAnalyticsControllerSetRiskEventStatusTest() throws ApiException {
        Riskanalyticscontrollerv3SetRiskEventStatusRequest riskanalyticscontrollerv3SetRiskEventStatusRequest = null;
        Riskanalyticscontrollerv3SetRiskEventStatusResponse response = api.riskAnalyticsControllerSetRiskEventStatus(riskanalyticscontrollerv3SetRiskEventStatusRequest);
        // TODO: test validations
    }

    /**
     * Summary: Set user UI settings Description: Set the user settings by user id in the mongo collection. WARNING: this API should not be used manually or by a system external to Guardium Insights. Using this API to change a user settings may prevent the user from using the Risk Event function within Guardium Insights.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void riskAnalyticsControllerSetUserUISettingsTest() throws ApiException {
        Riskanalyticscontrollerv3SetUserUISettingsRequest riskanalyticscontrollerv3SetUserUISettingsRequest = null;
        Riskanalyticscontrollerv3SetUserUISettingsResponse response = api.riskAnalyticsControllerSetUserUISettings(riskanalyticscontrollerv3SetUserUISettingsRequest);
        // TODO: test validations
    }

    /**
     * Summary: Update risk feedback Description: Provide feedback for one or more risk events
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void riskAnalyticsControllerUpdateRiskFeedbackTest() throws ApiException {
        Riskanalyticscontrollerv3UpdateRiskFeedbackRequest riskanalyticscontrollerv3UpdateRiskFeedbackRequest = null;
        Riskanalyticscontrollerv3UpdateRiskFeedbackResponse response = api.riskAnalyticsControllerUpdateRiskFeedback(riskanalyticscontrollerv3UpdateRiskFeedbackRequest);
        // TODO: test validations
    }

}
