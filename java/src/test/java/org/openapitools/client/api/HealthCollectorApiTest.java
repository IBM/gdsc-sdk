/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Healthcollectorv3GetDataWarehouseUsageResponse;
import org.openapitools.client.model.Healthcollectorv3GetGDPHealthInfoResponse;
import org.openapitools.client.model.Healthcollectorv3GetHistoricalHealthInfoResponse;
import org.openapitools.client.model.Healthcollectorv3GetObjectStorageUsageResponse;
import org.openapitools.client.model.Healthcollectorv3GetPVCUsageResponse;
import org.openapitools.client.model.Healthcollectorv3GetPodRestartsResponse;
import org.openapitools.client.model.Healthcollectorv3GetStreamsIngestionResponse;
import org.openapitools.client.model.Healthcollectorv3GetTopGDPCollectorsResponse;
import org.openapitools.client.model.Healthcollectorv3StoreHealthInfoRequest;
import org.openapitools.client.model.Healthcollectorv3StoreHealthInfoResponse;
import java.time.OffsetDateTime;
import org.openapitools.client.model.RuntimeError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for HealthCollectorApi
 */
@Disabled
public class HealthCollectorApiTest {

    private final HealthCollectorApi api = new HealthCollectorApi();

    /**
     * Summary: Get data warehouse usage info Description: Get information from Db2 related to usage
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void healthCollectorGetDataWarehouseUsageTest() throws ApiException {
        String type = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Healthcollectorv3GetDataWarehouseUsageResponse response = api.healthCollectorGetDataWarehouseUsage(type, startTime, endTime);
        // TODO: test validations
    }

    /**
     * Summary: Get GDP health info Description: Get information from MongoDB for Guardium central managers using health-connector service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void healthCollectorGetGDPHealthInfoTest() throws ApiException {
        Healthcollectorv3GetGDPHealthInfoResponse response = api.healthCollectorGetGDPHealthInfo();
        // TODO: test validations
    }

    /**
     * Summary: Get historical health info Description: Retrieve historical s-tap related statistics from health-collector service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void healthCollectorGetHistoricalHealthInfoTest() throws ApiException {
        String unit = null;
        String cmId = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Healthcollectorv3GetHistoricalHealthInfoResponse response = api.healthCollectorGetHistoricalHealthInfo(unit, cmId, startTime, endTime);
        // TODO: test validations
    }

    /**
     * Summary: Get object storage usage info Description: Get information from object storage about tenant bucket usage
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void healthCollectorGetObjectStorageUsageTest() throws ApiException {
        String type = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Healthcollectorv3GetObjectStorageUsageResponse response = api.healthCollectorGetObjectStorageUsage(type, startTime, endTime);
        // TODO: test validations
    }

    /**
     * Summary: Get the PVC usage information Description: Get information about the PVC usage in the OCP cluster
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void healthCollectorGetPVCUsageTest() throws ApiException {
        String type = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Healthcollectorv3GetPVCUsageResponse response = api.healthCollectorGetPVCUsage(type, startTime, endTime);
        // TODO: test validations
    }

    /**
     * Summary: Get the pod restart information Description: Get information about the number of restarts by pod in OCP
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void healthCollectorGetPodRestartsTest() throws ApiException {
        String type = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Healthcollectorv3GetPodRestartsResponse response = api.healthCollectorGetPodRestarts(type, startTime, endTime);
        // TODO: test validations
    }

    /**
     * Summary: Get streams ingestion volume over a given time Description: Get information about streams ingestion volume
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void healthCollectorGetStreamsIngestionTest() throws ApiException {
        String type = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Healthcollectorv3GetStreamsIngestionResponse response = api.healthCollectorGetStreamsIngestion(type, startTime, endTime);
        // TODO: test validations
    }

    /**
     * Summary: Get the top GDP collectors which send data to GI Description: Get information about the top GDP collectors
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void healthCollectorGetTopGDPCollectorsTest() throws ApiException {
        String type = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Healthcollectorv3GetTopGDPCollectorsResponse response = api.healthCollectorGetTopGDPCollectors(type, startTime, endTime);
        // TODO: test validations
    }

    /**
     * Summary: Store health info Description: Store health info from GDP into GI. (This API is called from GDP only)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void healthCollectorStoreHealthInfoTest() throws ApiException {
        String centralManagerId = null;
        Healthcollectorv3StoreHealthInfoRequest healthcollectorv3StoreHealthInfoRequest = null;
        Healthcollectorv3StoreHealthInfoResponse response = api.healthCollectorStoreHealthInfo(centralManagerId, healthcollectorv3StoreHealthInfoRequest);
        // TODO: test validations
    }

}
