/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.RuntimeError;
import org.openapitools.client.model.Workflowv3CaseListResponse;
import org.openapitools.client.model.Workflowv3CreateCaseRequest;
import org.openapitools.client.model.Workflowv3CreateCaseResponse;
import org.openapitools.client.model.Workflowv3CreateTaskRequest;
import org.openapitools.client.model.Workflowv3CreateTaskResponse;
import org.openapitools.client.model.Workflowv3GetCasesCountRequest;
import org.openapitools.client.model.Workflowv3GetCasesCountResponse;
import org.openapitools.client.model.Workflowv3GetFilenameResponse;
import org.openapitools.client.model.Workflowv3GetJobsCountRequest;
import org.openapitools.client.model.Workflowv3GetJobsCountResponse;
import org.openapitools.client.model.Workflowv3GetReportResultResponse;
import org.openapitools.client.model.Workflowv3GetTasksCountRequest;
import org.openapitools.client.model.Workflowv3GetTasksCountResponse;
import org.openapitools.client.model.Workflowv3SearchCasesRequest;
import org.openapitools.client.model.Workflowv3SearchReportsResponse;
import org.openapitools.client.model.Workflowv3SearchTasksRequest;
import org.openapitools.client.model.Workflowv3TaskListResponse;
import org.openapitools.client.model.Workflowv3UpdateCasesRequest;
import org.openapitools.client.model.Workflowv3UpdateCasesResponse;
import org.openapitools.client.model.Workflowv3UpdateTasksRequest;
import org.openapitools.client.model.Workflowv3UpdateTasksResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WorkflowApi
 */
@Disabled
public class WorkflowApiTest {

    private final WorkflowApi api = new WorkflowApi();

    /**
     * Summary: Create case Description: Create single case.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowCreateCaseTest() throws ApiException {
        Workflowv3CreateCaseRequest workflowv3CreateCaseRequest = null;
        Workflowv3CreateCaseResponse response = api.workflowCreateCase(workflowv3CreateCaseRequest);
        // TODO: test validations
    }

    /**
     * Summary: Create task Description: Create single task within a parent case.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowCreateTaskTest() throws ApiException {
        String caseId = null;
        Workflowv3CreateTaskRequest workflowv3CreateTaskRequest = null;
        Workflowv3CreateTaskResponse response = api.workflowCreateTask(caseId, workflowv3CreateTaskRequest);
        // TODO: test validations
    }

    /**
     * Summary: Get cases Description: Return all cases requested.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowGetCasesTest() throws ApiException {
        String caseId = null;
        String sortBy = null;
        Integer offset = null;
        Integer limit = null;
        Workflowv3CaseListResponse response = api.workflowGetCases(caseId, sortBy, offset, limit);
        // TODO: test validations
    }

    /**
     * Summary: Get cases count Description: Get case count.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowGetCasesCountTest() throws ApiException {
        Workflowv3GetCasesCountRequest workflowv3GetCasesCountRequest = null;
        Workflowv3GetCasesCountResponse response = api.workflowGetCasesCount(workflowv3GetCasesCountRequest);
        // TODO: test validations
    }

    /**
     * Summary: Get filename Description: Return filename associated with the task referenced in the associated context record.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowGetFilenameTest() throws ApiException {
        String caseId = null;
        String taskId = null;
        Workflowv3GetFilenameResponse response = api.workflowGetFilename(caseId, taskId);
        // TODO: test validations
    }

    /**
     * Summary: Get jobs count Description: Get jobs count.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowGetJobsCountTest() throws ApiException {
        String caseId = null;
        Workflowv3GetJobsCountRequest workflowv3GetJobsCountRequest = null;
        Workflowv3GetJobsCountResponse response = api.workflowGetJobsCount(caseId, workflowv3GetJobsCountRequest);
        // TODO: test validations
    }

    /**
     * Summary: Get report result Description: Return a page of results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowGetReportResultTest() throws ApiException {
        String caseId = null;
        String taskId = null;
        Integer offset = null;
        Integer limit = null;
        Workflowv3GetReportResultResponse response = api.workflowGetReportResult(caseId, taskId, offset, limit);
        // TODO: test validations
    }

    /**
     * Summary: Get tasks Description: Return all tasks requested.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowGetTasksTest() throws ApiException {
        String caseId = null;
        String taskId = null;
        Workflowv3TaskListResponse response = api.workflowGetTasks(caseId, taskId);
        // TODO: test validations
    }

    /**
     * Summary: Get cases count Description: Get case count.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowGetTasksCountTest() throws ApiException {
        String caseId = null;
        Workflowv3GetTasksCountRequest workflowv3GetTasksCountRequest = null;
        Workflowv3GetTasksCountResponse response = api.workflowGetTasksCount(caseId, workflowv3GetTasksCountRequest);
        // TODO: test validations
    }

    /**
     * Summary: Search cases Description: Return a subset of cases.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowSearchCasesTest() throws ApiException {
        Workflowv3SearchCasesRequest workflowv3SearchCasesRequest = null;
        Workflowv3CaseListResponse response = api.workflowSearchCases(workflowv3SearchCasesRequest);
        // TODO: test validations
    }

    /**
     * Summary: Get a list of report IDs Description: Returns a list of report IDs referenced in all cases and tasks
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowSearchReportsTest() throws ApiException {
        Workflowv3SearchCasesRequest workflowv3SearchCasesRequest = null;
        Workflowv3SearchReportsResponse response = api.workflowSearchReports(workflowv3SearchCasesRequest);
        // TODO: test validations
    }

    /**
     * Summary: Search cases Description: Return a subset of cases.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowSearchTasksTest() throws ApiException {
        String caseId = null;
        Workflowv3SearchTasksRequest workflowv3SearchTasksRequest = null;
        Workflowv3TaskListResponse response = api.workflowSearchTasks(caseId, workflowv3SearchTasksRequest);
        // TODO: test validations
    }

    /**
     * Summary: Update cases Description: Update multiple cases in one request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowUpdateCasesTest() throws ApiException {
        Workflowv3UpdateCasesRequest workflowv3UpdateCasesRequest = null;
        Workflowv3UpdateCasesResponse response = api.workflowUpdateCases(workflowv3UpdateCasesRequest);
        // TODO: test validations
    }

    /**
     * Summary: Update tasks Description: Update multiple tasks for the same parent in one request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowUpdateTasksTest() throws ApiException {
        String caseId = null;
        Workflowv3UpdateTasksRequest workflowv3UpdateTasksRequest = null;
        Workflowv3UpdateTasksResponse response = api.workflowUpdateTasks(caseId, workflowv3UpdateTasksRequest);
        // TODO: test validations
    }

}
