/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.RuntimeError;
import org.openapitools.client.model.Tenantuserv3CreateApiKeyRequest;
import org.openapitools.client.model.Tenantuserv3CreateApiKeyResponse;
import org.openapitools.client.model.Tenantuserv3GetApiKeysResponse;
import org.openapitools.client.model.Tenantuserv3GetCurrentUserResponse;
import org.openapitools.client.model.Tenantuserv3GetPrivilegeResponse;
import org.openapitools.client.model.Tenantuserv3GetPrivilegesResponse;
import org.openapitools.client.model.Tenantuserv3GetRolesResponse;
import org.openapitools.client.model.Tenantuserv3GetUserNamesRequest;
import org.openapitools.client.model.Tenantuserv3GetUserNamesResponse;
import org.openapitools.client.model.Tenantuserv3GetUserResponse;
import org.openapitools.client.model.Tenantuserv3GetUserTenantResponse;
import org.openapitools.client.model.Tenantuserv3PostPrivilegesBulkRequest;
import org.openapitools.client.model.Tenantuserv3PostPrivilegesBulkResponse;
import org.openapitools.client.model.Tenantuserv3PostRoleRequest;
import org.openapitools.client.model.Tenantuserv3PostRoleResponse;
import org.openapitools.client.model.Tenantuserv3Role;
import org.openapitools.client.model.Tenantuserv3UpdatePrivilegeRequest;
import org.openapitools.client.model.Tenantuserv3UpdatePrivilegeResponse;
import org.openapitools.client.model.Tenantuserv3UpdatePrivilegesBulkRequest;
import org.openapitools.client.model.Tenantuserv3UpdatePrivilegesBulkResponse;
import org.openapitools.client.model.Tenantuserv3UpdateRoleRequest;
import org.openapitools.client.model.Tenantuserv3UpdateRoleResponse;
import org.openapitools.client.model.Tenantuserv3UpdateUserRoleBulkRequest;
import org.openapitools.client.model.Tenantuserv3UpdateUserRoleBulkResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TenantuserApi
 */
@Disabled
public class TenantuserApiTest {

    private final TenantuserApi api = new TenantuserApi();

    /**
     * Summary: Create API key Description: Create API Key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenantuserCreateAPIKeyTest() throws ApiException {
        Tenantuserv3CreateApiKeyRequest tenantuserv3CreateApiKeyRequest = null;
        Tenantuserv3CreateApiKeyResponse response = api.tenantuserCreateAPIKey(tenantuserv3CreateApiKeyRequest);
        // TODO: test validations
    }

    /**
     * Summary: Delete API key Description: Delete APIKey Document based on the document id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenantuserDeleteAPIKeyTest() throws ApiException {
        String id = null;
        Object response = api.tenantuserDeleteAPIKey(id);
        // TODO: test validations
    }

    /**
     * Summary: Delete role Description: Delete a role.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenantuserDeleteRoleTest() throws ApiException {
        String roleId = null;
        Object response = api.tenantuserDeleteRole(roleId);
        // TODO: test validations
    }

    /**
     * Summary: Get API keys Description: Get all APIKeys base on a tenant ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenantuserGetAPIKeysTest() throws ApiException {
        Tenantuserv3GetApiKeysResponse response = api.tenantuserGetAPIKeys();
        // TODO: test validations
    }

    /**
     * Summary: Get current user Description: Return the currently authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenantuserGetCurrentUserTest() throws ApiException {
        Tenantuserv3GetCurrentUserResponse response = api.tenantuserGetCurrentUser();
        // TODO: test validations
    }

    /**
     * Summary: Get privilege Description: Return privilege.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenantuserGetPrivilegeTest() throws ApiException {
        String privilegePrivilegeId = null;
        String privilegeType = null;
        Tenantuserv3GetPrivilegeResponse response = api.tenantuserGetPrivilege(privilegePrivilegeId, privilegeType);
        // TODO: test validations
    }

    /**
     * Summary: Get privileges Description: Return all available privileges (pages, restapi, reports, etc) if no roles are specified If roles are specified, returns cumulative privileges for the list of roles.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenantuserGetPrivilegesTest() throws ApiException {
        List<String> roles = null;
        String type = null;
        Tenantuserv3GetPrivilegesResponse response = api.tenantuserGetPrivileges(roles, type);
        // TODO: test validations
    }

    /**
     * Summary: Get role Description: Return single role.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenantuserGetRoleTest() throws ApiException {
        String roleId = null;
        Tenantuserv3Role response = api.tenantuserGetRole(roleId);
        // TODO: test validations
    }

    /**
     * Summary: Get roles Description: Return all roles without privileges.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenantuserGetRolesTest() throws ApiException {
        Tenantuserv3GetRolesResponse response = api.tenantuserGetRoles();
        // TODO: test validations
    }

    /**
     * Summary: Get user Description: Return full user for specified user_id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenantuserGetUserTest() throws ApiException {
        String userId = null;
        Tenantuserv3GetUserResponse response = api.tenantuserGetUser(userId);
        // TODO: test validations
    }

    /**
     * Summary: Get user names Description: Get user names.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenantuserGetUserNamesTest() throws ApiException {
        Tenantuserv3GetUserNamesRequest tenantuserv3GetUserNamesRequest = null;
        Tenantuserv3GetUserNamesResponse response = api.tenantuserGetUserNames(tenantuserv3GetUserNamesRequest);
        // TODO: test validations
    }

    /**
     * Summary: Get user tenant Description: Return the user plus tenant information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenantuserGetUserTenantTest() throws ApiException {
        String userId = null;
        Tenantuserv3GetUserTenantResponse response = api.tenantuserGetUserTenant(userId);
        // TODO: test validations
    }

    /**
     * Summary: Post privileges bulk Description: Perform bulk user add preivilege.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenantuserPostPrivilegesBulkTest() throws ApiException {
        Tenantuserv3PostPrivilegesBulkRequest tenantuserv3PostPrivilegesBulkRequest = null;
        Tenantuserv3PostPrivilegesBulkResponse response = api.tenantuserPostPrivilegesBulk(tenantuserv3PostPrivilegesBulkRequest);
        // TODO: test validations
    }

    /**
     * Summary: Post role Description: Create a new role.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenantuserPostRoleTest() throws ApiException {
        Tenantuserv3PostRoleRequest tenantuserv3PostRoleRequest = null;
        Tenantuserv3PostRoleResponse response = api.tenantuserPostRole(tenantuserv3PostRoleRequest);
        // TODO: test validations
    }

    /**
     * Summary: Update privilege Description: Update privilege.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenantuserUpdatePrivilegeTest() throws ApiException {
        String privilegeId = null;
        Tenantuserv3UpdatePrivilegeRequest tenantuserv3UpdatePrivilegeRequest = null;
        Tenantuserv3UpdatePrivilegeResponse response = api.tenantuserUpdatePrivilege(privilegeId, tenantuserv3UpdatePrivilegeRequest);
        // TODO: test validations
    }

    /**
     * Summary: Update privileges role bulk Description: Perform bulk user update role.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenantuserUpdatePrivilegesRoleBulkTest() throws ApiException {
        Tenantuserv3UpdatePrivilegesBulkRequest tenantuserv3UpdatePrivilegesBulkRequest = null;
        Tenantuserv3UpdatePrivilegesBulkResponse response = api.tenantuserUpdatePrivilegesRoleBulk(tenantuserv3UpdatePrivilegesBulkRequest);
        // TODO: test validations
    }

    /**
     * Summary: Update role Description: Update single role.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenantuserUpdateRoleTest() throws ApiException {
        String roleId = null;
        Tenantuserv3UpdateRoleRequest tenantuserv3UpdateRoleRequest = null;
        Tenantuserv3UpdateRoleResponse response = api.tenantuserUpdateRole(roleId, tenantuserv3UpdateRoleRequest);
        // TODO: test validations
    }

    /**
     * Summary: Update user role bulk Description: Perform bulk user add or remove role.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenantuserUpdateUserRoleBulkTest() throws ApiException {
        Tenantuserv3UpdateUserRoleBulkRequest tenantuserv3UpdateUserRoleBulkRequest = null;
        Tenantuserv3UpdateUserRoleBulkResponse response = api.tenantuserUpdateUserRoleBulk(tenantuserv3UpdateUserRoleBulkRequest);
        // TODO: test validations
    }

}
