/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ActualFlow;
import org.openapitools.client.model.ActualFlowsSummary;
import org.openapitools.client.model.Authenticate400Response;
import java.math.BigDecimal;
import org.openapitools.client.model.ListActualFlowPaths200Response;
import org.openapitools.client.model.ListActualFlowPathsFilterParameter;
import org.openapitools.client.model.ListActualFlowPathsSortParameter;
import org.openapitools.client.model.ListActualFlows200Response;
import org.openapitools.client.model.ListActualFlowsFilterParameter;
import org.openapitools.client.model.ListActualFlowsSortParameter;
import org.openapitools.client.model.ListPotentialFlows200Response;
import org.openapitools.client.model.ListPotentialFlowsPaths200Response;
import org.openapitools.client.model.PotentialFlow;
import org.openapitools.client.model.PotentialFlowPath;
import org.openapitools.client.model.PotentialFlowsFilterOptions;
import org.openapitools.client.model.PotentialFlowsPathsFilterOptions;
import org.openapitools.client.model.PotentialFlowsSummary;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DataMovementsApi
 */
@Disabled
public class DataMovementsApiTest {

    private final DataMovementsApi api = new DataMovementsApi();

    /**
     * Get actual flow by providing its ID
     *
     * Get a detailed information about an actual flow by providing its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getActualFlowTest() throws ApiException {
        String id = null;
        ActualFlow response = api.getActualFlow(id);
        // TODO: test validations
    }

    /**
     * Get summary of actual flows
     *
     * Get a summary of all the actual flows discovered by Guardium Insights SaaS DSPM, that is, details about source and destination, and other information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getActualFlowsSummaryTest() throws ApiException {
        ListActualFlowsFilterParameter filter = null;
        ActualFlowsSummary response = api.getActualFlowsSummary(filter);
        // TODO: test validations
    }

    /**
     * Get potential flow by providing its ID
     *
     * Get a detailed information about a potential flow by providing the flow ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPotentialFlowTest() throws ApiException {
        String flowId = null;
        PotentialFlow response = api.getPotentialFlow(flowId);
        // TODO: test validations
    }

    /**
     * Get potential flow path by providing its ID
     *
     * Get details of a specific potential flow of data by providing its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPotentialFlowPathTest() throws ApiException {
        String flowPathId = null;
        PotentialFlowPath response = api.getPotentialFlowPath(flowPathId);
        // TODO: test validations
    }

    /**
     * Get summary of potential flows according to the filter applied
     *
     * Get a summary of all the potential flows based on a filter applied.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPotentialFlowsSummaryTest() throws ApiException {
        PotentialFlowsFilterOptions filter = null;
        PotentialFlowsSummary response = api.getPotentialFlowsSummary(filter);
        // TODO: test validations
    }

    /**
     * Get summary of actual flows according to the filter applied
     *
     * Get detailed information about the actual flows according to the filter applied.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listActualFlowPathsTest() throws ApiException {
        ListActualFlowPathsSortParameter sort = null;
        ListActualFlowPathsFilterParameter filter = null;
        BigDecimal pageSize = null;
        String nextToken = null;
        ListActualFlowPaths200Response response = api.listActualFlowPaths(sort, filter, pageSize, nextToken);
        // TODO: test validations
    }

    /**
     * List actual flows
     *
     * List all the actual flows (based on logs) of users and services across your entire cloud accounts and SasS applications.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listActualFlowsTest() throws ApiException {
        ListActualFlowsSortParameter sort = null;
        ListActualFlowsFilterParameter filter = null;
        BigDecimal pageSize = null;
        String nextToken = null;
        ListActualFlows200Response response = api.listActualFlows(sort, filter, pageSize, nextToken);
        // TODO: test validations
    }

    /**
     * List potential flows
     *
     * List all the potential flows of users and services across your entire cloud accounts and SaaS applications.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPotentialFlowsTest() throws ApiException {
        PotentialFlowsFilterOptions filter = null;
        BigDecimal pageSize = null;
        String nextToken = null;
        ListPotentialFlows200Response response = api.listPotentialFlows(filter, pageSize, nextToken);
        // TODO: test validations
    }

    /**
     * List potential flow paths
     *
     * List all the potential flow paths based on an applied filter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listPotentialFlowsPathsTest() throws ApiException {
        PotentialFlowsPathsFilterOptions filter = null;
        BigDecimal pageSize = null;
        String nextToken = null;
        ListPotentialFlowsPaths200Response response = api.listPotentialFlowsPaths(filter, pageSize, nextToken);
        // TODO: test validations
    }

}
