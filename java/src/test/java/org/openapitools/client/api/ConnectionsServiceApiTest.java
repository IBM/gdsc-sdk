/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Connectionsv3CreateConnectionsAccountsRequest;
import org.openapitools.client.model.Connectionsv3CreateConnectionsAccountsResponse;
import org.openapitools.client.model.Connectionsv3CreateConnectionsConfigsRequest;
import org.openapitools.client.model.Connectionsv3CreateConnectionsConfigsResponse;
import org.openapitools.client.model.Connectionsv3CreatePluginRequest;
import org.openapitools.client.model.Connectionsv3CreatePluginResponse;
import org.openapitools.client.model.Connectionsv3CreateSettingsRequest;
import org.openapitools.client.model.Connectionsv3DeleteConnectionsAccountsResponse;
import org.openapitools.client.model.Connectionsv3DeleteConnectionsConfigsResponse;
import org.openapitools.client.model.Connectionsv3DeletePluginResponse;
import org.openapitools.client.model.Connectionsv3GetBannerStateResponse;
import org.openapitools.client.model.Connectionsv3GetConnectionsAccountsResponse;
import org.openapitools.client.model.Connectionsv3GetConnectionsConfigsResponse;
import org.openapitools.client.model.Connectionsv3GetConnectionsWithFiltersRequest;
import org.openapitools.client.model.Connectionsv3GetConnectionsWithFiltersResponse;
import org.openapitools.client.model.Connectionsv3GetConnectorsSummaryResponse;
import org.openapitools.client.model.Connectionsv3GetDataSourcesResponse;
import org.openapitools.client.model.Connectionsv3GetGuardRecordFieldsResponse;
import org.openapitools.client.model.Connectionsv3GetHeadersResponse;
import org.openapitools.client.model.Connectionsv3GetPluginsResponse;
import org.openapitools.client.model.Connectionsv3GetSettingsResponse;
import org.openapitools.client.model.Connectionsv3PartialUpdateConnectorsRequest;
import org.openapitools.client.model.Connectionsv3PartialUpdateConnectorsResponse;
import org.openapitools.client.model.Connectionsv3StapCommandRequest;
import org.openapitools.client.model.Connectionsv3StatusResponseBase;
import org.openapitools.client.model.Connectionsv3UpdateBannerStateRequest;
import org.openapitools.client.model.Connectionsv3UpdateBannerStateResponse;
import org.openapitools.client.model.Connectionsv3UpdateConnectionsAccountsRequest;
import org.openapitools.client.model.Connectionsv3UpdateConnectionsAccountsResponse;
import org.openapitools.client.model.Connectionsv3UpdateConnectionsConfigsRequest;
import org.openapitools.client.model.Connectionsv3UpdateConnectionsConfigsResponse;
import org.openapitools.client.model.Connectionsv3UpdateConnectorsRequest;
import org.openapitools.client.model.Connectionsv3UpdatePluginRequest;
import org.openapitools.client.model.Connectionsv3UpdatePluginResponse;
import org.openapitools.client.model.Connectionsv3UpdateSettingsRequest;
import org.openapitools.client.model.RuntimeError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConnectionsServiceApi
 */
@Disabled
public class ConnectionsServiceApiTest {

    private final ConnectionsServiceApi api = new ConnectionsServiceApi();

    /**
     * Summary: Create Connections accounts Description: Create Connections acccounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionsServiceCreateConnectionsAccountsTest() throws ApiException {
        Connectionsv3CreateConnectionsAccountsRequest connectionsv3CreateConnectionsAccountsRequest = null;
        Connectionsv3CreateConnectionsAccountsResponse response = api.connectionsServiceCreateConnectionsAccounts(connectionsv3CreateConnectionsAccountsRequest);
        // TODO: test validations
    }

    /**
     * Summary: Create connections configs Description: Create Connection config by connection type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionsServiceCreateConnectionsConfigsTest() throws ApiException {
        Connectionsv3CreateConnectionsConfigsRequest connectionsv3CreateConnectionsConfigsRequest = null;
        Connectionsv3CreateConnectionsConfigsResponse response = api.connectionsServiceCreateConnectionsConfigs(connectionsv3CreateConnectionsConfigsRequest);
        // TODO: test validations
    }

    /**
     * Summary: Create plugin Description: Create UC generic plugin
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionsServiceCreatePluginTest() throws ApiException {
        Connectionsv3CreatePluginRequest connectionsv3CreatePluginRequest = null;
        Connectionsv3CreatePluginResponse response = api.connectionsServiceCreatePlugin(connectionsv3CreatePluginRequest);
        // TODO: test validations
    }

    /**
     * Summary: Create settings Description: Create Settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionsServiceCreateSettingsTest() throws ApiException {
        Connectionsv3CreateSettingsRequest connectionsv3CreateSettingsRequest = null;
        Object response = api.connectionsServiceCreateSettings(connectionsv3CreateSettingsRequest);
        // TODO: test validations
    }

    /**
     * Summary: Delete Connections accounts Description: Delete Connections acccounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionsServiceDeleteConnectionsAccountsTest() throws ApiException {
        String accountId = null;
        Connectionsv3DeleteConnectionsAccountsResponse response = api.connectionsServiceDeleteConnectionsAccounts(accountId);
        // TODO: test validations
    }

    /**
     * Summary: Delete connections configs Description: Delete Connection config by connection id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionsServiceDeleteConnectionsConfigsTest() throws ApiException {
        String connectionId = null;
        Connectionsv3DeleteConnectionsConfigsResponse response = api.connectionsServiceDeleteConnectionsConfigs(connectionId);
        // TODO: test validations
    }

    /**
     * Summary: Delete connector Description: Delete a Connection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionsServiceDeleteConnectorTest() throws ApiException {
        String connectionId = null;
        Object response = api.connectionsServiceDeleteConnector(connectionId);
        // TODO: test validations
    }

    /**
     * Summary: Delete plugin. Description: Delete plugin.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionsServiceDeletePluginTest() throws ApiException {
        String id = null;
        Connectionsv3DeletePluginResponse response = api.connectionsServiceDeletePlugin(id);
        // TODO: test validations
    }

    /**
     * Summary: Get banner state for object verb page.  Description: Get banner state for object verb page.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionsServiceGetBannerStateTest() throws ApiException {
        Connectionsv3GetBannerStateResponse response = api.connectionsServiceGetBannerState();
        // TODO: test validations
    }

    /**
     * Summary: Get Connections accounts Description: Get Connections acccounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionsServiceGetConnectionsAccountsTest() throws ApiException {
        String accountId = null;
        String accessKey = null;
        Connectionsv3GetConnectionsAccountsResponse response = api.connectionsServiceGetConnectionsAccounts(accountId, accessKey);
        // TODO: test validations
    }

    /**
     * Summary: Get connections configs Description: Get Connection config by connection type.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionsServiceGetConnectionsConfigsTest() throws ApiException {
        String type = null;
        String connectionId = null;
        Connectionsv3GetConnectionsConfigsResponse response = api.connectionsServiceGetConnectionsConfigs(type, connectionId);
        // TODO: test validations
    }

    /**
     * Summary: Get connections with filters Description: Get connections with filters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionsServiceGetConnectionsWithFiltersTest() throws ApiException {
        Connectionsv3GetConnectionsWithFiltersRequest connectionsv3GetConnectionsWithFiltersRequest = null;
        Connectionsv3GetConnectionsWithFiltersResponse response = api.connectionsServiceGetConnectionsWithFilters(connectionsv3GetConnectionsWithFiltersRequest);
        // TODO: test validations
    }

    /**
     * Summary: Get connectors summary Description: Get a summary of Connectors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionsServiceGetConnectorsSummaryTest() throws ApiException {
        Connectionsv3GetConnectorsSummaryResponse response = api.connectionsServiceGetConnectorsSummary();
        // TODO: test validations
    }

    /**
     * Summary: Get data sources Description: Get a list of data sources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionsServiceGetDataSourcesTest() throws ApiException {
        Connectionsv3GetDataSourcesResponse response = api.connectionsServiceGetDataSources();
        // TODO: test validations
    }

    /**
     * Summary: Get list of guard record fields.  Description: Get list of guard record fields.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionsServiceGetGuardRecordFieldsTest() throws ApiException {
        Connectionsv3GetGuardRecordFieldsResponse response = api.connectionsServiceGetGuardRecordFields();
        // TODO: test validations
    }

    /**
     * Summary: Get headers Description: Get a list of Headers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionsServiceGetHeadersTest() throws ApiException {
        Connectionsv3GetHeadersResponse response = api.connectionsServiceGetHeaders();
        // TODO: test validations
    }

    /**
     * Summary: Get plugins  Description: Get custom universal connector plugins
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionsServiceGetPluginsTest() throws ApiException {
        String id = null;
        Connectionsv3GetPluginsResponse response = api.connectionsServiceGetPlugins(id);
        // TODO: test validations
    }

    /**
     * Summary: Get settings Description: Get a list of Settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionsServiceGetSettingsTest() throws ApiException {
        Connectionsv3GetSettingsResponse response = api.connectionsServiceGetSettings();
        // TODO: test validations
    }

    /**
     * Summary: Partial update connectors Description: Partial update of Connectors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionsServicePartialUpdateConnectorsTest() throws ApiException {
        Connectionsv3PartialUpdateConnectorsRequest connectionsv3PartialUpdateConnectorsRequest = null;
        Connectionsv3PartialUpdateConnectorsResponse response = api.connectionsServicePartialUpdateConnectors(connectionsv3PartialUpdateConnectorsRequest);
        // TODO: test validations
    }

    /**
     * Summary: Post stap command Description: Send a STAP command down to kafka for snif-assist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionsServicePostStapCommandTest() throws ApiException {
        Connectionsv3StapCommandRequest connectionsv3StapCommandRequest = null;
        Connectionsv3StatusResponseBase response = api.connectionsServicePostStapCommand(connectionsv3StapCommandRequest);
        // TODO: test validations
    }

    /**
     * Summary: Update banner state for object verb page.  Description: Update banner state for object verb page.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionsServiceUpdateBannerStateTest() throws ApiException {
        Connectionsv3UpdateBannerStateRequest connectionsv3UpdateBannerStateRequest = null;
        Connectionsv3UpdateBannerStateResponse response = api.connectionsServiceUpdateBannerState(connectionsv3UpdateBannerStateRequest);
        // TODO: test validations
    }

    /**
     * Summary: Update Connections accounts Description: Update Connections acccounts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionsServiceUpdateConnectionsAccountsTest() throws ApiException {
        Connectionsv3UpdateConnectionsAccountsRequest connectionsv3UpdateConnectionsAccountsRequest = null;
        Connectionsv3UpdateConnectionsAccountsResponse response = api.connectionsServiceUpdateConnectionsAccounts(connectionsv3UpdateConnectionsAccountsRequest);
        // TODO: test validations
    }

    /**
     * Summary: Update connections configs Description: Update Connection config by connection id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionsServiceUpdateConnectionsConfigsTest() throws ApiException {
        Connectionsv3UpdateConnectionsConfigsRequest connectionsv3UpdateConnectionsConfigsRequest = null;
        Connectionsv3UpdateConnectionsConfigsResponse response = api.connectionsServiceUpdateConnectionsConfigs(connectionsv3UpdateConnectionsConfigsRequest);
        // TODO: test validations
    }

    /**
     * Summary: Update connectors Description: Update a list of Connectors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionsServiceUpdateConnectorsTest() throws ApiException {
        Connectionsv3UpdateConnectorsRequest connectionsv3UpdateConnectorsRequest = null;
        Object response = api.connectionsServiceUpdateConnectors(connectionsv3UpdateConnectorsRequest);
        // TODO: test validations
    }

    /**
     * Summary: Update plugin. Description: Update plugin.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionsServiceUpdatePluginTest() throws ApiException {
        String id = null;
        Connectionsv3UpdatePluginRequest connectionsv3UpdatePluginRequest = null;
        Connectionsv3UpdatePluginResponse response = api.connectionsServiceUpdatePlugin(id, connectionsv3UpdatePluginRequest);
        // TODO: test validations
    }

    /**
     * Summary: Update settings Description: Update Settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void connectionsServiceUpdateSettingsTest() throws ApiException {
        Connectionsv3UpdateSettingsRequest connectionsv3UpdateSettingsRequest = null;
        Object response = api.connectionsServiceUpdateSettings(connectionsv3UpdateSettingsRequest);
        // TODO: test validations
    }

}
