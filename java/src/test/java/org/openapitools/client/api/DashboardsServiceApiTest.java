/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Dashboardsv3CreateDashboardResponse;
import org.openapitools.client.model.Dashboardsv3Dashboard;
import org.openapitools.client.model.Dashboardsv3DeleteDashboardRequest;
import org.openapitools.client.model.Dashboardsv3DeleteDashboardResponse;
import org.openapitools.client.model.Dashboardsv3GetDashboardsResponse;
import org.openapitools.client.model.Dashboardsv3UpdateDashboardRequest;
import org.openapitools.client.model.Dashboardsv3UpdateDashboardResponse;
import org.openapitools.client.model.RuntimeError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DashboardsServiceApi
 */
@Disabled
public class DashboardsServiceApiTest {

    private final DashboardsServiceApi api = new DashboardsServiceApi();

    /**
     * Summary: Create dashboard Description: Create a unique dashboard.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dashboardsServiceCreateDashboardTest() throws ApiException {
        Dashboardsv3Dashboard dashboardsv3Dashboard = null;
        Dashboardsv3CreateDashboardResponse response = api.dashboardsServiceCreateDashboard(dashboardsv3Dashboard);
        // TODO: test validations
    }

    /**
     * Summary: Delete dashboard Description: Delete a unique dashboard.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dashboardsServiceDeleteDashboardTest() throws ApiException {
        String dashboardId = null;
        Dashboardsv3DeleteDashboardRequest dashboardsv3DeleteDashboardRequest = null;
        Dashboardsv3DeleteDashboardResponse response = api.dashboardsServiceDeleteDashboard(dashboardId, dashboardsv3DeleteDashboardRequest);
        // TODO: test validations
    }

    /**
     * Summary: Get dashboards Description: Get a list of dashboards with all data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dashboardsServiceGetDashboardsTest() throws ApiException {
        Dashboardsv3GetDashboardsResponse response = api.dashboardsServiceGetDashboards();
        // TODO: test validations
    }

    /**
     * Summary: Update dashboard Description: Update a dashboard.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dashboardsServiceUpdateDashboardTest() throws ApiException {
        String dashboardId = null;
        Dashboardsv3UpdateDashboardRequest dashboardsv3UpdateDashboardRequest = null;
        Dashboardsv3UpdateDashboardResponse response = api.dashboardsServiceUpdateDashboard(dashboardId, dashboardsv3UpdateDashboardRequest);
        // TODO: test validations
    }

}
