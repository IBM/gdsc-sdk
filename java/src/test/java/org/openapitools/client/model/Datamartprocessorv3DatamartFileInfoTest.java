/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for Datamartprocessorv3DatamartFileInfo
 */
public class Datamartprocessorv3DatamartFileInfoTest {
    private final Datamartprocessorv3DatamartFileInfo model = new Datamartprocessorv3DatamartFileInfo();

    /**
     * Model tests for Datamartprocessorv3DatamartFileInfo
     */
    @Test
    public void testDatamartprocessorv3DatamartFileInfo() {
        // TODO: test Datamartprocessorv3DatamartFileInfo
    }

    /**
     * Test the property 'error'
     */
    @Test
    public void errorTest() {
        // TODO: test error
    }

    /**
     * Test the property 'failedState'
     */
    @Test
    public void failedStateTest() {
        // TODO: test failedState
    }

    /**
     * Test the property 'fileName'
     */
    @Test
    public void fileNameTest() {
        // TODO: test fileName
    }

    /**
     * Test the property 'fileStatus'
     */
    @Test
    public void fileStatusTest() {
        // TODO: test fileStatus
    }

    /**
     * Test the property 'ingestRecordCount'
     */
    @Test
    public void ingestRecordCountTest() {
        // TODO: test ingestRecordCount
    }

    /**
     * Test the property 'retryCount'
     */
    @Test
    public void retryCountTest() {
        // TODO: test retryCount
    }

    /**
     * Test the property 'retryEndTime'
     */
    @Test
    public void retryEndTimeTest() {
        // TODO: test retryEndTime
    }

    /**
     * Test the property 'retryStartTime'
     */
    @Test
    public void retryStartTimeTest() {
        // TODO: test retryStartTime
    }

}
