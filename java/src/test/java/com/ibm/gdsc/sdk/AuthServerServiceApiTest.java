/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import com.ibm.gdsc.ApiException;
import com.ibm.gdsc.sdk.AuthserverCreateOauthClientRequest;
import com.ibm.gdsc.sdk.AuthserverCreateOauthClientResponse;
import com.ibm.gdsc.sdk.AuthserverGetAccessTokenResponse;
import com.ibm.gdsc.sdk.AuthserverGetOauthClientResponse;
import com.ibm.gdsc.sdk.AuthserverGetUserResponse;
import com.ibm.gdsc.sdk.AuthserverListOauthClientResponse;
import com.ibm.gdsc.sdk.RuntimeError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthServerServiceApi
 */
@Disabled
public class AuthServerServiceApiTest {

    private final AuthServerServiceApi api = new AuthServerServiceApi();

    /**
     * Summary: Create Oauth client Description: Create/register new Oauth client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authServerServiceCreateOauthClientTest() throws ApiException {
        AuthserverCreateOauthClientRequest authserverCreateOauthClientRequest = null;
        AuthserverCreateOauthClientResponse response = api.authServerServiceCreateOauthClient(authserverCreateOauthClientRequest);
        // TODO: test validations
    }

    /**
     * Summary: Delete Oauth client Description: Delete registered Oauth client by clientId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authServerServiceDeleteOauthClientTest() throws ApiException {
        String clientId = null;
        Object response = api.authServerServiceDeleteOauthClient(clientId);
        // TODO: test validations
    }

    /**
     * Summary: Get access token Description: Get access token from passed clientId and secret.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authServerServiceGetAccessTokenTest() throws ApiException {
        AuthserverGetAccessTokenResponse response = api.authServerServiceGetAccessToken();
        // TODO: test validations
    }

    /**
     * Summary: Get Oauth client Description: Get registered Oauth client by clientId.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authServerServiceGetOauthClientTest() throws ApiException {
        String clientId = null;
        AuthserverGetOauthClientResponse response = api.authServerServiceGetOauthClient(clientId);
        // TODO: test validations
    }

    /**
     * Summary: Get user Description: Get user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authServerServiceGetUserTest() throws ApiException {
        AuthserverGetUserResponse response = api.authServerServiceGetUser();
        // TODO: test validations
    }

    /**
     * Summary: List Oauth client Description: List all registered Oauth client.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void authServerServiceListOauthClientTest() throws ApiException {
        AuthserverListOauthClientResponse response = api.authServerServiceListOauthClient();
        // TODO: test validations
    }

}
