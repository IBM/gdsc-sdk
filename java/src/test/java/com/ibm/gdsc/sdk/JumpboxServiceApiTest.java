/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import com.ibm.gdsc.ApiException;
import com.ibm.gdsc.sdk.Jumpboxv3AuthorizeRequest;
import com.ibm.gdsc.sdk.Jumpboxv3AuthorizeResponse;
import com.ibm.gdsc.sdk.Jumpboxv3GetTenantResponse;
import com.ibm.gdsc.sdk.Jumpboxv3GetTenantsResponse;
import com.ibm.gdsc.sdk.Jumpboxv3PostTenantsRequest;
import com.ibm.gdsc.sdk.Jumpboxv3PostTenantsResponse;
import com.ibm.gdsc.sdk.Jumpboxv3PostUsersBulkRequest;
import com.ibm.gdsc.sdk.Jumpboxv3PostUsersBulkResponse;
import com.ibm.gdsc.sdk.Jumpboxv3SearchUsersRequest;
import com.ibm.gdsc.sdk.Jumpboxv3SearchUsersResponse;
import com.ibm.gdsc.sdk.Jumpboxv3TestUserRequest;
import com.ibm.gdsc.sdk.Jumpboxv3TestUserResponse;
import com.ibm.gdsc.sdk.Jumpboxv3UpdateTenantRequest;
import com.ibm.gdsc.sdk.Jumpboxv3UpdateTenantResponse;
import com.ibm.gdsc.sdk.Jumpboxv3UpdateUsersBulkRequest;
import com.ibm.gdsc.sdk.Jumpboxv3UpdateUsersBulkResponse;
import com.ibm.gdsc.sdk.RuntimeError;
import com.ibm.gdsc.sdk.Tenantuserv3GetUsersResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for JumpboxServiceApi
 */
@Disabled
public class JumpboxServiceApiTest {

    private final JumpboxServiceApi api = new JumpboxServiceApi();

    /**
     * Summary: Authorize Description: Authenticate a user and return a JWT.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jumpboxServiceAuthorizeTest() throws ApiException {
        Jumpboxv3AuthorizeRequest jumpboxv3AuthorizeRequest = null;
        Jumpboxv3AuthorizeResponse response = api.jumpboxServiceAuthorize(jumpboxv3AuthorizeRequest);
        // TODO: test validations
    }

    /**
     * Summary: Delete tenant Description: Delete a tenant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jumpboxServiceDeleteTenantTest() throws ApiException {
        String tenantId = null;
        Boolean isPermanentDelete = null;
        Boolean async = null;
        Object response = api.jumpboxServiceDeleteTenant(tenantId, isPermanentDelete, async);
        // TODO: test validations
    }

    /**
     * Summary: Delete user Description: Delete the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jumpboxServiceDeleteUserTest() throws ApiException {
        String userId = null;
        Object response = api.jumpboxServiceDeleteUser(userId);
        // TODO: test validations
    }

    /**
     * Summary: Get tenant Description: Get a tenant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jumpboxServiceGetTenantTest() throws ApiException {
        String tenantId = null;
        Boolean includeInactive = null;
        Boolean includeNotReady = null;
        Jumpboxv3GetTenantResponse response = api.jumpboxServiceGetTenant(tenantId, includeInactive, includeNotReady);
        // TODO: test validations
    }

    /**
     * Summary: Get tenants Description: Get all tenant base on UID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jumpboxServiceGetTenantsTest() throws ApiException {
        String uid = null;
        String externalId = null;
        Boolean includeInactive = null;
        Boolean includeNotReady = null;
        Jumpboxv3GetTenantsResponse response = api.jumpboxServiceGetTenants(uid, externalId, includeInactive, includeNotReady);
        // TODO: test validations
    }

    /**
     * Summary: Get users Description: Get all users base on a tenantID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jumpboxServiceGetUsersTest() throws ApiException {
        String uid = null;
        Tenantuserv3GetUsersResponse response = api.jumpboxServiceGetUsers(uid);
        // TODO: test validations
    }

    /**
     * Summary: Post tenants Description: Create a tenant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jumpboxServicePostTenantsTest() throws ApiException {
        Jumpboxv3PostTenantsRequest jumpboxv3PostTenantsRequest = null;
        Jumpboxv3PostTenantsResponse response = api.jumpboxServicePostTenants(jumpboxv3PostTenantsRequest);
        // TODO: test validations
    }

    /**
     * Summary: Post users Description: Create users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jumpboxServicePostUsersTest() throws ApiException {
        Jumpboxv3PostUsersBulkRequest jumpboxv3PostUsersBulkRequest = null;
        Jumpboxv3PostUsersBulkResponse response = api.jumpboxServicePostUsers(jumpboxv3PostUsersBulkRequest);
        // TODO: test validations
    }

    /**
     * Summary: Search users Description: Search for all users matching the provided string.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jumpboxServiceSearchUsersTest() throws ApiException {
        Jumpboxv3SearchUsersRequest jumpboxv3SearchUsersRequest = null;
        Jumpboxv3SearchUsersResponse response = api.jumpboxServiceSearchUsers(jumpboxv3SearchUsersRequest);
        // TODO: test validations
    }

    /**
     * Summary: Test user Description: Test a user lookup to a given LDAP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jumpboxServiceTestUserTest() throws ApiException {
        Jumpboxv3TestUserRequest jumpboxv3TestUserRequest = null;
        Jumpboxv3TestUserResponse response = api.jumpboxServiceTestUser(jumpboxv3TestUserRequest);
        // TODO: test validations
    }

    /**
     * Summary: Update tenant Description: Update a tenant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jumpboxServiceUpdateTenantTest() throws ApiException {
        String tenantId = null;
        Jumpboxv3UpdateTenantRequest jumpboxv3UpdateTenantRequest = null;
        Jumpboxv3UpdateTenantResponse response = api.jumpboxServiceUpdateTenant(tenantId, jumpboxv3UpdateTenantRequest);
        // TODO: test validations
    }

    /**
     * Summary: Update users Description: Update an array of users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void jumpboxServiceUpdateUsersTest() throws ApiException {
        Jumpboxv3UpdateUsersBulkRequest jumpboxv3UpdateUsersBulkRequest = null;
        Jumpboxv3UpdateUsersBulkResponse response = api.jumpboxServiceUpdateUsers(jumpboxv3UpdateUsersBulkRequest);
        // TODO: test validations
    }

}
