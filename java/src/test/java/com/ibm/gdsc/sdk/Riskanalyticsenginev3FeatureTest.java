/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.gdsc.sdk.Riskanalyticsenginev3MethodType;
import com.ibm.gdsc.sdk.Riskanalyticsenginev3SeverityLevel;
import java.io.IOException;
import java.util.Arrays;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for Riskanalyticsenginev3Feature
 */
public class Riskanalyticsenginev3FeatureTest {
    private final Riskanalyticsenginev3Feature model = new Riskanalyticsenginev3Feature();

    /**
     * Model tests for Riskanalyticsenginev3Feature
     */
    @Test
    public void testRiskanalyticsenginev3Feature() {
        // TODO: test Riskanalyticsenginev3Feature
    }

    /**
     * Test the property 'featureNls'
     */
    @Test
    public void featureNlsTest() {
        // TODO: test featureNls
    }

    /**
     * Test the property 'isObservation'
     */
    @Test
    public void isObservationTest() {
        // TODO: test isObservation
    }

    /**
     * Test the property 'isZero'
     */
    @Test
    public void isZeroTest() {
        // TODO: test isZero
    }

    /**
     * Test the property 'key'
     */
    @Test
    public void keyTest() {
        // TODO: test key
    }

    /**
     * Test the property 'methodType'
     */
    @Test
    public void methodTypeTest() {
        // TODO: test methodType
    }

    /**
     * Test the property 'originalValue'
     */
    @Test
    public void originalValueTest() {
        // TODO: test originalValue
    }

    /**
     * Test the property 'score'
     */
    @Test
    public void scoreTest() {
        // TODO: test score
    }

    /**
     * Test the property 'sequence'
     */
    @Test
    public void sequenceTest() {
        // TODO: test sequence
    }

    /**
     * Test the property 'severityLevel'
     */
    @Test
    public void severityLevelTest() {
        // TODO: test severityLevel
    }

    /**
     * Test the property 'value'
     */
    @Test
    public void valueTest() {
        // TODO: test value
    }

}
