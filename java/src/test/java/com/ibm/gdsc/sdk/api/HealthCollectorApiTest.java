/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk.api;

import com.ibm.gdsc.sdk.ApiException;
import com.ibm.gdsc.sdk.models.Healthcollectorv3GetDataWarehouseUsageResponse;
import com.ibm.gdsc.sdk.models.Healthcollectorv3GetGDPHealthInfoResponse;
import com.ibm.gdsc.sdk.models.Healthcollectorv3GetHistoricalHealthInfoResponse;
import com.ibm.gdsc.sdk.models.Healthcollectorv3GetObjectStorageUsageResponse;
import com.ibm.gdsc.sdk.models.Healthcollectorv3GetPVCUsageResponse;
import com.ibm.gdsc.sdk.models.Healthcollectorv3GetPodRestartsResponse;
import com.ibm.gdsc.sdk.models.Healthcollectorv3GetStreamsIngestionResponse;
import com.ibm.gdsc.sdk.models.Healthcollectorv3GetTopGDPCollectorsResponse;
import com.ibm.gdsc.sdk.models.Healthcollectorv3StoreEdgeMetricsRequest;
import com.ibm.gdsc.sdk.models.Healthcollectorv3StoreEdgeMetricsResponse;
import com.ibm.gdsc.sdk.models.Healthcollectorv3StoreHealthInfoRequest;
import com.ibm.gdsc.sdk.models.Healthcollectorv3StoreHealthInfoResponse;
import java.time.OffsetDateTime;
import com.ibm.gdsc.sdk.models.RuntimeError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for HealthCollectorApi
 */
@Disabled
public class HealthCollectorApiTest {

    private final HealthCollectorApi api = new HealthCollectorApi();

    /**
     * Summary: Get data warehouse usage info Description: Get information from Db2 related to usage
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void healthCollectorGetDataWarehouseUsageTest() throws ApiException {
        String type = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Healthcollectorv3GetDataWarehouseUsageResponse response = api.healthCollectorGetDataWarehouseUsage(type, startTime, endTime);
        // TODO: test validations
    }

    /**
     * Summary: Get GDP health info Description: Get information from MongoDB for Guardium central managers using health-connector service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void healthCollectorGetGDPHealthInfoTest() throws ApiException {
        Healthcollectorv3GetGDPHealthInfoResponse response = api.healthCollectorGetGDPHealthInfo();
        // TODO: test validations
    }

    /**
     * Summary: Get historical health info Description: Retrieve historical s-tap related statistics from health-collector service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void healthCollectorGetHistoricalHealthInfoTest() throws ApiException {
        String unit = null;
        String cmId = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Healthcollectorv3GetHistoricalHealthInfoResponse response = api.healthCollectorGetHistoricalHealthInfo(unit, cmId, startTime, endTime);
        // TODO: test validations
    }

    /**
     * Summary: Get object storage usage info Description: Get information from object storage about tenant bucket usage
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void healthCollectorGetObjectStorageUsageTest() throws ApiException {
        String type = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Healthcollectorv3GetObjectStorageUsageResponse response = api.healthCollectorGetObjectStorageUsage(type, startTime, endTime);
        // TODO: test validations
    }

    /**
     * Summary: Get the PVC usage information Description: Get information about the PVC usage in the OCP cluster
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void healthCollectorGetPVCUsageTest() throws ApiException {
        String type = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Healthcollectorv3GetPVCUsageResponse response = api.healthCollectorGetPVCUsage(type, startTime, endTime);
        // TODO: test validations
    }

    /**
     * Summary: Get the pod restart information Description: Get information about the number of restarts by pod in OCP
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void healthCollectorGetPodRestartsTest() throws ApiException {
        String type = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Healthcollectorv3GetPodRestartsResponse response = api.healthCollectorGetPodRestarts(type, startTime, endTime);
        // TODO: test validations
    }

    /**
     * Summary: Get streams ingestion volume over a given time Description: Get information about streams ingestion volume
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void healthCollectorGetStreamsIngestionTest() throws ApiException {
        String type = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Healthcollectorv3GetStreamsIngestionResponse response = api.healthCollectorGetStreamsIngestion(type, startTime, endTime);
        // TODO: test validations
    }

    /**
     * Summary: Get the top GDP collectors which send data to GI Description: Get information about the top GDP collectors
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void healthCollectorGetTopGDPCollectorsTest() throws ApiException {
        String type = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        Healthcollectorv3GetTopGDPCollectorsResponse response = api.healthCollectorGetTopGDPCollectors(type, startTime, endTime);
        // TODO: test validations
    }

    /**
     * Summary: Store Edge metrics Description: Store telemetry data from the Edge&#39;s connected to GI.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void healthCollectorStoreEdgeMetricsTest() throws ApiException {
        Healthcollectorv3StoreEdgeMetricsRequest healthcollectorv3StoreEdgeMetricsRequest = null;
        Healthcollectorv3StoreEdgeMetricsResponse response = api.healthCollectorStoreEdgeMetrics(healthcollectorv3StoreEdgeMetricsRequest);
        // TODO: test validations
    }

    /**
     * Summary: Store health info Description: Store health info from GDP into GI. (This API is called from GDP only)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void healthCollectorStoreHealthInfoTest() throws ApiException {
        String centralManagerId = null;
        Healthcollectorv3StoreHealthInfoRequest healthcollectorv3StoreHealthInfoRequest = null;
        Healthcollectorv3StoreHealthInfoResponse response = api.healthCollectorStoreHealthInfo(centralManagerId, healthcollectorv3StoreHealthInfoRequest);
        // TODO: test validations
    }

}
