/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.ibm.gdsc.sdk.Policybuilderv3ParameterRelationShip;
import com.ibm.gdsc.sdk.Policybuilderv3PossibleValueObj;
import com.ibm.gdsc.sdk.Policybuilderv3RuleType;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for Policybuilderv3RuleParameterMetadata
 */
public class Policybuilderv3RuleParameterMetadataTest {
    private final Policybuilderv3RuleParameterMetadata model = new Policybuilderv3RuleParameterMetadata();

    /**
     * Model tests for Policybuilderv3RuleParameterMetadata
     */
    @Test
    public void testPolicybuilderv3RuleParameterMetadata() {
        // TODO: test Policybuilderv3RuleParameterMetadata
    }

    /**
     * Test the property 'defaultValue'
     */
    @Test
    public void defaultValueTest() {
        // TODO: test defaultValue
    }

    /**
     * Test the property 'description'
     */
    @Test
    public void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'groupTypeId'
     */
    @Test
    public void groupTypeIdTest() {
        // TODO: test groupTypeId
    }

    /**
     * Test the property 'hasEvery'
     */
    @Test
    public void hasEveryTest() {
        // TODO: test hasEvery
    }

    /**
     * Test the property 'hasGroup'
     */
    @Test
    public void hasGroupTest() {
        // TODO: test hasGroup
    }

    /**
     * Test the property 'hasNot'
     */
    @Test
    public void hasNotTest() {
        // TODO: test hasNot
    }

    /**
     * Test the property 'label'
     */
    @Test
    public void labelTest() {
        // TODO: test label
    }

    /**
     * Test the property 'mandatory'
     */
    @Test
    public void mandatoryTest() {
        // TODO: test mandatory
    }

    /**
     * Test the property 'parameterName'
     */
    @Test
    public void parameterNameTest() {
        // TODO: test parameterName
    }

    /**
     * Test the property 'possibleValues'
     */
    @Test
    public void possibleValuesTest() {
        // TODO: test possibleValues
    }

    /**
     * Test the property 'relationships'
     */
    @Test
    public void relationshipsTest() {
        // TODO: test relationships
    }

    /**
     * Test the property 'ruleCategory'
     */
    @Test
    public void ruleCategoryTest() {
        // TODO: test ruleCategory
    }

    /**
     * Test the property 'ruleType'
     */
    @Test
    public void ruleTypeTest() {
        // TODO: test ruleType
    }

    /**
     * Test the property 'standaloneParameter'
     */
    @Test
    public void standaloneParameterTest() {
        // TODO: test standaloneParameter
    }

    /**
     * Test the property 'supportedDbTypes'
     */
    @Test
    public void supportedDbTypesTest() {
        // TODO: test supportedDbTypes
    }

    /**
     * Test the property 'type'
     */
    @Test
    public void typeTest() {
        // TODO: test type
    }

    /**
     * Test the property 'valueLength'
     */
    @Test
    public void valueLengthTest() {
        // TODO: test valueLength
    }

}
