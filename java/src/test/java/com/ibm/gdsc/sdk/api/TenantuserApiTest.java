/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk.api;

import com.ibm.gdsc.sdk.ApiException;
import com.ibm.gdsc.sdk.models.RuntimeError;
import com.ibm.gdsc.sdk.models.Tenantuserv3CreateApiKeyRequest;
import com.ibm.gdsc.sdk.models.Tenantuserv3CreateApiKeyResponse;
import com.ibm.gdsc.sdk.models.Tenantuserv3GetApiKeysResponse;
import com.ibm.gdsc.sdk.models.Tenantuserv3GetCurrentUserResponse;
import com.ibm.gdsc.sdk.models.Tenantuserv3GetPrivilegeResponse;
import com.ibm.gdsc.sdk.models.Tenantuserv3GetPrivilegesResponse;
import com.ibm.gdsc.sdk.models.Tenantuserv3GetRolesResponse;
import com.ibm.gdsc.sdk.models.Tenantuserv3GetUserNamesRequest;
import com.ibm.gdsc.sdk.models.Tenantuserv3GetUserNamesResponse;
import com.ibm.gdsc.sdk.models.Tenantuserv3GetUserResponse;
import com.ibm.gdsc.sdk.models.Tenantuserv3GetUserTenantResponse;
import com.ibm.gdsc.sdk.models.Tenantuserv3PostPrivilegesBulkRequest;
import com.ibm.gdsc.sdk.models.Tenantuserv3PostPrivilegesBulkResponse;
import com.ibm.gdsc.sdk.models.Tenantuserv3PostRoleRequest;
import com.ibm.gdsc.sdk.models.Tenantuserv3PostRoleResponse;
import com.ibm.gdsc.sdk.models.Tenantuserv3Role;
import com.ibm.gdsc.sdk.models.Tenantuserv3UpdatePrivilegeRequest;
import com.ibm.gdsc.sdk.models.Tenantuserv3UpdatePrivilegeResponse;
import com.ibm.gdsc.sdk.models.Tenantuserv3UpdatePrivilegesBulkRequest;
import com.ibm.gdsc.sdk.models.Tenantuserv3UpdatePrivilegesBulkResponse;
import com.ibm.gdsc.sdk.models.Tenantuserv3UpdateRoleRequest;
import com.ibm.gdsc.sdk.models.Tenantuserv3UpdateRoleResponse;
import com.ibm.gdsc.sdk.models.Tenantuserv3UpdateUserRoleBulkRequest;
import com.ibm.gdsc.sdk.models.Tenantuserv3UpdateUserRoleBulkResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TenantuserApi
 */
@Disabled
public class TenantuserApiTest {

    private final TenantuserApi api = new TenantuserApi();

    /**
     * Summary: Create API key Description: Create API Key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenantuserCreateAPIKeyTest() throws ApiException {
        Tenantuserv3CreateApiKeyRequest tenantuserv3CreateApiKeyRequest = null;
        Tenantuserv3CreateApiKeyResponse response = api.tenantuserCreateAPIKey(tenantuserv3CreateApiKeyRequest);
        // TODO: test validations
    }

    /**
     * Summary: Delete API key Description: Delete APIKey Document based on the document id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenantuserDeleteAPIKeyTest() throws ApiException {
        String id = null;
        Object response = api.tenantuserDeleteAPIKey(id);
        // TODO: test validations
    }

    /**
     * Summary: Delete role Description: Delete a role.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenantuserDeleteRoleTest() throws ApiException {
        String roleId = null;
        Object response = api.tenantuserDeleteRole(roleId);
        // TODO: test validations
    }

    /**
     * Summary: Get API keys Description: Get all APIKeys base on a tenant ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenantuserGetAPIKeysTest() throws ApiException {
        Tenantuserv3GetApiKeysResponse response = api.tenantuserGetAPIKeys();
        // TODO: test validations
    }

    /**
     * Summary: Get current user Description: Return the currently authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenantuserGetCurrentUserTest() throws ApiException {
        Tenantuserv3GetCurrentUserResponse response = api.tenantuserGetCurrentUser();
        // TODO: test validations
    }

    /**
     * Summary: Get privilege Description: Return privilege.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenantuserGetPrivilegeTest() throws ApiException {
        String privilegePrivilegeId = null;
        String privilegeType = null;
        Tenantuserv3GetPrivilegeResponse response = api.tenantuserGetPrivilege(privilegePrivilegeId, privilegeType);
        // TODO: test validations
    }

    /**
     * Summary: Get privileges Description: Return all available privileges (pages, restapi, reports, etc) if no roles are specified If roles are specified, returns cumulative privileges for the list of roles.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenantuserGetPrivilegesTest() throws ApiException {
        List<String> roles = null;
        String type = null;
        Tenantuserv3GetPrivilegesResponse response = api.tenantuserGetPrivileges(roles, type);
        // TODO: test validations
    }

    /**
     * Summary: Get role Description: Return single role.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenantuserGetRoleTest() throws ApiException {
        String roleId = null;
        Tenantuserv3Role response = api.tenantuserGetRole(roleId);
        // TODO: test validations
    }

    /**
     * Summary: Get roles Description: Return all roles without privileges.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenantuserGetRolesTest() throws ApiException {
        Tenantuserv3GetRolesResponse response = api.tenantuserGetRoles();
        // TODO: test validations
    }

    /**
     * Summary: Get user Description: Return full user for specified user_id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenantuserGetUserTest() throws ApiException {
        String userId = null;
        Tenantuserv3GetUserResponse response = api.tenantuserGetUser(userId);
        // TODO: test validations
    }

    /**
     * Summary: Get user names Description: Get user names.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenantuserGetUserNamesTest() throws ApiException {
        Tenantuserv3GetUserNamesRequest tenantuserv3GetUserNamesRequest = null;
        Tenantuserv3GetUserNamesResponse response = api.tenantuserGetUserNames(tenantuserv3GetUserNamesRequest);
        // TODO: test validations
    }

    /**
     * Summary: Get user tenant Description: Return the user plus tenant information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenantuserGetUserTenantTest() throws ApiException {
        String userId = null;
        Tenantuserv3GetUserTenantResponse response = api.tenantuserGetUserTenant(userId);
        // TODO: test validations
    }

    /**
     * Summary: Post privileges bulk Description: Perform bulk user add preivilege.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenantuserPostPrivilegesBulkTest() throws ApiException {
        Tenantuserv3PostPrivilegesBulkRequest tenantuserv3PostPrivilegesBulkRequest = null;
        Tenantuserv3PostPrivilegesBulkResponse response = api.tenantuserPostPrivilegesBulk(tenantuserv3PostPrivilegesBulkRequest);
        // TODO: test validations
    }

    /**
     * Summary: Post role Description: Create a new role.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenantuserPostRoleTest() throws ApiException {
        Tenantuserv3PostRoleRequest tenantuserv3PostRoleRequest = null;
        Tenantuserv3PostRoleResponse response = api.tenantuserPostRole(tenantuserv3PostRoleRequest);
        // TODO: test validations
    }

    /**
     * Summary: Update privilege Description: Update privilege.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenantuserUpdatePrivilegeTest() throws ApiException {
        String privilegeId = null;
        Tenantuserv3UpdatePrivilegeRequest tenantuserv3UpdatePrivilegeRequest = null;
        Tenantuserv3UpdatePrivilegeResponse response = api.tenantuserUpdatePrivilege(privilegeId, tenantuserv3UpdatePrivilegeRequest);
        // TODO: test validations
    }

    /**
     * Summary: Update privileges role bulk Description: Perform bulk user update role.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenantuserUpdatePrivilegesRoleBulkTest() throws ApiException {
        Tenantuserv3UpdatePrivilegesBulkRequest tenantuserv3UpdatePrivilegesBulkRequest = null;
        Tenantuserv3UpdatePrivilegesBulkResponse response = api.tenantuserUpdatePrivilegesRoleBulk(tenantuserv3UpdatePrivilegesBulkRequest);
        // TODO: test validations
    }

    /**
     * Summary: Update role Description: Update single role.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenantuserUpdateRoleTest() throws ApiException {
        String roleId = null;
        Tenantuserv3UpdateRoleRequest tenantuserv3UpdateRoleRequest = null;
        Tenantuserv3UpdateRoleResponse response = api.tenantuserUpdateRole(roleId, tenantuserv3UpdateRoleRequest);
        // TODO: test validations
    }

    /**
     * Summary: Update user role bulk Description: Perform bulk user add or remove role.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenantuserUpdateUserRoleBulkTest() throws ApiException {
        Tenantuserv3UpdateUserRoleBulkRequest tenantuserv3UpdateUserRoleBulkRequest = null;
        Tenantuserv3UpdateUserRoleBulkResponse response = api.tenantuserUpdateUserRoleBulk(tenantuserv3UpdateUserRoleBulkRequest);
        // TODO: test validations
    }

}
