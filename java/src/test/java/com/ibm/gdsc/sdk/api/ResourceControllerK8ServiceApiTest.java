/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk.api;

import com.ibm.gdsc.sdk.ApiException;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3App;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3Controller;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3ControllerCommand;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3ControllerHeartbeat;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3ControllerStatus;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3CreateControllerRequest;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3CreateHeartBeatExResponse;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3CreateHeartBeatRequest;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3CreateHeartBeatResponse;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3CreateKeypairRequest;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3CreateKeypairResponse;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3DeleteControllerRequest;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3DeleteControllerResponse;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3DeleteEdgeTenantRequestApphost;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3DeleteEdgeTenantResponse;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3DeleteJobRequest;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3DeleteJobResponse;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3DownloadControllerLogsRequest;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3DownloadControllerLogsResponse;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3EdgeResourceResponse;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3EdgeTenantRequest;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3GetControllerAppsResponse;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3GetControllerCommandsResponse;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3GetControllerJobsResponse;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3GetControllersResponse;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3GetControllersWithStatusResponse;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3GetJobExecutionsResponse;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3GetTenantAppsResponse;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3GetTenantJobsResponse;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3Job;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3JobExecution;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3JobStatusDTO;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3QueryControllerLogsRequest;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3QueryControllerLogsResponse;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3UpdateJobExecutionRequest;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3UpdateJobStatusRequest;
import com.ibm.gdsc.sdk.models.Resourcecontrollerk8v3Version;
import com.ibm.gdsc.sdk.models.RuntimeError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ResourceControllerK8ServiceApi
 */
@Disabled
public class ResourceControllerK8ServiceApiTest {

    private final ResourceControllerK8ServiceApi api = new ResourceControllerK8ServiceApi();

    /**
     * CreateController - Add a new controller.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceControllerK8ServiceCreateControllerTest() throws ApiException {
        Resourcecontrollerk8v3CreateControllerRequest resourcecontrollerk8v3CreateControllerRequest = null;
        Resourcecontrollerk8v3Controller response = api.resourceControllerK8ServiceCreateController(resourcecontrollerk8v3CreateControllerRequest);
        // TODO: test validations
    }

    /**
     * CreateHeartBeat - Create a heartbeat for the controller.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceControllerK8ServiceCreateHeartBeatTest() throws ApiException {
        String controllerId = null;
        Resourcecontrollerk8v3CreateHeartBeatRequest resourcecontrollerk8v3CreateHeartBeatRequest = null;
        Resourcecontrollerk8v3CreateHeartBeatResponse response = api.resourceControllerK8ServiceCreateHeartBeat(controllerId, resourcecontrollerk8v3CreateHeartBeatRequest);
        // TODO: test validations
    }

    /**
     * CreateHeartBeatEx - Create a heartbeat for the controller with extended information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceControllerK8ServiceCreateHeartBeatExTest() throws ApiException {
        String controllerId = null;
        Resourcecontrollerk8v3ControllerHeartbeat resourcecontrollerk8v3ControllerHeartbeat = null;
        Resourcecontrollerk8v3CreateHeartBeatExResponse response = api.resourceControllerK8ServiceCreateHeartBeatEx(controllerId, resourcecontrollerk8v3ControllerHeartbeat);
        // TODO: test validations
    }

    /**
     * //////////////////////////////////////////////////////////////// Interface to the controllers and apps api in the App-Manager microservice CreateJob - Create a job definition. Files and secrets contained within will also be created.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceControllerK8ServiceCreateJobTest() throws ApiException {
        Resourcecontrollerk8v3Job resourcecontrollerk8v3Job = null;
        Resourcecontrollerk8v3Job response = api.resourceControllerK8ServiceCreateJob(resourcecontrollerk8v3Job);
        // TODO: test validations
    }

    /**
     * CreateJobExecution - Create a job execution.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceControllerK8ServiceCreateJobExecutionTest() throws ApiException {
        Resourcecontrollerk8v3JobExecution resourcecontrollerk8v3JobExecution = null;
        Resourcecontrollerk8v3JobExecution response = api.resourceControllerK8ServiceCreateJobExecution(resourcecontrollerk8v3JobExecution);
        // TODO: test validations
    }

    /**
     * CreateKeypair - Create a new keypair for the controller.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceControllerK8ServiceCreateKeypairTest() throws ApiException {
        String controllerId = null;
        Resourcecontrollerk8v3CreateKeypairRequest resourcecontrollerk8v3CreateKeypairRequest = null;
        Resourcecontrollerk8v3CreateKeypairResponse response = api.resourceControllerK8ServiceCreateKeypair(controllerId, resourcecontrollerk8v3CreateKeypairRequest);
        // TODO: test validations
    }

    /**
     * DeleteController - Delete a controller.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceControllerK8ServiceDeleteControllerTest() throws ApiException {
        String controllerId = null;
        Resourcecontrollerk8v3DeleteControllerRequest resourcecontrollerk8v3DeleteControllerRequest = null;
        Resourcecontrollerk8v3DeleteControllerResponse response = api.resourceControllerK8ServiceDeleteController(controllerId, resourcecontrollerk8v3DeleteControllerRequest);
        // TODO: test validations
    }

    /**
     * DeleteEdgeTenant - deletes an edge tenant providing edge tenant id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceControllerK8ServiceDeleteEdgeTenantTest() throws ApiException {
        String tenantId = null;
        Resourcecontrollerk8v3DeleteEdgeTenantRequestApphost resourcecontrollerk8v3DeleteEdgeTenantRequestApphost = null;
        Resourcecontrollerk8v3DeleteEdgeTenantResponse response = api.resourceControllerK8ServiceDeleteEdgeTenant(tenantId, resourcecontrollerk8v3DeleteEdgeTenantRequestApphost);
        // TODO: test validations
    }

    /**
     * DeleteEdgeTenantRequest to deletes gi and tnt CR on edge
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceControllerK8ServiceDeleteEdgeTenantRequestTest() throws ApiException {
        String tenantId = null;
        Resourcecontrollerk8v3EdgeTenantRequest resourcecontrollerk8v3EdgeTenantRequest = null;
        Resourcecontrollerk8v3EdgeResourceResponse response = api.resourceControllerK8ServiceDeleteEdgeTenantRequest(tenantId, resourcecontrollerk8v3EdgeTenantRequest);
        // TODO: test validations
    }

    /**
     * DeleteJob - Delete a job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceControllerK8ServiceDeleteJobTest() throws ApiException {
        String jobId = null;
        Resourcecontrollerk8v3DeleteJobRequest resourcecontrollerk8v3DeleteJobRequest = null;
        Resourcecontrollerk8v3DeleteJobResponse response = api.resourceControllerK8ServiceDeleteJob(jobId, resourcecontrollerk8v3DeleteJobRequest);
        // TODO: test validations
    }

    /**
     * DownloadControllerLogs - Download the controller logs for a running controller.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceControllerK8ServiceDownloadControllerLogsTest() throws ApiException {
        String controllerId = null;
        Resourcecontrollerk8v3DownloadControllerLogsRequest resourcecontrollerk8v3DownloadControllerLogsRequest = null;
        Resourcecontrollerk8v3DownloadControllerLogsResponse response = api.resourceControllerK8ServiceDownloadControllerLogs(controllerId, resourcecontrollerk8v3DownloadControllerLogsRequest);
        // TODO: test validations
    }

    /**
     * GetControllerApps - Get the apps for the given controller.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceControllerK8ServiceGetControllerAppsTest() throws ApiException {
        String controllerId = null;
        String modifiedSince = null;
        Resourcecontrollerk8v3GetControllerAppsResponse response = api.resourceControllerK8ServiceGetControllerApps(controllerId, modifiedSince);
        // TODO: test validations
    }

    /**
     * GetControllerCommands - Get the commands for the controller to execute.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceControllerK8ServiceGetControllerCommandsTest() throws ApiException {
        String controllerId = null;
        Resourcecontrollerk8v3GetControllerCommandsResponse response = api.resourceControllerK8ServiceGetControllerCommands(controllerId);
        // TODO: test validations
    }

    /**
     * GetControllerJobs - Get the jobs for the controller to execute.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceControllerK8ServiceGetControllerJobsTest() throws ApiException {
        String controllerId = null;
        String modifiedSince = null;
        Resourcecontrollerk8v3GetControllerJobsResponse response = api.resourceControllerK8ServiceGetControllerJobs(controllerId, modifiedSince);
        // TODO: test validations
    }

    /**
     * GetControllerStatus - Get the status for the given controller.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceControllerK8ServiceGetControllerStatusTest() throws ApiException {
        String controllerId = null;
        Resourcecontrollerk8v3ControllerStatus response = api.resourceControllerK8ServiceGetControllerStatus(controllerId);
        // TODO: test validations
    }

    /**
     * GetControllers - Get the controllers for the given tenant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceControllerK8ServiceGetControllersTest() throws ApiException {
        String tenantId = null;
        Boolean wantLocal = null;
        Resourcecontrollerk8v3GetControllersResponse response = api.resourceControllerK8ServiceGetControllers(tenantId, wantLocal);
        // TODO: test validations
    }

    /**
     * GetControllersWithStatus - Get the controllers for the given tenant with computed status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceControllerK8ServiceGetControllersWithStatusTest() throws ApiException {
        String tenantId = null;
        Boolean wantLocal = null;
        String controllerId = null;
        Resourcecontrollerk8v3GetControllersWithStatusResponse response = api.resourceControllerK8ServiceGetControllersWithStatus(tenantId, wantLocal, controllerId);
        // TODO: test validations
    }

    /**
     * GetJob - Get the job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceControllerK8ServiceGetJobTest() throws ApiException {
        String jobId = null;
        Boolean wantSecretValues = null;
        Resourcecontrollerk8v3Job response = api.resourceControllerK8ServiceGetJob(jobId, wantSecretValues);
        // TODO: test validations
    }

    /**
     * GetJobExecution - Get a job execution.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceControllerK8ServiceGetJobExecutionTest() throws ApiException {
        String jobexeId = null;
        Resourcecontrollerk8v3JobExecution response = api.resourceControllerK8ServiceGetJobExecution(jobexeId);
        // TODO: test validations
    }

    /**
     * GetJobExecutions - Get the job executions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceControllerK8ServiceGetJobExecutionsTest() throws ApiException {
        String jobId = null;
        Resourcecontrollerk8v3GetJobExecutionsResponse response = api.resourceControllerK8ServiceGetJobExecutions(jobId);
        // TODO: test validations
    }

    /**
     * GetJobStatus - Get the job&#39;s status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceControllerK8ServiceGetJobStatusTest() throws ApiException {
        String jobId = null;
        Resourcecontrollerk8v3JobStatusDTO response = api.resourceControllerK8ServiceGetJobStatus(jobId);
        // TODO: test validations
    }

    /**
     * GetTenantApp - Get a specific app for the given tenant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceControllerK8ServiceGetTenantAppTest() throws ApiException {
        String tenantId = null;
        String appName = null;
        String returnLevel = null;
        Resourcecontrollerk8v3App response = api.resourceControllerK8ServiceGetTenantApp(tenantId, appName, returnLevel);
        // TODO: test validations
    }

    /**
     * GetTenantApps - Get the apps for the given tenant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceControllerK8ServiceGetTenantAppsTest() throws ApiException {
        String tenantId = null;
        String returnLevel = null;
        Resourcecontrollerk8v3GetTenantAppsResponse response = api.resourceControllerK8ServiceGetTenantApps(tenantId, returnLevel);
        // TODO: test validations
    }

    /**
     * GetTenantJobs - Get jobs for the given tenant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceControllerK8ServiceGetTenantJobsTest() throws ApiException {
        String tenantId = null;
        Resourcecontrollerk8v3GetTenantJobsResponse response = api.resourceControllerK8ServiceGetTenantJobs(tenantId);
        // TODO: test validations
    }

    /**
     * GetVersion - Get the system version information for the service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceControllerK8ServiceGetVersionTest() throws ApiException {
        Resourcecontrollerk8v3Version response = api.resourceControllerK8ServiceGetVersion();
        // TODO: test validations
    }

    /**
     * InstallEdgeTenantRequest to Create/update gi and tnt CRs on edge
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceControllerK8ServiceInstallEdgeTenantRequestTest() throws ApiException {
        Resourcecontrollerk8v3EdgeTenantRequest resourcecontrollerk8v3EdgeTenantRequest = null;
        Resourcecontrollerk8v3EdgeResourceResponse response = api.resourceControllerK8ServiceInstallEdgeTenantRequest(resourcecontrollerk8v3EdgeTenantRequest);
        // TODO: test validations
    }

    /**
     * QueryControllerLogs - Query for the controller logs for a running controller.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceControllerK8ServiceQueryControllerLogsTest() throws ApiException {
        String controllerId = null;
        Resourcecontrollerk8v3QueryControllerLogsRequest resourcecontrollerk8v3QueryControllerLogsRequest = null;
        Resourcecontrollerk8v3QueryControllerLogsResponse response = api.resourceControllerK8ServiceQueryControllerLogs(controllerId, resourcecontrollerk8v3QueryControllerLogsRequest);
        // TODO: test validations
    }

    /**
     * UpdateCommand - Update the command.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceControllerK8ServiceUpdateCommandTest() throws ApiException {
        String id = null;
        Resourcecontrollerk8v3ControllerCommand resourcecontrollerk8v3ControllerCommand = null;
        Resourcecontrollerk8v3ControllerCommand response = api.resourceControllerK8ServiceUpdateCommand(id, resourcecontrollerk8v3ControllerCommand);
        // TODO: test validations
    }

    /**
     * UpdateController - Update an existing controller.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceControllerK8ServiceUpdateControllerTest() throws ApiException {
        String id = null;
        Resourcecontrollerk8v3Controller resourcecontrollerk8v3Controller = null;
        Resourcecontrollerk8v3Controller response = api.resourceControllerK8ServiceUpdateController(id, resourcecontrollerk8v3Controller);
        // TODO: test validations
    }

    /**
     * UpdateControllerStatus - Updates the status for the given controller.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceControllerK8ServiceUpdateControllerStatusTest() throws ApiException {
        String id = null;
        Resourcecontrollerk8v3ControllerStatus resourcecontrollerk8v3ControllerStatus = null;
        Resourcecontrollerk8v3ControllerStatus response = api.resourceControllerK8ServiceUpdateControllerStatus(id, resourcecontrollerk8v3ControllerStatus);
        // TODO: test validations
    }

    /**
     * UpdateJob - Update a job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceControllerK8ServiceUpdateJobTest() throws ApiException {
        String id = null;
        Resourcecontrollerk8v3Job resourcecontrollerk8v3Job = null;
        Resourcecontrollerk8v3Job response = api.resourceControllerK8ServiceUpdateJob(id, resourcecontrollerk8v3Job);
        // TODO: test validations
    }

    /**
     * UpdateJobExecution - Update a job execution.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceControllerK8ServiceUpdateJobExecutionTest() throws ApiException {
        String id = null;
        Resourcecontrollerk8v3UpdateJobExecutionRequest resourcecontrollerk8v3UpdateJobExecutionRequest = null;
        Resourcecontrollerk8v3JobExecution response = api.resourceControllerK8ServiceUpdateJobExecution(id, resourcecontrollerk8v3UpdateJobExecutionRequest);
        // TODO: test validations
    }

    /**
     * UpdateJobStatus - Updates the status for the given Job.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resourceControllerK8ServiceUpdateJobStatusTest() throws ApiException {
        String jobId = null;
        Resourcecontrollerk8v3UpdateJobStatusRequest resourcecontrollerk8v3UpdateJobStatusRequest = null;
        Resourcecontrollerk8v3JobStatusDTO response = api.resourceControllerK8ServiceUpdateJobStatus(jobId, resourcecontrollerk8v3UpdateJobStatusRequest);
        // TODO: test validations
    }

}
