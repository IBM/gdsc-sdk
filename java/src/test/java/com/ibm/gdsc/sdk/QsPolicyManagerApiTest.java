/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import com.ibm.gdsc.ApiException;
import com.ibm.gdsc.sdk.Qspmpolicymanagerv3CreateTicketRequest;
import com.ibm.gdsc.sdk.Qspmpolicymanagerv3CreateTicketResponse;
import com.ibm.gdsc.sdk.Qspmpolicymanagerv3FetchObjectStoreFileResponse;
import com.ibm.gdsc.sdk.Qspmpolicymanagerv3ProcessPolicyDimentionRecordsRequest;
import com.ibm.gdsc.sdk.Qspmpolicymanagerv3ProcessPolicyDimentionRecordsResonse;
import com.ibm.gdsc.sdk.Qspmpolicymanagerv3StandardEmptyResponse;
import com.ibm.gdsc.sdk.Qspmpolicymanagerv3UpdateTicketStatusRequest;
import com.ibm.gdsc.sdk.Qspmpolicymanagerv3UpdateTicketStatusResponse;
import com.ibm.gdsc.sdk.RuntimeError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for QsPolicyManagerApi
 */
@Disabled
public class QsPolicyManagerApiTest {

    private final QsPolicyManagerApi api = new QsPolicyManagerApi();

    /**
     * BatchStatusUpdate - trigger the batch to update the status of the Ticket .
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qSPolicyManagerBatchStatusUpdateTest() throws ApiException {
        Object body = null;
        Qspmpolicymanagerv3StandardEmptyResponse response = api.qSPolicyManagerBatchStatusUpdate(body);
        // TODO: test validations
    }

    /**
     * CreateTicket - Create a new Incident .
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qSPolicyManagerCreateTicketTest() throws ApiException {
        Qspmpolicymanagerv3CreateTicketRequest qspmpolicymanagerv3CreateTicketRequest = null;
        Qspmpolicymanagerv3CreateTicketResponse response = api.qSPolicyManagerCreateTicket(qspmpolicymanagerv3CreateTicketRequest);
        // TODO: test validations
    }

    /**
     * FetchFilesfromBuckets - fetch the file(s) from bucket of the object storage
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qSPolicyManagerFetchFilesfromBucketsTest() throws ApiException {
        Qspmpolicymanagerv3FetchObjectStoreFileResponse response = api.qSPolicyManagerFetchFilesfromBuckets();
        // TODO: test validations
    }

    /**
     * ProcessPolicyDimentionRecords - fetch the records from Policy Dimention and update Policy Fact table
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qSPolicyManagerProcessPolicyDimentionRecordsTest() throws ApiException {
        Qspmpolicymanagerv3ProcessPolicyDimentionRecordsRequest qspmpolicymanagerv3ProcessPolicyDimentionRecordsRequest = null;
        Qspmpolicymanagerv3ProcessPolicyDimentionRecordsResonse response = api.qSPolicyManagerProcessPolicyDimentionRecords(qspmpolicymanagerv3ProcessPolicyDimentionRecordsRequest);
        // TODO: test validations
    }

    /**
     * UpdateTicketStatus - Update the ticket status based on the IntegrationId and TicketId .
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qSPolicyManagerUpdateTicketStatusTest() throws ApiException {
        Qspmpolicymanagerv3UpdateTicketStatusRequest qspmpolicymanagerv3UpdateTicketStatusRequest = null;
        Qspmpolicymanagerv3UpdateTicketStatusResponse response = api.qSPolicyManagerUpdateTicketStatus(qspmpolicymanagerv3UpdateTicketStatusRequest);
        // TODO: test validations
    }

}
