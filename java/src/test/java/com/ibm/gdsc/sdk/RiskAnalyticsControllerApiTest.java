/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import com.ibm.gdsc.ApiException;
import java.time.OffsetDateTime;
import com.ibm.gdsc.sdk.Riskanalyticscontrollerv3EnableDisableRiskEventFeedbackRequest;
import com.ibm.gdsc.sdk.Riskanalyticscontrollerv3EnableDisableRiskEventFeedbackResponse;
import com.ibm.gdsc.sdk.Riskanalyticscontrollerv3EnableDisableRiskEventProcessRequest;
import com.ibm.gdsc.sdk.Riskanalyticscontrollerv3EnableDisableRiskEventProcessResponse;
import com.ibm.gdsc.sdk.Riskanalyticscontrollerv3GetAllClassificationsListResponse;
import com.ibm.gdsc.sdk.Riskanalyticscontrollerv3GetRiskEventClassificationsListResponse;
import com.ibm.gdsc.sdk.Riskanalyticscontrollerv3GetRiskEventDetailsResponse;
import com.ibm.gdsc.sdk.Riskanalyticscontrollerv3GetRiskEventProcessStatusResponse;
import com.ibm.gdsc.sdk.Riskanalyticscontrollerv3GetRiskEventRowResponse;
import com.ibm.gdsc.sdk.Riskanalyticscontrollerv3GetRiskFeedbackResponse;
import com.ibm.gdsc.sdk.Riskanalyticscontrollerv3GetRiskObservationDetailsResponse;
import com.ibm.gdsc.sdk.Riskanalyticscontrollerv3GetUserUISettingsResponse;
import com.ibm.gdsc.sdk.Riskanalyticscontrollerv3RiskEventSummarizationDataResponse;
import com.ibm.gdsc.sdk.Riskanalyticscontrollerv3RiskEventTuningRequest;
import com.ibm.gdsc.sdk.Riskanalyticscontrollerv3RiskEventTuningResponse;
import com.ibm.gdsc.sdk.Riskanalyticscontrollerv3RiskEventVulnerabilityAssessmentDetailsResponse;
import com.ibm.gdsc.sdk.Riskanalyticscontrollerv3SetRiskEventStatusRequest;
import com.ibm.gdsc.sdk.Riskanalyticscontrollerv3SetRiskEventStatusResponse;
import com.ibm.gdsc.sdk.Riskanalyticscontrollerv3SetUserUISettingsRequest;
import com.ibm.gdsc.sdk.Riskanalyticscontrollerv3SetUserUISettingsResponse;
import com.ibm.gdsc.sdk.Riskanalyticscontrollerv3UpdateRiskFeedbackRequest;
import com.ibm.gdsc.sdk.Riskanalyticscontrollerv3UpdateRiskFeedbackResponse;
import com.ibm.gdsc.sdk.RuntimeError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RiskAnalyticsControllerApi
 */
@Disabled
public class RiskAnalyticsControllerApiTest {

    private final RiskAnalyticsControllerApi api = new RiskAnalyticsControllerApi();

    /**
     * Summary: Enable disable risk rvent feedback Description: Enable or disable the collect feedback process.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void riskAnalyticsControllerEnableDisableRiskEventFeedbackTest() throws ApiException {
        Riskanalyticscontrollerv3EnableDisableRiskEventFeedbackRequest riskanalyticscontrollerv3EnableDisableRiskEventFeedbackRequest = null;
        Riskanalyticscontrollerv3EnableDisableRiskEventFeedbackResponse response = api.riskAnalyticsControllerEnableDisableRiskEventFeedback(riskanalyticscontrollerv3EnableDisableRiskEventFeedbackRequest);
        // TODO: test validations
    }

    /**
     * Summary: Enable disable risk event process Description: Enable or disable the risk event process.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void riskAnalyticsControllerEnableDisableRiskEventProcessTest() throws ApiException {
        Riskanalyticscontrollerv3EnableDisableRiskEventProcessRequest riskanalyticscontrollerv3EnableDisableRiskEventProcessRequest = null;
        Riskanalyticscontrollerv3EnableDisableRiskEventProcessResponse response = api.riskAnalyticsControllerEnableDisableRiskEventProcess(riskanalyticscontrollerv3EnableDisableRiskEventProcessRequest);
        // TODO: test validations
    }

    /**
     * Summary: Get all classifications Description: Get all possible classifications for a risk event.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void riskAnalyticsControllerGetAllClassificationsListTest() throws ApiException {
        Riskanalyticscontrollerv3GetAllClassificationsListResponse response = api.riskAnalyticsControllerGetAllClassificationsList();
        // TODO: test validations
    }

    /**
     * Summary: Get risk event classifications list Description: retrieves the ClassificationMatchDetails for a given risk id â€“ classification that did not matched will be with class_value 0.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void riskAnalyticsControllerGetRiskEventClassificationsListTest() throws ApiException {
        Integer riskId = null;
        Riskanalyticscontrollerv3GetRiskEventClassificationsListResponse response = api.riskAnalyticsControllerGetRiskEventClassificationsList(riskId);
        // TODO: test validations
    }

    /**
     * Summary: Get risk event data needed for summarization task Description: Retrieve the full information about this risk event including all findings data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void riskAnalyticsControllerGetRiskEventDataForSummarizationTest() throws ApiException {
        Integer riskId = null;
        Boolean includeIndicators = null;
        Integer numFindingsLimit = null;
        Riskanalyticscontrollerv3RiskEventSummarizationDataResponse response = api.riskAnalyticsControllerGetRiskEventDataForSummarization(riskId, includeIndicators, numFindingsLimit);
        // TODO: test validations
    }

    /**
     * Summary: Get risk event details Description: Return the details of a risk event, including risk general info and a list of observations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void riskAnalyticsControllerGetRiskEventDetailsTest() throws ApiException {
        Integer riskId = null;
        Riskanalyticscontrollerv3GetRiskEventDetailsResponse response = api.riskAnalyticsControllerGetRiskEventDetails(riskId);
        // TODO: test validations
    }

    /**
     * Summary: Get risk event process status Description: Get the risk event process status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void riskAnalyticsControllerGetRiskEventProcessStatusTest() throws ApiException {
        Riskanalyticscontrollerv3GetRiskEventProcessStatusResponse response = api.riskAnalyticsControllerGetRiskEventProcessStatus();
        // TODO: test validations
    }

    /**
     * Summary: Get risk event row Description: Return a list of risk events.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void riskAnalyticsControllerGetRiskEventRowTest() throws ApiException {
        String status = null;
        OffsetDateTime dateFrom = null;
        OffsetDateTime dateTo = null;
        String pivotType = null;
        String pivotId = null;
        String pivotDbUser = null;
        String pivotDatabase = null;
        String pivotServerIp = null;
        String pivotOsUser = null;
        String pivotDatabaseSourceField = null;
        Riskanalyticscontrollerv3GetRiskEventRowResponse response = api.riskAnalyticsControllerGetRiskEventRow(status, dateFrom, dateTo, pivotType, pivotId, pivotDbUser, pivotDatabase, pivotServerIp, pivotOsUser, pivotDatabaseSourceField);
        // TODO: test validations
    }

    /**
     * Summary: Get vulnerability assessment details for a given risk event Description: Retrieve the information about failed VA tests for assets database and db user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void riskAnalyticsControllerGetRiskEventVulnerabilityAssessmentDetailsTest() throws ApiException {
        Integer riskId = null;
        Riskanalyticscontrollerv3RiskEventVulnerabilityAssessmentDetailsResponse response = api.riskAnalyticsControllerGetRiskEventVulnerabilityAssessmentDetails(riskId);
        // TODO: test validations
    }

    /**
     * Summary: Get risk feedback Description: Get all feedbacks that are in status NEW/WIP and change them to status WIP.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void riskAnalyticsControllerGetRiskFeedbackTest() throws ApiException {
        Riskanalyticscontrollerv3GetRiskFeedbackResponse response = api.riskAnalyticsControllerGetRiskFeedback();
        // TODO: test validations
    }

    /**
     * Summary: Get risk observation details Description: Return details of a single risk observation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void riskAnalyticsControllerGetRiskObservationDetailsTest() throws ApiException {
        Integer leadFeatureId = null;
        String observationType = null;
        Riskanalyticscontrollerv3GetRiskObservationDetailsResponse response = api.riskAnalyticsControllerGetRiskObservationDetails(leadFeatureId, observationType);
        // TODO: test validations
    }

    /**
     * Summary: Get user UI settings Description: Get the user settings by user id to display the risk in the UI.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void riskAnalyticsControllerGetUserUISettingsTest() throws ApiException {
        Riskanalyticscontrollerv3GetUserUISettingsResponse response = api.riskAnalyticsControllerGetUserUISettings();
        // TODO: test validations
    }

    /**
     * Summary: Risk event tuning Description: Perform tuning risk event actions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void riskAnalyticsControllerRiskEventTuningTest() throws ApiException {
        Riskanalyticscontrollerv3RiskEventTuningRequest riskanalyticscontrollerv3RiskEventTuningRequest = null;
        Riskanalyticscontrollerv3RiskEventTuningResponse response = api.riskAnalyticsControllerRiskEventTuning(riskanalyticscontrollerv3RiskEventTuningRequest);
        // TODO: test validations
    }

    /**
     * Summary: Set risk event status Description: Update the risk status and justification.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void riskAnalyticsControllerSetRiskEventStatusTest() throws ApiException {
        Riskanalyticscontrollerv3SetRiskEventStatusRequest riskanalyticscontrollerv3SetRiskEventStatusRequest = null;
        Riskanalyticscontrollerv3SetRiskEventStatusResponse response = api.riskAnalyticsControllerSetRiskEventStatus(riskanalyticscontrollerv3SetRiskEventStatusRequest);
        // TODO: test validations
    }

    /**
     * Summary: Set user UI settings Description: Set the user settings by user id in the mongo collection. WARNING: this API should not be used manually or by a system external to Guardium. Using this API to change a user settings may prevent the user from using the Risk Event function within Guardium.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void riskAnalyticsControllerSetUserUISettingsTest() throws ApiException {
        Riskanalyticscontrollerv3SetUserUISettingsRequest riskanalyticscontrollerv3SetUserUISettingsRequest = null;
        Riskanalyticscontrollerv3SetUserUISettingsResponse response = api.riskAnalyticsControllerSetUserUISettings(riskanalyticscontrollerv3SetUserUISettingsRequest);
        // TODO: test validations
    }

    /**
     * Summary: Update risk feedback Description: Provide feedback for one or more risk events
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void riskAnalyticsControllerUpdateRiskFeedbackTest() throws ApiException {
        Riskanalyticscontrollerv3UpdateRiskFeedbackRequest riskanalyticscontrollerv3UpdateRiskFeedbackRequest = null;
        Riskanalyticscontrollerv3UpdateRiskFeedbackResponse response = api.riskAnalyticsControllerUpdateRiskFeedback(riskanalyticscontrollerv3UpdateRiskFeedbackRequest);
        // TODO: test validations
    }

}
