/*
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization's Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.gdsc.sdk;

import com.ibm.gdsc.ApiException;
import com.ibm.gdsc.sdk.AddAnalyzedRegion200Response;
import com.ibm.gdsc.sdk.AddAnalyzedRegionRequest;
import com.ibm.gdsc.sdk.AddCloudAccounts200Response;
import com.ibm.gdsc.sdk.AddCloudAccountsRequest;
import com.ibm.gdsc.sdk.AuthInfo;
import com.ibm.gdsc.sdk.AuthUrl;
import com.ibm.gdsc.sdk.Authenticate400Response;
import com.ibm.gdsc.sdk.ClientInfo;
import com.ibm.gdsc.sdk.CloudAccountInstallationStatus;
import com.ibm.gdsc.sdk.CloudServiceProvider;
import com.ibm.gdsc.sdk.GetAnalyzedRegionStatus200Response;
import com.ibm.gdsc.sdk.LinkedAccounts;
import com.ibm.gdsc.sdk.Office365TenantInfo;
import com.ibm.gdsc.sdk.RemoveAccountsInstructions200Response;
import com.ibm.gdsc.sdk.Script;
import com.ibm.gdsc.sdk.ServiceAccountClientId;
import com.ibm.gdsc.sdk.ServiceAccountInstallationStatus;
import com.ibm.gdsc.sdk.ServiceProvider;
import com.ibm.gdsc.sdk.SubmitAdminEmailParams;
import com.ibm.gdsc.sdk.SubmitAuthCode;
import com.ibm.gdsc.sdk.TenantInfo;
import com.ibm.gdsc.sdk.TokenExpiryInfo;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CloudAccountsApi
 */
@Disabled
public class CloudAccountsApiTest {

    private final CloudAccountsApi api = new CloudAccountsApi();

    /**
     * Add a new region for data classification
     *
     * Install a new analyzer in the specified region to enable data classification in that region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addAnalyzedRegionTest() throws ApiException {
        AddAnalyzedRegionRequest addAnalyzedRegionRequest = null;
        AddAnalyzedRegion200Response response = api.addAnalyzedRegion(addAnalyzedRegionRequest);
        // TODO: test validations
    }

    /**
     * Add cloud account connections to DSPM
     *
     * You can add a single or multiple cloud account connections from the same cloud provider.&lt;BR&gt;Adding these cloud account connections will trigger Guardium DSPM for data store discovery.&lt;BR&gt;To enable data classification, run the &#39;Add a new region for data classification&#39; API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addCloudAccountsTest() throws ApiException {
        AddCloudAccountsRequest addCloudAccountsRequest = null;
        AddCloudAccounts200Response response = api.addCloudAccounts(addCloudAccountsRequest);
        // TODO: test validations
    }

    /**
     * Generate a Confluence authentication URL
     *
     * Generate an Atlassian authentication URL for Confluence integration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateAtlassianConfluenceAuthUrlTest() throws ApiException {
        AuthUrl response = api.generateAtlassianConfluenceAuthUrl();
        // TODO: test validations
    }

    /**
     * Generate a JIRA authentication URL
     *
     * Generate an Atlassian authentication URL for JIRA integration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateAtlassianJiraAuthUrlTest() throws ApiException {
        AuthUrl response = api.generateAtlassianJiraAuthUrl();
        // TODO: test validations
    }

    /**
     * Generate azure authorization url
     *
     * Generate azure authorization url.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateAzureAuthUrlTest() throws ApiException {
        String tenantId = null;
        AuthUrl response = api.generateAzureAuthUrl(tenantId);
        // TODO: test validations
    }

    /**
     * Generate a Microsoft 365 consent URL
     *
     * Generate an administrator consent URL for Microsoft 365 integration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateOffice365AuthUrlTest() throws ApiException {
        AuthUrl response = api.generateOffice365AuthUrl();
        // TODO: test validations
    }

    /**
     * Generate a Slack authentication URL
     *
     * Generate a Slack authentication URL.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateSlackAuthUrlTest() throws ApiException {
        AuthUrl response = api.generateSlackAuthUrl();
        // TODO: test validations
    }

    /**
     * Validate and Generate a Snowflake OAuth URL
     *
     * Generate an administrator consent URL for Snowflake integration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateSnowflakeAuthUrlTest() throws ApiException {
        ClientInfo clientInfo = null;
        AuthUrl response = api.generateSnowflakeAuthUrl(clientInfo);
        // TODO: test validations
    }

    /**
     * Get the status of analyzer installation for a region
     *
     * Get the installation status of Guardium DSPM for a region.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAnalyzedRegionStatusTest() throws ApiException {
        CloudServiceProvider cloudProvider = null;
        String region = null;
        GetAnalyzedRegionStatus200Response response = api.getAnalyzedRegionStatus(cloudProvider, region);
        // TODO: test validations
    }

    /**
     * Get Azure admin consent status
     *
     * Get Azure admin consent status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAzureAdminConsentStatusTest() throws ApiException {
        Boolean response = api.getAzureAdminConsentStatus();
        // TODO: test validations
    }

    /**
     * Get the installation status of a cloud account
     *
     * Get the installation status of a cloud account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCloudAccountInstallationStatusTest() throws ApiException {
        CloudServiceProvider cloudProvider = null;
        String cloudAccountId = null;
        CloudAccountInstallationStatus response = api.getCloudAccountInstallationStatus(cloudProvider, cloudAccountId);
        // TODO: test validations
    }

    /**
     * Get Snowflake Refresh Token Expiry date
     *
     * Get Snowflake Refresh Token Expiry date.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRefreshTokenExpiryTest() throws ApiException {
        String providerId = null;
        TokenExpiryInfo response = api.getRefreshTokenExpiry(providerId);
        // TODO: test validations
    }

    /**
     * List cloud accounts connected to DSPM
     *
     * Get a list of all the connected cloud accounts monitored by Guardium DSPM.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLinkedAccountsTest() throws ApiException {
        List<LinkedAccounts> response = api.listLinkedAccounts();
        // TODO: test validations
    }

    /**
     * Post cloud account ID connections to be removed
     *
     * Post cloud account ID connections to be removed from Guardium DSPM.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeAccountsTest() throws ApiException {
        List<String> accountIds = null;
        ServiceProvider serviceProvider = null;
        api.removeAccounts(accountIds, serviceProvider);
        // TODO: test validations
    }

    /**
     * Post cloud account IDs and get instructions to remove the accounts
     *
     * Post cloud accounts IDs and get instructions to remove the accounts from the cloud service provider.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeAccountsInstructionsTest() throws ApiException {
        List<String> accountIds = null;
        ServiceProvider serviceProvider = null;
        RemoveAccountsInstructions200Response response = api.removeAccountsInstructions(accountIds, serviceProvider);
        // TODO: test validations
    }

    /**
     * Get Google Workspace authentication
     *
     * Retrieve a service account ID to use it for Google Workspace authentication.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void retrieveServiceAccountIdTest() throws ApiException {
        ServiceAccountClientId response = api.retrieveServiceAccountId();
        // TODO: test validations
    }

    /**
     * Generate Snowflake Integration Script
     *
     * Generate Snowflake integration Script.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void snowflakeIntegrationScriptTest() throws ApiException {
        Script response = api.snowflakeIntegrationScript();
        // TODO: test validations
    }

    /**
     * Submit email for service account authorization
     *
     * Submit admin email for service account authorization and return service-account authorization status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitGoogleWorkspaceAdminEmailTest() throws ApiException {
        SubmitAdminEmailParams submitAdminEmailParams = null;
        ServiceAccountInstallationStatus response = api.submitGoogleWorkspaceAdminEmail(submitAdminEmailParams);
        // TODO: test validations
    }

    /**
     * Submit Microsoft 365 customer information
     *
     * Submit customer information for Microsoft 365 integration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitOffice365TenantInfoTest() throws ApiException {
        TenantInfo tenantInfo = null;
        Office365TenantInfo response = api.submitOffice365TenantInfo(tenantInfo);
        // TODO: test validations
    }

    /**
     * Submit a Slack authentication code
     *
     * Submit a Slack authentication code.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitSlackAuthCodeTest() throws ApiException {
        SubmitAuthCode submitAuthCode = null;
        Object response = api.submitSlackAuthCode(submitAuthCode);
        // TODO: test validations
    }

    /**
     * Submit Snowflake oAuth code
     *
     * Storing code that is returned from Snowflake oAuth.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void submitSnowflakeAuthCodeTest() throws ApiException {
        AuthInfo authInfo = null;
        api.submitSnowflakeAuthCode(authInfo);
        // TODO: test validations
    }

}
