/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.security.guardium;

import com.ibm.security.ApiException;
import com.ibm.security.guardium.Notificationsv3CreateTicketRequest;
import com.ibm.security.guardium.Notificationsv3CreateTicketResponse;
import com.ibm.security.guardium.Notificationsv3GetFoldersRequest;
import com.ibm.security.guardium.Notificationsv3GetFoldersResponse;
import com.ibm.security.guardium.Notificationsv3GetNotificationFilenameResponse;
import com.ibm.security.guardium.Notificationsv3GetNotificationRecordResponse;
import com.ibm.security.guardium.Notificationsv3GetNotificationRecordsResponse;
import com.ibm.security.guardium.Notificationsv3GetTicketStatusResponse;
import com.ibm.security.guardium.Notificationsv3PostNotificationRecordRequest;
import com.ibm.security.guardium.Notificationsv3PostNotificationRecordResponse;
import com.ibm.security.guardium.Notificationsv3SearchNotificationRecordsRequest;
import com.ibm.security.guardium.Notificationsv3SearchNotificationRecordsResponse;
import com.ibm.security.guardium.Notificationsv3TestIntegrationRequest;
import com.ibm.security.guardium.Notificationsv3TestIntegrationResponse;
import com.ibm.security.guardium.Notificationsv3UpdateNotificationRecordRequest;
import com.ibm.security.guardium.Notificationsv3UpdateNotificationRecordResponse;
import java.time.OffsetDateTime;
import com.ibm.security.guardium.RuntimeError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NotificationsServiceApi
 */
@Disabled
public class NotificationsServiceApiTest {

    private final NotificationsServiceApi api = new NotificationsServiceApi();

    /**
     * Summary: Create ticket Description: Create ticket based on information passed in.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationsServiceCreateTicketTest() throws ApiException {
        Notificationsv3CreateTicketRequest notificationsv3CreateTicketRequest = null;
        Notificationsv3CreateTicketResponse response = api.notificationsServiceCreateTicket(notificationsv3CreateTicketRequest);
        // TODO: test validations
    }

    /**
     * Summary: Get folders Description: Get folder for the integration connection provided.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationsServiceGetFoldersTest() throws ApiException {
        Notificationsv3GetFoldersRequest notificationsv3GetFoldersRequest = null;
        Notificationsv3GetFoldersResponse response = api.notificationsServiceGetFolders(notificationsv3GetFoldersRequest);
        // TODO: test validations
    }

    /**
     * Summary: Get notification filename Description: Return filename associated with the notifications record referenced in the associated context record. The notification id is required but may be set in the associated authentication token or explicitly in the request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationsServiceGetNotificationFilenameTest() throws ApiException {
        String notificationId = null;
        Notificationsv3GetNotificationFilenameResponse response = api.notificationsServiceGetNotificationFilename(notificationId);
        // TODO: test validations
    }

    /**
     * Summary: Get notification record Description: Return notifications record with the specified ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationsServiceGetNotificationRecordTest() throws ApiException {
        String notificationId = null;
        Notificationsv3GetNotificationRecordResponse response = api.notificationsServiceGetNotificationRecord(notificationId);
        // TODO: test validations
    }

    /**
     * Summary: Get notification records Description: Return notifications records that match the specified filter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationsServiceGetNotificationRecordsTest() throws ApiException {
        OffsetDateTime filterStartTime = null;
        OffsetDateTime filterEndTime = null;
        String filterState = null;
        List<String> filterOrigins = null;
        String filterOriginData = null;
        Long filterLimit = null;
        Long offset = null;
        Long limit = null;
        Boolean includeFilterCounts = null;
        Notificationsv3GetNotificationRecordsResponse response = api.notificationsServiceGetNotificationRecords(filterStartTime, filterEndTime, filterState, filterOrigins, filterOriginData, filterLimit, offset, limit, includeFilterCounts);
        // TODO: test validations
    }

    /**
     * Summary: Get ticket status Description: Get the status of the given ticket
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationsServiceGetTicketStatusTest() throws ApiException {
        String ticketId = null;
        String integrationId = null;
        Notificationsv3GetTicketStatusResponse response = api.notificationsServiceGetTicketStatus(ticketId, integrationId);
        // TODO: test validations
    }

    /**
     * Summary: For PostNotificationRecord notification only Description: Sends notification with recipients and returns a status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationsServicePostNotificationRecordTest() throws ApiException {
        Notificationsv3PostNotificationRecordRequest notificationsv3PostNotificationRecordRequest = null;
        Notificationsv3PostNotificationRecordResponse response = api.notificationsServicePostNotificationRecord(notificationsv3PostNotificationRecordRequest);
        // TODO: test validations
    }

    /**
     * Summary: Search notification records Description: Return notification records using pipeline of filters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationsServiceSearchNotificationRecordsTest() throws ApiException {
        Notificationsv3SearchNotificationRecordsRequest notificationsv3SearchNotificationRecordsRequest = null;
        Notificationsv3SearchNotificationRecordsResponse response = api.notificationsServiceSearchNotificationRecords(notificationsv3SearchNotificationRecordsRequest);
        // TODO: test validations
    }

    /**
     * Summary: Test integration Description: Test the integration connection with the arguments passed in the TestIntegrationRequest.  When possible a test message is sent to the integration to ensure it is functional.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationsServiceTestIntegrationTest() throws ApiException {
        Notificationsv3TestIntegrationRequest notificationsv3TestIntegrationRequest = null;
        Notificationsv3TestIntegrationResponse response = api.notificationsServiceTestIntegration(notificationsv3TestIntegrationRequest);
        // TODO: test validations
    }

    /**
     * Summary: Update notification record Description: Update a notification record with the specified values.  The ID field is required and must match an existing notification. All fields other than the ID are optional. Creation timestamp, user and other administrative fields can not updated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationsServiceUpdateNotificationRecordTest() throws ApiException {
        Notificationsv3UpdateNotificationRecordRequest notificationsv3UpdateNotificationRecordRequest = null;
        Notificationsv3UpdateNotificationRecordResponse response = api.notificationsServiceUpdateNotificationRecord(notificationsv3UpdateNotificationRecordRequest);
        // TODO: test validations
    }

}
