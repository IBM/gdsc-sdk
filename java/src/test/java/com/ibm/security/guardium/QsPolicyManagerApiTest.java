/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.security.guardium;

import com.ibm.security.ApiException;
import com.ibm.security.guardium.Qspmpolicymanagerv3APIResonse;
import com.ibm.security.guardium.Qspmpolicymanagerv3CreateTicketRequest;
import com.ibm.security.guardium.Qspmpolicymanagerv3CreateTicketResponse;
import com.ibm.security.guardium.Qspmpolicymanagerv3FetchObjectStoreFileResponse;
import com.ibm.security.guardium.Qspmpolicymanagerv3ProcessPolicyDimentionRecordsRequest;
import com.ibm.security.guardium.Qspmpolicymanagerv3ProcessPolicyDimentionRecordsResonse;
import com.ibm.security.guardium.Qspmpolicymanagerv3StandardEmptyResponse;
import com.ibm.security.guardium.Qspmpolicymanagerv3UpdateConfigsRequest;
import com.ibm.security.guardium.Qspmpolicymanagerv3UpdateTicketStatusRequest;
import com.ibm.security.guardium.Qspmpolicymanagerv3UpdateTicketStatusResponse;
import com.ibm.security.guardium.RuntimeError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for QsPolicyManagerApi
 */
@Disabled
public class QsPolicyManagerApiTest {

    private final QsPolicyManagerApi api = new QsPolicyManagerApi();

    /**
     * BatchStatusUpdate - trigger the batch to update the status of the Ticket .
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qSPolicyManagerBatchStatusUpdateTest() throws ApiException {
        Object body = null;
        Qspmpolicymanagerv3StandardEmptyResponse response = api.qSPolicyManagerBatchStatusUpdate(body);
        // TODO: test validations
    }

    /**
     * ConfigUpdate - this function update Crypto Risk Factor Weight in Db2 as well as Mongodb.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qSPolicyManagerConfigUpdateTest() throws ApiException {
        Qspmpolicymanagerv3UpdateConfigsRequest qspmpolicymanagerv3UpdateConfigsRequest = null;
        Qspmpolicymanagerv3APIResonse response = api.qSPolicyManagerConfigUpdate(qspmpolicymanagerv3UpdateConfigsRequest);
        // TODO: test validations
    }

    /**
     * CreateTicket - Create a new Incident .
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qSPolicyManagerCreateTicketTest() throws ApiException {
        Qspmpolicymanagerv3CreateTicketRequest qspmpolicymanagerv3CreateTicketRequest = null;
        Qspmpolicymanagerv3CreateTicketResponse response = api.qSPolicyManagerCreateTicket(qspmpolicymanagerv3CreateTicketRequest);
        // TODO: test validations
    }

    /**
     * FetchFilesfromBuckets - fetch the file(s) from bucket of the object storage
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qSPolicyManagerFetchFilesfromBucketsTest() throws ApiException {
        Qspmpolicymanagerv3FetchObjectStoreFileResponse response = api.qSPolicyManagerFetchFilesfromBuckets();
        // TODO: test validations
    }

    /**
     * ProcessPolicyDimentionRecords - fetch the records from Policy Dimention and update Policy Fact table
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qSPolicyManagerProcessPolicyDimentionRecordsTest() throws ApiException {
        Qspmpolicymanagerv3ProcessPolicyDimentionRecordsRequest qspmpolicymanagerv3ProcessPolicyDimentionRecordsRequest = null;
        Qspmpolicymanagerv3ProcessPolicyDimentionRecordsResonse response = api.qSPolicyManagerProcessPolicyDimentionRecords(qspmpolicymanagerv3ProcessPolicyDimentionRecordsRequest);
        // TODO: test validations
    }

    /**
     * UpdateTicketStatus - Update the ticket status based on the IntegrationId and TicketId .
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void qSPolicyManagerUpdateTicketStatusTest() throws ApiException {
        Qspmpolicymanagerv3UpdateTicketStatusRequest qspmpolicymanagerv3UpdateTicketStatusRequest = null;
        Qspmpolicymanagerv3UpdateTicketStatusResponse response = api.qSPolicyManagerUpdateTicketStatus(qspmpolicymanagerv3UpdateTicketStatusRequest);
        // TODO: test validations
    }

}
