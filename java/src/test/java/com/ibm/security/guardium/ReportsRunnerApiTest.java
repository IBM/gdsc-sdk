/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.security.guardium;

import com.ibm.security.ApiException;
import com.ibm.security.guardium.Reportsrunnerv3GetActiveQueriesRequest;
import com.ibm.security.guardium.Reportsrunnerv3GetActiveQueriesResponse;
import com.ibm.security.guardium.Reportsrunnerv3GetAuditDataCountRequest;
import com.ibm.security.guardium.Reportsrunnerv3GetChartDataRequest;
import com.ibm.security.guardium.Reportsrunnerv3GetChartDataRequestv2;
import com.ibm.security.guardium.Reportsrunnerv3GetChartDataResponse;
import com.ibm.security.guardium.Reportsrunnerv3GetChartDataResponsev2;
import com.ibm.security.guardium.Reportsrunnerv3GetReportColumnFacetRequest;
import com.ibm.security.guardium.Reportsrunnerv3GetReportColumnFacetResponse;
import com.ibm.security.guardium.Reportsrunnerv3GetReportDataCountRequest;
import com.ibm.security.guardium.Reportsrunnerv3GetReportDataCountResponse;
import com.ibm.security.guardium.Reportsrunnerv3RunAuditReportRequest;
import com.ibm.security.guardium.Reportsrunnerv3RunReportRequest;
import com.ibm.security.guardium.Reportsrunnerv3StopQueryRequest;
import com.ibm.security.guardium.Reportsrunnerv3StopQueryResponse;
import com.ibm.security.guardium.RuntimeError;
import com.ibm.security.guardium.StreamResultOfReportsrunnerv3RunReportResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReportsRunnerApi
 */
@Disabled
public class ReportsRunnerApiTest {

    private final ReportsRunnerApi api = new ReportsRunnerApi();

    /**
     * Summary: Get running queries Description: Get queries that are running more than certain time
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsRunnerGetActiveQueriesTest() throws ApiException {
        Reportsrunnerv3GetActiveQueriesRequest reportsrunnerv3GetActiveQueriesRequest = null;
        Reportsrunnerv3GetActiveQueriesResponse response = api.reportsRunnerGetActiveQueries(reportsrunnerv3GetActiveQueriesRequest);
        // TODO: test validations
    }

    /**
     * Summary: Get audit data count Description: Get audit data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsRunnerGetAuditDataCountTest() throws ApiException {
        String reportId = null;
        Reportsrunnerv3GetAuditDataCountRequest reportsrunnerv3GetAuditDataCountRequest = null;
        Reportsrunnerv3GetReportDataCountResponse response = api.reportsRunnerGetAuditDataCount(reportId, reportsrunnerv3GetAuditDataCountRequest);
        // TODO: test validations
    }

    /**
     * Summary: Get chart data Description: Get Chart data by chart ID or by specifying report definition and chart settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsRunnerGetChartDataTest() throws ApiException {
        Reportsrunnerv3GetChartDataRequest reportsrunnerv3GetChartDataRequest = null;
        Reportsrunnerv3GetChartDataResponse response = api.reportsRunnerGetChartData(reportsrunnerv3GetChartDataRequest);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsRunnerGetChartDatav2Test() throws ApiException {
        Reportsrunnerv3GetChartDataRequestv2 reportsrunnerv3GetChartDataRequestv2 = null;
        Reportsrunnerv3GetChartDataResponsev2 response = api.reportsRunnerGetChartDatav2(reportsrunnerv3GetChartDataRequestv2);
        // TODO: test validations
    }

    /**
     * Summary: Get report column facet Description: Get counts that is group by values for the selected column.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsRunnerGetReportColumnFacetTest() throws ApiException {
        Reportsrunnerv3GetReportColumnFacetRequest reportsrunnerv3GetReportColumnFacetRequest = null;
        Reportsrunnerv3GetReportColumnFacetResponse response = api.reportsRunnerGetReportColumnFacet(reportsrunnerv3GetReportColumnFacetRequest);
        // TODO: test validations
    }

    /**
     * Summary: Get report data count Description: Get report data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsRunnerGetReportDataCountTest() throws ApiException {
        Reportsrunnerv3GetReportDataCountRequest reportsrunnerv3GetReportDataCountRequest = null;
        Reportsrunnerv3GetReportDataCountResponse response = api.reportsRunnerGetReportDataCount(reportsrunnerv3GetReportDataCountRequest);
        // TODO: test validations
    }

    /**
     * Summary: Run audit report Description: Run task report by SQL based ob report ID and filter definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsRunnerRunAuditReportTest() throws ApiException {
        String reportId = null;
        Reportsrunnerv3RunAuditReportRequest reportsrunnerv3RunAuditReportRequest = null;
        StreamResultOfReportsrunnerv3RunReportResponse response = api.reportsRunnerRunAuditReport(reportId, reportsrunnerv3RunAuditReportRequest);
        // TODO: test validations
    }

    /**
     * Summary: Run report Description: Run report by report ID or by specifying report definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsRunnerRunReportTest() throws ApiException {
        Reportsrunnerv3RunReportRequest reportsrunnerv3RunReportRequest = null;
        StreamResultOfReportsrunnerv3RunReportResponse response = api.reportsRunnerRunReport(reportsrunnerv3RunReportRequest);
        // TODO: test validations
    }

    /**
     * Summary: Stop query Description: Stop a query based on the id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reportsRunnerStopQueryTest() throws ApiException {
        Reportsrunnerv3StopQueryRequest reportsrunnerv3StopQueryRequest = null;
        Reportsrunnerv3StopQueryResponse response = api.reportsRunnerStopQuery(reportsrunnerv3StopQueryRequest);
        // TODO: test validations
    }

}
