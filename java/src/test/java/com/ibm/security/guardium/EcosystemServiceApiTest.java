/*
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * The version of the OpenAPI document: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ibm.security.guardium;

import com.ibm.security.ApiException;
import com.ibm.security.guardium.Ecosystemv3CreateDatasetRequest;
import com.ibm.security.guardium.Ecosystemv3CreateDatasetResponse;
import com.ibm.security.guardium.Ecosystemv3DataInsertRequest;
import com.ibm.security.guardium.Ecosystemv3DataInsertResponse;
import com.ibm.security.guardium.Ecosystemv3DeleteDatasetsResponse;
import com.ibm.security.guardium.Ecosystemv3GetDatasetDataResponse;
import com.ibm.security.guardium.Ecosystemv3GetDatasetDetailResponse;
import com.ibm.security.guardium.Ecosystemv3GetDatasetsResponse;
import com.ibm.security.guardium.Ecosystemv3GetPurgableRowsRequest;
import com.ibm.security.guardium.Ecosystemv3GetPurgableRowsResponse;
import com.ibm.security.guardium.Ecosystemv3PurgeDataResponse;
import com.ibm.security.guardium.Ecosystemv3TestIntegrationRequest;
import com.ibm.security.guardium.Ecosystemv3TestIntegrationResponse;
import java.time.OffsetDateTime;
import com.ibm.security.guardium.RuntimeError;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EcosystemServiceApi
 */
@Disabled
public class EcosystemServiceApiTest {

    private final EcosystemServiceApi api = new EcosystemServiceApi();

    /**
     * Summary: Create dataset Description: Save a definition in the database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ecosystemServiceCreateDatasetTest() throws ApiException {
        Ecosystemv3CreateDatasetRequest ecosystemv3CreateDatasetRequest = null;
        Ecosystemv3CreateDatasetResponse response = api.ecosystemServiceCreateDataset(ecosystemv3CreateDatasetRequest);
        // TODO: test validations
    }

    /**
     * Summary: Data insert Description: Process Data received from webhook API and insert.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ecosystemServiceDataInsertTest() throws ApiException {
        String datasetName = null;
        Ecosystemv3DataInsertRequest ecosystemv3DataInsertRequest = null;
        Ecosystemv3DataInsertResponse response = api.ecosystemServiceDataInsert(datasetName, ecosystemv3DataInsertRequest);
        // TODO: test validations
    }

    /**
     * Summary: Delete datasets Description: Delete an array of datasets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ecosystemServiceDeleteDatasetsTest() throws ApiException {
        List<String> datasetNames = null;
        Ecosystemv3DeleteDatasetsResponse response = api.ecosystemServiceDeleteDatasets(datasetNames);
        // TODO: test validations
    }

    /**
     * Summary: Get dataset data Description: Return data report for a given dataset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ecosystemServiceGetDatasetDataTest() throws ApiException {
        String datasetName = null;
        Long offset = null;
        Long limit = null;
        Boolean returnHeader = null;
        String field = null;
        String value = null;
        String sortField = null;
        String sortOrder = null;
        Ecosystemv3GetDatasetDataResponse response = api.ecosystemServiceGetDatasetData(datasetName, offset, limit, returnHeader, field, value, sortField, sortOrder);
        // TODO: test validations
    }

    /**
     * Summary: Get dataset detail Description: Return detail on a dataset definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ecosystemServiceGetDatasetDetailTest() throws ApiException {
        String datasetName = null;
        Ecosystemv3GetDatasetDetailResponse response = api.ecosystemServiceGetDatasetDetail(datasetName);
        // TODO: test validations
    }

    /**
     * Summary: Get datasets Description: Return dataset list that matches the specified filter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ecosystemServiceGetDatasetsTest() throws ApiException {
        OffsetDateTime filterStartTime = null;
        OffsetDateTime filterEndTime = null;
        List<String> filterDatasetNames = null;
        Long offset = null;
        Long limit = null;
        Boolean includeFilterCounts = null;
        Ecosystemv3GetDatasetsResponse response = api.ecosystemServiceGetDatasets(filterStartTime, filterEndTime, filterDatasetNames, offset, limit, includeFilterCounts);
        // TODO: test validations
    }

    /**
     * Summary: Get purgable rows Description: Check the number of rows that can be purged.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ecosystemServiceGetPurgableRowsTest() throws ApiException {
        Ecosystemv3GetPurgableRowsRequest ecosystemv3GetPurgableRowsRequest = null;
        Ecosystemv3GetPurgableRowsResponse response = api.ecosystemServiceGetPurgableRows(ecosystemv3GetPurgableRowsRequest);
        // TODO: test validations
    }

    /**
     * Summary: Purge data Description: Purge data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ecosystemServicePurgeDataTest() throws ApiException {
        List<String> datasetNames = null;
        Ecosystemv3PurgeDataResponse response = api.ecosystemServicePurgeData(datasetNames);
        // TODO: test validations
    }

    /**
     * Summary: Test integration Description: Test the integration connection with the arguments passed in the TestIntegrationRequest.  When possible a test message is sent to the integration to ensure it is functional. Currently this API only supports API_IMPORT type integrations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ecosystemServiceTestIntegrationTest() throws ApiException {
        Ecosystemv3TestIntegrationRequest ecosystemv3TestIntegrationRequest = null;
        Ecosystemv3TestIntegrationResponse response = api.ecosystemServiceTestIntegration(ecosystemv3TestIntegrationRequest);
        // TODO: test validations
    }

}
