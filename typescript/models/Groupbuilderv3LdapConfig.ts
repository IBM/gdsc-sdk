/**
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization\'s Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * OpenAPI spec version: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';

/**
* LdapConfig contains information about configuration for importing group members from LDAP.
*/
export class Groupbuilderv3LdapConfig {
    /**
    * LDAP object attribute used to convert to member data.
    */
    'attributes'?: Array<string>;
    /**
    * ID of the group whose members are used as bind values for parameterize filter.
    */
    'bindGroupId'?: number;
    /**
    * Password for binding to LDAP if bind ID is set for ICP LDAP definition.
    */
    'bindPassword'?: string;
    /**
    * Flag indicating whether new data is replacing old data or is appended to it.
    */
    'clearGroup'?: boolean;
    /**
    * LDAP search query to use to find objects.
    */
    'filter'?: string;
    /**
    * Scope of LDAP search:  sub-tree vs immediate base DN children.
    */
    'filterScope'?: number;
    /**
    * Maximum number of objects to import.
    */
    'importLimit'?: number;
    /**
    * DN name of the LDAP group to get members from.  Alternative to explicit filter.
    */
    'ldapGroupName'?: string;
    /**
    * ID of the ICP LDAP definition from which to import.
    */
    'ldapId'?: string;
    /**
    * Prefix that will be added to each imported member.
    */
    'memberPrefix'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "attributes",
            "baseName": "attributes",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "bindGroupId",
            "baseName": "bind_group_id",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "bindPassword",
            "baseName": "bind_password",
            "type": "string",
            "format": ""
        },
        {
            "name": "clearGroup",
            "baseName": "clear_group",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "filter",
            "baseName": "filter",
            "type": "string",
            "format": ""
        },
        {
            "name": "filterScope",
            "baseName": "filter_scope",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "importLimit",
            "baseName": "import_limit",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "ldapGroupName",
            "baseName": "ldap_group_name",
            "type": "string",
            "format": ""
        },
        {
            "name": "ldapId",
            "baseName": "ldap_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "memberPrefix",
            "baseName": "member_prefix",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return Groupbuilderv3LdapConfig.attributeTypeMap;
    }

    public constructor() {
    }
}

