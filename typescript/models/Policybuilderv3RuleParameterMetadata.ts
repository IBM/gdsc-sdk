/**
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization\'s Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * OpenAPI spec version: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Policybuilderv3ParameterRelationShip } from '../models/Policybuilderv3ParameterRelationShip';
import { Policybuilderv3PossibleValueObj } from '../models/Policybuilderv3PossibleValueObj';
import { Policybuilderv3RuleType } from '../models/Policybuilderv3RuleType';
import { HttpFile } from '../http/http';

/**
* Message format for RuleParameter Metadata.
*/
export class Policybuilderv3RuleParameterMetadata {
    /**
    * Default value.
    */
    'defaultValue'?: string;
    'description'?: string;
    /**
    * Group type id.
    */
    'groupTypeId'?: number;
    /**
    * Indicating and populating parameter name if it supports every operator.
    */
    'hasEvery'?: string;
    /**
    * Indicating and populating parameter name if it supports group.
    */
    'hasGroup'?: string;
    /**
    * Indicating and populating parameter name if it supports a not operator.
    */
    'hasNot'?: string;
    /**
    * UI label for parameter.
    */
    'label'?: string;
    /**
    * Flag to indicate if the parameter is mandatory or not.
    */
    'mandatory'?: boolean;
    /**
    * Parameter name.
    */
    'parameterName'?: string;
    /**
    * Possible value length of the rule parameter.
    */
    'possibleValues'?: Array<Policybuilderv3PossibleValueObj>;
    /**
    * Parameter relationship object.
    */
    'relationships'?: Array<Policybuilderv3ParameterRelationShip>;
    /**
    * Category of the rule.
    */
    'ruleCategory'?: string;
    'ruleType'?: Policybuilderv3RuleType;
    /**
    * If the parameter is standalone.
    */
    'standaloneParameter'?: boolean;
    /**
    * Stores all the supported db types.
    */
    'supportedDbTypes'?: Array<string>;
    /**
    * Type of parameter.
    */
    'type'?: string;
    /**
    * Maximum value of the parameter value.
    */
    'valueLength'?: number;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "defaultValue",
            "baseName": "default_value",
            "type": "string",
            "format": ""
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string",
            "format": ""
        },
        {
            "name": "groupTypeId",
            "baseName": "group_type_id",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "hasEvery",
            "baseName": "has_every",
            "type": "string",
            "format": ""
        },
        {
            "name": "hasGroup",
            "baseName": "has_group",
            "type": "string",
            "format": ""
        },
        {
            "name": "hasNot",
            "baseName": "has_not",
            "type": "string",
            "format": ""
        },
        {
            "name": "label",
            "baseName": "label",
            "type": "string",
            "format": ""
        },
        {
            "name": "mandatory",
            "baseName": "mandatory",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "parameterName",
            "baseName": "parameter_name",
            "type": "string",
            "format": ""
        },
        {
            "name": "possibleValues",
            "baseName": "possible_values",
            "type": "Array<Policybuilderv3PossibleValueObj>",
            "format": ""
        },
        {
            "name": "relationships",
            "baseName": "relationships",
            "type": "Array<Policybuilderv3ParameterRelationShip>",
            "format": ""
        },
        {
            "name": "ruleCategory",
            "baseName": "rule_category",
            "type": "string",
            "format": ""
        },
        {
            "name": "ruleType",
            "baseName": "rule_type",
            "type": "Policybuilderv3RuleType",
            "format": ""
        },
        {
            "name": "standaloneParameter",
            "baseName": "standalone_parameter",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "supportedDbTypes",
            "baseName": "supported_db_types",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        },
        {
            "name": "valueLength",
            "baseName": "value_length",
            "type": "number",
            "format": "int32"
        }    ];

    static getAttributeTypeMap() {
        return Policybuilderv3RuleParameterMetadata.attributeTypeMap;
    }

    public constructor() {
    }
}



