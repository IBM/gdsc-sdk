/**
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization\'s Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * OpenAPI spec version: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Schedulerv3AuditType } from '../models/Schedulerv3AuditType';
import { Schedulerv3NotificationType } from '../models/Schedulerv3NotificationType';
import { Schedulerv3Recipient } from '../models/Schedulerv3Recipient';
import { Schedulerv3Retention } from '../models/Schedulerv3Retention';
import { Schedulerv3ScheduledTask } from '../models/Schedulerv3ScheduledTask';
import { Schedulerv3Scheduler } from '../models/Schedulerv3Scheduler';
import { HttpFile } from '../http/http';

/**
* ScheduledJob holds the configurations for running and delivering a job.
*/
export class Schedulerv3ScheduledJob {
    /**
    * Optional: Timestamp when the scheduled job is created.
    */
    'creationTime'?: Date;
    /**
    * Optional: Description for the scheduledJob.
    */
    'description'?: string;
    /**
    * Enabled or disable the schedule.
    */
    'enabled'?: boolean;
    /**
    * Optional: If this schedule is expired or continues forever.
    */
    'expired'?: boolean;
    /**
    * Optional: Instructions for the recipient.
    */
    'instructions'?: string;
    'internalAudit'?: Schedulerv3AuditType;
    /**
    * Optional: Timestamp for the last modified time.
    */
    'lastModifiedTime'?: Date;
    /**
    * Schedule name.
    */
    'name'?: string;
    /**
    * Optional: Timestamp for the next jobrun.
    */
    'nextRun'?: Date;
    'notification'?: Schedulerv3NotificationType;
    /**
    * Where does the schedule come from, ie the micro service name , REPORTS or SCHEDULER.
    */
    'origin'?: string;
    /**
    * Optional: Timestamp for the previous job run.
    */
    'previousRun'?: Date;
    'recipient'?: Schedulerv3Recipient;
    'recipients'?: Array<Schedulerv3Recipient>;
    'retention'?: Schedulerv3Retention;
    /**
    * Optional: ID for this record. It is automatically created by the database.
    */
    'scheduleId'?: string;
    'scheduler'?: Schedulerv3Scheduler;
    /**
    * Optional: Tags to use.
    */
    'tags'?: Array<string>;
    /**
    * What to run.
    */
    'tasks'?: Array<Schedulerv3ScheduledTask>;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "creationTime",
            "baseName": "creation_time",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string",
            "format": ""
        },
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "expired",
            "baseName": "expired",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "instructions",
            "baseName": "instructions",
            "type": "string",
            "format": ""
        },
        {
            "name": "internalAudit",
            "baseName": "internal_audit",
            "type": "Schedulerv3AuditType",
            "format": ""
        },
        {
            "name": "lastModifiedTime",
            "baseName": "last_modified_time",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        },
        {
            "name": "nextRun",
            "baseName": "next_run",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "notification",
            "baseName": "notification",
            "type": "Schedulerv3NotificationType",
            "format": ""
        },
        {
            "name": "origin",
            "baseName": "origin",
            "type": "string",
            "format": ""
        },
        {
            "name": "previousRun",
            "baseName": "previous_run",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "recipient",
            "baseName": "recipient",
            "type": "Schedulerv3Recipient",
            "format": ""
        },
        {
            "name": "recipients",
            "baseName": "recipients",
            "type": "Array<Schedulerv3Recipient>",
            "format": ""
        },
        {
            "name": "retention",
            "baseName": "retention",
            "type": "Schedulerv3Retention",
            "format": ""
        },
        {
            "name": "scheduleId",
            "baseName": "schedule_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "scheduler",
            "baseName": "scheduler",
            "type": "Schedulerv3Scheduler",
            "format": ""
        },
        {
            "name": "tags",
            "baseName": "tags",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "tasks",
            "baseName": "tasks",
            "type": "Array<Schedulerv3ScheduledTask>",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return Schedulerv3ScheduledJob.attributeTypeMap;
    }

    public constructor() {
    }
}



