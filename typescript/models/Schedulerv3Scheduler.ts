/**
 * IBM Guardium Data Security Center
 * Use Guardium Data Security Center SDK (application programming interfaces) to interact with other applications, such as Guardium Data Protection, universal connectors, and Guardium Data Security Center reports.
 *
 * OpenAPI spec version: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Schedulerv3DayOfWeek } from '../models/Schedulerv3DayOfWeek';
import { Schedulerv3DayOrder } from '../models/Schedulerv3DayOrder';
import { Schedulerv3Frequency } from '../models/Schedulerv3Frequency';
import { Schedulerv3Month } from '../models/Schedulerv3Month';
import { Schedulerv3RepeatBegin } from '../models/Schedulerv3RepeatBegin';
import { Schedulerv3RepeatEnd } from '../models/Schedulerv3RepeatEnd';
import { HttpFile } from '../http/http';

/**
* Scheduler includes all fields used to schedule a report.
*/
export class Schedulerv3Scheduler {
    /**
    * Begin the schedule on.
    */
    'beginSchedule'?: Date;
    /**
    * Either by day of month or date of the week of month.
    */
    'byDayOfMonth'?: boolean;
    /**
    * The day of the month, combined with frequency = 4 because there last day of the month the data type is string.
    */
    'dayOfMonth'?: string;
    /**
    * What day do you want to run, combined with frequency= 3, such as Monday, Tuesday.
    */
    'dayOfWeek'?: Array<Schedulerv3DayOfWeek>;
    'dayOrder'?: Schedulerv3DayOrder;
    'dayOrderDayOfWeek'?: Schedulerv3DayOfWeek;
    /**
    * End the schedule on, if it is null means never ends.
    */
    'endSchedule'?: Date;
    'frequency'?: Schedulerv3Frequency;
    /**
    * Month value.
    */
    'months'?: Array<Schedulerv3Month>;
    /**
    * Never end schedule or not.
    */
    'neverEnd'?: boolean;
    /**
    * Combined with frequency to define how often to run the job. ie, if frequncy =1 and repeat =3 means run the job every 3 hours.
    */
    'repeat'?: number;
    'repeatBegin'?: Schedulerv3RepeatBegin;
    'repeatEnd'?: Schedulerv3RepeatEnd;
    /**
    * Combined with frequency to define how often to run the job. ie, if frequncy =1 and repeat =3 and repeat_minutes = 4 means run the job every 3 hours within each hour, run every 4 minutes.
    */
    'repeatMinutes'?: number;
    /**
    * Optional: Flag if run once right away.
    */
    'runOnceNow'?: boolean;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "beginSchedule",
            "baseName": "begin_schedule",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "byDayOfMonth",
            "baseName": "by_day_of_month",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "dayOfMonth",
            "baseName": "day_of_month",
            "type": "string",
            "format": ""
        },
        {
            "name": "dayOfWeek",
            "baseName": "day_of_week",
            "type": "Array<Schedulerv3DayOfWeek>",
            "format": ""
        },
        {
            "name": "dayOrder",
            "baseName": "day_order",
            "type": "Schedulerv3DayOrder",
            "format": ""
        },
        {
            "name": "dayOrderDayOfWeek",
            "baseName": "day_order_day_of_week",
            "type": "Schedulerv3DayOfWeek",
            "format": ""
        },
        {
            "name": "endSchedule",
            "baseName": "end_schedule",
            "type": "Date",
            "format": "date-time"
        },
        {
            "name": "frequency",
            "baseName": "frequency",
            "type": "Schedulerv3Frequency",
            "format": ""
        },
        {
            "name": "months",
            "baseName": "months",
            "type": "Array<Schedulerv3Month>",
            "format": ""
        },
        {
            "name": "neverEnd",
            "baseName": "never_end",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "repeat",
            "baseName": "repeat",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "repeatBegin",
            "baseName": "repeat_begin",
            "type": "Schedulerv3RepeatBegin",
            "format": ""
        },
        {
            "name": "repeatEnd",
            "baseName": "repeat_end",
            "type": "Schedulerv3RepeatEnd",
            "format": ""
        },
        {
            "name": "repeatMinutes",
            "baseName": "repeat_minutes",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "runOnceNow",
            "baseName": "run_once_now",
            "type": "boolean",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return Schedulerv3Scheduler.attributeTypeMap;
    }

    public constructor() {
    }
}



