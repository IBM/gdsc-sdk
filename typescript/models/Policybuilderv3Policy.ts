/**
 * IBM Guardium Data Security Center
 * IBM Guardium Data Security Center simplifies your organization\'s Data Security architecture and enables access to long-term data security and compliance data. It provides security teams with risk-based views and alerts, as well as advanced analytics based on proprietary ML technology to uncover hidden threats. IBM Guardium Data Security Center gives security professionals the ability to quickly create data security and audit reports, monitor activity in on-prem and DBaaS sources, and take action from a central location.
 *
 * OpenAPI spec version: 3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Policybuilderv3ControlFlow } from '../models/Policybuilderv3ControlFlow';
import { Policybuilderv3ImportIssue } from '../models/Policybuilderv3ImportIssue';
import { Policybuilderv3ImportState } from '../models/Policybuilderv3ImportState';
import { Policybuilderv3PolicyType } from '../models/Policybuilderv3PolicyType';
import { Policybuilderv3RuleType } from '../models/Policybuilderv3RuleType';
import { HttpFile } from '../http/http';

/**
* Policy object for creating/storing the policy.
*/
export class Policybuilderv3Policy {
    /**
    * activation_status identifier: 1001 -> install with no issues, 1002-> installed with issues, 1003 -> not installed.
    */
    'activationStatus'?: number;
    /**
    * Indicates different type of rule types contained by the policy.
    */
    'containsRuleTypes'?: Array<Policybuilderv3RuleType>;
    'controlFlow'?: Policybuilderv3ControlFlow;
    /**
    * Flag to indicate whether policy is installed or not.
    */
    'installedFlag'?: boolean;
    /**
    * Variable to indicate the order of the installed policy.
    */
    'installedOrder'?: number;
    /**
    * Timestamp to indicate when the policy was installed.
    */
    'installedTimestamp'?: string;
    /**
    * Timestamp to indicate when the policy was last edited.
    */
    'lastEditedTimestamp'?: string;
    /**
    * Flag to indicate whether the policy has log flat enabled or not.
    */
    'logFlat'?: boolean;
    /**
    * Indicates number of rules in the policy.
    */
    'noOfRules'?: number;
    /**
    * Policy Id.
    */
    'policyId'?: string;
    'policyImportIssue'?: Policybuilderv3ImportIssue;
    'policyImportState'?: Policybuilderv3ImportState;
    /**
    * Policy Name.
    */
    'policyName'?: string;
    'policyType'?: Policybuilderv3PolicyType;
    /**
    * Flag to indicate whether the policy has rules on flat enabled or not.
    */
    'rulesOnFlat'?: boolean;
    /**
    * Flag to indicate whether the policy is a template policy or not.
    */
    'template'?: boolean;
    /**
    * Sequence in which the policy will be displayed in the UI.
    */
    'uiSequence'?: number;
    /**
    * Policy version for different versions of the policy.
    */
    'version'?: number;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "activationStatus",
            "baseName": "activation_status",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "containsRuleTypes",
            "baseName": "contains_rule_types",
            "type": "Array<Policybuilderv3RuleType>",
            "format": ""
        },
        {
            "name": "controlFlow",
            "baseName": "control_flow",
            "type": "Policybuilderv3ControlFlow",
            "format": ""
        },
        {
            "name": "installedFlag",
            "baseName": "installed_flag",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "installedOrder",
            "baseName": "installed_order",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "installedTimestamp",
            "baseName": "installed_timestamp",
            "type": "string",
            "format": ""
        },
        {
            "name": "lastEditedTimestamp",
            "baseName": "last_edited_timestamp",
            "type": "string",
            "format": ""
        },
        {
            "name": "logFlat",
            "baseName": "log_flat",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "noOfRules",
            "baseName": "no_of_rules",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "policyId",
            "baseName": "policy_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "policyImportIssue",
            "baseName": "policy_import_issue",
            "type": "Policybuilderv3ImportIssue",
            "format": ""
        },
        {
            "name": "policyImportState",
            "baseName": "policy_import_state",
            "type": "Policybuilderv3ImportState",
            "format": ""
        },
        {
            "name": "policyName",
            "baseName": "policy_name",
            "type": "string",
            "format": ""
        },
        {
            "name": "policyType",
            "baseName": "policy_type",
            "type": "Policybuilderv3PolicyType",
            "format": ""
        },
        {
            "name": "rulesOnFlat",
            "baseName": "rules_on_flat",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "template",
            "baseName": "template",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "uiSequence",
            "baseName": "ui_sequence",
            "type": "number",
            "format": "int32"
        },
        {
            "name": "version",
            "baseName": "version",
            "type": "number",
            "format": "int32"
        }    ];

    static getAttributeTypeMap() {
        return Policybuilderv3Policy.attributeTypeMap;
    }

    public constructor() {
    }
}



